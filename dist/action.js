import { createRequire as __WEBPACK_EXTERNAL_createRequire } from "module";
/******/ var __webpack_modules__ = ({

/***/ 7228:
/***/ ((module) => {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 2858:
/***/ ((module) => {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 1506:
/***/ ((module) => {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 8926:
/***/ ((module) => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 4575:
/***/ ((module) => {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 9100:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var setPrototypeOf = __webpack_require__(9489);

var isNativeReflectConstruct = __webpack_require__(7067);

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    module.exports = _construct = Reflect.construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } else {
    module.exports = _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) setPrototypeOf(instance, Class.prototype);
      return instance;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }

  return _construct.apply(null, arguments);
}

module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 3913:
/***/ ((module) => {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 3269:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var unsupportedIterableToArray = __webpack_require__(379);

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function F() {};

      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

module.exports = _createForOfIteratorHelper, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 9842:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getPrototypeOf = __webpack_require__(9754);

var isNativeReflectConstruct = __webpack_require__(7067);

var possibleConstructorReturn = __webpack_require__(8585);

function _createSuper(Derived) {
  var hasNativeReflectConstruct = isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return possibleConstructorReturn(this, result);
  };
}

module.exports = _createSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 9713:
/***/ ((module) => {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 6525:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var superPropBase = __webpack_require__(8331);

function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    module.exports = _get = Reflect.get, module.exports.__esModule = true, module.exports["default"] = module.exports;
  } else {
    module.exports = _get = function _get(target, property, receiver) {
      var base = superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }

      return desc.value;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }

  return _get.apply(this, arguments);
}

module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 9754:
/***/ ((module) => {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 2205:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var setPrototypeOf = __webpack_require__(9489);

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 430:
/***/ ((module) => {

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 7067:
/***/ ((module) => {

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 3884:
/***/ ((module) => {

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 521:
/***/ ((module) => {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 1109:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = __webpack_require__(9713);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

module.exports = _objectSpread2, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 8585:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(8)["default"]);

var assertThisInitialized = __webpack_require__(1506);

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 9489:
/***/ ((module) => {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 3038:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayWithHoles = __webpack_require__(2858);

var iterableToArrayLimit = __webpack_require__(3884);

var unsupportedIterableToArray = __webpack_require__(379);

var nonIterableRest = __webpack_require__(521);

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 8331:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getPrototypeOf = __webpack_require__(9754);

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 8:
/***/ ((module) => {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 379:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeToArray = __webpack_require__(7228);

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 5957:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getPrototypeOf = __webpack_require__(9754);

var setPrototypeOf = __webpack_require__(9489);

var isNativeFunction = __webpack_require__(430);

var construct = __webpack_require__(9100);

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return construct(Class, arguments, getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return setPrototypeOf(Wrapper, Class);
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _wrapNativeSuper(Class);
}

module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 7757:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(4961);


/***/ }),

/***/ 28:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.issue = exports.issueCommand = void 0;

var os = __importStar(__webpack_require__(2037));

var utils_1 = __webpack_require__(600);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */


function issueCommand(command, properties, message) {
  var cmd = new Command(command, properties, message);
  process.stdout.write(cmd.toString() + os.EOL);
}

exports.issueCommand = issueCommand;

function issue(name) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  issueCommand(name, {}, message);
}

exports.issue = issue;
var CMD_STRING = '::';

var Command = /*#__PURE__*/function () {
  function Command(command, properties, message) {
    _classCallCheck(this, Command);

    if (!command) {
      command = 'missing.command';
    }

    this.command = command;
    this.properties = properties;
    this.message = message;
  }

  _createClass(Command, [{
    key: "toString",
    value: function toString() {
      var cmdStr = CMD_STRING + this.command;

      if (this.properties && Object.keys(this.properties).length > 0) {
        cmdStr += ' ';
        var first = true;

        for (var key in this.properties) {
          if (this.properties.hasOwnProperty(key)) {
            var val = this.properties[key];

            if (val) {
              if (first) {
                first = false;
              } else {
                cmdStr += ',';
              }

              cmdStr += "".concat(key, "=").concat(escapeProperty(val));
            }
          }
        }
      }

      cmdStr += "".concat(CMD_STRING).concat(escapeData(this.message));
      return cmdStr;
    }
  }]);

  return Command;
}();

function escapeData(s) {
  return utils_1.toCommandValue(s).replace(/%/g, '%25').replace(/\r/g, '%0D').replace(/\n/g, '%0A');
}

function escapeProperty(s) {
  return utils_1.toCommandValue(s).replace(/%/g, '%25').replace(/\r/g, '%0D').replace(/\n/g, '%0A').replace(/:/g, '%3A').replace(/,/g, '%2C');
}

/***/ }),

/***/ 8397:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {



var _regeneratorRuntime = __webpack_require__(7757);

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;

var command_1 = __webpack_require__(28);

var file_command_1 = __webpack_require__(3035);

var utils_1 = __webpack_require__(600);

var os = __importStar(__webpack_require__(2037));

var path = __importStar(__webpack_require__(1017));

var oidc_utils_1 = __webpack_require__(335);
/**
 * The code to exit an action
 */


var ExitCode;

(function (ExitCode) {
  /**
   * A code indicating that the action was successful
   */
  ExitCode[ExitCode["Success"] = 0] = "Success";
  /**
   * A code indicating that the action was a failure
   */

  ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {})); //-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------

/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


function exportVariable(name, val) {
  var convertedVal = utils_1.toCommandValue(val);
  process.env[name] = convertedVal;
  var filePath = process.env['GITHUB_ENV'] || '';

  if (filePath) {
    var delimiter = '_GitHubActionsFileCommandDelimeter_';
    var commandValue = "".concat(name, "<<").concat(delimiter).concat(os.EOL).concat(convertedVal).concat(os.EOL).concat(delimiter);
    file_command_1.issueCommand('ENV', commandValue);
  } else {
    command_1.issueCommand('set-env', {
      name: name
    }, convertedVal);
  }
}

exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */

function setSecret(secret) {
  command_1.issueCommand('add-mask', {}, secret);
}

exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */

function addPath(inputPath) {
  var filePath = process.env['GITHUB_PATH'] || '';

  if (filePath) {
    file_command_1.issueCommand('PATH', inputPath);
  } else {
    command_1.issueCommand('add-path', {}, inputPath);
  }

  process.env['PATH'] = "".concat(inputPath).concat(path.delimiter).concat(process.env['PATH']);
}

exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */

function getInput(name, options) {
  var val = process.env["INPUT_".concat(name.replace(/ /g, '_').toUpperCase())] || '';

  if (options && options.required && !val) {
    throw new Error("Input required and not supplied: ".concat(name));
  }

  if (options && options.trimWhitespace === false) {
    return val;
  }

  return val.trim();
}

exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */

function getMultilineInput(name, options) {
  var inputs = getInput(name, options).split('\n').filter(function (x) {
    return x !== '';
  });
  return inputs;
}

exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */

function getBooleanInput(name, options) {
  var trueValue = ['true', 'True', 'TRUE'];
  var falseValue = ['false', 'False', 'FALSE'];
  var val = getInput(name, options);
  if (trueValue.includes(val)) return true;
  if (falseValue.includes(val)) return false;
  throw new TypeError("Input does not meet YAML 1.2 \"Core Schema\" specification: ".concat(name, "\n") + "Support boolean input list: `true | True | TRUE | false | False | FALSE`");
}

exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any

function setOutput(name, value) {
  process.stdout.write(os.EOL);
  command_1.issueCommand('set-output', {
    name: name
  }, value);
}

exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */

function setCommandEcho(enabled) {
  command_1.issue('echo', enabled ? 'on' : 'off');
}

exports.setCommandEcho = setCommandEcho; //-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------

/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */

function setFailed(message) {
  process.exitCode = ExitCode.Failure;
  error(message);
}

exports.setFailed = setFailed; //-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------

/**
 * Gets whether Actions Step Debug is on or not
 */

function isDebug() {
  return process.env['RUNNER_DEBUG'] === '1';
}

exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */

function debug(message) {
  command_1.issueCommand('debug', {}, message);
}

exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */

function error(message) {
  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}

exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */

function warning(message) {
  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}

exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */

function notice(message) {
  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}

exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */

function info(message) {
  process.stdout.write(message + os.EOL);
}

exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */

function startGroup(name) {
  command_1.issue('group', name);
}

exports.startGroup = startGroup;
/**
 * End an output group.
 */

function endGroup() {
  command_1.issue('endgroup');
}

exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */

function group(name, fn) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var result;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            startGroup(name);
            _context.prev = 1;
            _context.next = 4;
            return fn();

          case 4:
            result = _context.sent;

          case 5:
            _context.prev = 5;
            endGroup();
            return _context.finish(5);

          case 8:
            return _context.abrupt("return", result);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1,, 5, 8]]);
  }));
}

exports.group = group; //-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------

/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any

function saveState(name, value) {
  command_1.issueCommand('save-state', {
    name: name
  }, value);
}

exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */

function getState(name) {
  return process.env["STATE_".concat(name)] || '';
}

exports.getState = getState;

function getIDToken(aud) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return oidc_utils_1.OidcClient.getIDToken(aud);

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
}

exports.getIDToken = getIDToken;

/***/ }),

/***/ 3035:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

 // For internal use, subject to change.

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.issueCommand = void 0; // We use any as a valid input type

/* eslint-disable @typescript-eslint/no-explicit-any */

var fs = __importStar(__webpack_require__(7147));

var os = __importStar(__webpack_require__(2037));

var utils_1 = __webpack_require__(600);

function issueCommand(command, message) {
  var filePath = process.env["GITHUB_".concat(command)];

  if (!filePath) {
    throw new Error("Unable to find environment variable for file command ".concat(command));
  }

  if (!fs.existsSync(filePath)) {
    throw new Error("Missing file at path: ".concat(filePath));
  }

  fs.appendFileSync(filePath, "".concat(utils_1.toCommandValue(message)).concat(os.EOL), {
    encoding: 'utf8'
  });
}

exports.issueCommand = issueCommand;

/***/ }),

/***/ 335:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {



var _regeneratorRuntime = __webpack_require__(7757);

var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.OidcClient = void 0;

var http_client_1 = __webpack_require__(3710);

var auth_1 = __webpack_require__(290);

var core_1 = __webpack_require__(8397);

var OidcClient = /*#__PURE__*/function () {
  function OidcClient() {
    _classCallCheck(this, OidcClient);
  }

  _createClass(OidcClient, null, [{
    key: "createHttpClient",
    value: function createHttpClient() {
      var allowRetry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var maxRetry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      var requestOptions = {
        allowRetries: allowRetry,
        maxRetries: maxRetry
      };
      return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
  }, {
    key: "getRequestToken",
    value: function getRequestToken() {
      var token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];

      if (!token) {
        throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
      }

      return token;
    }
  }, {
    key: "getIDTokenUrl",
    value: function getIDTokenUrl() {
      var runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];

      if (!runtimeUrl) {
        throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
      }

      return runtimeUrl;
    }
  }, {
    key: "getCall",
    value: function getCall(id_token_url) {
      var _a;

      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var httpclient, res, id_token;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                httpclient = OidcClient.createHttpClient();
                _context.next = 3;
                return httpclient.getJson(id_token_url)["catch"](function (error) {
                  throw new Error("Failed to get ID Token. \n \n        Error Code : ".concat(error.statusCode, "\n \n        Error Message: ").concat(error.result.message));
                });

              case 3:
                res = _context.sent;
                id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;

                if (id_token) {
                  _context.next = 7;
                  break;
                }

                throw new Error('Response json body do not have ID Token field');

              case 7:
                return _context.abrupt("return", id_token);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    }
  }, {
    key: "getIDToken",
    value: function getIDToken(audience) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var id_token_url, encodedAudience, id_token;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                // New ID Token is requested from action service
                id_token_url = OidcClient.getIDTokenUrl();

                if (audience) {
                  encodedAudience = encodeURIComponent(audience);
                  id_token_url = "".concat(id_token_url, "&audience=").concat(encodedAudience);
                }

                core_1.debug("ID token url is ".concat(id_token_url));
                _context2.next = 6;
                return OidcClient.getCall(id_token_url);

              case 6:
                id_token = _context2.sent;
                core_1.setSecret(id_token);
                return _context2.abrupt("return", id_token);

              case 11:
                _context2.prev = 11;
                _context2.t0 = _context2["catch"](0);
                throw new Error("Error message: ".concat(_context2.t0.message));

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 11]]);
      }));
    }
  }]);

  return OidcClient;
}();

exports.OidcClient = OidcClient;

/***/ }),

/***/ 600:
/***/ ((__unused_webpack_module, exports) => {

 // We use any as a valid input type

/* eslint-disable @typescript-eslint/no-explicit-any */

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */

function toCommandValue(input) {
  if (input === null || input === undefined) {
    return '';
  } else if (typeof input === 'string' || input instanceof String) {
    return input;
  }

  return JSON.stringify(input);
}

exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */

function toCommandProperties(annotationProperties) {
  if (!Object.keys(annotationProperties).length) {
    return {};
  }

  return {
    title: annotationProperties.title,
    file: annotationProperties.file,
    line: annotationProperties.startLine,
    endLine: annotationProperties.endLine,
    col: annotationProperties.startColumn,
    endColumn: annotationProperties.endColumn
  };
}

exports.toCommandProperties = toCommandProperties;

/***/ }),

/***/ 290:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var BasicCredentialHandler = /*#__PURE__*/function () {
  function BasicCredentialHandler(username, password) {
    _classCallCheck(this, BasicCredentialHandler);

    this.username = username;
    this.password = password;
  }

  _createClass(BasicCredentialHandler, [{
    key: "prepareRequest",
    value: function prepareRequest(options) {
      options.headers['Authorization'] = 'Basic ' + Buffer.from(this.username + ':' + this.password).toString('base64');
    } // This handler cannot handle 401

  }, {
    key: "canHandleAuthentication",
    value: function canHandleAuthentication(response) {
      return false;
    }
  }, {
    key: "handleAuthentication",
    value: function handleAuthentication(httpClient, requestInfo, objs) {
      return null;
    }
  }]);

  return BasicCredentialHandler;
}();

exports.BasicCredentialHandler = BasicCredentialHandler;

var BearerCredentialHandler = /*#__PURE__*/function () {
  function BearerCredentialHandler(token) {
    _classCallCheck(this, BearerCredentialHandler);

    this.token = token;
  } // currently implements pre-authorization
  // TODO: support preAuth = false where it hooks on 401


  _createClass(BearerCredentialHandler, [{
    key: "prepareRequest",
    value: function prepareRequest(options) {
      options.headers['Authorization'] = 'Bearer ' + this.token;
    } // This handler cannot handle 401

  }, {
    key: "canHandleAuthentication",
    value: function canHandleAuthentication(response) {
      return false;
    }
  }, {
    key: "handleAuthentication",
    value: function handleAuthentication(httpClient, requestInfo, objs) {
      return null;
    }
  }]);

  return BearerCredentialHandler;
}();

exports.BearerCredentialHandler = BearerCredentialHandler;

var PersonalAccessTokenCredentialHandler = /*#__PURE__*/function () {
  function PersonalAccessTokenCredentialHandler(token) {
    _classCallCheck(this, PersonalAccessTokenCredentialHandler);

    this.token = token;
  } // currently implements pre-authorization
  // TODO: support preAuth = false where it hooks on 401


  _createClass(PersonalAccessTokenCredentialHandler, [{
    key: "prepareRequest",
    value: function prepareRequest(options) {
      options.headers['Authorization'] = 'Basic ' + Buffer.from('PAT:' + this.token).toString('base64');
    } // This handler cannot handle 401

  }, {
    key: "canHandleAuthentication",
    value: function canHandleAuthentication(response) {
      return false;
    }
  }, {
    key: "handleAuthentication",
    value: function handleAuthentication(httpClient, requestInfo, objs) {
      return null;
    }
  }]);

  return PersonalAccessTokenCredentialHandler;
}();

exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;

/***/ }),

/***/ 3710:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _objectSpread = (__webpack_require__(1109)["default"]);

var _regeneratorRuntime = __webpack_require__(7757);

var _asyncToGenerator = (__webpack_require__(8926)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var _classCallCheck = (__webpack_require__(4575)["default"]);

var _assertThisInitialized = (__webpack_require__(1506)["default"]);

var _inherits = (__webpack_require__(2205)["default"]);

var _createSuper = (__webpack_require__(9842)["default"]);

var _wrapNativeSuper = (__webpack_require__(5957)["default"]);

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var http = __webpack_require__(3685);

var https = __webpack_require__(5687);

var pm = __webpack_require__(5725);

var tunnel;
var HttpCodes;

(function (HttpCodes) {
  HttpCodes[HttpCodes["OK"] = 200] = "OK";
  HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
  HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
  HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
  HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
  HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
  HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
  HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
  HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
  HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
  HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
  HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
  HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
  HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
  HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
  HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
  HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
  HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
  HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
  HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
  HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
  HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
  HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
  HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
  HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
  HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
  HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));

var Headers;

(function (Headers) {
  Headers["Accept"] = "accept";
  Headers["ContentType"] = "content-type";
})(Headers = exports.Headers || (exports.Headers = {}));

var MediaTypes;

(function (MediaTypes) {
  MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */


function getProxyUrl(serverUrl) {
  var proxyUrl = pm.getProxyUrl(new URL(serverUrl));
  return proxyUrl ? proxyUrl.href : '';
}

exports.getProxyUrl = getProxyUrl;
var HttpRedirectCodes = [HttpCodes.MovedPermanently, HttpCodes.ResourceMoved, HttpCodes.SeeOther, HttpCodes.TemporaryRedirect, HttpCodes.PermanentRedirect];
var HttpResponseRetryCodes = [HttpCodes.BadGateway, HttpCodes.ServiceUnavailable, HttpCodes.GatewayTimeout];
var RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
var ExponentialBackoffCeiling = 10;
var ExponentialBackoffTimeSlice = 5;

var HttpClientError = /*#__PURE__*/function (_Error) {
  _inherits(HttpClientError, _Error);

  var _super = _createSuper(HttpClientError);

  function HttpClientError(message, statusCode) {
    var _this;

    _classCallCheck(this, HttpClientError);

    _this = _super.call(this, message);
    _this.name = 'HttpClientError';
    _this.statusCode = statusCode;
    Object.setPrototypeOf(_assertThisInitialized(_this), HttpClientError.prototype);
    return _this;
  }

  return _createClass(HttpClientError);
}( /*#__PURE__*/_wrapNativeSuper(Error));

exports.HttpClientError = HttpClientError;

var HttpClientResponse = /*#__PURE__*/function () {
  function HttpClientResponse(message) {
    _classCallCheck(this, HttpClientResponse);

    this.message = message;
  }

  _createClass(HttpClientResponse, [{
    key: "readBody",
    value: function readBody() {
      var _this2 = this;

      return new Promise( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {
          var output;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  output = Buffer.alloc(0);

                  _this2.message.on('data', function (chunk) {
                    output = Buffer.concat([output, chunk]);
                  });

                  _this2.message.on('end', function () {
                    resolve(output.toString());
                  });

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  }]);

  return HttpClientResponse;
}();

exports.HttpClientResponse = HttpClientResponse;

function isHttps(requestUrl) {
  var parsedUrl = new URL(requestUrl);
  return parsedUrl.protocol === 'https:';
}

exports.isHttps = isHttps;

var HttpClient = /*#__PURE__*/function () {
  function HttpClient(userAgent, handlers, requestOptions) {
    _classCallCheck(this, HttpClient);

    this._ignoreSslError = false;
    this._allowRedirects = true;
    this._allowRedirectDowngrade = false;
    this._maxRedirects = 50;
    this._allowRetries = false;
    this._maxRetries = 1;
    this._keepAlive = false;
    this._disposed = false;
    this.userAgent = userAgent;
    this.handlers = handlers || [];
    this.requestOptions = requestOptions;

    if (requestOptions) {
      if (requestOptions.ignoreSslError != null) {
        this._ignoreSslError = requestOptions.ignoreSslError;
      }

      this._socketTimeout = requestOptions.socketTimeout;

      if (requestOptions.allowRedirects != null) {
        this._allowRedirects = requestOptions.allowRedirects;
      }

      if (requestOptions.allowRedirectDowngrade != null) {
        this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
      }

      if (requestOptions.maxRedirects != null) {
        this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
      }

      if (requestOptions.keepAlive != null) {
        this._keepAlive = requestOptions.keepAlive;
      }

      if (requestOptions.allowRetries != null) {
        this._allowRetries = requestOptions.allowRetries;
      }

      if (requestOptions.maxRetries != null) {
        this._maxRetries = requestOptions.maxRetries;
      }
    }
  }

  _createClass(HttpClient, [{
    key: "options",
    value: function options(requestUrl, additionalHeaders) {
      return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
    }
  }, {
    key: "get",
    value: function get(requestUrl, additionalHeaders) {
      return this.request('GET', requestUrl, null, additionalHeaders || {});
    }
  }, {
    key: "del",
    value: function del(requestUrl, additionalHeaders) {
      return this.request('DELETE', requestUrl, null, additionalHeaders || {});
    }
  }, {
    key: "post",
    value: function post(requestUrl, data, additionalHeaders) {
      return this.request('POST', requestUrl, data, additionalHeaders || {});
    }
  }, {
    key: "patch",
    value: function patch(requestUrl, data, additionalHeaders) {
      return this.request('PATCH', requestUrl, data, additionalHeaders || {});
    }
  }, {
    key: "put",
    value: function put(requestUrl, data, additionalHeaders) {
      return this.request('PUT', requestUrl, data, additionalHeaders || {});
    }
  }, {
    key: "head",
    value: function head(requestUrl, additionalHeaders) {
      return this.request('HEAD', requestUrl, null, additionalHeaders || {});
    }
  }, {
    key: "sendStream",
    value: function sendStream(verb, requestUrl, stream, additionalHeaders) {
      return this.request(verb, requestUrl, stream, additionalHeaders);
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */

  }, {
    key: "getJson",
    value: function () {
      var _getJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(requestUrl) {
        var additionalHeaders,
            res,
            _args2 = arguments;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                additionalHeaders = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
                _context2.next = 4;
                return this.get(requestUrl, additionalHeaders);

              case 4:
                res = _context2.sent;
                return _context2.abrupt("return", this._processResponse(res, this.requestOptions));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getJson(_x3) {
        return _getJson.apply(this, arguments);
      }

      return getJson;
    }()
  }, {
    key: "postJson",
    value: function () {
      var _postJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(requestUrl, obj) {
        var additionalHeaders,
            data,
            res,
            _args3 = arguments;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                additionalHeaders = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
                data = JSON.stringify(obj, null, 2);
                additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
                additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
                _context3.next = 6;
                return this.post(requestUrl, data, additionalHeaders);

              case 6:
                res = _context3.sent;
                return _context3.abrupt("return", this._processResponse(res, this.requestOptions));

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function postJson(_x4, _x5) {
        return _postJson.apply(this, arguments);
      }

      return postJson;
    }()
  }, {
    key: "putJson",
    value: function () {
      var _putJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(requestUrl, obj) {
        var additionalHeaders,
            data,
            res,
            _args4 = arguments;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                additionalHeaders = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};
                data = JSON.stringify(obj, null, 2);
                additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
                additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
                _context4.next = 6;
                return this.put(requestUrl, data, additionalHeaders);

              case 6:
                res = _context4.sent;
                return _context4.abrupt("return", this._processResponse(res, this.requestOptions));

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function putJson(_x6, _x7) {
        return _putJson.apply(this, arguments);
      }

      return putJson;
    }()
  }, {
    key: "patchJson",
    value: function () {
      var _patchJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(requestUrl, obj) {
        var additionalHeaders,
            data,
            res,
            _args5 = arguments;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                additionalHeaders = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};
                data = JSON.stringify(obj, null, 2);
                additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
                additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
                _context5.next = 6;
                return this.patch(requestUrl, data, additionalHeaders);

              case 6:
                res = _context5.sent;
                return _context5.abrupt("return", this._processResponse(res, this.requestOptions));

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function patchJson(_x8, _x9) {
        return _patchJson.apply(this, arguments);
      }

      return patchJson;
    }()
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */

  }, {
    key: "request",
    value: function () {
      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(verb, requestUrl, data, headers) {
        var parsedUrl, info, maxTries, numTries, response, authenticationHandler, i, redirectsRemaining, redirectUrl, parsedRedirectUrl, header;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (!this._disposed) {
                  _context6.next = 2;
                  break;
                }

                throw new Error('Client has already been disposed.');

              case 2:
                parsedUrl = new URL(requestUrl);
                info = this._prepareRequest(verb, parsedUrl, headers); // Only perform retries on reads since writes may not be idempotent.

                maxTries = this._allowRetries && RetryableHttpVerbs.indexOf(verb) != -1 ? this._maxRetries + 1 : 1;
                numTries = 0;

              case 6:
                if (!(numTries < maxTries)) {
                  _context6.next = 53;
                  break;
                }

                _context6.next = 9;
                return this.requestRaw(info, data);

              case 9:
                response = _context6.sent;

                if (!(response && response.message && response.message.statusCode === HttpCodes.Unauthorized)) {
                  _context6.next = 25;
                  break;
                }

                authenticationHandler = void 0;
                i = 0;

              case 13:
                if (!(i < this.handlers.length)) {
                  _context6.next = 20;
                  break;
                }

                if (!this.handlers[i].canHandleAuthentication(response)) {
                  _context6.next = 17;
                  break;
                }

                authenticationHandler = this.handlers[i];
                return _context6.abrupt("break", 20);

              case 17:
                i++;
                _context6.next = 13;
                break;

              case 20:
                if (!authenticationHandler) {
                  _context6.next = 24;
                  break;
                }

                return _context6.abrupt("return", authenticationHandler.handleAuthentication(this, info, data));

              case 24:
                return _context6.abrupt("return", response);

              case 25:
                redirectsRemaining = this._maxRedirects;

              case 26:
                if (!(HttpRedirectCodes.indexOf(response.message.statusCode) != -1 && this._allowRedirects && redirectsRemaining > 0)) {
                  _context6.next = 43;
                  break;
                }

                redirectUrl = response.message.headers['location'];

                if (redirectUrl) {
                  _context6.next = 30;
                  break;
                }

                return _context6.abrupt("break", 43);

              case 30:
                parsedRedirectUrl = new URL(redirectUrl);

                if (!(parsedUrl.protocol == 'https:' && parsedUrl.protocol != parsedRedirectUrl.protocol && !this._allowRedirectDowngrade)) {
                  _context6.next = 33;
                  break;
                }

                throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');

              case 33:
                _context6.next = 35;
                return response.readBody();

              case 35:
                // strip authorization header if redirected to a different hostname
                if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                  for (header in headers) {
                    // header names are case insensitive
                    if (header.toLowerCase() === 'authorization') {
                      delete headers[header];
                    }
                  }
                } // let's make the request with the new redirectUrl


                info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                _context6.next = 39;
                return this.requestRaw(info, data);

              case 39:
                response = _context6.sent;
                redirectsRemaining--;
                _context6.next = 26;
                break;

              case 43:
                if (!(HttpResponseRetryCodes.indexOf(response.message.statusCode) == -1)) {
                  _context6.next = 45;
                  break;
                }

                return _context6.abrupt("return", response);

              case 45:
                numTries += 1;

                if (!(numTries < maxTries)) {
                  _context6.next = 51;
                  break;
                }

                _context6.next = 49;
                return response.readBody();

              case 49:
                _context6.next = 51;
                return this._performExponentialBackoff(numTries);

              case 51:
                _context6.next = 6;
                break;

              case 53:
                return _context6.abrupt("return", response);

              case 54:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function request(_x10, _x11, _x12, _x13) {
        return _request.apply(this, arguments);
      }

      return request;
    }()
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */

  }, {
    key: "dispose",
    value: function dispose() {
      if (this._agent) {
        this._agent.destroy();
      }

      this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */

  }, {
    key: "requestRaw",
    value: function requestRaw(info, data) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        var callbackForResult = function callbackForResult(err, res) {
          if (err) {
            reject(err);
          }

          resolve(res);
        };

        _this3.requestRawWithCallback(info, data, callbackForResult);
      });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */

  }, {
    key: "requestRawWithCallback",
    value: function requestRawWithCallback(info, data, onResult) {
      var socket;

      if (typeof data === 'string') {
        info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
      }

      var callbackCalled = false;

      var handleResult = function handleResult(err, res) {
        if (!callbackCalled) {
          callbackCalled = true;
          onResult(err, res);
        }
      };

      var req = info.httpModule.request(info.options, function (msg) {
        var res = new HttpClientResponse(msg);
        handleResult(null, res);
      });
      req.on('socket', function (sock) {
        socket = sock;
      }); // If we ever get disconnected, we want the socket to timeout eventually

      req.setTimeout(this._socketTimeout || 3 * 60000, function () {
        if (socket) {
          socket.end();
        }

        handleResult(new Error('Request timeout: ' + info.options.path), null);
      });
      req.on('error', function (err) {
        // err has statusCode property
        // res should have headers
        handleResult(err, null);
      });

      if (data && typeof data === 'string') {
        req.write(data, 'utf8');
      }

      if (data && typeof data !== 'string') {
        data.on('close', function () {
          req.end();
        });
        data.pipe(req);
      } else {
        req.end();
      }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */

  }, {
    key: "getAgent",
    value: function getAgent(serverUrl) {
      var parsedUrl = new URL(serverUrl);
      return this._getAgent(parsedUrl);
    }
  }, {
    key: "_prepareRequest",
    value: function _prepareRequest(method, requestUrl, headers) {
      var info = {};
      info.parsedUrl = requestUrl;
      var usingSsl = info.parsedUrl.protocol === 'https:';
      info.httpModule = usingSsl ? https : http;
      var defaultPort = usingSsl ? 443 : 80;
      info.options = {};
      info.options.host = info.parsedUrl.hostname;
      info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;
      info.options.path = (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
      info.options.method = method;
      info.options.headers = this._mergeHeaders(headers);

      if (this.userAgent != null) {
        info.options.headers['user-agent'] = this.userAgent;
      }

      info.options.agent = this._getAgent(info.parsedUrl); // gives handlers an opportunity to participate

      if (this.handlers) {
        this.handlers.forEach(function (handler) {
          handler.prepareRequest(info.options);
        });
      }

      return info;
    }
  }, {
    key: "_mergeHeaders",
    value: function _mergeHeaders(headers) {
      var lowercaseKeys = function lowercaseKeys(obj) {
        return Object.keys(obj).reduce(function (c, k) {
          return c[k.toLowerCase()] = obj[k], c;
        }, {});
      };

      if (this.requestOptions && this.requestOptions.headers) {
        return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers));
      }

      return lowercaseKeys(headers || {});
    }
  }, {
    key: "_getExistingOrDefaultHeader",
    value: function _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
      var lowercaseKeys = function lowercaseKeys(obj) {
        return Object.keys(obj).reduce(function (c, k) {
          return c[k.toLowerCase()] = obj[k], c;
        }, {});
      };

      var clientHeader;

      if (this.requestOptions && this.requestOptions.headers) {
        clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
      }

      return additionalHeaders[header] || clientHeader || _default;
    }
  }, {
    key: "_getAgent",
    value: function _getAgent(parsedUrl) {
      var agent;
      var proxyUrl = pm.getProxyUrl(parsedUrl);
      var useProxy = proxyUrl && proxyUrl.hostname;

      if (this._keepAlive && useProxy) {
        agent = this._proxyAgent;
      }

      if (this._keepAlive && !useProxy) {
        agent = this._agent;
      } // if agent is already assigned use that agent.


      if (!!agent) {
        return agent;
      }

      var usingSsl = parsedUrl.protocol === 'https:';
      var maxSockets = 100;

      if (!!this.requestOptions) {
        maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
      }

      if (useProxy) {
        // If using proxy, need tunnel
        if (!tunnel) {
          tunnel = __webpack_require__(8808);
        }

        var agentOptions = {
          maxSockets: maxSockets,
          keepAlive: this._keepAlive,
          proxy: _objectSpread(_objectSpread({}, (proxyUrl.username || proxyUrl.password) && {
            proxyAuth: "".concat(proxyUrl.username, ":").concat(proxyUrl.password)
          }), {}, {
            host: proxyUrl.hostname,
            port: proxyUrl.port
          })
        };
        var tunnelAgent;
        var overHttps = proxyUrl.protocol === 'https:';

        if (usingSsl) {
          tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
        } else {
          tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
        }

        agent = tunnelAgent(agentOptions);
        this._proxyAgent = agent;
      } // if reusing agent across request and tunneling agent isn't assigned create a new agent


      if (this._keepAlive && !agent) {
        var options = {
          keepAlive: this._keepAlive,
          maxSockets: maxSockets
        };
        agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
        this._agent = agent;
      } // if not using private agent and tunnel agent isn't setup then use global agent


      if (!agent) {
        agent = usingSsl ? https.globalAgent : http.globalAgent;
      }

      if (usingSsl && this._ignoreSslError) {
        // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
        // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
        // we have to cast it to any and change it directly
        agent.options = Object.assign(agent.options || {}, {
          rejectUnauthorized: false
        });
      }

      return agent;
    }
  }, {
    key: "_performExponentialBackoff",
    value: function _performExponentialBackoff(retryNumber) {
      retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
      var ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
      return new Promise(function (resolve) {
        return setTimeout(function () {
          return resolve();
        }, ms);
      });
    }
  }, {
    key: "_processResponse",
    value: function () {
      var _processResponse2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(res, options) {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                return _context8.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(resolve, reject) {
                    var statusCode, response, obj, contents, msg, err;
                    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
                      while (1) {
                        switch (_context7.prev = _context7.next) {
                          case 0:
                            statusCode = res.message.statusCode;
                            response = {
                              statusCode: statusCode,
                              result: null,
                              headers: {}
                            }; // not found leads to null obj returned

                            // not found leads to null obj returned
                            if (statusCode == HttpCodes.NotFound) {
                              resolve(response);
                            }

                            _context7.prev = 3;
                            _context7.next = 6;
                            return res.readBody();

                          case 6:
                            contents = _context7.sent;

                            if (contents && contents.length > 0) {
                              if (options && options.deserializeDates) {
                                obj = JSON.parse(contents, HttpClient.dateTimeDeserializer);
                              } else {
                                obj = JSON.parse(contents);
                              }

                              response.result = obj;
                            }

                            response.headers = res.message.headers;
                            _context7.next = 13;
                            break;

                          case 11:
                            _context7.prev = 11;
                            _context7.t0 = _context7["catch"](3);

                          case 13:
                            // note that 3xx redirects are handled by the http layer.
                            if (statusCode > 299) {
                              // if exception/error in body, attempt to get better error
                              if (obj && obj.message) {
                                msg = obj.message;
                              } else if (contents && contents.length > 0) {
                                // it may be the case that the exception is in the body message as string
                                msg = contents;
                              } else {
                                msg = 'Failed request: (' + statusCode + ')';
                              }

                              err = new HttpClientError(msg, statusCode);
                              err.result = response.result;
                              reject(err);
                            } else {
                              resolve(response);
                            }

                          case 14:
                          case "end":
                            return _context7.stop();
                        }
                      }
                    }, _callee7, null, [[3, 11]]);
                  }));

                  return function (_x16, _x17) {
                    return _ref2.apply(this, arguments);
                  };
                }()));

              case 1:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function _processResponse(_x14, _x15) {
        return _processResponse2.apply(this, arguments);
      }

      return _processResponse;
    }()
  }], [{
    key: "dateTimeDeserializer",
    value: function dateTimeDeserializer(key, value) {
      if (typeof value === 'string') {
        var a = new Date(value);

        if (!isNaN(a.valueOf())) {
          return a;
        }
      }

      return value;
    }
  }]);

  return HttpClient;
}();

exports.HttpClient = HttpClient;

/***/ }),

/***/ 5725:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _createForOfIteratorHelper = (__webpack_require__(3269)["default"]);

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

function getProxyUrl(reqUrl) {
  var usingSsl = reqUrl.protocol === 'https:';
  var proxyUrl;

  if (checkBypass(reqUrl)) {
    return proxyUrl;
  }

  var proxyVar;

  if (usingSsl) {
    proxyVar = process.env['https_proxy'] || process.env['HTTPS_PROXY'];
  } else {
    proxyVar = process.env['http_proxy'] || process.env['HTTP_PROXY'];
  }

  if (proxyVar) {
    proxyUrl = new URL(proxyVar);
  }

  return proxyUrl;
}

exports.getProxyUrl = getProxyUrl;

function checkBypass(reqUrl) {
  if (!reqUrl.hostname) {
    return false;
  }

  var noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';

  if (!noProxy) {
    return false;
  } // Determine the request port


  var reqPort;

  if (reqUrl.port) {
    reqPort = Number(reqUrl.port);
  } else if (reqUrl.protocol === 'http:') {
    reqPort = 80;
  } else if (reqUrl.protocol === 'https:') {
    reqPort = 443;
  } // Format the request hostname and hostname with port


  var upperReqHosts = [reqUrl.hostname.toUpperCase()];

  if (typeof reqPort === 'number') {
    upperReqHosts.push("".concat(upperReqHosts[0], ":").concat(reqPort));
  } // Compare request host against noproxy


  var _iterator = _createForOfIteratorHelper(noProxy.split(',').map(function (x) {
    return x.trim().toUpperCase();
  }).filter(function (x) {
    return x;
  })),
      _step;

  try {
    var _loop = function _loop() {
      var upperNoProxyItem = _step.value;

      if (upperReqHosts.some(function (x) {
        return x === upperNoProxyItem;
      })) {
        return {
          v: true
        };
      }
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _ret = _loop();

      if (typeof _ret === "object") return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return false;
}

exports.checkBypass = checkBypass;

/***/ }),

/***/ 7958:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _createForOfIteratorHelper = (__webpack_require__(3269)["default"]);

var visit = __webpack_require__(9494);

var nodeToString = __webpack_require__(3215);

var refractor = __webpack_require__(4338);

module.exports = function (options) {
  options = options || {};

  if (options.alias) {
    refractor.alias(options.alias);
  }

  return function (tree) {
    visit(tree, 'element', visitor);
  };

  function visitor(node, index, parent) {
    if (!parent || parent.tagName !== 'pre' || node.tagName !== 'code') {
      return;
    }

    var lang = getLanguage(node);

    if (lang === null) {
      return;
    }

    var result;

    try {
      parent.properties.className = (parent.properties.className || []).concat('language-' + lang);
      result = refractor.highlight(nodeToString(node), lang);
    } catch (err) {
      if (options.ignoreMissing && /Unknown language/.test(err.message)) {
        return;
      }

      throw err;
    }

    node.children = result;
  }
};

function getLanguage(node) {
  var className = node.properties.className || [];

  var _iterator = _createForOfIteratorHelper(className),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var classListItem = _step.value;

      if (classListItem.slice(0, 9) === 'language-') {
        return classListItem.slice(9).toLowerCase();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return null;
}

/***/ }),

/***/ 1855:
/***/ ((module) => {

module.exports = {
  trueFunc: function trueFunc() {
    return true;
  },
  falseFunc: function falseFunc() {
    return false;
  }
};

/***/ }),

/***/ 1297:
/***/ ((__unused_webpack_module, exports) => {



exports.parse = parse;
exports.stringify = stringify;
var comma = ',';
var space = ' ';
var empty = ''; // Parse comma-separated tokens to an array.

function parse(value) {
  var values = [];
  var input = String(value || empty);
  var index = input.indexOf(comma);
  var lastIndex = 0;
  var end = false;
  var val;

  while (!end) {
    if (index === -1) {
      index = input.length;
      end = true;
    }

    val = input.slice(lastIndex, index).trim();

    if (val || !end) {
      values.push(val);
    }

    lastIndex = index + 1;
    index = input.indexOf(comma, lastIndex);
  }

  return values;
} // Compile an array to comma-separated tokens.
// `options.padLeft` (default: `true`) pads a space left of each token, and
// `options.padRight` (default: `false`) pads a space to the right of each token.


function stringify(values, options) {
  var settings = options || {};
  var left = settings.padLeft === false ? empty : space;
  var right = settings.padRight ? space : empty; // Ensure the last empty entry is seen.

  if (values[values.length - 1] === empty) {
    values = values.concat(empty);
  }

  return values.join(right + comma + left).trim();
}

/***/ }),

/***/ 8743:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;


__webpack_unused_export__ = ({
  value: true
});

var parser_context_1 = __webpack_require__(5589);

var render_1 = __webpack_require__(5373);

var CssSelectorParser =
/** @class */
function () {
  function CssSelectorParser() {
    this.pseudos = {};
    this.attrEqualityMods = {};
    this.ruleNestingOperators = {};
    this.substitutesEnabled = false;
  }

  CssSelectorParser.prototype.registerSelectorPseudos = function () {
    var pseudos = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      pseudos[_i] = arguments[_i];
    }

    for (var _a = 0, pseudos_1 = pseudos; _a < pseudos_1.length; _a++) {
      var pseudo = pseudos_1[_a];
      this.pseudos[pseudo] = 'selector';
    }

    return this;
  };

  CssSelectorParser.prototype.unregisterSelectorPseudos = function () {
    var pseudos = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      pseudos[_i] = arguments[_i];
    }

    for (var _a = 0, pseudos_2 = pseudos; _a < pseudos_2.length; _a++) {
      var pseudo = pseudos_2[_a];
      delete this.pseudos[pseudo];
    }

    return this;
  };

  CssSelectorParser.prototype.registerNumericPseudos = function () {
    var pseudos = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      pseudos[_i] = arguments[_i];
    }

    for (var _a = 0, pseudos_3 = pseudos; _a < pseudos_3.length; _a++) {
      var pseudo = pseudos_3[_a];
      this.pseudos[pseudo] = 'numeric';
    }

    return this;
  };

  CssSelectorParser.prototype.unregisterNumericPseudos = function () {
    var pseudos = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      pseudos[_i] = arguments[_i];
    }

    for (var _a = 0, pseudos_4 = pseudos; _a < pseudos_4.length; _a++) {
      var pseudo = pseudos_4[_a];
      delete this.pseudos[pseudo];
    }

    return this;
  };

  CssSelectorParser.prototype.registerNestingOperators = function () {
    var operators = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      operators[_i] = arguments[_i];
    }

    for (var _a = 0, operators_1 = operators; _a < operators_1.length; _a++) {
      var operator = operators_1[_a];
      this.ruleNestingOperators[operator] = true;
    }

    return this;
  };

  CssSelectorParser.prototype.unregisterNestingOperators = function () {
    var operators = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      operators[_i] = arguments[_i];
    }

    for (var _a = 0, operators_2 = operators; _a < operators_2.length; _a++) {
      var operator = operators_2[_a];
      delete this.ruleNestingOperators[operator];
    }

    return this;
  };

  CssSelectorParser.prototype.registerAttrEqualityMods = function () {
    var mods = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      mods[_i] = arguments[_i];
    }

    for (var _a = 0, mods_1 = mods; _a < mods_1.length; _a++) {
      var mod = mods_1[_a];
      this.attrEqualityMods[mod] = true;
    }

    return this;
  };

  CssSelectorParser.prototype.unregisterAttrEqualityMods = function () {
    var mods = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      mods[_i] = arguments[_i];
    }

    for (var _a = 0, mods_2 = mods; _a < mods_2.length; _a++) {
      var mod = mods_2[_a];
      delete this.attrEqualityMods[mod];
    }

    return this;
  };

  CssSelectorParser.prototype.enableSubstitutes = function () {
    this.substitutesEnabled = true;
    return this;
  };

  CssSelectorParser.prototype.disableSubstitutes = function () {
    this.substitutesEnabled = false;
    return this;
  };

  CssSelectorParser.prototype.parse = function (str) {
    return parser_context_1.parseCssSelector(str, 0, this.pseudos, this.attrEqualityMods, this.ruleNestingOperators, this.substitutesEnabled);
  };

  CssSelectorParser.prototype.render = function (path) {
    return render_1.renderEntity(path).trim();
  };

  return CssSelectorParser;
}();

exports.N = CssSelectorParser;

/***/ }),

/***/ 5589:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var utils_1 = __webpack_require__(7565);

function parseCssSelector(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {
  var l = str.length;
  var chr = '';

  function getStr(quote, escapeTable) {
    var result = '';
    pos++;
    chr = str.charAt(pos);

    while (pos < l) {
      if (chr === quote) {
        pos++;
        return result;
      } else if (chr === '\\') {
        pos++;
        chr = str.charAt(pos);
        var esc = void 0;

        if (chr === quote) {
          result += quote;
        } else if ((esc = escapeTable[chr]) !== undefined) {
          result += esc;
        } else if (utils_1.isHex(chr)) {
          var hex = chr;
          pos++;
          chr = str.charAt(pos);

          while (utils_1.isHex(chr)) {
            hex += chr;
            pos++;
            chr = str.charAt(pos);
          }

          if (chr === ' ') {
            pos++;
            chr = str.charAt(pos);
          }

          result += String.fromCharCode(parseInt(hex, 16));
          continue;
        } else {
          result += chr;
        }
      } else {
        result += chr;
      }

      pos++;
      chr = str.charAt(pos);
    }

    return result;
  }

  function getIdent() {
    var result = '';
    chr = str.charAt(pos);

    while (pos < l) {
      if (utils_1.isIdent(chr)) {
        result += chr;
      } else if (chr === '\\') {
        pos++;

        if (pos >= l) {
          throw Error('Expected symbol but end of file reached.');
        }

        chr = str.charAt(pos);

        if (utils_1.identSpecialChars[chr]) {
          result += chr;
        } else if (utils_1.isHex(chr)) {
          var hex = chr;
          pos++;
          chr = str.charAt(pos);

          while (utils_1.isHex(chr)) {
            hex += chr;
            pos++;
            chr = str.charAt(pos);
          }

          if (chr === ' ') {
            pos++;
            chr = str.charAt(pos);
          }

          result += String.fromCharCode(parseInt(hex, 16));
          continue;
        } else {
          result += chr;
        }
      } else {
        return result;
      }

      pos++;
      chr = str.charAt(pos);
    }

    return result;
  }

  function skipWhitespace() {
    chr = str.charAt(pos);
    var result = false;

    while (chr === ' ' || chr === "\t" || chr === "\n" || chr === "\r" || chr === "\f") {
      result = true;
      pos++;
      chr = str.charAt(pos);
    }

    return result;
  }

  function parse() {
    var res = parseSelector();

    if (pos < l) {
      throw Error('Rule expected but "' + str.charAt(pos) + '" found.');
    }

    return res;
  }

  function parseSelector() {
    var selector = parseSingleSelector();

    if (!selector) {
      return null;
    }

    var res = selector;
    chr = str.charAt(pos);

    while (chr === ',') {
      pos++;
      skipWhitespace();

      if (res.type !== 'selectors') {
        res = {
          type: 'selectors',
          selectors: [selector]
        };
      }

      selector = parseSingleSelector();

      if (!selector) {
        throw Error('Rule expected after ",".');
      }

      res.selectors.push(selector);
    }

    return res;
  }

  function parseSingleSelector() {
    skipWhitespace();
    var selector = {
      type: 'ruleSet'
    };
    var rule = parseRule();

    if (!rule) {
      return null;
    }

    var currentRule = selector;

    while (rule) {
      rule.type = 'rule';
      currentRule.rule = rule;
      currentRule = rule;
      skipWhitespace();
      chr = str.charAt(pos);

      if (pos >= l || chr === ',' || chr === ')') {
        break;
      }

      if (ruleNestingOperators[chr]) {
        var op = chr;
        pos++;
        skipWhitespace();
        rule = parseRule();

        if (!rule) {
          throw Error('Rule expected after "' + op + '".');
        }

        rule.nestingOperator = op;
      } else {
        rule = parseRule();

        if (rule) {
          rule.nestingOperator = null;
        }
      }
    }

    return selector;
  } // @ts-ignore no-overlap


  function parseRule() {
    var rule = null;

    while (pos < l) {
      chr = str.charAt(pos);

      if (chr === '*') {
        pos++;
        (rule = rule || {}).tagName = '*';
      } else if (utils_1.isIdentStart(chr) || chr === '\\') {
        (rule = rule || {}).tagName = getIdent();
      } else if (chr === '.') {
        pos++;
        rule = rule || {};
        (rule.classNames = rule.classNames || []).push(getIdent());
      } else if (chr === '#') {
        pos++;
        (rule = rule || {}).id = getIdent();
      } else if (chr === '[') {
        pos++;
        skipWhitespace();
        var attr = {
          name: getIdent()
        };
        skipWhitespace(); // @ts-ignore

        if (chr === ']') {
          pos++;
        } else {
          var operator = '';

          if (attrEqualityMods[chr]) {
            operator = chr;
            pos++;
            chr = str.charAt(pos);
          }

          if (pos >= l) {
            throw Error('Expected "=" but end of file reached.');
          }

          if (chr !== '=') {
            throw Error('Expected "=" but "' + chr + '" found.');
          }

          attr.operator = operator + '=';
          pos++;
          skipWhitespace();
          var attrValue = '';
          attr.valueType = 'string'; // @ts-ignore

          if (chr === '"') {
            attrValue = getStr('"', utils_1.doubleQuotesEscapeChars); // @ts-ignore
          } else if (chr === '\'') {
            attrValue = getStr('\'', utils_1.singleQuoteEscapeChars); // @ts-ignore
          } else if (substitutesEnabled && chr === '$') {
            pos++;
            attrValue = getIdent();
            attr.valueType = 'substitute';
          } else {
            while (pos < l) {
              if (chr === ']') {
                break;
              }

              attrValue += chr;
              pos++;
              chr = str.charAt(pos);
            }

            attrValue = attrValue.trim();
          }

          skipWhitespace();

          if (pos >= l) {
            throw Error('Expected "]" but end of file reached.');
          }

          if (chr !== ']') {
            throw Error('Expected "]" but "' + chr + '" found.');
          }

          pos++;
          attr.value = attrValue;
        }

        rule = rule || {};
        (rule.attrs = rule.attrs || []).push(attr);
      } else if (chr === ':') {
        pos++;
        var pseudoName = getIdent();
        var pseudo = {
          name: pseudoName
        }; // @ts-ignore

        if (chr === '(') {
          pos++;
          var value = '';
          skipWhitespace();

          if (pseudos[pseudoName] === 'selector') {
            pseudo.valueType = 'selector';
            value = parseSelector();
          } else {
            pseudo.valueType = pseudos[pseudoName] || 'string'; // @ts-ignore

            if (chr === '"') {
              value = getStr('"', utils_1.doubleQuotesEscapeChars); // @ts-ignore
            } else if (chr === '\'') {
              value = getStr('\'', utils_1.singleQuoteEscapeChars); // @ts-ignore
            } else if (substitutesEnabled && chr === '$') {
              pos++;
              value = getIdent();
              pseudo.valueType = 'substitute';
            } else {
              while (pos < l) {
                if (chr === ')') {
                  break;
                }

                value += chr;
                pos++;
                chr = str.charAt(pos);
              }

              value = value.trim();
            }

            skipWhitespace();
          }

          if (pos >= l) {
            throw Error('Expected ")" but end of file reached.');
          }

          if (chr !== ')') {
            throw Error('Expected ")" but "' + chr + '" found.');
          }

          pos++;
          pseudo.value = value;
        }

        rule = rule || {};
        (rule.pseudos = rule.pseudos || []).push(pseudo);
      } else {
        break;
      }
    }

    return rule;
  }

  return parse();
}

exports.parseCssSelector = parseCssSelector;

/***/ }),

/***/ 5373:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var utils_1 = __webpack_require__(7565);

function renderEntity(entity) {
  var res = '';

  switch (entity.type) {
    case 'ruleSet':
      var currentEntity = entity.rule;
      var parts = [];

      while (currentEntity) {
        if (currentEntity.nestingOperator) {
          parts.push(currentEntity.nestingOperator);
        }

        parts.push(renderEntity(currentEntity));
        currentEntity = currentEntity.rule;
      }

      res = parts.join(' ');
      break;

    case 'selectors':
      res = entity.selectors.map(renderEntity).join(', ');
      break;

    case 'rule':
      if (entity.tagName) {
        if (entity.tagName === '*') {
          res = '*';
        } else {
          res = utils_1.escapeIdentifier(entity.tagName);
        }
      }

      if (entity.id) {
        res += "#" + utils_1.escapeIdentifier(entity.id);
      }

      if (entity.classNames) {
        res += entity.classNames.map(function (cn) {
          return "." + utils_1.escapeIdentifier(cn);
        }).join('');
      }

      if (entity.attrs) {
        res += entity.attrs.map(function (attr) {
          if ('operator' in attr) {
            if (attr.valueType === 'substitute') {
              return "[" + utils_1.escapeIdentifier(attr.name) + attr.operator + "$" + attr.value + "]";
            } else {
              return "[" + utils_1.escapeIdentifier(attr.name) + attr.operator + utils_1.escapeStr(attr.value) + "]";
            }
          } else {
            return "[" + utils_1.escapeIdentifier(attr.name) + "]";
          }
        }).join('');
      }

      if (entity.pseudos) {
        res += entity.pseudos.map(function (pseudo) {
          if (pseudo.valueType) {
            if (pseudo.valueType === 'selector') {
              return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + renderEntity(pseudo.value) + ")";
            } else if (pseudo.valueType === 'substitute') {
              return ":" + utils_1.escapeIdentifier(pseudo.name) + "($" + pseudo.value + ")";
            } else if (pseudo.valueType === 'numeric') {
              return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + pseudo.value + ")";
            } else {
              return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + utils_1.escapeIdentifier(pseudo.value) + ")";
            }
          } else {
            return ":" + utils_1.escapeIdentifier(pseudo.name);
          }
        }).join('');
      }

      break;

    default:
      throw Error('Unknown entity type: "' + entity.type + '".');
  }

  return res;
}

exports.renderEntity = renderEntity;

/***/ }),

/***/ 7565:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));

function isIdentStart(c) {
  return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c === '-' || c === '_';
}

exports.isIdentStart = isIdentStart;

function isIdent(c) {
  return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c === '-' || c === '_';
}

exports.isIdent = isIdent;

function isHex(c) {
  return c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F' || c >= '0' && c <= '9';
}

exports.isHex = isHex;

function escapeIdentifier(s) {
  var len = s.length;
  var result = '';
  var i = 0;

  while (i < len) {
    var chr = s.charAt(i);

    if (exports.identSpecialChars[chr]) {
      result += '\\' + chr;
    } else {
      if (!(chr === '_' || chr === '-' || chr >= 'A' && chr <= 'Z' || chr >= 'a' && chr <= 'z' || i !== 0 && chr >= '0' && chr <= '9')) {
        var charCode = chr.charCodeAt(0);

        if ((charCode & 0xF800) === 0xD800) {
          var extraCharCode = s.charCodeAt(i++);

          if ((charCode & 0xFC00) !== 0xD800 || (extraCharCode & 0xFC00) !== 0xDC00) {
            throw Error('UCS-2(decode): illegal sequence');
          }

          charCode = ((charCode & 0x3FF) << 10) + (extraCharCode & 0x3FF) + 0x10000;
        }

        result += '\\' + charCode.toString(16) + ' ';
      } else {
        result += chr;
      }
    }

    i++;
  }

  return result;
}

exports.escapeIdentifier = escapeIdentifier;

function escapeStr(s) {
  var len = s.length;
  var result = '';
  var i = 0;
  var replacement;

  while (i < len) {
    var chr = s.charAt(i);

    if (chr === '"') {
      chr = '\\"';
    } else if (chr === '\\') {
      chr = '\\\\';
    } else if ((replacement = exports.strReplacementsRev[chr]) !== undefined) {
      chr = replacement;
    }

    result += chr;
    i++;
  }

  return "\"" + result + "\"";
}

exports.escapeStr = escapeStr;
exports.identSpecialChars = {
  '!': true,
  '"': true,
  '#': true,
  '$': true,
  '%': true,
  '&': true,
  '\'': true,
  '(': true,
  ')': true,
  '*': true,
  '+': true,
  ',': true,
  '.': true,
  '/': true,
  ';': true,
  '<': true,
  '=': true,
  '>': true,
  '?': true,
  '@': true,
  '[': true,
  '\\': true,
  ']': true,
  '^': true,
  '`': true,
  '{': true,
  '|': true,
  '}': true,
  '~': true
};
exports.strReplacementsRev = {
  '\n': '\\n',
  '\r': '\\r',
  '\t': '\\t',
  '\f': '\\f',
  '\v': '\\v'
};
exports.singleQuoteEscapeChars = {
  n: '\n',
  r: '\r',
  t: '\t',
  f: '\f',
  '\\': '\\',
  '\'': '\''
};
exports.doubleQuotesEscapeChars = {
  n: '\n',
  r: '\r',
  t: '\t',
  f: '\f',
  '\\': '\\',
  '"': '"'
};

/***/ }),

/***/ 3445:
/***/ ((module) => {



var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;

var isArray = function isArray(arr) {
  if (typeof Array.isArray === 'function') {
    return Array.isArray(arr);
  }

  return toStr.call(arr) === '[object Array]';
};

var isPlainObject = function isPlainObject(obj) {
  if (!obj || toStr.call(obj) !== '[object Object]') {
    return false;
  }

  var hasOwnConstructor = hasOwn.call(obj, 'constructor');
  var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf'); // Not own constructor property must be Object

  if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
    return false;
  } // Own properties are enumerated firstly, so to speed up,
  // if last one is own, then all properties are own.


  var key;

  for (key in obj) {
    /**/
  }

  return typeof key === 'undefined' || hasOwn.call(obj, key);
}; // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target


var setProperty = function setProperty(target, options) {
  if (defineProperty && options.name === '__proto__') {
    defineProperty(target, options.name, {
      enumerable: true,
      configurable: true,
      value: options.newValue,
      writable: true
    });
  } else {
    target[options.name] = options.newValue;
  }
}; // Return undefined instead of __proto__ if '__proto__' is not an own property


var getProperty = function getProperty(obj, name) {
  if (name === '__proto__') {
    if (!hasOwn.call(obj, name)) {
      return void 0;
    } else if (gOPD) {
      // In early versions of node, obj['__proto__'] is buggy when obj has
      // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
      return gOPD(obj, name).value;
    }
  }

  return obj[name];
};

module.exports = function extend() {
  var options, name, src, copy, copyIsArray, clone;
  var target = arguments[0];
  var i = 1;
  var length = arguments.length;
  var deep = false; // Handle a deep copy situation

  if (typeof target === 'boolean') {
    deep = target;
    target = arguments[1] || {}; // skip the boolean and the target

    i = 2;
  }

  if (target == null || typeof target !== 'object' && typeof target !== 'function') {
    target = {};
  }

  for (; i < length; ++i) {
    options = arguments[i]; // Only deal with non-null/undefined values

    if (options != null) {
      // Extend the base object
      for (name in options) {
        src = getProperty(target, name);
        copy = getProperty(options, name); // Prevent never-ending loop

        if (target !== copy) {
          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && isArray(src) ? src : [];
            } else {
              clone = src && isPlainObject(src) ? src : {};
            } // Never move original objects, clone them


            setProperty(target, {
              name: name,
              newValue: extend(deep, clone, copy)
            }); // Don't bring in undefined values
          } else if (typeof copy !== 'undefined') {
            setProperty(target, {
              name: name,
              newValue: copy
            });
          }
        }
      }
    }
  } // Return the modified object


  return target;
};

/***/ }),

/***/ 2828:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var fs = __webpack_require__(4527);

var path = __webpack_require__(1017);

var mkdirsSync = (__webpack_require__(5027).mkdirsSync);

var utimesMillisSync = (__webpack_require__(2818).utimesMillisSync);

var stat = __webpack_require__(1577);

function copySync(src, dest, opts) {
  if (typeof opts === 'function') {
    opts = {
      filter: opts
    };
  }

  opts = opts || {};
  opts.clobber = 'clobber' in opts ? !!opts.clobber : true; // default to true for now

  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber; // overwrite falls back to clobber
  // Warn about using preserveTimestamps on 32-bit node

  if (opts.preserveTimestamps && process.arch === 'ia32') {
    console.warn("fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269");
  }

  var _stat$checkPathsSync = stat.checkPathsSync(src, dest, 'copy', opts),
      srcStat = _stat$checkPathsSync.srcStat,
      destStat = _stat$checkPathsSync.destStat;

  stat.checkParentPathsSync(src, srcStat, dest, 'copy');
  return handleFilterAndCopy(destStat, src, dest, opts);
}

function handleFilterAndCopy(destStat, src, dest, opts) {
  if (opts.filter && !opts.filter(src, dest)) return;
  var destParent = path.dirname(dest);
  if (!fs.existsSync(destParent)) mkdirsSync(destParent);
  return getStats(destStat, src, dest, opts);
}

function startCopy(destStat, src, dest, opts) {
  if (opts.filter && !opts.filter(src, dest)) return;
  return getStats(destStat, src, dest, opts);
}

function getStats(destStat, src, dest, opts) {
  var statSync = opts.dereference ? fs.statSync : fs.lstatSync;
  var srcStat = statSync(src);
  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts);else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts);else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts);else if (srcStat.isSocket()) throw new Error("Cannot copy a socket file: ".concat(src));else if (srcStat.isFIFO()) throw new Error("Cannot copy a FIFO pipe: ".concat(src));
  throw new Error("Unknown file: ".concat(src));
}

function onFile(srcStat, destStat, src, dest, opts) {
  if (!destStat) return copyFile(srcStat, src, dest, opts);
  return mayCopyFile(srcStat, src, dest, opts);
}

function mayCopyFile(srcStat, src, dest, opts) {
  if (opts.overwrite) {
    fs.unlinkSync(dest);
    return copyFile(srcStat, src, dest, opts);
  } else if (opts.errorOnExist) {
    throw new Error("'".concat(dest, "' already exists"));
  }
}

function copyFile(srcStat, src, dest, opts) {
  fs.copyFileSync(src, dest);
  if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest);
  return setDestMode(dest, srcStat.mode);
}

function handleTimestamps(srcMode, src, dest) {
  // Make sure the file is writable before setting the timestamp
  // otherwise open fails with EPERM when invoked with 'r+'
  // (through utimes call)
  if (fileIsNotWritable(srcMode)) makeFileWritable(dest, srcMode);
  return setDestTimestamps(src, dest);
}

function fileIsNotWritable(srcMode) {
  return (srcMode & 128) === 0;
}

function makeFileWritable(dest, srcMode) {
  return setDestMode(dest, srcMode | 128);
}

function setDestMode(dest, srcMode) {
  return fs.chmodSync(dest, srcMode);
}

function setDestTimestamps(src, dest) {
  // The initial srcStat.atime cannot be trusted
  // because it is modified by the read(2) system call
  // (See https://nodejs.org/api/fs.html#fs_stat_time_values)
  var updatedSrcStat = fs.statSync(src);
  return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
}

function onDir(srcStat, destStat, src, dest, opts) {
  if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts);
  return copyDir(src, dest, opts);
}

function mkDirAndCopy(srcMode, src, dest, opts) {
  fs.mkdirSync(dest);
  copyDir(src, dest, opts);
  return setDestMode(dest, srcMode);
}

function copyDir(src, dest, opts) {
  fs.readdirSync(src).forEach(function (item) {
    return copyDirItem(item, src, dest, opts);
  });
}

function copyDirItem(item, src, dest, opts) {
  var srcItem = path.join(src, item);
  var destItem = path.join(dest, item);

  var _stat$checkPathsSync2 = stat.checkPathsSync(srcItem, destItem, 'copy', opts),
      destStat = _stat$checkPathsSync2.destStat;

  return startCopy(destStat, srcItem, destItem, opts);
}

function onLink(destStat, src, dest, opts) {
  var resolvedSrc = fs.readlinkSync(src);

  if (opts.dereference) {
    resolvedSrc = path.resolve(process.cwd(), resolvedSrc);
  }

  if (!destStat) {
    return fs.symlinkSync(resolvedSrc, dest);
  } else {
    var resolvedDest;

    try {
      resolvedDest = fs.readlinkSync(dest);
    } catch (err) {
      // dest exists and is a regular file or directory,
      // Windows may throw UNKNOWN error. If dest already exists,
      // fs throws error anyway, so no need to guard against it here.
      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlinkSync(resolvedSrc, dest);
      throw err;
    }

    if (opts.dereference) {
      resolvedDest = path.resolve(process.cwd(), resolvedDest);
    }

    if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
      throw new Error("Cannot copy '".concat(resolvedSrc, "' to a subdirectory of itself, '").concat(resolvedDest, "'."));
    } // prevent copy if src is a subdir of dest since unlinking
    // dest in this case would result in removing src contents
    // and therefore a broken symlink would be created.


    if (fs.statSync(dest).isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
      throw new Error("Cannot overwrite '".concat(resolvedDest, "' with '").concat(resolvedSrc, "'."));
    }

    return copyLink(resolvedSrc, dest);
  }
}

function copyLink(resolvedSrc, dest) {
  fs.unlinkSync(dest);
  return fs.symlinkSync(resolvedSrc, dest);
}

module.exports = copySync;

/***/ }),

/***/ 6493:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = {
  copySync: __webpack_require__(2828)
};

/***/ }),

/***/ 2264:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var fs = __webpack_require__(4527);

var path = __webpack_require__(1017);

var mkdirs = (__webpack_require__(5027).mkdirs);

var pathExists = (__webpack_require__(9109).pathExists);

var utimesMillis = (__webpack_require__(2818).utimesMillis);

var stat = __webpack_require__(1577);

function copy(src, dest, opts, cb) {
  if (typeof opts === 'function' && !cb) {
    cb = opts;
    opts = {};
  } else if (typeof opts === 'function') {
    opts = {
      filter: opts
    };
  }

  cb = cb || function () {};

  opts = opts || {};
  opts.clobber = 'clobber' in opts ? !!opts.clobber : true; // default to true for now

  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber; // overwrite falls back to clobber
  // Warn about using preserveTimestamps on 32-bit node

  if (opts.preserveTimestamps && process.arch === 'ia32') {
    console.warn("fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269");
  }

  stat.checkPaths(src, dest, 'copy', opts, function (err, stats) {
    if (err) return cb(err);
    var srcStat = stats.srcStat,
        destStat = stats.destStat;
    stat.checkParentPaths(src, srcStat, dest, 'copy', function (err) {
      if (err) return cb(err);
      if (opts.filter) return handleFilter(checkParentDir, destStat, src, dest, opts, cb);
      return checkParentDir(destStat, src, dest, opts, cb);
    });
  });
}

function checkParentDir(destStat, src, dest, opts, cb) {
  var destParent = path.dirname(dest);
  pathExists(destParent, function (err, dirExists) {
    if (err) return cb(err);
    if (dirExists) return getStats(destStat, src, dest, opts, cb);
    mkdirs(destParent, function (err) {
      if (err) return cb(err);
      return getStats(destStat, src, dest, opts, cb);
    });
  });
}

function handleFilter(onInclude, destStat, src, dest, opts, cb) {
  Promise.resolve(opts.filter(src, dest)).then(function (include) {
    if (include) return onInclude(destStat, src, dest, opts, cb);
    return cb();
  }, function (error) {
    return cb(error);
  });
}

function startCopy(destStat, src, dest, opts, cb) {
  if (opts.filter) return handleFilter(getStats, destStat, src, dest, opts, cb);
  return getStats(destStat, src, dest, opts, cb);
}

function getStats(destStat, src, dest, opts, cb) {
  var stat = opts.dereference ? fs.stat : fs.lstat;
  stat(src, function (err, srcStat) {
    if (err) return cb(err);
    if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts, cb);else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts, cb);else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts, cb);else if (srcStat.isSocket()) return cb(new Error("Cannot copy a socket file: ".concat(src)));else if (srcStat.isFIFO()) return cb(new Error("Cannot copy a FIFO pipe: ".concat(src)));
    return cb(new Error("Unknown file: ".concat(src)));
  });
}

function onFile(srcStat, destStat, src, dest, opts, cb) {
  if (!destStat) return copyFile(srcStat, src, dest, opts, cb);
  return mayCopyFile(srcStat, src, dest, opts, cb);
}

function mayCopyFile(srcStat, src, dest, opts, cb) {
  if (opts.overwrite) {
    fs.unlink(dest, function (err) {
      if (err) return cb(err);
      return copyFile(srcStat, src, dest, opts, cb);
    });
  } else if (opts.errorOnExist) {
    return cb(new Error("'".concat(dest, "' already exists")));
  } else return cb();
}

function copyFile(srcStat, src, dest, opts, cb) {
  fs.copyFile(src, dest, function (err) {
    if (err) return cb(err);
    if (opts.preserveTimestamps) return handleTimestampsAndMode(srcStat.mode, src, dest, cb);
    return setDestMode(dest, srcStat.mode, cb);
  });
}

function handleTimestampsAndMode(srcMode, src, dest, cb) {
  // Make sure the file is writable before setting the timestamp
  // otherwise open fails with EPERM when invoked with 'r+'
  // (through utimes call)
  if (fileIsNotWritable(srcMode)) {
    return makeFileWritable(dest, srcMode, function (err) {
      if (err) return cb(err);
      return setDestTimestampsAndMode(srcMode, src, dest, cb);
    });
  }

  return setDestTimestampsAndMode(srcMode, src, dest, cb);
}

function fileIsNotWritable(srcMode) {
  return (srcMode & 128) === 0;
}

function makeFileWritable(dest, srcMode, cb) {
  return setDestMode(dest, srcMode | 128, cb);
}

function setDestTimestampsAndMode(srcMode, src, dest, cb) {
  setDestTimestamps(src, dest, function (err) {
    if (err) return cb(err);
    return setDestMode(dest, srcMode, cb);
  });
}

function setDestMode(dest, srcMode, cb) {
  return fs.chmod(dest, srcMode, cb);
}

function setDestTimestamps(src, dest, cb) {
  // The initial srcStat.atime cannot be trusted
  // because it is modified by the read(2) system call
  // (See https://nodejs.org/api/fs.html#fs_stat_time_values)
  fs.stat(src, function (err, updatedSrcStat) {
    if (err) return cb(err);
    return utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime, cb);
  });
}

function onDir(srcStat, destStat, src, dest, opts, cb) {
  if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts, cb);
  return copyDir(src, dest, opts, cb);
}

function mkDirAndCopy(srcMode, src, dest, opts, cb) {
  fs.mkdir(dest, function (err) {
    if (err) return cb(err);
    copyDir(src, dest, opts, function (err) {
      if (err) return cb(err);
      return setDestMode(dest, srcMode, cb);
    });
  });
}

function copyDir(src, dest, opts, cb) {
  fs.readdir(src, function (err, items) {
    if (err) return cb(err);
    return copyDirItems(items, src, dest, opts, cb);
  });
}

function copyDirItems(items, src, dest, opts, cb) {
  var item = items.pop();
  if (!item) return cb();
  return copyDirItem(items, item, src, dest, opts, cb);
}

function copyDirItem(items, item, src, dest, opts, cb) {
  var srcItem = path.join(src, item);
  var destItem = path.join(dest, item);
  stat.checkPaths(srcItem, destItem, 'copy', opts, function (err, stats) {
    if (err) return cb(err);
    var destStat = stats.destStat;
    startCopy(destStat, srcItem, destItem, opts, function (err) {
      if (err) return cb(err);
      return copyDirItems(items, src, dest, opts, cb);
    });
  });
}

function onLink(destStat, src, dest, opts, cb) {
  fs.readlink(src, function (err, resolvedSrc) {
    if (err) return cb(err);

    if (opts.dereference) {
      resolvedSrc = path.resolve(process.cwd(), resolvedSrc);
    }

    if (!destStat) {
      return fs.symlink(resolvedSrc, dest, cb);
    } else {
      fs.readlink(dest, function (err, resolvedDest) {
        if (err) {
          // dest exists and is a regular file or directory,
          // Windows may throw UNKNOWN error. If dest already exists,
          // fs throws error anyway, so no need to guard against it here.
          if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlink(resolvedSrc, dest, cb);
          return cb(err);
        }

        if (opts.dereference) {
          resolvedDest = path.resolve(process.cwd(), resolvedDest);
        }

        if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
          return cb(new Error("Cannot copy '".concat(resolvedSrc, "' to a subdirectory of itself, '").concat(resolvedDest, "'.")));
        } // do not copy if src is a subdir of dest since unlinking
        // dest in this case would result in removing src contents
        // and therefore a broken symlink would be created.


        if (destStat.isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
          return cb(new Error("Cannot overwrite '".concat(resolvedDest, "' with '").concat(resolvedSrc, "'.")));
        }

        return copyLink(resolvedSrc, dest, cb);
      });
    }
  });
}

function copyLink(resolvedSrc, dest, cb) {
  fs.unlink(dest, function (err) {
    if (err) return cb(err);
    return fs.symlink(resolvedSrc, dest, cb);
  });
}

module.exports = copy;

/***/ }),

/***/ 5470:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var u = (__webpack_require__(7385).fromCallback);

module.exports = {
  copy: u(__webpack_require__(2264))
};

/***/ }),

/***/ 1032:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _regeneratorRuntime = __webpack_require__(7757);

var _asyncToGenerator = (__webpack_require__(8926)["default"]);

var u = (__webpack_require__(7385).fromPromise);

var fs = __webpack_require__(9278);

var path = __webpack_require__(1017);

var mkdir = __webpack_require__(5027);

var remove = __webpack_require__(177);

var emptyDir = u( /*#__PURE__*/function () {
  var _emptyDir = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dir) {
    var items;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return fs.readdir(dir);

          case 3:
            items = _context.sent;
            _context.next = 9;
            break;

          case 6:
            _context.prev = 6;
            _context.t0 = _context["catch"](0);
            return _context.abrupt("return", mkdir.mkdirs(dir));

          case 9:
            return _context.abrupt("return", Promise.all(items.map(function (item) {
              return remove.remove(path.join(dir, item));
            })));

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 6]]);
  }));

  function emptyDir(_x) {
    return _emptyDir.apply(this, arguments);
  }

  return emptyDir;
}());

function emptyDirSync(dir) {
  var items;

  try {
    items = fs.readdirSync(dir);
  } catch (_unused2) {
    return mkdir.mkdirsSync(dir);
  }

  items.forEach(function (item) {
    item = path.join(dir, item);
    remove.removeSync(item);
  });
}

module.exports = {
  emptyDirSync: emptyDirSync,
  emptydirSync: emptyDirSync,
  emptyDir: emptyDir,
  emptydir: emptyDir
};

/***/ }),

/***/ 2060:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var u = (__webpack_require__(7385).fromCallback);

var path = __webpack_require__(1017);

var fs = __webpack_require__(4527);

var mkdir = __webpack_require__(5027);

function createFile(file, callback) {
  function makeFile() {
    fs.writeFile(file, '', function (err) {
      if (err) return callback(err);
      callback();
    });
  }

  fs.stat(file, function (err, stats) {
    // eslint-disable-line handle-callback-err
    if (!err && stats.isFile()) return callback();
    var dir = path.dirname(file);
    fs.stat(dir, function (err, stats) {
      if (err) {
        // if the directory doesn't exist, make it
        if (err.code === 'ENOENT') {
          return mkdir.mkdirs(dir, function (err) {
            if (err) return callback(err);
            makeFile();
          });
        }

        return callback(err);
      }

      if (stats.isDirectory()) makeFile();else {
        // parent is not a directory
        // This is just to cause an internal ENOTDIR error to be thrown
        fs.readdir(dir, function (err) {
          if (err) return callback(err);
        });
      }
    });
  });
}

function createFileSync(file) {
  var stats;

  try {
    stats = fs.statSync(file);
  } catch (_unused) {}

  if (stats && stats.isFile()) return;
  var dir = path.dirname(file);

  try {
    if (!fs.statSync(dir).isDirectory()) {
      // parent is not a directory
      // This is just to cause an internal ENOTDIR error to be thrown
      fs.readdirSync(dir);
    }
  } catch (err) {
    // If the stat call above failed because the directory doesn't exist, create it
    if (err && err.code === 'ENOENT') mkdir.mkdirsSync(dir);else throw err;
  }

  fs.writeFileSync(file, '');
}

module.exports = {
  createFile: u(createFile),
  createFileSync: createFileSync
};

/***/ }),

/***/ 7951:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var file = __webpack_require__(2060);

var link = __webpack_require__(5613);

var symlink = __webpack_require__(6761);

module.exports = {
  // file
  createFile: file.createFile,
  createFileSync: file.createFileSync,
  ensureFile: file.createFile,
  ensureFileSync: file.createFileSync,
  // link
  createLink: link.createLink,
  createLinkSync: link.createLinkSync,
  ensureLink: link.createLink,
  ensureLinkSync: link.createLinkSync,
  // symlink
  createSymlink: symlink.createSymlink,
  createSymlinkSync: symlink.createSymlinkSync,
  ensureSymlink: symlink.createSymlink,
  ensureSymlinkSync: symlink.createSymlinkSync
};

/***/ }),

/***/ 5613:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var u = (__webpack_require__(7385).fromCallback);

var path = __webpack_require__(1017);

var fs = __webpack_require__(4527);

var mkdir = __webpack_require__(5027);

var pathExists = (__webpack_require__(9109).pathExists);

var _require = __webpack_require__(1577),
    areIdentical = _require.areIdentical;

function createLink(srcpath, dstpath, callback) {
  function makeLink(srcpath, dstpath) {
    fs.link(srcpath, dstpath, function (err) {
      if (err) return callback(err);
      callback(null);
    });
  }

  fs.lstat(dstpath, function (_, dstStat) {
    fs.lstat(srcpath, function (err, srcStat) {
      if (err) {
        err.message = err.message.replace('lstat', 'ensureLink');
        return callback(err);
      }

      if (dstStat && areIdentical(srcStat, dstStat)) return callback(null);
      var dir = path.dirname(dstpath);
      pathExists(dir, function (err, dirExists) {
        if (err) return callback(err);
        if (dirExists) return makeLink(srcpath, dstpath);
        mkdir.mkdirs(dir, function (err) {
          if (err) return callback(err);
          makeLink(srcpath, dstpath);
        });
      });
    });
  });
}

function createLinkSync(srcpath, dstpath) {
  var dstStat;

  try {
    dstStat = fs.lstatSync(dstpath);
  } catch (_unused) {}

  try {
    var srcStat = fs.lstatSync(srcpath);
    if (dstStat && areIdentical(srcStat, dstStat)) return;
  } catch (err) {
    err.message = err.message.replace('lstat', 'ensureLink');
    throw err;
  }

  var dir = path.dirname(dstpath);
  var dirExists = fs.existsSync(dir);
  if (dirExists) return fs.linkSync(srcpath, dstpath);
  mkdir.mkdirsSync(dir);
  return fs.linkSync(srcpath, dstpath);
}

module.exports = {
  createLink: u(createLink),
  createLinkSync: createLinkSync
};

/***/ }),

/***/ 6918:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var path = __webpack_require__(1017);

var fs = __webpack_require__(4527);

var pathExists = (__webpack_require__(9109).pathExists);
/**
 * Function that returns two types of paths, one relative to symlink, and one
 * relative to the current working directory. Checks if path is absolute or
 * relative. If the path is relative, this function checks if the path is
 * relative to symlink or relative to current working directory. This is an
 * initiative to find a smarter `srcpath` to supply when building symlinks.
 * This allows you to determine which path to use out of one of three possible
 * types of source paths. The first is an absolute path. This is detected by
 * `path.isAbsolute()`. When an absolute path is provided, it is checked to
 * see if it exists. If it does it's used, if not an error is returned
 * (callback)/ thrown (sync). The other two options for `srcpath` are a
 * relative url. By default Node's `fs.symlink` works by creating a symlink
 * using `dstpath` and expects the `srcpath` to be relative to the newly
 * created symlink. If you provide a `srcpath` that does not exist on the file
 * system it results in a broken symlink. To minimize this, the function
 * checks to see if the 'relative to symlink' source file exists, and if it
 * does it will use it. If it does not, it checks if there's a file that
 * exists that is relative to the current working directory, if does its used.
 * This preserves the expectations of the original fs.symlink spec and adds
 * the ability to pass in `relative to current working direcotry` paths.
 */


function symlinkPaths(srcpath, dstpath, callback) {
  if (path.isAbsolute(srcpath)) {
    return fs.lstat(srcpath, function (err) {
      if (err) {
        err.message = err.message.replace('lstat', 'ensureSymlink');
        return callback(err);
      }

      return callback(null, {
        toCwd: srcpath,
        toDst: srcpath
      });
    });
  } else {
    var dstdir = path.dirname(dstpath);
    var relativeToDst = path.join(dstdir, srcpath);
    return pathExists(relativeToDst, function (err, exists) {
      if (err) return callback(err);

      if (exists) {
        return callback(null, {
          toCwd: relativeToDst,
          toDst: srcpath
        });
      } else {
        return fs.lstat(srcpath, function (err) {
          if (err) {
            err.message = err.message.replace('lstat', 'ensureSymlink');
            return callback(err);
          }

          return callback(null, {
            toCwd: srcpath,
            toDst: path.relative(dstdir, srcpath)
          });
        });
      }
    });
  }
}

function symlinkPathsSync(srcpath, dstpath) {
  var exists;

  if (path.isAbsolute(srcpath)) {
    exists = fs.existsSync(srcpath);
    if (!exists) throw new Error('absolute srcpath does not exist');
    return {
      toCwd: srcpath,
      toDst: srcpath
    };
  } else {
    var dstdir = path.dirname(dstpath);
    var relativeToDst = path.join(dstdir, srcpath);
    exists = fs.existsSync(relativeToDst);

    if (exists) {
      return {
        toCwd: relativeToDst,
        toDst: srcpath
      };
    } else {
      exists = fs.existsSync(srcpath);
      if (!exists) throw new Error('relative srcpath does not exist');
      return {
        toCwd: srcpath,
        toDst: path.relative(dstdir, srcpath)
      };
    }
  }
}

module.exports = {
  symlinkPaths: symlinkPaths,
  symlinkPathsSync: symlinkPathsSync
};

/***/ }),

/***/ 3249:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var fs = __webpack_require__(4527);

function symlinkType(srcpath, type, callback) {
  callback = typeof type === 'function' ? type : callback;
  type = typeof type === 'function' ? false : type;
  if (type) return callback(null, type);
  fs.lstat(srcpath, function (err, stats) {
    if (err) return callback(null, 'file');
    type = stats && stats.isDirectory() ? 'dir' : 'file';
    callback(null, type);
  });
}

function symlinkTypeSync(srcpath, type) {
  var stats;
  if (type) return type;

  try {
    stats = fs.lstatSync(srcpath);
  } catch (_unused) {
    return 'file';
  }

  return stats && stats.isDirectory() ? 'dir' : 'file';
}

module.exports = {
  symlinkType: symlinkType,
  symlinkTypeSync: symlinkTypeSync
};

/***/ }),

/***/ 6761:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _slicedToArray = (__webpack_require__(3038)["default"]);

var u = (__webpack_require__(7385).fromCallback);

var path = __webpack_require__(1017);

var fs = __webpack_require__(9278);

var _mkdirs = __webpack_require__(5027);

var mkdirs = _mkdirs.mkdirs;
var mkdirsSync = _mkdirs.mkdirsSync;

var _symlinkPaths = __webpack_require__(6918);

var symlinkPaths = _symlinkPaths.symlinkPaths;
var symlinkPathsSync = _symlinkPaths.symlinkPathsSync;

var _symlinkType = __webpack_require__(3249);

var symlinkType = _symlinkType.symlinkType;
var symlinkTypeSync = _symlinkType.symlinkTypeSync;

var pathExists = (__webpack_require__(9109).pathExists);

var _require = __webpack_require__(1577),
    areIdentical = _require.areIdentical;

function createSymlink(srcpath, dstpath, type, callback) {
  callback = typeof type === 'function' ? type : callback;
  type = typeof type === 'function' ? false : type;
  fs.lstat(dstpath, function (err, stats) {
    if (!err && stats.isSymbolicLink()) {
      Promise.all([fs.stat(srcpath), fs.stat(dstpath)]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            srcStat = _ref2[0],
            dstStat = _ref2[1];

        if (areIdentical(srcStat, dstStat)) return callback(null);

        _createSymlink(srcpath, dstpath, type, callback);
      });
    } else _createSymlink(srcpath, dstpath, type, callback);
  });
}

function _createSymlink(srcpath, dstpath, type, callback) {
  symlinkPaths(srcpath, dstpath, function (err, relative) {
    if (err) return callback(err);
    srcpath = relative.toDst;
    symlinkType(relative.toCwd, type, function (err, type) {
      if (err) return callback(err);
      var dir = path.dirname(dstpath);
      pathExists(dir, function (err, dirExists) {
        if (err) return callback(err);
        if (dirExists) return fs.symlink(srcpath, dstpath, type, callback);
        mkdirs(dir, function (err) {
          if (err) return callback(err);
          fs.symlink(srcpath, dstpath, type, callback);
        });
      });
    });
  });
}

function createSymlinkSync(srcpath, dstpath, type) {
  var stats;

  try {
    stats = fs.lstatSync(dstpath);
  } catch (_unused) {}

  if (stats && stats.isSymbolicLink()) {
    var srcStat = fs.statSync(srcpath);
    var dstStat = fs.statSync(dstpath);
    if (areIdentical(srcStat, dstStat)) return;
  }

  var relative = symlinkPathsSync(srcpath, dstpath);
  srcpath = relative.toDst;
  type = symlinkTypeSync(relative.toCwd, type);
  var dir = path.dirname(dstpath);
  var exists = fs.existsSync(dir);
  if (exists) return fs.symlinkSync(srcpath, dstpath, type);
  mkdirsSync(dir);
  return fs.symlinkSync(srcpath, dstpath, type);
}

module.exports = {
  createSymlink: u(createSymlink),
  createSymlinkSync: createSymlinkSync
};

/***/ }),

/***/ 9278:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

 // This is adapted from https://github.com/normalize/mz
// Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors

var u = (__webpack_require__(7385).fromCallback);

var fs = __webpack_require__(4527);

var api = ['access', 'appendFile', 'chmod', 'chown', 'close', 'copyFile', 'fchmod', 'fchown', 'fdatasync', 'fstat', 'fsync', 'ftruncate', 'futimes', 'lchmod', 'lchown', 'link', 'lstat', 'mkdir', 'mkdtemp', 'open', 'opendir', 'readdir', 'readFile', 'readlink', 'realpath', 'rename', 'rm', 'rmdir', 'stat', 'symlink', 'truncate', 'unlink', 'utimes', 'writeFile'].filter(function (key) {
  // Some commands are not available on some systems. Ex:
  // fs.opendir was added in Node.js v12.12.0
  // fs.rm was added in Node.js v14.14.0
  // fs.lchown is not available on at least some Linux
  return typeof fs[key] === 'function';
}); // Export cloned fs:

Object.assign(exports, fs); // Universalify async methods:

api.forEach(function (method) {
  exports[method] = u(fs[method]);
});
exports.realpath.native = u(fs.realpath["native"]); // We differ from mz/fs in that we still ship the old, broken, fs.exists()
// since we are a drop-in replacement for the native module

exports.exists = function (filename, callback) {
  if (typeof callback === 'function') {
    return fs.exists(filename, callback);
  }

  return new Promise(function (resolve) {
    return fs.exists(filename, resolve);
  });
}; // fs.read(), fs.write(), & fs.writev() need special treatment due to multiple callback args


exports.read = function (fd, buffer, offset, length, position, callback) {
  if (typeof callback === 'function') {
    return fs.read(fd, buffer, offset, length, position, callback);
  }

  return new Promise(function (resolve, reject) {
    fs.read(fd, buffer, offset, length, position, function (err, bytesRead, buffer) {
      if (err) return reject(err);
      resolve({
        bytesRead: bytesRead,
        buffer: buffer
      });
    });
  });
}; // Function signature can be
// fs.write(fd, buffer[, offset[, length[, position]]], callback)
// OR
// fs.write(fd, string[, position[, encoding]], callback)
// We need to handle both cases, so we use ...args


exports.write = function (fd, buffer) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  if (typeof args[args.length - 1] === 'function') {
    return fs.write.apply(fs, [fd, buffer].concat(args));
  }

  return new Promise(function (resolve, reject) {
    fs.write.apply(fs, [fd, buffer].concat(args, [function (err, bytesWritten, buffer) {
      if (err) return reject(err);
      resolve({
        bytesWritten: bytesWritten,
        buffer: buffer
      });
    }]));
  });
}; // fs.writev only available in Node v12.9.0+


if (typeof fs.writev === 'function') {
  // Function signature is
  // s.writev(fd, buffers[, position], callback)
  // We need to handle the optional arg, so we use ...args
  exports.writev = function (fd, buffers) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    if (typeof args[args.length - 1] === 'function') {
      return fs.writev.apply(fs, [fd, buffers].concat(args));
    }

    return new Promise(function (resolve, reject) {
      fs.writev.apply(fs, [fd, buffers].concat(args, [function (err, bytesWritten, buffers) {
        if (err) return reject(err);
        resolve({
          bytesWritten: bytesWritten,
          buffers: buffers
        });
      }]));
    });
  };
}

/***/ }),

/***/ 5064:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _objectSpread = (__webpack_require__(1109)["default"]);

module.exports = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, __webpack_require__(9278)), __webpack_require__(6493)), __webpack_require__(5470)), __webpack_require__(1032)), __webpack_require__(7951)), __webpack_require__(6206)), __webpack_require__(5027)), __webpack_require__(6599)), __webpack_require__(9614)), __webpack_require__(3937)), __webpack_require__(9109)), __webpack_require__(177));

/***/ }),

/***/ 6206:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var u = (__webpack_require__(7385).fromPromise);

var jsonFile = __webpack_require__(1347);

jsonFile.outputJson = u(__webpack_require__(3419));
jsonFile.outputJsonSync = __webpack_require__(1803); // aliases

jsonFile.outputJSON = jsonFile.outputJson;
jsonFile.outputJSONSync = jsonFile.outputJsonSync;
jsonFile.writeJSON = jsonFile.writeJson;
jsonFile.writeJSONSync = jsonFile.writeJsonSync;
jsonFile.readJSON = jsonFile.readJson;
jsonFile.readJSONSync = jsonFile.readJsonSync;
module.exports = jsonFile;

/***/ }),

/***/ 1347:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var jsonFile = __webpack_require__(5641);

module.exports = {
  // jsonfile exports
  readJson: jsonFile.readFile,
  readJsonSync: jsonFile.readFileSync,
  writeJson: jsonFile.writeFile,
  writeJsonSync: jsonFile.writeFileSync
};

/***/ }),

/***/ 1803:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _require = __webpack_require__(9309),
    stringify = _require.stringify;

var _require2 = __webpack_require__(3937),
    outputFileSync = _require2.outputFileSync;

function outputJsonSync(file, data, options) {
  var str = stringify(data, options);
  outputFileSync(file, str, options);
}

module.exports = outputJsonSync;

/***/ }),

/***/ 3419:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _regeneratorRuntime = __webpack_require__(7757);

var _asyncToGenerator = (__webpack_require__(8926)["default"]);

var _require = __webpack_require__(9309),
    stringify = _require.stringify;

var _require2 = __webpack_require__(3937),
    outputFile = _require2.outputFile;

function outputJson(_x, _x2) {
  return _outputJson.apply(this, arguments);
}

function _outputJson() {
  _outputJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file, data) {
    var options,
        str,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            str = stringify(data, options);
            _context.next = 4;
            return outputFile(file, str, options);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _outputJson.apply(this, arguments);
}

module.exports = outputJson;

/***/ }),

/***/ 5027:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var u = (__webpack_require__(7385).fromPromise);

var _require = __webpack_require__(7368),
    _makeDir = _require.makeDir,
    makeDirSync = _require.makeDirSync;

var makeDir = u(_makeDir);
module.exports = {
  mkdirs: makeDir,
  mkdirsSync: makeDirSync,
  // alias
  mkdirp: makeDir,
  mkdirpSync: makeDirSync,
  ensureDir: makeDir,
  ensureDirSync: makeDirSync
};

/***/ }),

/***/ 7368:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _regeneratorRuntime = __webpack_require__(7757);

var _asyncToGenerator = (__webpack_require__(8926)["default"]);

var _objectSpread = (__webpack_require__(1109)["default"]);

var fs = __webpack_require__(9278);

var _require = __webpack_require__(2288),
    checkPath = _require.checkPath;

var getMode = function getMode(options) {
  var defaults = {
    mode: 511
  };
  if (typeof options === 'number') return options;
  return _objectSpread(_objectSpread({}, defaults), options).mode;
};

module.exports.makeDir = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dir, options) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            checkPath(dir);
            return _context.abrupt("return", fs.mkdir(dir, {
              mode: getMode(options),
              recursive: true
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

module.exports.makeDirSync = function (dir, options) {
  checkPath(dir);
  return fs.mkdirSync(dir, {
    mode: getMode(options),
    recursive: true
  });
};

/***/ }),

/***/ 2288:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Adapted from https://github.com/sindresorhus/make-dir
// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


var path = __webpack_require__(1017); // https://github.com/nodejs/node/issues/8987
// https://github.com/libuv/libuv/pull/1088


module.exports.checkPath = function checkPath(pth) {
  if (process.platform === 'win32') {
    var pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path.parse(pth).root, ''));

    if (pathHasInvalidWinCharacters) {
      var error = new Error("Path contains invalid characters: ".concat(pth));
      error.code = 'EINVAL';
      throw error;
    }
  }
};

/***/ }),

/***/ 6599:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = {
  moveSync: __webpack_require__(1471)
};

/***/ }),

/***/ 1471:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var fs = __webpack_require__(4527);

var path = __webpack_require__(1017);

var copySync = (__webpack_require__(6493).copySync);

var removeSync = (__webpack_require__(177).removeSync);

var mkdirpSync = (__webpack_require__(5027).mkdirpSync);

var stat = __webpack_require__(1577);

function moveSync(src, dest, opts) {
  opts = opts || {};
  var overwrite = opts.overwrite || opts.clobber || false;

  var _stat$checkPathsSync = stat.checkPathsSync(src, dest, 'move', opts),
      srcStat = _stat$checkPathsSync.srcStat,
      _stat$checkPathsSync$ = _stat$checkPathsSync.isChangingCase,
      isChangingCase = _stat$checkPathsSync$ === void 0 ? false : _stat$checkPathsSync$;

  stat.checkParentPathsSync(src, srcStat, dest, 'move');
  if (!isParentRoot(dest)) mkdirpSync(path.dirname(dest));
  return doRename(src, dest, overwrite, isChangingCase);
}

function isParentRoot(dest) {
  var parent = path.dirname(dest);
  var parsedPath = path.parse(parent);
  return parsedPath.root === parent;
}

function doRename(src, dest, overwrite, isChangingCase) {
  if (isChangingCase) return rename(src, dest, overwrite);

  if (overwrite) {
    removeSync(dest);
    return rename(src, dest, overwrite);
  }

  if (fs.existsSync(dest)) throw new Error('dest already exists.');
  return rename(src, dest, overwrite);
}

function rename(src, dest, overwrite) {
  try {
    fs.renameSync(src, dest);
  } catch (err) {
    if (err.code !== 'EXDEV') throw err;
    return moveAcrossDevice(src, dest, overwrite);
  }
}

function moveAcrossDevice(src, dest, overwrite) {
  var opts = {
    overwrite: overwrite,
    errorOnExist: true
  };
  copySync(src, dest, opts);
  return removeSync(src);
}

module.exports = moveSync;

/***/ }),

/***/ 9614:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var u = (__webpack_require__(7385).fromCallback);

module.exports = {
  move: u(__webpack_require__(8417))
};

/***/ }),

/***/ 8417:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var fs = __webpack_require__(4527);

var path = __webpack_require__(1017);

var copy = (__webpack_require__(5470).copy);

var remove = (__webpack_require__(177).remove);

var mkdirp = (__webpack_require__(5027).mkdirp);

var pathExists = (__webpack_require__(9109).pathExists);

var stat = __webpack_require__(1577);

function move(src, dest, opts, cb) {
  if (typeof opts === 'function') {
    cb = opts;
    opts = {};
  }

  var overwrite = opts.overwrite || opts.clobber || false;
  stat.checkPaths(src, dest, 'move', opts, function (err, stats) {
    if (err) return cb(err);
    var srcStat = stats.srcStat,
        _stats$isChangingCase = stats.isChangingCase,
        isChangingCase = _stats$isChangingCase === void 0 ? false : _stats$isChangingCase;
    stat.checkParentPaths(src, srcStat, dest, 'move', function (err) {
      if (err) return cb(err);
      if (isParentRoot(dest)) return doRename(src, dest, overwrite, isChangingCase, cb);
      mkdirp(path.dirname(dest), function (err) {
        if (err) return cb(err);
        return doRename(src, dest, overwrite, isChangingCase, cb);
      });
    });
  });
}

function isParentRoot(dest) {
  var parent = path.dirname(dest);
  var parsedPath = path.parse(parent);
  return parsedPath.root === parent;
}

function doRename(src, dest, overwrite, isChangingCase, cb) {
  if (isChangingCase) return rename(src, dest, overwrite, cb);

  if (overwrite) {
    return remove(dest, function (err) {
      if (err) return cb(err);
      return rename(src, dest, overwrite, cb);
    });
  }

  pathExists(dest, function (err, destExists) {
    if (err) return cb(err);
    if (destExists) return cb(new Error('dest already exists.'));
    return rename(src, dest, overwrite, cb);
  });
}

function rename(src, dest, overwrite, cb) {
  fs.rename(src, dest, function (err) {
    if (!err) return cb();
    if (err.code !== 'EXDEV') return cb(err);
    return moveAcrossDevice(src, dest, overwrite, cb);
  });
}

function moveAcrossDevice(src, dest, overwrite, cb) {
  var opts = {
    overwrite: overwrite,
    errorOnExist: true
  };
  copy(src, dest, opts, function (err) {
    if (err) return cb(err);
    return remove(src, cb);
  });
}

module.exports = move;

/***/ }),

/***/ 3937:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var u = (__webpack_require__(7385).fromCallback);

var fs = __webpack_require__(4527);

var path = __webpack_require__(1017);

var mkdir = __webpack_require__(5027);

var pathExists = (__webpack_require__(9109).pathExists);

function outputFile(file, data, encoding, callback) {
  if (typeof encoding === 'function') {
    callback = encoding;
    encoding = 'utf8';
  }

  var dir = path.dirname(file);
  pathExists(dir, function (err, itDoes) {
    if (err) return callback(err);
    if (itDoes) return fs.writeFile(file, data, encoding, callback);
    mkdir.mkdirs(dir, function (err) {
      if (err) return callback(err);
      fs.writeFile(file, data, encoding, callback);
    });
  });
}

function outputFileSync(file) {
  var dir = path.dirname(file);

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (fs.existsSync(dir)) {
    return fs.writeFileSync.apply(fs, [file].concat(args));
  }

  mkdir.mkdirsSync(dir);
  fs.writeFileSync.apply(fs, [file].concat(args));
}

module.exports = {
  outputFile: u(outputFile),
  outputFileSync: outputFileSync
};

/***/ }),

/***/ 9109:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var u = (__webpack_require__(7385).fromPromise);

var fs = __webpack_require__(9278);

function pathExists(path) {
  return fs.access(path).then(function () {
    return true;
  })["catch"](function () {
    return false;
  });
}

module.exports = {
  pathExists: u(pathExists),
  pathExistsSync: fs.existsSync
};

/***/ }),

/***/ 177:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var fs = __webpack_require__(4527);

var u = (__webpack_require__(7385).fromCallback);

var rimraf = __webpack_require__(2059);

function remove(path, callback) {
  // Node 14.14.0+
  if (fs.rm) return fs.rm(path, {
    recursive: true,
    force: true
  }, callback);
  rimraf(path, callback);
}

function removeSync(path) {
  // Node 14.14.0+
  if (fs.rmSync) return fs.rmSync(path, {
    recursive: true,
    force: true
  });
  rimraf.sync(path);
}

module.exports = {
  remove: u(remove),
  removeSync: removeSync
};

/***/ }),

/***/ 2059:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var fs = __webpack_require__(4527);

var path = __webpack_require__(1017);

var assert = __webpack_require__(9491);

var isWindows = process.platform === 'win32';

function defaults(options) {
  var methods = ['unlink', 'chmod', 'stat', 'lstat', 'rmdir', 'readdir'];
  methods.forEach(function (m) {
    options[m] = options[m] || fs[m];
    m = m + 'Sync';
    options[m] = options[m] || fs[m];
  });
  options.maxBusyTries = options.maxBusyTries || 3;
}

function rimraf(p, options, cb) {
  var busyTries = 0;

  if (typeof options === 'function') {
    cb = options;
    options = {};
  }

  assert(p, 'rimraf: missing path');
  assert.strictEqual(typeof p, 'string', 'rimraf: path should be a string');
  assert.strictEqual(typeof cb, 'function', 'rimraf: callback function required');
  assert(options, 'rimraf: invalid options argument provided');
  assert.strictEqual(typeof options, 'object', 'rimraf: options should be object');
  defaults(options);
  rimraf_(p, options, function CB(er) {
    if (er) {
      if ((er.code === 'EBUSY' || er.code === 'ENOTEMPTY' || er.code === 'EPERM') && busyTries < options.maxBusyTries) {
        busyTries++;
        var time = busyTries * 100; // try again, with the same exact callback as this one.

        return setTimeout(function () {
          return rimraf_(p, options, CB);
        }, time);
      } // already gone


      if (er.code === 'ENOENT') er = null;
    }

    cb(er);
  });
} // Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.


function rimraf_(p, options, cb) {
  assert(p);
  assert(options);
  assert(typeof cb === 'function'); // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.

  options.lstat(p, function (er, st) {
    if (er && er.code === 'ENOENT') {
      return cb(null);
    } // Windows can EPERM on stat.  Life is suffering.


    if (er && er.code === 'EPERM' && isWindows) {
      return fixWinEPERM(p, options, er, cb);
    }

    if (st && st.isDirectory()) {
      return rmdir(p, options, er, cb);
    }

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === 'ENOENT') {
          return cb(null);
        }

        if (er.code === 'EPERM') {
          return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);
        }

        if (er.code === 'EISDIR') {
          return rmdir(p, options, er, cb);
        }
      }

      return cb(er);
    });
  });
}

function fixWinEPERM(p, options, er, cb) {
  assert(p);
  assert(options);
  assert(typeof cb === 'function');
  options.chmod(p, 438, function (er2) {
    if (er2) {
      cb(er2.code === 'ENOENT' ? null : er);
    } else {
      options.stat(p, function (er3, stats) {
        if (er3) {
          cb(er3.code === 'ENOENT' ? null : er);
        } else if (stats.isDirectory()) {
          rmdir(p, options, er, cb);
        } else {
          options.unlink(p, cb);
        }
      });
    }
  });
}

function fixWinEPERMSync(p, options, er) {
  var stats;
  assert(p);
  assert(options);

  try {
    options.chmodSync(p, 438);
  } catch (er2) {
    if (er2.code === 'ENOENT') {
      return;
    } else {
      throw er;
    }
  }

  try {
    stats = options.statSync(p);
  } catch (er3) {
    if (er3.code === 'ENOENT') {
      return;
    } else {
      throw er;
    }
  }

  if (stats.isDirectory()) {
    rmdirSync(p, options, er);
  } else {
    options.unlinkSync(p);
  }
}

function rmdir(p, options, originalEr, cb) {
  assert(p);
  assert(options);
  assert(typeof cb === 'function'); // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.

  options.rmdir(p, function (er) {
    if (er && (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')) {
      rmkids(p, options, cb);
    } else if (er && er.code === 'ENOTDIR') {
      cb(originalEr);
    } else {
      cb(er);
    }
  });
}

function rmkids(p, options, cb) {
  assert(p);
  assert(options);
  assert(typeof cb === 'function');
  options.readdir(p, function (er, files) {
    if (er) return cb(er);
    var n = files.length;
    var errState;
    if (n === 0) return options.rmdir(p, cb);
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState) {
          return;
        }

        if (er) return cb(errState = er);

        if (--n === 0) {
          options.rmdir(p, cb);
        }
      });
    });
  });
} // this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.


function rimrafSync(p, options) {
  var st;
  options = options || {};
  defaults(options);
  assert(p, 'rimraf: missing path');
  assert.strictEqual(typeof p, 'string', 'rimraf: path should be a string');
  assert(options, 'rimraf: missing options');
  assert.strictEqual(typeof options, 'object', 'rimraf: options should be object');

  try {
    st = options.lstatSync(p);
  } catch (er) {
    if (er.code === 'ENOENT') {
      return;
    } // Windows can EPERM on stat.  Life is suffering.


    if (er.code === 'EPERM' && isWindows) {
      fixWinEPERMSync(p, options, er);
    }
  }

  try {
    // sunos lets the root user unlink directories, which is... weird.
    if (st && st.isDirectory()) {
      rmdirSync(p, options, null);
    } else {
      options.unlinkSync(p);
    }
  } catch (er) {
    if (er.code === 'ENOENT') {
      return;
    } else if (er.code === 'EPERM') {
      return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
    } else if (er.code !== 'EISDIR') {
      throw er;
    }

    rmdirSync(p, options, er);
  }
}

function rmdirSync(p, options, originalEr) {
  assert(p);
  assert(options);

  try {
    options.rmdirSync(p);
  } catch (er) {
    if (er.code === 'ENOTDIR') {
      throw originalEr;
    } else if (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM') {
      rmkidsSync(p, options);
    } else if (er.code !== 'ENOENT') {
      throw er;
    }
  }
}

function rmkidsSync(p, options) {
  assert(p);
  assert(options);
  options.readdirSync(p).forEach(function (f) {
    return rimrafSync(path.join(p, f), options);
  });

  if (isWindows) {
    // We only end up here once we got ENOTEMPTY at least once, and
    // at this point, we are guaranteed to have removed all the kids.
    // So, we know that it won't be ENOENT or ENOTDIR or anything else.
    // try really hard to delete stuff on windows, because it has a
    // PROFOUNDLY annoying habit of not closing handles promptly when
    // files are deleted, resulting in spurious ENOTEMPTY errors.
    var startTime = Date.now();

    do {
      try {
        var ret = options.rmdirSync(p, options);
        return ret;
      } catch (_unused) {}
    } while (Date.now() - startTime < 500); // give up after 500ms

  } else {
    var _ret = options.rmdirSync(p, options);

    return _ret;
  }
}

module.exports = rimraf;
rimraf.sync = rimrafSync;

/***/ }),

/***/ 1577:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _slicedToArray = (__webpack_require__(3038)["default"]);

var fs = __webpack_require__(9278);

var path = __webpack_require__(1017);

var util = __webpack_require__(3837);

function getStats(src, dest, opts) {
  var statFunc = opts.dereference ? function (file) {
    return fs.stat(file, {
      bigint: true
    });
  } : function (file) {
    return fs.lstat(file, {
      bigint: true
    });
  };
  return Promise.all([statFunc(src), statFunc(dest)["catch"](function (err) {
    if (err.code === 'ENOENT') return null;
    throw err;
  })]).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        srcStat = _ref2[0],
        destStat = _ref2[1];

    return {
      srcStat: srcStat,
      destStat: destStat
    };
  });
}

function getStatsSync(src, dest, opts) {
  var destStat;
  var statFunc = opts.dereference ? function (file) {
    return fs.statSync(file, {
      bigint: true
    });
  } : function (file) {
    return fs.lstatSync(file, {
      bigint: true
    });
  };
  var srcStat = statFunc(src);

  try {
    destStat = statFunc(dest);
  } catch (err) {
    if (err.code === 'ENOENT') return {
      srcStat: srcStat,
      destStat: null
    };
    throw err;
  }

  return {
    srcStat: srcStat,
    destStat: destStat
  };
}

function checkPaths(src, dest, funcName, opts, cb) {
  util.callbackify(getStats)(src, dest, opts, function (err, stats) {
    if (err) return cb(err);
    var srcStat = stats.srcStat,
        destStat = stats.destStat;

    if (destStat) {
      if (areIdentical(srcStat, destStat)) {
        var srcBaseName = path.basename(src);
        var destBaseName = path.basename(dest);

        if (funcName === 'move' && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
          return cb(null, {
            srcStat: srcStat,
            destStat: destStat,
            isChangingCase: true
          });
        }

        return cb(new Error('Source and destination must not be the same.'));
      }

      if (srcStat.isDirectory() && !destStat.isDirectory()) {
        return cb(new Error("Cannot overwrite non-directory '".concat(dest, "' with directory '").concat(src, "'.")));
      }

      if (!srcStat.isDirectory() && destStat.isDirectory()) {
        return cb(new Error("Cannot overwrite directory '".concat(dest, "' with non-directory '").concat(src, "'.")));
      }
    }

    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
      return cb(new Error(errMsg(src, dest, funcName)));
    }

    return cb(null, {
      srcStat: srcStat,
      destStat: destStat
    });
  });
}

function checkPathsSync(src, dest, funcName, opts) {
  var _getStatsSync = getStatsSync(src, dest, opts),
      srcStat = _getStatsSync.srcStat,
      destStat = _getStatsSync.destStat;

  if (destStat) {
    if (areIdentical(srcStat, destStat)) {
      var srcBaseName = path.basename(src);
      var destBaseName = path.basename(dest);

      if (funcName === 'move' && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
        return {
          srcStat: srcStat,
          destStat: destStat,
          isChangingCase: true
        };
      }

      throw new Error('Source and destination must not be the same.');
    }

    if (srcStat.isDirectory() && !destStat.isDirectory()) {
      throw new Error("Cannot overwrite non-directory '".concat(dest, "' with directory '").concat(src, "'."));
    }

    if (!srcStat.isDirectory() && destStat.isDirectory()) {
      throw new Error("Cannot overwrite directory '".concat(dest, "' with non-directory '").concat(src, "'."));
    }
  }

  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
    throw new Error(errMsg(src, dest, funcName));
  }

  return {
    srcStat: srcStat,
    destStat: destStat
  };
} // recursively check if dest parent is a subdirectory of src.
// It works for all file types including symlinks since it
// checks the src and dest inodes. It starts from the deepest
// parent and stops once it reaches the src parent or the root path.


function checkParentPaths(src, srcStat, dest, funcName, cb) {
  var srcParent = path.resolve(path.dirname(src));
  var destParent = path.resolve(path.dirname(dest));
  if (destParent === srcParent || destParent === path.parse(destParent).root) return cb();
  fs.stat(destParent, {
    bigint: true
  }, function (err, destStat) {
    if (err) {
      if (err.code === 'ENOENT') return cb();
      return cb(err);
    }

    if (areIdentical(srcStat, destStat)) {
      return cb(new Error(errMsg(src, dest, funcName)));
    }

    return checkParentPaths(src, srcStat, destParent, funcName, cb);
  });
}

function checkParentPathsSync(src, srcStat, dest, funcName) {
  var srcParent = path.resolve(path.dirname(src));
  var destParent = path.resolve(path.dirname(dest));
  if (destParent === srcParent || destParent === path.parse(destParent).root) return;
  var destStat;

  try {
    destStat = fs.statSync(destParent, {
      bigint: true
    });
  } catch (err) {
    if (err.code === 'ENOENT') return;
    throw err;
  }

  if (areIdentical(srcStat, destStat)) {
    throw new Error(errMsg(src, dest, funcName));
  }

  return checkParentPathsSync(src, srcStat, destParent, funcName);
}

function areIdentical(srcStat, destStat) {
  return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev;
} // return true if dest is a subdir of src, otherwise false.
// It only checks the path strings.


function isSrcSubdir(src, dest) {
  var srcArr = path.resolve(src).split(path.sep).filter(function (i) {
    return i;
  });
  var destArr = path.resolve(dest).split(path.sep).filter(function (i) {
    return i;
  });
  return srcArr.reduce(function (acc, cur, i) {
    return acc && destArr[i] === cur;
  }, true);
}

function errMsg(src, dest, funcName) {
  return "Cannot ".concat(funcName, " '").concat(src, "' to a subdirectory of itself, '").concat(dest, "'.");
}

module.exports = {
  checkPaths: checkPaths,
  checkPathsSync: checkPathsSync,
  checkParentPaths: checkParentPaths,
  checkParentPathsSync: checkParentPathsSync,
  isSrcSubdir: isSrcSubdir,
  areIdentical: areIdentical
};

/***/ }),

/***/ 2818:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var fs = __webpack_require__(4527);

function utimesMillis(path, atime, mtime, callback) {
  // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)
  fs.open(path, 'r+', function (err, fd) {
    if (err) return callback(err);
    fs.futimes(fd, atime, mtime, function (futimesErr) {
      fs.close(fd, function (closeErr) {
        if (callback) callback(futimesErr || closeErr);
      });
    });
  });
}

function utimesMillisSync(path, atime, mtime) {
  var fd = fs.openSync(path, 'r+');
  fs.futimesSync(fd, atime, mtime);
  return fs.closeSync(fd);
}

module.exports = {
  utimesMillis: utimesMillis,
  utimesMillisSync: utimesMillisSync
};

/***/ }),

/***/ 4144:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var regex = __webpack_require__(6941);

module.exports = BananaSlug;
var own = Object.hasOwnProperty;

function BananaSlug() {
  var self = this;
  if (!(self instanceof BananaSlug)) return new BananaSlug();
  self.reset();
}
/**
 * Generate a unique slug.
 * @param  {string} value String of text to slugify
 * @param  {boolean} [false] Keep the current case, otherwise make all lowercase
 * @return {string}       A unique slug string
 */


BananaSlug.prototype.slug = function (value, maintainCase) {
  var self = this;
  var slug = slugger(value, maintainCase === true);
  var originalSlug = slug;

  while (own.call(self.occurrences, slug)) {
    self.occurrences[originalSlug]++;
    slug = originalSlug + '-' + self.occurrences[originalSlug];
  }

  self.occurrences[slug] = 0;
  return slug;
};
/**
 * Reset - Forget all previous slugs
 * @return void
 */


BananaSlug.prototype.reset = function () {
  this.occurrences = Object.create(null);
};

function slugger(string, maintainCase) {
  if (typeof string !== 'string') return '';
  if (!maintainCase) string = string.toLowerCase();
  return string.replace(regex, '').replace(/ /g, '-');
}

BananaSlug.slug = slugger;

/***/ }),

/***/ 6941:
/***/ ((module) => {

// This module is generated by `script/`.

/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */
module.exports = /[\0-\x1F!-,\.\/:-@\[-\^`\{-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0378\u0379\u037E\u0380-\u0385\u0387\u038B\u038D\u03A2\u03F6\u0482\u0530\u0557\u0558\u055A-\u055F\u0589-\u0590\u05BE\u05C0\u05C3\u05C6\u05C8-\u05CF\u05EB-\u05EE\u05F3-\u060F\u061B-\u061F\u066A-\u066D\u06D4\u06DD\u06DE\u06E9\u06FD\u06FE\u0700-\u070F\u074B\u074C\u07B2-\u07BF\u07F6-\u07F9\u07FB\u07FC\u07FE\u07FF\u082E-\u083F\u085C-\u085F\u086B-\u089F\u08B5\u08BE-\u08D2\u08E2\u0964\u0965\u0970\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09F2-\u09FB\u09FD\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF0-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B70\u0B72-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BF0-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C7F\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D04\u0D0D\u0D11\u0D45\u0D49\u0D4F-\u0D53\u0D58-\u0D5E\u0D64\u0D65\u0D70-\u0D79\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF4-\u0E00\u0E3B-\u0E3F\u0E4F\u0E5A-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F01-\u0F17\u0F1A-\u0F1F\u0F2A-\u0F34\u0F36\u0F38\u0F3A-\u0F3D\u0F48\u0F6D-\u0F70\u0F85\u0F98\u0FBD-\u0FC5\u0FC7-\u0FFF\u104A-\u104F\u109E\u109F\u10C6\u10C8-\u10CC\u10CE\u10CF\u10FB\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u1360-\u137F\u1390-\u139F\u13F6\u13F7\u13FE-\u1400\u166D\u166E\u1680\u169B-\u169F\u16EB-\u16ED\u16F9-\u16FF\u170D\u1715-\u171F\u1735-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17D4-\u17D6\u17D8-\u17DB\u17DE\u17DF\u17EA-\u180A\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u1945\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DA-\u19FF\u1A1C-\u1A1F\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1AA6\u1AA8-\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B5A-\u1B6A\u1B74-\u1B7F\u1BF4-\u1BFF\u1C38-\u1C3F\u1C4A-\u1C4C\u1C7E\u1C7F\u1C89-\u1C8F\u1CBB\u1CBC\u1CC0-\u1CCF\u1CD3\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FBD\u1FBF-\u1FC1\u1FC5\u1FCD-\u1FCF\u1FD4\u1FD5\u1FDC-\u1FDF\u1FED-\u1FF1\u1FF5\u1FFD-\u203E\u2041-\u2053\u2055-\u2070\u2072-\u207E\u2080-\u208F\u209D-\u20CF\u20F1-\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F-\u215F\u2189-\u24B5\u24EA-\u2BFF\u2C2F\u2C5F\u2CE5-\u2CEA\u2CF4-\u2CFF\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D70-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E00-\u2E2E\u2E30-\u3004\u3008-\u3020\u3030\u3036\u3037\u303D-\u3040\u3097\u3098\u309B\u309C\u30A0\u30FB\u3100-\u3104\u3130\u318F-\u319F\u31BB-\u31EF\u3200-\u33FF\u4DB6-\u4DFF\u9FF0-\u9FFF\uA48D-\uA4CF\uA4FE\uA4FF\uA60D-\uA60F\uA62C-\uA63F\uA673\uA67E\uA6F2-\uA716\uA720\uA721\uA789\uA78A\uA7C0\uA7C1\uA7C7-\uA7F6\uA828-\uA83F\uA874-\uA87F\uA8C6-\uA8CF\uA8DA-\uA8DF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA954-\uA95F\uA97D-\uA97F\uA9C1-\uA9CE\uA9DA-\uA9DF\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A-\uAA5F\uAA77-\uAA79\uAAC3-\uAADA\uAADE\uAADF\uAAF0\uAAF1\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB5B\uAB68-\uAB6F\uABEB\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uE000-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB29\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBB2-\uFBD2\uFD3E-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFC-\uFDFF\uFE10-\uFE1F\uFE30-\uFE32\uFE35-\uFE4C\uFE50-\uFE6F\uFE75\uFEFD-\uFF0F\uFF1A-\uFF20\uFF3B-\uFF3E\uFF40\uFF5B-\uFF65\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFFF]|\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDD3F\uDD75-\uDDFC\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEE1-\uDEFF\uDF20-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDF9F\uDFC4-\uDFC7\uDFD0\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56-\uDC5F\uDC77-\uDC7F\uDC9F-\uDCDF\uDCF3\uDCF6-\uDCFF\uDD16-\uDD1F\uDD3A-\uDD7F\uDDB8-\uDDBD\uDDC0-\uDDFF\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE40-\uDE5F\uDE7D-\uDE7F\uDE9D-\uDEBF\uDEC8\uDEE7-\uDEFF\uDF36-\uDF3F\uDF56-\uDF5F\uDF73-\uDF7F\uDF92-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCFF\uDD28-\uDD2F\uDD3A-\uDEFF\uDF1D-\uDF26\uDF28-\uDF2F\uDF51-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC47-\uDC65\uDC70-\uDC7E\uDCBB-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD40-\uDD43\uDD47-\uDD4F\uDD74\uDD75\uDD77-\uDD7F\uDDC5-\uDDC8\uDDCD-\uDDCF\uDDDB\uDDDD-\uDDFF\uDE12\uDE38-\uDE3D\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEA9-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC4B-\uDC4F\uDC5A-\uDC5D\uDC60-\uDC7F\uDCC6\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDC1-\uDDD7\uDDDE-\uDDFF\uDE41-\uDE43\uDE45-\uDE4F\uDE5A-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF3A-\uDFFF]|\uD806[\uDC3B-\uDC9F\uDCEA-\uDCFE\uDD00-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE2\uDDE5-\uDDFF\uDE3F-\uDE46\uDE48-\uDE4F\uDE9A-\uDE9C\uDE9E-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC41-\uDC4F\uDC5A-\uDC71\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF7-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83D-\uD83F\uD87B-\uD87D\uD87F-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDECF\uDEEE\uDEEF\uDEF5-\uDEFF\uDF37-\uDF3F\uDF44-\uDF4F\uDF5A-\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE80-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE2\uDFE4-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A-\uDC9C\uDC9F-\uDFFF]|\uD834[\uDC00-\uDD64\uDD6A-\uDD6C\uDD73-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDE41\uDE45-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3\uDFCC\uDFCD]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD4F-\uDEBF\uDEFA-\uDFFF]|\uD83A[\uDCC5-\uDCCF\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDFFF]|\uD83C[\uDC00-\uDD2F\uDD4A-\uDD4F\uDD6A-\uDD6F\uDD8A-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]/g;

/***/ }),

/***/ 3992:
/***/ ((module) => {



module.exports = clone;

var getPrototypeOf = Object.getPrototypeOf || function (obj) {
  return obj.__proto__;
};

function clone(obj) {
  if (obj === null || typeof obj !== 'object') return obj;
  if (obj instanceof Object) var copy = {
    __proto__: getPrototypeOf(obj)
  };else var copy = Object.create(null);
  Object.getOwnPropertyNames(obj).forEach(function (key) {
    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
  });
  return copy;
}

/***/ }),

/***/ 4527:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fs = __webpack_require__(7147);

var polyfills = __webpack_require__(3594);

var legacy = __webpack_require__(6771);

var clone = __webpack_require__(3992);

var util = __webpack_require__(3837);
/* istanbul ignore next - node 0.x polyfill */


var gracefulQueue;
var previousSymbol;
/* istanbul ignore else - node 0.x polyfill */

if (typeof Symbol === 'function' && typeof Symbol["for"] === 'function') {
  gracefulQueue = Symbol["for"]('graceful-fs.queue'); // This is used in testing by future versions

  previousSymbol = Symbol["for"]('graceful-fs.previous');
} else {
  gracefulQueue = '___graceful-fs.queue';
  previousSymbol = '___graceful-fs.previous';
}

function noop() {}

function publishQueue(context, queue) {
  Object.defineProperty(context, gracefulQueue, {
    get: function get() {
      return queue;
    }
  });
}

var debug = noop;
if (util.debuglog) debug = util.debuglog('gfs4');else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) debug = function debug() {
  var m = util.format.apply(util, arguments);
  m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ');
  console.error(m);
}; // Once time initialization

if (!fs[gracefulQueue]) {
  // This queue can be shared by multiple loaded instances
  var queue = global[gracefulQueue] || [];
  publishQueue(fs, queue); // Patch fs.close/closeSync to shared queue version, because we need
  // to retry() whenever a close happens *anywhere* in the program.
  // This is essential when multiple graceful-fs instances are
  // in play at the same time.

  fs.close = function (fs$close) {
    function close(fd, cb) {
      return fs$close.call(fs, fd, function (err) {
        // This function uses the graceful-fs shared queue
        if (!err) {
          resetQueue();
        }

        if (typeof cb === 'function') cb.apply(this, arguments);
      });
    }

    Object.defineProperty(close, previousSymbol, {
      value: fs$close
    });
    return close;
  }(fs.close);

  fs.closeSync = function (fs$closeSync) {
    function closeSync(fd) {
      // This function uses the graceful-fs shared queue
      fs$closeSync.apply(fs, arguments);
      resetQueue();
    }

    Object.defineProperty(closeSync, previousSymbol, {
      value: fs$closeSync
    });
    return closeSync;
  }(fs.closeSync);

  if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
    process.on('exit', function () {
      debug(fs[gracefulQueue]);

      (__webpack_require__(9491).equal)(fs[gracefulQueue].length, 0);
    });
  }
}

if (!global[gracefulQueue]) {
  publishQueue(global, fs[gracefulQueue]);
}

module.exports = patch(clone(fs));

if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {
  module.exports = patch(fs);
  fs.__patched = true;
}

function patch(fs) {
  // Everything that references the open() function needs to be in here
  polyfills(fs);
  fs.gracefulify = patch;
  fs.createReadStream = createReadStream;
  fs.createWriteStream = createWriteStream;
  var fs$readFile = fs.readFile;
  fs.readFile = readFile;

  function readFile(path, options, cb) {
    if (typeof options === 'function') cb = options, options = null;
    return go$readFile(path, options, cb);

    function go$readFile(path, options, cb, startTime) {
      return fs$readFile(path, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$readFile, [path, options, cb], err, startTime || Date.now(), Date.now()]);else {
          if (typeof cb === 'function') cb.apply(this, arguments);
        }
      });
    }
  }

  var fs$writeFile = fs.writeFile;
  fs.writeFile = writeFile;

  function writeFile(path, data, options, cb) {
    if (typeof options === 'function') cb = options, options = null;
    return go$writeFile(path, data, options, cb);

    function go$writeFile(path, data, options, cb, startTime) {
      return fs$writeFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$writeFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()]);else {
          if (typeof cb === 'function') cb.apply(this, arguments);
        }
      });
    }
  }

  var fs$appendFile = fs.appendFile;
  if (fs$appendFile) fs.appendFile = appendFile;

  function appendFile(path, data, options, cb) {
    if (typeof options === 'function') cb = options, options = null;
    return go$appendFile(path, data, options, cb);

    function go$appendFile(path, data, options, cb, startTime) {
      return fs$appendFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$appendFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()]);else {
          if (typeof cb === 'function') cb.apply(this, arguments);
        }
      });
    }
  }

  var fs$copyFile = fs.copyFile;
  if (fs$copyFile) fs.copyFile = copyFile;

  function copyFile(src, dest, flags, cb) {
    if (typeof flags === 'function') {
      cb = flags;
      flags = 0;
    }

    return go$copyFile(src, dest, flags, cb);

    function go$copyFile(src, dest, flags, cb, startTime) {
      return fs$copyFile(src, dest, flags, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$copyFile, [src, dest, flags, cb], err, startTime || Date.now(), Date.now()]);else {
          if (typeof cb === 'function') cb.apply(this, arguments);
        }
      });
    }
  }

  var fs$readdir = fs.readdir;
  fs.readdir = readdir;

  function readdir(path, options, cb) {
    if (typeof options === 'function') cb = options, options = null;
    return go$readdir(path, options, cb);

    function go$readdir(path, options, cb, startTime) {
      return fs$readdir(path, options, function (err, files) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$readdir, [path, options, cb], err, startTime || Date.now(), Date.now()]);else {
          if (files && files.sort) files.sort();
          if (typeof cb === 'function') cb.call(this, err, files);
        }
      });
    }
  }

  if (process.version.substr(0, 4) === 'v0.8') {
    var legStreams = legacy(fs);
    ReadStream = legStreams.ReadStream;
    WriteStream = legStreams.WriteStream;
  }

  var fs$ReadStream = fs.ReadStream;

  if (fs$ReadStream) {
    ReadStream.prototype = Object.create(fs$ReadStream.prototype);
    ReadStream.prototype.open = ReadStream$open;
  }

  var fs$WriteStream = fs.WriteStream;

  if (fs$WriteStream) {
    WriteStream.prototype = Object.create(fs$WriteStream.prototype);
    WriteStream.prototype.open = WriteStream$open;
  }

  Object.defineProperty(fs, 'ReadStream', {
    get: function get() {
      return ReadStream;
    },
    set: function set(val) {
      ReadStream = val;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(fs, 'WriteStream', {
    get: function get() {
      return WriteStream;
    },
    set: function set(val) {
      WriteStream = val;
    },
    enumerable: true,
    configurable: true
  }); // legacy names

  var FileReadStream = ReadStream;
  Object.defineProperty(fs, 'FileReadStream', {
    get: function get() {
      return FileReadStream;
    },
    set: function set(val) {
      FileReadStream = val;
    },
    enumerable: true,
    configurable: true
  });
  var FileWriteStream = WriteStream;
  Object.defineProperty(fs, 'FileWriteStream', {
    get: function get() {
      return FileWriteStream;
    },
    set: function set(val) {
      FileWriteStream = val;
    },
    enumerable: true,
    configurable: true
  });

  function ReadStream(path, options) {
    if (this instanceof ReadStream) return fs$ReadStream.apply(this, arguments), this;else return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
  }

  function ReadStream$open() {
    var that = this;
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        if (that.autoClose) that.destroy();
        that.emit('error', err);
      } else {
        that.fd = fd;
        that.emit('open', fd);
        that.read();
      }
    });
  }

  function WriteStream(path, options) {
    if (this instanceof WriteStream) return fs$WriteStream.apply(this, arguments), this;else return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
  }

  function WriteStream$open() {
    var that = this;
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        that.destroy();
        that.emit('error', err);
      } else {
        that.fd = fd;
        that.emit('open', fd);
      }
    });
  }

  function createReadStream(path, options) {
    return new fs.ReadStream(path, options);
  }

  function createWriteStream(path, options) {
    return new fs.WriteStream(path, options);
  }

  var fs$open = fs.open;
  fs.open = open;

  function open(path, flags, mode, cb) {
    if (typeof mode === 'function') cb = mode, mode = null;
    return go$open(path, flags, mode, cb);

    function go$open(path, flags, mode, cb, startTime) {
      return fs$open(path, flags, mode, function (err, fd) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$open, [path, flags, mode, cb], err, startTime || Date.now(), Date.now()]);else {
          if (typeof cb === 'function') cb.apply(this, arguments);
        }
      });
    }
  }

  return fs;
}

function enqueue(elem) {
  debug('ENQUEUE', elem[0].name, elem[1]);
  fs[gracefulQueue].push(elem);
  retry();
} // keep track of the timeout between retry() calls


var retryTimer; // reset the startTime and lastTime to now
// this resets the start of the 60 second overall timeout as well as the
// delay between attempts so that we'll retry these jobs sooner

function resetQueue() {
  var now = Date.now();

  for (var i = 0; i < fs[gracefulQueue].length; ++i) {
    // entries that are only a length of 2 are from an older version, don't
    // bother modifying those since they'll be retried anyway.
    if (fs[gracefulQueue][i].length > 2) {
      fs[gracefulQueue][i][3] = now; // startTime

      fs[gracefulQueue][i][4] = now; // lastTime
    }
  } // call retry to make sure we're actively processing the queue


  retry();
}

function retry() {
  // clear the timer and remove it to help prevent unintended concurrency
  clearTimeout(retryTimer);
  retryTimer = undefined;
  if (fs[gracefulQueue].length === 0) return;
  var elem = fs[gracefulQueue].shift();
  var fn = elem[0];
  var args = elem[1]; // these items may be unset if they were added by an older graceful-fs

  var err = elem[2];
  var startTime = elem[3];
  var lastTime = elem[4]; // if we don't have a startTime we have no way of knowing if we've waited
  // long enough, so go ahead and retry this item now

  if (startTime === undefined) {
    debug('RETRY', fn.name, args);
    fn.apply(null, args);
  } else if (Date.now() - startTime >= 60000) {
    // it's been more than 60 seconds total, bail now
    debug('TIMEOUT', fn.name, args);
    var cb = args.pop();
    if (typeof cb === 'function') cb.call(null, err);
  } else {
    // the amount of time between the last attempt and right now
    var sinceAttempt = Date.now() - lastTime; // the amount of time between when we first tried, and when we last tried
    // rounded up to at least 1

    var sinceStart = Math.max(lastTime - startTime, 1); // backoff. wait longer than the total time we've been retrying, but only
    // up to a maximum of 100ms

    var desiredDelay = Math.min(sinceStart * 1.2, 100); // it's been long enough since the last retry, do it again

    if (sinceAttempt >= desiredDelay) {
      debug('RETRY', fn.name, args);
      fn.apply(null, args.concat([startTime]));
    } else {
      // if we can't do this job yet, push it to the end of the queue
      // and let the next iteration check again
      fs[gracefulQueue].push(elem);
    }
  } // schedule our next run if one isn't already scheduled


  if (retryTimer === undefined) {
    retryTimer = setTimeout(retry, 0);
  }
}

/***/ }),

/***/ 6771:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stream = (__webpack_require__(2781).Stream);

module.exports = legacy;

function legacy(fs) {
  return {
    ReadStream: ReadStream,
    WriteStream: WriteStream
  };

  function ReadStream(path, options) {
    if (!(this instanceof ReadStream)) return new ReadStream(path, options);
    Stream.call(this);
    var self = this;
    this.path = path;
    this.fd = null;
    this.readable = true;
    this.paused = false;
    this.flags = 'r';
    this.mode = 438;
    /*=0666*/

    this.bufferSize = 64 * 1024;
    options = options || {}; // Mixin options into this

    var keys = Object.keys(options);

    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.encoding) this.setEncoding(this.encoding);

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }

      if (this.end === undefined) {
        this.end = Infinity;
      } else if ('number' !== typeof this.end) {
        throw TypeError('end must be a Number');
      }

      if (this.start > this.end) {
        throw new Error('start must be <= end');
      }

      this.pos = this.start;
    }

    if (this.fd !== null) {
      process.nextTick(function () {
        self._read();
      });
      return;
    }

    fs.open(this.path, this.flags, this.mode, function (err, fd) {
      if (err) {
        self.emit('error', err);
        self.readable = false;
        return;
      }

      self.fd = fd;
      self.emit('open', fd);

      self._read();
    });
  }

  function WriteStream(path, options) {
    if (!(this instanceof WriteStream)) return new WriteStream(path, options);
    Stream.call(this);
    this.path = path;
    this.fd = null;
    this.writable = true;
    this.flags = 'w';
    this.encoding = 'binary';
    this.mode = 438;
    /*=0666*/

    this.bytesWritten = 0;
    options = options || {}; // Mixin options into this

    var keys = Object.keys(options);

    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }

      if (this.start < 0) {
        throw new Error('start must be >= zero');
      }

      this.pos = this.start;
    }

    this.busy = false;
    this._queue = [];

    if (this.fd === null) {
      this._open = fs.open;

      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);

      this.flush();
    }
  }
}

/***/ }),

/***/ 3594:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var constants = __webpack_require__(2057);

var origCwd = process.cwd;
var cwd = null;
var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;

process.cwd = function () {
  if (!cwd) cwd = origCwd.call(process);
  return cwd;
};

try {
  process.cwd();
} catch (er) {} // This check is needed until node.js 12 is required


if (typeof process.chdir === 'function') {
  var chdir = process.chdir;

  process.chdir = function (d) {
    cwd = null;
    chdir.call(process, d);
  };

  if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);
}

module.exports = patch;

function patch(fs) {
  // (re-)implement some things that are known busted or missing.
  // lchmod, broken prior to 0.6.2
  // back-port the fix here.
  if (constants.hasOwnProperty('O_SYMLINK') && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
    patchLchmod(fs);
  } // lutimes implementation, or no-op


  if (!fs.lutimes) {
    patchLutimes(fs);
  } // https://github.com/isaacs/node-graceful-fs/issues/4
  // Chown should not fail on einval or eperm if non-root.
  // It should not fail on enosys ever, as this just indicates
  // that a fs doesn't support the intended operation.


  fs.chown = chownFix(fs.chown);
  fs.fchown = chownFix(fs.fchown);
  fs.lchown = chownFix(fs.lchown);
  fs.chmod = chmodFix(fs.chmod);
  fs.fchmod = chmodFix(fs.fchmod);
  fs.lchmod = chmodFix(fs.lchmod);
  fs.chownSync = chownFixSync(fs.chownSync);
  fs.fchownSync = chownFixSync(fs.fchownSync);
  fs.lchownSync = chownFixSync(fs.lchownSync);
  fs.chmodSync = chmodFixSync(fs.chmodSync);
  fs.fchmodSync = chmodFixSync(fs.fchmodSync);
  fs.lchmodSync = chmodFixSync(fs.lchmodSync);
  fs.stat = statFix(fs.stat);
  fs.fstat = statFix(fs.fstat);
  fs.lstat = statFix(fs.lstat);
  fs.statSync = statFixSync(fs.statSync);
  fs.fstatSync = statFixSync(fs.fstatSync);
  fs.lstatSync = statFixSync(fs.lstatSync); // if lchmod/lchown do not exist, then make them no-ops

  if (!fs.lchmod) {
    fs.lchmod = function (path, mode, cb) {
      if (cb) process.nextTick(cb);
    };

    fs.lchmodSync = function () {};
  }

  if (!fs.lchown) {
    fs.lchown = function (path, uid, gid, cb) {
      if (cb) process.nextTick(cb);
    };

    fs.lchownSync = function () {};
  } // on Windows, A/V software can lock the directory, causing this
  // to fail with an EACCES or EPERM if the directory contains newly
  // created files.  Try again on failure, for up to 60 seconds.
  // Set the timeout this long because some Windows Anti-Virus, such as Parity
  // bit9, may lock files for up to a minute, causing npm package install
  // failures. Also, take care to yield the scheduler. Windows scheduling gives
  // CPU to a busy looping process, which can cause the program causing the lock
  // contention to be starved of CPU by node, so the contention doesn't resolve.


  if (platform === "win32") {
    fs.rename = function (fs$rename) {
      return function (from, to, cb) {
        var start = Date.now();
        var backoff = 0;
        fs$rename(from, to, function CB(er) {
          if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 60000) {
            setTimeout(function () {
              fs.stat(to, function (stater, st) {
                if (stater && stater.code === "ENOENT") fs$rename(from, to, CB);else cb(er);
              });
            }, backoff);
            if (backoff < 100) backoff += 10;
            return;
          }

          if (cb) cb(er);
        });
      };
    }(fs.rename);
  } // if read() returns EAGAIN, then just try it again.


  fs.read = function (fs$read) {
    function read(fd, buffer, offset, length, position, callback_) {
      var _callback;

      if (callback_ && typeof callback_ === 'function') {
        var eagCounter = 0;

        _callback = function callback(er, _, __) {
          if (er && er.code === 'EAGAIN' && eagCounter < 10) {
            eagCounter++;
            return fs$read.call(fs, fd, buffer, offset, length, position, _callback);
          }

          callback_.apply(this, arguments);
        };
      }

      return fs$read.call(fs, fd, buffer, offset, length, position, _callback);
    } // This ensures `util.promisify` works as it does for native `fs.read`.


    if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);
    return read;
  }(fs.read);

  fs.readSync = function (fs$readSync) {
    return function (fd, buffer, offset, length, position) {
      var eagCounter = 0;

      while (true) {
        try {
          return fs$readSync.call(fs, fd, buffer, offset, length, position);
        } catch (er) {
          if (er.code === 'EAGAIN' && eagCounter < 10) {
            eagCounter++;
            continue;
          }

          throw er;
        }
      }
    };
  }(fs.readSync);

  function patchLchmod(fs) {
    fs.lchmod = function (path, mode, callback) {
      fs.open(path, constants.O_WRONLY | constants.O_SYMLINK, mode, function (err, fd) {
        if (err) {
          if (callback) callback(err);
          return;
        } // prefer to return the chmod error, if one occurs,
        // but still try to close, and report closing errors if they occur.


        fs.fchmod(fd, mode, function (err) {
          fs.close(fd, function (err2) {
            if (callback) callback(err || err2);
          });
        });
      });
    };

    fs.lchmodSync = function (path, mode) {
      var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode); // prefer to return the chmod error, if one occurs,
      // but still try to close, and report closing errors if they occur.

      var threw = true;
      var ret;

      try {
        ret = fs.fchmodSync(fd, mode);
        threw = false;
      } finally {
        if (threw) {
          try {
            fs.closeSync(fd);
          } catch (er) {}
        } else {
          fs.closeSync(fd);
        }
      }

      return ret;
    };
  }

  function patchLutimes(fs) {
    if (constants.hasOwnProperty("O_SYMLINK")) {
      fs.lutimes = function (path, at, mt, cb) {
        fs.open(path, constants.O_SYMLINK, function (er, fd) {
          if (er) {
            if (cb) cb(er);
            return;
          }

          fs.futimes(fd, at, mt, function (er) {
            fs.close(fd, function (er2) {
              if (cb) cb(er || er2);
            });
          });
        });
      };

      fs.lutimesSync = function (path, at, mt) {
        var fd = fs.openSync(path, constants.O_SYMLINK);
        var ret;
        var threw = true;

        try {
          ret = fs.futimesSync(fd, at, mt);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs.closeSync(fd);
            } catch (er) {}
          } else {
            fs.closeSync(fd);
          }
        }

        return ret;
      };
    } else {
      fs.lutimes = function (_a, _b, _c, cb) {
        if (cb) process.nextTick(cb);
      };

      fs.lutimesSync = function () {};
    }
  }

  function chmodFix(orig) {
    if (!orig) return orig;
    return function (target, mode, cb) {
      return orig.call(fs, target, mode, function (er) {
        if (chownErOk(er)) er = null;
        if (cb) cb.apply(this, arguments);
      });
    };
  }

  function chmodFixSync(orig) {
    if (!orig) return orig;
    return function (target, mode) {
      try {
        return orig.call(fs, target, mode);
      } catch (er) {
        if (!chownErOk(er)) throw er;
      }
    };
  }

  function chownFix(orig) {
    if (!orig) return orig;
    return function (target, uid, gid, cb) {
      return orig.call(fs, target, uid, gid, function (er) {
        if (chownErOk(er)) er = null;
        if (cb) cb.apply(this, arguments);
      });
    };
  }

  function chownFixSync(orig) {
    if (!orig) return orig;
    return function (target, uid, gid) {
      try {
        return orig.call(fs, target, uid, gid);
      } catch (er) {
        if (!chownErOk(er)) throw er;
      }
    };
  }

  function statFix(orig) {
    if (!orig) return orig; // Older versions of Node erroneously returned signed integers for
    // uid + gid.

    return function (target, options, cb) {
      if (typeof options === 'function') {
        cb = options;
        options = null;
      }

      function callback(er, stats) {
        if (stats) {
          if (stats.uid < 0) stats.uid += 0x100000000;
          if (stats.gid < 0) stats.gid += 0x100000000;
        }

        if (cb) cb.apply(this, arguments);
      }

      return options ? orig.call(fs, target, options, callback) : orig.call(fs, target, callback);
    };
  }

  function statFixSync(orig) {
    if (!orig) return orig; // Older versions of Node erroneously returned signed integers for
    // uid + gid.

    return function (target, options) {
      var stats = options ? orig.call(fs, target, options) : orig.call(fs, target);
      if (stats.uid < 0) stats.uid += 0x100000000;
      if (stats.gid < 0) stats.gid += 0x100000000;
      return stats;
    };
  } // ENOSYS means that the fs doesn't support the op. Just ignore
  // that, because it doesn't matter.
  //
  // if there's no getuid, or if getuid() is something other
  // than 0, and the error is EINVAL or EPERM, then just ignore
  // it.
  //
  // This specific case is a silent failure in cp, install, tar,
  // and most other unix tools that manage permissions.
  //
  // When running as root, or if other types of errors are
  // encountered, then it's strict.


  function chownErOk(er) {
    if (!er) return true;
    if (er.code === "ENOSYS") return true;
    var nonroot = !process.getuid || process.getuid() !== 0;

    if (nonroot) {
      if (er.code === "EINVAL" || er.code === "EPERM") return true;
    }

    return false;
  }
}

/***/ }),

/***/ 63:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * @fileoverview
 *   Check if a `link` element is “Body OK”.
 * @longdescription
 *   ## Use
 *
 *   ```js
 *   var h = require('hastscript')
 *   var ok = require('hast-util-is-body-ok-link')
 *
 *   ok(h('link', {itemProp: 'foo'})) //=> true
 *   ok(h('link', {rel: ['stylesheet'], href: 'index.css'})) //=> true
 *   ok(h('link', {rel: ['author'], href: 'index.css'})) //=> false
 *   ```
 *
 *   ## API
 *
 *   ### `isBodyOkLink(node)`
 *
 *   * Return `true` for `link` elements with an `itemProp`
 *   * Return `true` for `link` elements with a `rel` list where one or more
 *     entries are `pingback`, `prefetch`, or `stylesheet`.
 */


var is = __webpack_require__(5203);

var has = __webpack_require__(612);

module.exports = ok;
var list = ['pingback', 'prefetch', 'stylesheet'];

function ok(node) {
  var length;
  var index;
  var rel;

  if (!is(node, 'link')) {
    return false;
  }

  if (has(node, 'itemProp')) {
    return true;
  }

  rel = (node.properties || {}).rel || [];
  length = rel.length;
  index = -1;

  if (rel.length === 0) {
    return false;
  }

  while (++index < length) {
    if (list.indexOf(rel[index]) === -1) {
      return false;
    }
  }

  return true;
}

/***/ }),

/***/ 612:
/***/ ((module) => {



var own = {}.hasOwnProperty;
module.exports = hasProperty; // Check if `node` has a set `name` property.

function hasProperty(node, name) {
  var props;
  var value;

  if (!node || !name || typeof node !== 'object' || node.type !== 'element') {
    return false;
  }

  props = node.properties;
  value = props && own.call(props, name) && props[name];
  return value !== null && value !== undefined && value !== false;
}

/***/ }),

/***/ 4826:
/***/ ((module) => {



module.exports = convert;

function convert(test) {
  if (typeof test === 'string') {
    return tagNameFactory(test);
  }

  if (test === null || test === undefined) {
    return element;
  }

  if (typeof test === 'object') {
    return any(test);
  }

  if (typeof test === 'function') {
    return callFactory(test);
  }

  throw new Error('Expected function, string, or array as test');
}

function convertAll(tests) {
  var length = tests.length;
  var index = -1;
  var results = [];

  while (++index < length) {
    results[index] = convert(tests[index]);
  }

  return results;
}

function any(tests) {
  var checks = convertAll(tests);
  var length = checks.length;
  return matches;

  function matches() {
    var index = -1;

    while (++index < length) {
      if (checks[index].apply(this, arguments)) {
        return true;
      }
    }

    return false;
  }
} // Utility to convert a string a tag name check.


function tagNameFactory(test) {
  return tagName;

  function tagName(node) {
    return element(node) && node.tagName === test;
  }
} // Utility to convert a function check.


function callFactory(test) {
  return call;

  function call(node) {
    return element(node) && Boolean(test.apply(this, arguments));
  }
} // Utility to return true if this is an element.


function element(node) {
  return node && typeof node === 'object' && node.type === 'element' && typeof node.tagName === 'string';
}

/***/ }),

/***/ 5203:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var convert = __webpack_require__(4826);

module.exports = isElement;
isElement.convert = convert; // Check if if `node` is an `element` and whether it passes the given test.

function isElement(node, test, index, parent, context) {
  var hasParent = parent !== null && parent !== undefined;
  var hasIndex = index !== null && index !== undefined;
  var check = convert(test);

  if (hasIndex && (typeof index !== 'number' || index < 0 || index === Infinity)) {
    throw new Error('Expected positive finite index for child node');
  }

  if (hasParent && (!parent.type || !parent.children)) {
    throw new Error('Expected parent node');
  }

  if (!node || !node.type || typeof node.type !== 'string') {
    return false;
  }

  if (hasParent !== hasIndex) {
    throw new Error('Expected both parent and index');
  }

  return check.call(context, node, index, parent);
}

/***/ }),

/***/ 1677:
/***/ ((module) => {



module.exports = parse;
var search = /[#.]/g; // Create a hast element from a simple CSS selector.

function parse(selector, defaultTagName) {
  var value = selector || '';
  var name = defaultTagName || 'div';
  var props = {};
  var start = 0;
  var subvalue;
  var previous;
  var match;

  while (start < value.length) {
    search.lastIndex = start;
    match = search.exec(value);
    subvalue = value.slice(start, match ? match.index : value.length);

    if (subvalue) {
      if (!previous) {
        name = subvalue;
      } else if (previous === '#') {
        props.id = subvalue;
      } else if (props.className) {
        props.className.push(subvalue);
      } else {
        props.className = [subvalue];
      }

      start += subvalue.length;
    }

    if (match) {
      previous = match[0];
      start++;
    }
  }

  return {
    type: 'element',
    tagName: name,
    properties: props,
    children: []
  };
}

/***/ }),

/***/ 3215:
/***/ ((module) => {

/**
 * @fileoverview
 *   Get the plain-text value of a hast node.
 * @longdescription
 *   ## Use
 *
 *   ```js
 *   var h = require('hastscript')
 *   var toString = require('hast-util-to-string')
 *
 *   toString(h('p', 'Alpha'))
 *   //=> 'Alpha'
 *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))
 *   //=> 'Bold and italic.'
 *   ```
 *
 *   ## API
 *
 *   ### `toString(node)`
 *
 *   Transform a node to a string.
 */


module.exports = toString;

function toString(node) {
  // “The concatenation of data of all the Text node descendants of the context
  // object, in tree order.”
  if ('children' in node) {
    return all(node);
  } // “Context object’s data.”


  return 'value' in node ? node.value : '';
}

function one(node) {
  if (node.type === 'text') {
    return node.value;
  }

  return node.children ? all(node) : '';
}

function all(node) {
  var children = node.children;
  var length = children.length;
  var index = -1;
  var result = [];

  while (++index < length) {
    result[index] = one(children[index]);
  }

  return result.join('');
}

/***/ }),

/***/ 1370:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var find = __webpack_require__(2334);

var normalize = __webpack_require__(1273);

var parseSelector = __webpack_require__(1677);

var spaces = (__webpack_require__(6473).parse);

var commas = (__webpack_require__(1297).parse);

module.exports = factory;
var own = {}.hasOwnProperty;

function factory(schema, defaultTagName, caseSensitive) {
  var adjust = caseSensitive ? createAdjustMap(caseSensitive) : null;
  return h; // Hyperscript compatible DSL for creating virtual hast trees.

  function h(selector, properties) {
    var node = parseSelector(selector, defaultTagName);
    var children = Array.prototype.slice.call(arguments, 2);
    var name = node.tagName.toLowerCase();
    var property;
    node.tagName = adjust && own.call(adjust, name) ? adjust[name] : name;

    if (properties && isChildren(properties, node)) {
      children.unshift(properties);
      properties = null;
    }

    if (properties) {
      for (property in properties) {
        addProperty(node.properties, property, properties[property]);
      }
    }

    addChild(node.children, children);

    if (node.tagName === 'template') {
      node.content = {
        type: 'root',
        children: node.children
      };
      node.children = [];
    }

    return node;
  }

  function addProperty(properties, key, value) {
    var info;
    var property;
    var result; // Ignore nullish and NaN values.

    if (value === null || value === undefined || value !== value) {
      return;
    }

    info = find(schema, key);
    property = info.property;
    result = value; // Handle list values.

    if (typeof result === 'string') {
      if (info.spaceSeparated) {
        result = spaces(result);
      } else if (info.commaSeparated) {
        result = commas(result);
      } else if (info.commaOrSpaceSeparated) {
        result = spaces(commas(result).join(' '));
      }
    } // Accept `object` on style.


    if (property === 'style' && typeof value !== 'string') {
      result = style(result);
    } // Class-names (which can be added both on the `selector` and here).


    if (property === 'className' && properties.className) {
      result = properties.className.concat(result);
    }

    properties[property] = parsePrimitives(info, property, result);
  }
}

function isChildren(value, node) {
  return typeof value === 'string' || 'length' in value || isNode(node.tagName, value);
}

function isNode(tagName, value) {
  var type = value.type;

  if (tagName === 'input' || !type || typeof type !== 'string') {
    return false;
  }

  if (typeof value.children === 'object' && 'length' in value.children) {
    return true;
  }

  type = type.toLowerCase();

  if (tagName === 'button') {
    return type !== 'menu' && type !== 'submit' && type !== 'reset' && type !== 'button';
  }

  return 'value' in value;
}

function addChild(nodes, value) {
  var index;
  var length;

  if (typeof value === 'string' || typeof value === 'number') {
    nodes.push({
      type: 'text',
      value: String(value)
    });
    return;
  }

  if (typeof value === 'object' && 'length' in value) {
    index = -1;
    length = value.length;

    while (++index < length) {
      addChild(nodes, value[index]);
    }

    return;
  }

  if (typeof value !== 'object' || !('type' in value)) {
    throw new Error('Expected node, nodes, or string, got `' + value + '`');
  }

  nodes.push(value);
} // Parse a (list of) primitives.


function parsePrimitives(info, name, value) {
  var index;
  var length;
  var result;

  if (typeof value !== 'object' || !('length' in value)) {
    return parsePrimitive(info, name, value);
  }

  length = value.length;
  index = -1;
  result = [];

  while (++index < length) {
    result[index] = parsePrimitive(info, name, value[index]);
  }

  return result;
} // Parse a single primitives.


function parsePrimitive(info, name, value) {
  var result = value;

  if (info.number || info.positiveNumber) {
    if (!isNaN(result) && result !== '') {
      result = Number(result);
    }
  } else if (info["boolean"] || info.overloadedBoolean) {
    // Accept `boolean` and `string`.
    if (typeof result === 'string' && (result === '' || normalize(value) === normalize(name))) {
      result = true;
    }
  }

  return result;
}

function style(value) {
  var result = [];
  var key;

  for (key in value) {
    result.push([key, value[key]].join(': '));
  }

  return result.join('; ');
}

function createAdjustMap(values) {
  var length = values.length;
  var index = -1;
  var result = {};
  var value;

  while (++index < length) {
    value = values[index];
    result[value.toLowerCase()] = value;
  }

  return result;
}

/***/ }),

/***/ 4994:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var schema = __webpack_require__(5073);

var factory = __webpack_require__(1370);

var html = factory(schema, 'div');
html.displayName = 'html';
module.exports = html;

/***/ }),

/***/ 2834:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = __webpack_require__(4994);

/***/ }),

/***/ 7007:
/***/ ((module) => {

// http://www.w3.org/TR/CSS21/grammar.html
// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
var NEWLINE_REGEX = /\n/g;
var WHITESPACE_REGEX = /^\s*/; // declaration

var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
var COLON_REGEX = /^:\s*/;
var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
var SEMICOLON_REGEX = /^[;\s]*/; // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill

var TRIM_REGEX = /^\s+|\s+$/g; // strings

var NEWLINE = '\n';
var FORWARD_SLASH = '/';
var ASTERISK = '*';
var EMPTY_STRING = ''; // types

var TYPE_COMMENT = 'comment';
var TYPE_DECLARATION = 'declaration';
/**
 * @param {String} style
 * @param {Object} [options]
 * @return {Object[]}
 * @throws {TypeError}
 * @throws {Error}
 */

module.exports = function (style, options) {
  if (typeof style !== 'string') {
    throw new TypeError('First argument must be a string');
  }

  if (!style) return [];
  options = options || {};
  /**
   * Positional.
   */

  var lineno = 1;
  var column = 1;
  /**
   * Update lineno and column based on `str`.
   *
   * @param {String} str
   */

  function updatePosition(str) {
    var lines = str.match(NEWLINE_REGEX);
    if (lines) lineno += lines.length;
    var i = str.lastIndexOf(NEWLINE);
    column = ~i ? str.length - i : column + str.length;
  }
  /**
   * Mark position and patch `node.position`.
   *
   * @return {Function}
   */


  function position() {
    var start = {
      line: lineno,
      column: column
    };
    return function (node) {
      node.position = new Position(start);
      whitespace();
      return node;
    };
  }
  /**
   * Store position information for a node.
   *
   * @constructor
   * @property {Object} start
   * @property {Object} end
   * @property {undefined|String} source
   */


  function Position(start) {
    this.start = start;
    this.end = {
      line: lineno,
      column: column
    };
    this.source = options.source;
  }
  /**
   * Non-enumerable source string.
   */


  Position.prototype.content = style;
  var errorsList = [];
  /**
   * Error `msg`.
   *
   * @param {String} msg
   * @throws {Error}
   */

  function error(msg) {
    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);
    err.reason = msg;
    err.filename = options.source;
    err.line = lineno;
    err.column = column;
    err.source = style;

    if (options.silent) {
      errorsList.push(err);
    } else {
      throw err;
    }
  }
  /**
   * Match `re` and return captures.
   *
   * @param {RegExp} re
   * @return {undefined|Array}
   */


  function match(re) {
    var m = re.exec(style);
    if (!m) return;
    var str = m[0];
    updatePosition(str);
    style = style.slice(str.length);
    return m;
  }
  /**
   * Parse whitespace.
   */


  function whitespace() {
    match(WHITESPACE_REGEX);
  }
  /**
   * Parse comments.
   *
   * @param {Object[]} [rules]
   * @return {Object[]}
   */


  function comments(rules) {
    var c;
    rules = rules || [];

    while (c = comment()) {
      if (c !== false) {
        rules.push(c);
      }
    }

    return rules;
  }
  /**
   * Parse comment.
   *
   * @return {Object}
   * @throws {Error}
   */


  function comment() {
    var pos = position();
    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;
    var i = 2;

    while (EMPTY_STRING != style.charAt(i) && (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))) {
      ++i;
    }

    i += 2;

    if (EMPTY_STRING === style.charAt(i - 1)) {
      return error('End of comment missing');
    }

    var str = style.slice(2, i - 2);
    column += 2;
    updatePosition(str);
    style = style.slice(i);
    column += 2;
    return pos({
      type: TYPE_COMMENT,
      comment: str
    });
  }
  /**
   * Parse declaration.
   *
   * @return {Object}
   * @throws {Error}
   */


  function declaration() {
    var pos = position(); // prop

    var prop = match(PROPERTY_REGEX);
    if (!prop) return;
    comment(); // :

    if (!match(COLON_REGEX)) return error("property missing ':'"); // val

    var val = match(VALUE_REGEX);
    var ret = pos({
      type: TYPE_DECLARATION,
      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
      value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
    }); // ;

    match(SEMICOLON_REGEX);
    return ret;
  }
  /**
   * Parse declarations.
   *
   * @return {Object[]}
   */


  function declarations() {
    var decls = [];
    comments(decls); // declarations

    var decl;

    while (decl = declaration()) {
      if (decl !== false) {
        decls.push(decl);
        comments(decls);
      }
    }

    return decls;
  }

  whitespace();
  return declarations();
};
/**
 * Trim `str`.
 *
 * @param {String} str
 * @return {String}
 */


function trim(str) {
  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
}

/***/ }),

/***/ 7801:
/***/ ((module) => {



module.exports = alphabetical; // Check if the given character code, or the character code at the first
// character, is alphabetical.

function alphabetical(character) {
  var code = typeof character === 'string' ? character.charCodeAt(0) : character;
  return code >= 97 && code <= 122
  /* a-z */
  || code >= 65 && code <= 90
  /* A-Z */
  ;
}

/***/ }),

/***/ 7546:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var alphabetical = __webpack_require__(7801);

var decimal = __webpack_require__(6353);

module.exports = alphanumerical; // Check if the given character code, or the character code at the first
// character, is alphanumerical.

function alphanumerical(character) {
  return alphabetical(character) || decimal(character);
}

/***/ }),

/***/ 6002:
/***/ ((module) => {

module.exports = function isArrayish(obj) {
  if (!obj || typeof obj === 'string') {
    return false;
  }

  return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== 'String');
};

/***/ }),

/***/ 3888:
/***/ ((module) => {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
module.exports = function isBuffer(obj) {
  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
};

/***/ }),

/***/ 6353:
/***/ ((module) => {



module.exports = decimal; // Check if the given character code, or the character code at the first
// character, is decimal.

function decimal(character) {
  var code = typeof character === 'string' ? character.charCodeAt(0) : character;
  return code >= 48 && code <= 57;
  /* 0-9 */
}

/***/ }),

/***/ 6992:
/***/ ((module) => {



module.exports = hexadecimal; // Check if the given character code, or the character code at the first
// character, is hexadecimal.

function hexadecimal(character) {
  var code = typeof character === 'string' ? character.charCodeAt(0) : character;
  return code >= 97
  /* a */
  && code <= 102
  /* z */
  || code >= 65
  /* A */
  && code <= 70
  /* Z */
  || code >= 48
  /* A */
  && code <= 57
  /* Z */
  ;
}

/***/ }),

/***/ 5641:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _regeneratorRuntime = __webpack_require__(7757);

var _asyncToGenerator = (__webpack_require__(8926)["default"]);

var _fs;

try {
  _fs = __webpack_require__(4527);
} catch (_) {
  _fs = __webpack_require__(7147);
}

var universalify = __webpack_require__(7385);

var _require = __webpack_require__(9309),
    stringify = _require.stringify,
    stripBom = _require.stripBom;

function _readFile(_x) {
  return _readFile2.apply(this, arguments);
}

function _readFile2() {
  _readFile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {
    var options,
        fs,
        shouldThrow,
        data,
        obj,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};

            if (typeof options === 'string') {
              options = {
                encoding: options
              };
            }

            fs = options.fs || _fs;
            shouldThrow = 'throws' in options ? options["throws"] : true;
            _context.next = 6;
            return universalify.fromCallback(fs.readFile)(file, options);

          case 6:
            data = _context.sent;
            data = stripBom(data);
            _context.prev = 8;
            obj = JSON.parse(data, options ? options.reviver : null);
            _context.next = 20;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](8);

            if (!shouldThrow) {
              _context.next = 19;
              break;
            }

            _context.t0.message = "".concat(file, ": ").concat(_context.t0.message);
            throw _context.t0;

          case 19:
            return _context.abrupt("return", null);

          case 20:
            return _context.abrupt("return", obj);

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[8, 12]]);
  }));
  return _readFile2.apply(this, arguments);
}

var readFile = universalify.fromPromise(_readFile);

function readFileSync(file) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof options === 'string') {
    options = {
      encoding: options
    };
  }

  var fs = options.fs || _fs;
  var shouldThrow = 'throws' in options ? options["throws"] : true;

  try {
    var content = fs.readFileSync(file, options);
    content = stripBom(content);
    return JSON.parse(content, options.reviver);
  } catch (err) {
    if (shouldThrow) {
      err.message = "".concat(file, ": ").concat(err.message);
      throw err;
    } else {
      return null;
    }
  }
}

function _writeFile(_x2, _x3) {
  return _writeFile2.apply(this, arguments);
}

function _writeFile2() {
  _writeFile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file, obj) {
    var options,
        fs,
        str,
        _args2 = arguments;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
            fs = options.fs || _fs;
            str = stringify(obj, options);
            _context2.next = 5;
            return universalify.fromCallback(fs.writeFile)(file, str, options);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _writeFile2.apply(this, arguments);
}

var writeFile = universalify.fromPromise(_writeFile);

function writeFileSync(file, obj) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var fs = options.fs || _fs;
  var str = stringify(obj, options); // not sure if fs.writeFileSync returns anything, but just in case

  return fs.writeFileSync(file, str, options);
}

var jsonfile = {
  readFile: readFile,
  readFileSync: readFileSync,
  writeFile: writeFile,
  writeFileSync: writeFileSync
};
module.exports = jsonfile;

/***/ }),

/***/ 9309:
/***/ ((module) => {

function stringify(obj) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$EOL = _ref.EOL,
      EOL = _ref$EOL === void 0 ? '\n' : _ref$EOL,
      _ref$finalEOL = _ref.finalEOL,
      finalEOL = _ref$finalEOL === void 0 ? true : _ref$finalEOL,
      _ref$replacer = _ref.replacer,
      replacer = _ref$replacer === void 0 ? null : _ref$replacer,
      spaces = _ref.spaces;

  var EOF = finalEOL ? EOL : '';
  var str = JSON.stringify(obj, replacer, spaces);
  return str.replace(/\n/g, EOL) + EOF;
}

function stripBom(content) {
  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified
  if (Buffer.isBuffer(content)) content = content.toString('utf8');
  return content.replace(/^\uFEFF/, '');
}

module.exports = {
  stringify: stringify,
  stripBom: stripBom
};

/***/ }),

/***/ 4718:
/***/ ((module) => {



var encodeCache = {}; // Create a lookup array where anything but characters in `chars` string
// and alphanumeric chars is percent-encoded.
//

function getEncodeCache(exclude) {
  var i,
      ch,
      cache = encodeCache[exclude];

  if (cache) {
    return cache;
  }

  cache = encodeCache[exclude] = [];

  for (i = 0; i < 128; i++) {
    ch = String.fromCharCode(i);

    if (/^[0-9a-z]$/i.test(ch)) {
      // always allow unencoded alphanumeric characters
      cache.push(ch);
    } else {
      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));
    }
  }

  for (i = 0; i < exclude.length; i++) {
    cache[exclude.charCodeAt(i)] = exclude[i];
  }

  return cache;
} // Encode unsafe characters with percent-encoding, skipping already
// encoded sequences.
//
//  - string       - string to encode
//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
//


function encode(string, exclude, keepEscaped) {
  var i,
      l,
      code,
      nextCode,
      cache,
      result = '';

  if (typeof exclude !== 'string') {
    // encode(string, keepEscaped)
    keepEscaped = exclude;
    exclude = encode.defaultChars;
  }

  if (typeof keepEscaped === 'undefined') {
    keepEscaped = true;
  }

  cache = getEncodeCache(exclude);

  for (i = 0, l = string.length; i < l; i++) {
    code = string.charCodeAt(i);

    if (keepEscaped && code === 0x25
    /* % */
    && i + 2 < l) {
      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
        result += string.slice(i, i + 3);
        i += 2;
        continue;
      }
    }

    if (code < 128) {
      result += cache[code];
      continue;
    }

    if (code >= 0xD800 && code <= 0xDFFF) {
      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
        nextCode = string.charCodeAt(i + 1);

        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
          result += encodeURIComponent(string[i] + string[i + 1]);
          i++;
          continue;
        }
      }

      result += '%EF%BF%BD';
      continue;
    }

    result += encodeURIComponent(string[i]);
  }

  return result;
}

encode.defaultChars = ";/?:@&=+$,-_.!~*'()#";
encode.componentChars = "-_.!~*'()";
module.exports = encode;

/***/ }),

/***/ 4878:
/***/ ((module) => {

module.exports = not;

function not(f) {
  return negation;

  function negation() {
    return !f.apply(this, arguments);
  }
}

/***/ }),

/***/ 6106:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.compile = void 0;

var boolbase_1 = __webpack_require__(1855);
/**
 * Returns a function that checks if an elements index matches the given rule
 * highly optimized to return the fastest solution.
 *
 * @param parsed A tuple [a, b], as returned by `parse`.
 * @returns A highly optimized function that returns whether an index matches the nth-check.
 * @example
 * const check = nthCheck.compile([2, 3]);
 *
 * check(0); // `false`
 * check(1); // `false`
 * check(2); // `true`
 * check(3); // `false`
 * check(4); // `true`
 * check(5); // `false`
 * check(6); // `true`
 */


function compile(parsed) {
  var a = parsed[0]; // Subtract 1 from `b`, to convert from one- to zero-indexed.

  var b = parsed[1] - 1;
  /*
   * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.
   * Besides, the specification states that no elements are
   * matched when `a` and `b` are 0.
   *
   * `b < 0` here as we subtracted 1 from `b` above.
   */

  if (b < 0 && a <= 0) return boolbase_1.falseFunc; // When `a` is in the range -1..1, it matches any element (so only `b` is checked).

  if (a === -1) return function (index) {
    return index <= b;
  };
  if (a === 0) return function (index) {
    return index === b;
  }; // When `b <= 0` and `a === 1`, they match any element.

  if (a === 1) return b < 0 ? boolbase_1.trueFunc : function (index) {
    return index >= b;
  };
  /*
   * Otherwise, modulo can be used to check if there is a match.
   *
   * Modulo doesn't care about the sign, so let's use `a`s absolute value.
   */

  var absA = Math.abs(a); // Get `b mod a`, + a if this is negative.

  var bMod = (b % absA + absA) % absA;
  return a > 1 ? function (index) {
    return index >= b && index % absA === bMod;
  } : function (index) {
    return index <= b && index % absA === bMod;
  };
}

exports.compile = compile;

/***/ }),

/***/ 8728:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;


__webpack_unused_export__ = ({
  value: true
});
__webpack_unused_export__ = __webpack_unused_export__ = void 0;

var parse_1 = __webpack_require__(9786);

__webpack_unused_export__ = ({
  enumerable: true,
  get: function get() {
    return parse_1.parse;
  }
});

var compile_1 = __webpack_require__(6106);

__webpack_unused_export__ = ({
  enumerable: true,
  get: function get() {
    return compile_1.compile;
  }
});
/**
 * Parses and compiles a formula to a highly optimized function.
 * Combination of `parse` and `compile`.
 *
 * If the formula doesn't match any elements,
 * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.
 * Otherwise, a function accepting an _index_ is returned, which returns
 * whether or not the passed _index_ matches the formula.
 *
 * Note: The nth-rule starts counting at `1`, the returned function at `0`.
 *
 * @param formula The formula to compile.
 * @example
 * const check = nthCheck("2n+3");
 *
 * check(0); // `false`
 * check(1); // `false`
 * check(2); // `true`
 * check(3); // `false`
 * check(4); // `true`
 * check(5); // `false`
 * check(6); // `true`
 */

function nthCheck(formula) {
  return (0, compile_1.compile)((0, parse_1.parse)(formula));
}

exports.ZP = nthCheck;

/***/ }),

/***/ 9786:
/***/ ((__unused_webpack_module, exports) => {

 // Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.parse = void 0; // Whitespace as per https://www.w3.org/TR/selectors-3/#lex is " \t\r\n\f"

var whitespace = new Set([9, 10, 12, 13, 32]);
var ZERO = "0".charCodeAt(0);
var NINE = "9".charCodeAt(0);
/**
 * Parses an expression.
 *
 * @throws An `Error` if parsing fails.
 * @returns An array containing the integer step size and the integer offset of the nth rule.
 * @example nthCheck.parse("2n+3"); // returns [2, 3]
 */

function parse(formula) {
  formula = formula.trim().toLowerCase();

  if (formula === "even") {
    return [2, 0];
  } else if (formula === "odd") {
    return [2, 1];
  } // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?


  var idx = 0;
  var a = 0;
  var sign = readSign();
  var number = readNumber();

  if (idx < formula.length && formula.charAt(idx) === "n") {
    idx++;
    a = sign * (number !== null && number !== void 0 ? number : 1);
    skipWhitespace();

    if (idx < formula.length) {
      sign = readSign();
      skipWhitespace();
      number = readNumber();
    } else {
      sign = number = 0;
    }
  } // Throw if there is anything else


  if (number === null || idx < formula.length) {
    throw new Error("n-th rule couldn't be parsed ('" + formula + "')");
  }

  return [a, sign * number];

  function readSign() {
    if (formula.charAt(idx) === "-") {
      idx++;
      return -1;
    }

    if (formula.charAt(idx) === "+") {
      idx++;
    }

    return 1;
  }

  function readNumber() {
    var start = idx;
    var value = 0;

    while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {
      value = value * 10 + (formula.charCodeAt(idx) - ZERO);
      idx++;
    } // Return `null` if we didn't read anything.


    return idx === start ? null : value;
  }

  function skipWhitespace() {
    while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {
      idx++;
    }
  }
}

exports.parse = parse;

/***/ }),

/***/ 9949:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var characterEntities = __webpack_require__(2661);

module.exports = decodeEntity;
var own = {}.hasOwnProperty;

function decodeEntity(characters) {
  return own.call(characterEntities, characters) ? characterEntities[characters] : false;
}

/***/ }),

/***/ 3832:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var legacy = __webpack_require__(7452);

var invalid = __webpack_require__(3580);

var decimal = __webpack_require__(6353);

var hexadecimal = __webpack_require__(6992);

var alphanumerical = __webpack_require__(7546);

var decodeEntity = __webpack_require__(9949);

module.exports = parseEntities;
var own = {}.hasOwnProperty;
var fromCharCode = String.fromCharCode;
var noop = Function.prototype; // Default settings.

var defaults = {
  warning: null,
  reference: null,
  text: null,
  warningContext: null,
  referenceContext: null,
  textContext: null,
  position: {},
  additional: null,
  attribute: false,
  nonTerminated: true
}; // Characters.

var tab = 9; // '\t'

var lineFeed = 10; // '\n'

var formFeed = 12; // '\f'

var space = 32; // ' '

var ampersand = 38; // '&'

var semicolon = 59; // ';'

var lessThan = 60; // '<'

var equalsTo = 61; // '='

var numberSign = 35; // '#'

var uppercaseX = 88; // 'X'

var lowercaseX = 120; // 'x'

var replacementCharacter = 65533; // '�'
// Reference types.

var name = 'named';
var hexa = 'hexadecimal';
var deci = 'decimal'; // Map of bases.

var bases = {};
bases[hexa] = 16;
bases[deci] = 10; // Map of types to tests.
// Each type of character reference accepts different characters.
// This test is used to detect whether a reference has ended (as the semicolon
// is not strictly needed).

var tests = {};
tests[name] = alphanumerical;
tests[deci] = decimal;
tests[hexa] = hexadecimal; // Warning types.

var namedNotTerminated = 1;
var numericNotTerminated = 2;
var namedEmpty = 3;
var numericEmpty = 4;
var namedUnknown = 5;
var numericDisallowed = 6;
var numericProhibited = 7; // Warning messages.

var messages = {};
messages[namedNotTerminated] = 'Named character references must be terminated by a semicolon';
messages[numericNotTerminated] = 'Numeric character references must be terminated by a semicolon';
messages[namedEmpty] = 'Named character references cannot be empty';
messages[numericEmpty] = 'Numeric character references cannot be empty';
messages[namedUnknown] = 'Named character references must be known';
messages[numericDisallowed] = 'Numeric character references cannot be disallowed';
messages[numericProhibited] = 'Numeric character references cannot be outside the permissible Unicode range'; // Wrap to ensure clean parameters are given to `parse`.

function parseEntities(value, options) {
  var settings = {};
  var option;
  var key;

  if (!options) {
    options = {};
  }

  for (key in defaults) {
    option = options[key];
    settings[key] = option === null || option === undefined ? defaults[key] : option;
  }

  if (settings.position.indent || settings.position.start) {
    settings.indent = settings.position.indent || [];
    settings.position = settings.position.start;
  }

  return parse(value, settings);
} // Parse entities.
// eslint-disable-next-line complexity


function parse(value, settings) {
  var additional = settings.additional;
  var nonTerminated = settings.nonTerminated;
  var handleText = settings.text;
  var handleReference = settings.reference;
  var handleWarning = settings.warning;
  var textContext = settings.textContext;
  var referenceContext = settings.referenceContext;
  var warningContext = settings.warningContext;
  var pos = settings.position;
  var indent = settings.indent || [];
  var length = value.length;
  var index = 0;
  var lines = -1;
  var column = pos.column || 1;
  var line = pos.line || 1;
  var queue = '';
  var result = [];
  var entityCharacters;
  var namedEntity;
  var terminated;
  var characters;
  var character;
  var reference;
  var following;
  var warning;
  var reason;
  var output;
  var entity;
  var begin;
  var start;
  var type;
  var test;
  var prev;
  var next;
  var diff;
  var end;

  if (typeof additional === 'string') {
    additional = additional.charCodeAt(0);
  } // Cache the current point.


  prev = now(); // Wrap `handleWarning`.

  warning = handleWarning ? parseError : noop; // Ensure the algorithm walks over the first character and the end
  // (inclusive).

  index--;
  length++;

  while (++index < length) {
    // If the previous character was a newline.
    if (character === lineFeed) {
      column = indent[lines] || 1;
    }

    character = value.charCodeAt(index);

    if (character === ampersand) {
      following = value.charCodeAt(index + 1); // The behaviour depends on the identity of the next character.

      if (following === tab || following === lineFeed || following === formFeed || following === space || following === ampersand || following === lessThan || following !== following || additional && following === additional) {
        // Not a character reference.
        // No characters are consumed, and nothing is returned.
        // This is not an error, either.
        queue += fromCharCode(character);
        column++;
        continue;
      }

      start = index + 1;
      begin = start;
      end = start;

      if (following === numberSign) {
        // Numerical entity.
        end = ++begin; // The behaviour further depends on the next character.

        following = value.charCodeAt(end);

        if (following === uppercaseX || following === lowercaseX) {
          // ASCII hex digits.
          type = hexa;
          end = ++begin;
        } else {
          // ASCII digits.
          type = deci;
        }
      } else {
        // Named entity.
        type = name;
      }

      entityCharacters = '';
      entity = '';
      characters = '';
      test = tests[type];
      end--;

      while (++end < length) {
        following = value.charCodeAt(end);

        if (!test(following)) {
          break;
        }

        characters += fromCharCode(following); // Check if we can match a legacy named reference.
        // If so, we cache that as the last viable named reference.
        // This ensures we do not need to walk backwards later.

        if (type === name && own.call(legacy, characters)) {
          entityCharacters = characters;
          entity = legacy[characters];
        }
      }

      terminated = value.charCodeAt(end) === semicolon;

      if (terminated) {
        end++;
        namedEntity = type === name ? decodeEntity(characters) : false;

        if (namedEntity) {
          entityCharacters = characters;
          entity = namedEntity;
        }
      }

      diff = 1 + end - start;

      if (!terminated && !nonTerminated) {// Empty.
      } else if (!characters) {
        // An empty (possible) entity is valid, unless it’s numeric (thus an
        // ampersand followed by an octothorp).
        if (type !== name) {
          warning(numericEmpty, diff);
        }
      } else if (type === name) {
        // An ampersand followed by anything unknown, and not terminated, is
        // invalid.
        if (terminated && !entity) {
          warning(namedUnknown, 1);
        } else {
          // If theres something after an entity name which is not known, cap
          // the reference.
          if (entityCharacters !== characters) {
            end = begin + entityCharacters.length;
            diff = 1 + end - begin;
            terminated = false;
          } // If the reference is not terminated, warn.


          if (!terminated) {
            reason = entityCharacters ? namedNotTerminated : namedEmpty;

            if (settings.attribute) {
              following = value.charCodeAt(end);

              if (following === equalsTo) {
                warning(reason, diff);
                entity = null;
              } else if (alphanumerical(following)) {
                entity = null;
              } else {
                warning(reason, diff);
              }
            } else {
              warning(reason, diff);
            }
          }
        }

        reference = entity;
      } else {
        if (!terminated) {
          // All non-terminated numeric entities are not rendered, and trigger a
          // warning.
          warning(numericNotTerminated, diff);
        } // When terminated and number, parse as either hexadecimal or decimal.


        reference = parseInt(characters, bases[type]); // Trigger a warning when the parsed number is prohibited, and replace
        // with replacement character.

        if (prohibited(reference)) {
          warning(numericProhibited, diff);
          reference = fromCharCode(replacementCharacter);
        } else if (reference in invalid) {
          // Trigger a warning when the parsed number is disallowed, and replace
          // by an alternative.
          warning(numericDisallowed, diff);
          reference = invalid[reference];
        } else {
          // Parse the number.
          output = ''; // Trigger a warning when the parsed number should not be used.

          if (disallowed(reference)) {
            warning(numericDisallowed, diff);
          } // Stringify the number.


          if (reference > 0xffff) {
            reference -= 0x10000;
            output += fromCharCode(reference >>> (10 & 0x3ff) | 0xd800);
            reference = 0xdc00 | reference & 0x3ff;
          }

          reference = output + fromCharCode(reference);
        }
      } // Found it!
      // First eat the queued characters as normal text, then eat an entity.


      if (reference) {
        flush();
        prev = now();
        index = end - 1;
        column += end - start + 1;
        result.push(reference);
        next = now();
        next.offset++;

        if (handleReference) {
          handleReference.call(referenceContext, reference, {
            start: prev,
            end: next
          }, value.slice(start - 1, end));
        }

        prev = next;
      } else {
        // If we could not find a reference, queue the checked characters (as
        // normal characters), and move the pointer to their end.
        // This is possible because we can be certain neither newlines nor
        // ampersands are included.
        characters = value.slice(start - 1, end);
        queue += characters;
        column += characters.length;
        index = end - 1;
      }
    } else {
      // Handle anything other than an ampersand, including newlines and EOF.
      if (character === 10 // Line feed
      ) {
        line++;
        lines++;
        column = 0;
      }

      if (character === character) {
        queue += fromCharCode(character);
        column++;
      } else {
        flush();
      }
    }
  } // Return the reduced nodes.


  return result.join(''); // Get current position.

  function now() {
    return {
      line: line,
      column: column,
      offset: index + (pos.offset || 0)
    };
  } // “Throw” a parse-error: a warning.


  function parseError(code, offset) {
    var position = now();
    position.column += offset;
    position.offset += offset;
    handleWarning.call(warningContext, messages[code], position, code);
  } // Flush `queue` (normal text).
  // Macro invoked before each entity and at the end of `value`.
  // Does nothing when `queue` is empty.


  function flush() {
    if (queue) {
      result.push(queue);

      if (handleText) {
        handleText.call(textContext, queue, {
          start: prev,
          end: now()
        });
      }

      queue = '';
    }
  }
} // Check if `character` is outside the permissible unicode range.


function prohibited(code) {
  return code >= 0xd800 && code <= 0xdfff || code > 0x10ffff;
} // Check if `character` is disallowed.


function disallowed(code) {
  return code >= 0x0001 && code <= 0x0008 || code === 0x000b || code >= 0x000d && code <= 0x001f || code >= 0x007f && code <= 0x009f || code >= 0xfdd0 && code <= 0xfdef || (code & 0xffff) === 0xffff || (code & 0xffff) === 0xfffe;
}

/***/ }),

/***/ 8148:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _require = __webpack_require__(7682),
    DOCUMENT_MODE = _require.DOCUMENT_MODE; //Const


var VALID_DOCTYPE_NAME = 'html';
var VALID_SYSTEM_ID = 'about:legacy-compat';
var QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';
var QUIRKS_MODE_PUBLIC_ID_PREFIXES = ['+//silmaril//dtd html pro v0r11 19970101//', '-//as//dtd html 3.0 aswedit + extensions//', '-//advasoft ltd//dtd html 3.0 aswedit + extensions//', '-//ietf//dtd html 2.0 level 1//', '-//ietf//dtd html 2.0 level 2//', '-//ietf//dtd html 2.0 strict level 1//', '-//ietf//dtd html 2.0 strict level 2//', '-//ietf//dtd html 2.0 strict//', '-//ietf//dtd html 2.0//', '-//ietf//dtd html 2.1e//', '-//ietf//dtd html 3.0//', '-//ietf//dtd html 3.2 final//', '-//ietf//dtd html 3.2//', '-//ietf//dtd html 3//', '-//ietf//dtd html level 0//', '-//ietf//dtd html level 1//', '-//ietf//dtd html level 2//', '-//ietf//dtd html level 3//', '-//ietf//dtd html strict level 0//', '-//ietf//dtd html strict level 1//', '-//ietf//dtd html strict level 2//', '-//ietf//dtd html strict level 3//', '-//ietf//dtd html strict//', '-//ietf//dtd html//', '-//metrius//dtd metrius presentational//', '-//microsoft//dtd internet explorer 2.0 html strict//', '-//microsoft//dtd internet explorer 2.0 html//', '-//microsoft//dtd internet explorer 2.0 tables//', '-//microsoft//dtd internet explorer 3.0 html strict//', '-//microsoft//dtd internet explorer 3.0 html//', '-//microsoft//dtd internet explorer 3.0 tables//', '-//netscape comm. corp.//dtd html//', '-//netscape comm. corp.//dtd strict html//', "-//o'reilly and associates//dtd html 2.0//", "-//o'reilly and associates//dtd html extended 1.0//", "-//o'reilly and associates//dtd html extended relaxed 1.0//", '-//sq//dtd html 2.0 hotmetal + extensions//', '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//', '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//', '-//spyglass//dtd html 2.0 extended//', '-//sun microsystems corp.//dtd hotjava html//', '-//sun microsystems corp.//dtd hotjava strict html//', '-//w3c//dtd html 3 1995-03-24//', '-//w3c//dtd html 3.2 draft//', '-//w3c//dtd html 3.2 final//', '-//w3c//dtd html 3.2//', '-//w3c//dtd html 3.2s draft//', '-//w3c//dtd html 4.0 frameset//', '-//w3c//dtd html 4.0 transitional//', '-//w3c//dtd html experimental 19960712//', '-//w3c//dtd html experimental 970421//', '-//w3c//dtd w3 html//', '-//w3o//dtd w3 html 3.0//', '-//webtechs//dtd mozilla html 2.0//', '-//webtechs//dtd mozilla html//'];
var QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = QUIRKS_MODE_PUBLIC_ID_PREFIXES.concat(['-//w3c//dtd html 4.01 frameset//', '-//w3c//dtd html 4.01 transitional//']);
var QUIRKS_MODE_PUBLIC_IDS = ['-//w3o//dtd w3 html strict 3.0//en//', '-/w3c/dtd html 4.0 transitional/en', 'html'];
var LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];
var LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES.concat(['-//w3c//dtd html 4.01 frameset//', '-//w3c//dtd html 4.01 transitional//']); //Utils

function enquoteDoctypeId(id) {
  var quote = id.indexOf('"') !== -1 ? "'" : '"';
  return quote + id + quote;
}

function hasPrefix(publicId, prefixes) {
  for (var i = 0; i < prefixes.length; i++) {
    if (publicId.indexOf(prefixes[i]) === 0) {
      return true;
    }
  }

  return false;
} //API


exports.isConforming = function (token) {
  return token.name === VALID_DOCTYPE_NAME && token.publicId === null && (token.systemId === null || token.systemId === VALID_SYSTEM_ID);
};

exports.getDocumentMode = function (token) {
  if (token.name !== VALID_DOCTYPE_NAME) {
    return DOCUMENT_MODE.QUIRKS;
  }

  var systemId = token.systemId;

  if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
    return DOCUMENT_MODE.QUIRKS;
  }

  var publicId = token.publicId;

  if (publicId !== null) {
    publicId = publicId.toLowerCase();

    if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) {
      return DOCUMENT_MODE.QUIRKS;
    }

    var prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;

    if (hasPrefix(publicId, prefixes)) {
      return DOCUMENT_MODE.QUIRKS;
    }

    prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;

    if (hasPrefix(publicId, prefixes)) {
      return DOCUMENT_MODE.LIMITED_QUIRKS;
    }
  }

  return DOCUMENT_MODE.NO_QUIRKS;
};

exports.serializeContent = function (name, publicId, systemId) {
  var str = '!DOCTYPE ';

  if (name) {
    str += name;
  }

  if (publicId) {
    str += ' PUBLIC ' + enquoteDoctypeId(publicId);
  } else if (systemId) {
    str += ' SYSTEM';
  }

  if (systemId !== null) {
    str += ' ' + enquoteDoctypeId(systemId);
  }

  return str;
};

/***/ }),

/***/ 7983:
/***/ ((module) => {



module.exports = {
  controlCharacterInInputStream: 'control-character-in-input-stream',
  noncharacterInInputStream: 'noncharacter-in-input-stream',
  surrogateInInputStream: 'surrogate-in-input-stream',
  nonVoidHtmlElementStartTagWithTrailingSolidus: 'non-void-html-element-start-tag-with-trailing-solidus',
  endTagWithAttributes: 'end-tag-with-attributes',
  endTagWithTrailingSolidus: 'end-tag-with-trailing-solidus',
  unexpectedSolidusInTag: 'unexpected-solidus-in-tag',
  unexpectedNullCharacter: 'unexpected-null-character',
  unexpectedQuestionMarkInsteadOfTagName: 'unexpected-question-mark-instead-of-tag-name',
  invalidFirstCharacterOfTagName: 'invalid-first-character-of-tag-name',
  unexpectedEqualsSignBeforeAttributeName: 'unexpected-equals-sign-before-attribute-name',
  missingEndTagName: 'missing-end-tag-name',
  unexpectedCharacterInAttributeName: 'unexpected-character-in-attribute-name',
  unknownNamedCharacterReference: 'unknown-named-character-reference',
  missingSemicolonAfterCharacterReference: 'missing-semicolon-after-character-reference',
  unexpectedCharacterAfterDoctypeSystemIdentifier: 'unexpected-character-after-doctype-system-identifier',
  unexpectedCharacterInUnquotedAttributeValue: 'unexpected-character-in-unquoted-attribute-value',
  eofBeforeTagName: 'eof-before-tag-name',
  eofInTag: 'eof-in-tag',
  missingAttributeValue: 'missing-attribute-value',
  missingWhitespaceBetweenAttributes: 'missing-whitespace-between-attributes',
  missingWhitespaceAfterDoctypePublicKeyword: 'missing-whitespace-after-doctype-public-keyword',
  missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: 'missing-whitespace-between-doctype-public-and-system-identifiers',
  missingWhitespaceAfterDoctypeSystemKeyword: 'missing-whitespace-after-doctype-system-keyword',
  missingQuoteBeforeDoctypePublicIdentifier: 'missing-quote-before-doctype-public-identifier',
  missingQuoteBeforeDoctypeSystemIdentifier: 'missing-quote-before-doctype-system-identifier',
  missingDoctypePublicIdentifier: 'missing-doctype-public-identifier',
  missingDoctypeSystemIdentifier: 'missing-doctype-system-identifier',
  abruptDoctypePublicIdentifier: 'abrupt-doctype-public-identifier',
  abruptDoctypeSystemIdentifier: 'abrupt-doctype-system-identifier',
  cdataInHtmlContent: 'cdata-in-html-content',
  incorrectlyOpenedComment: 'incorrectly-opened-comment',
  eofInScriptHtmlCommentLikeText: 'eof-in-script-html-comment-like-text',
  eofInDoctype: 'eof-in-doctype',
  nestedComment: 'nested-comment',
  abruptClosingOfEmptyComment: 'abrupt-closing-of-empty-comment',
  eofInComment: 'eof-in-comment',
  incorrectlyClosedComment: 'incorrectly-closed-comment',
  eofInCdata: 'eof-in-cdata',
  absenceOfDigitsInNumericCharacterReference: 'absence-of-digits-in-numeric-character-reference',
  nullCharacterReference: 'null-character-reference',
  surrogateCharacterReference: 'surrogate-character-reference',
  characterReferenceOutsideUnicodeRange: 'character-reference-outside-unicode-range',
  controlCharacterReference: 'control-character-reference',
  noncharacterCharacterReference: 'noncharacter-character-reference',
  missingWhitespaceBeforeDoctypeName: 'missing-whitespace-before-doctype-name',
  missingDoctypeName: 'missing-doctype-name',
  invalidCharacterSequenceAfterDoctypeName: 'invalid-character-sequence-after-doctype-name',
  duplicateAttribute: 'duplicate-attribute',
  nonConformingDoctype: 'non-conforming-doctype',
  missingDoctype: 'missing-doctype',
  misplacedDoctype: 'misplaced-doctype',
  endTagWithoutMatchingOpenElement: 'end-tag-without-matching-open-element',
  closingOfElementWithOpenChildElements: 'closing-of-element-with-open-child-elements',
  disallowedContentInNoscriptInHead: 'disallowed-content-in-noscript-in-head',
  openElementsLeftAfterEof: 'open-elements-left-after-eof',
  abandonedHeadElementChild: 'abandoned-head-element-child',
  misplacedStartTagForHeadElement: 'misplaced-start-tag-for-head-element',
  nestedNoscriptInHead: 'nested-noscript-in-head',
  eofInElementThatCanContainOnlyText: 'eof-in-element-that-can-contain-only-text'
};

/***/ }),

/***/ 4262:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _defineProperty = (__webpack_require__(9713)["default"]);

var _EXITS_FOREIGN_CONTEN;

var Tokenizer = __webpack_require__(504);

var HTML = __webpack_require__(7682); //Aliases


var $ = HTML.TAG_NAMES;
var NS = HTML.NAMESPACES;
var ATTRS = HTML.ATTRS; //MIME types

var MIME_TYPES = {
  TEXT_HTML: 'text/html',
  APPLICATION_XML: 'application/xhtml+xml'
}; //Attributes

var DEFINITION_URL_ATTR = 'definitionurl';
var ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';
var SVG_ATTRS_ADJUSTMENT_MAP = {
  attributename: 'attributeName',
  attributetype: 'attributeType',
  basefrequency: 'baseFrequency',
  baseprofile: 'baseProfile',
  calcmode: 'calcMode',
  clippathunits: 'clipPathUnits',
  diffuseconstant: 'diffuseConstant',
  edgemode: 'edgeMode',
  filterunits: 'filterUnits',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  limitingconeangle: 'limitingConeAngle',
  markerheight: 'markerHeight',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  numoctaves: 'numOctaves',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  refx: 'refX',
  refy: 'refY',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stitchtiles: 'stitchTiles',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textlength: 'textLength',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  xchannelselector: 'xChannelSelector',
  ychannelselector: 'yChannelSelector',
  zoomandpan: 'zoomAndPan'
};
var XML_ATTRS_ADJUSTMENT_MAP = {
  'xlink:actuate': {
    prefix: 'xlink',
    name: 'actuate',
    namespace: NS.XLINK
  },
  'xlink:arcrole': {
    prefix: 'xlink',
    name: 'arcrole',
    namespace: NS.XLINK
  },
  'xlink:href': {
    prefix: 'xlink',
    name: 'href',
    namespace: NS.XLINK
  },
  'xlink:role': {
    prefix: 'xlink',
    name: 'role',
    namespace: NS.XLINK
  },
  'xlink:show': {
    prefix: 'xlink',
    name: 'show',
    namespace: NS.XLINK
  },
  'xlink:title': {
    prefix: 'xlink',
    name: 'title',
    namespace: NS.XLINK
  },
  'xlink:type': {
    prefix: 'xlink',
    name: 'type',
    namespace: NS.XLINK
  },
  'xml:base': {
    prefix: 'xml',
    name: 'base',
    namespace: NS.XML
  },
  'xml:lang': {
    prefix: 'xml',
    name: 'lang',
    namespace: NS.XML
  },
  'xml:space': {
    prefix: 'xml',
    name: 'space',
    namespace: NS.XML
  },
  xmlns: {
    prefix: '',
    name: 'xmlns',
    namespace: NS.XMLNS
  },
  'xmlns:xlink': {
    prefix: 'xmlns',
    name: 'xlink',
    namespace: NS.XMLNS
  }
}; //SVG tag names adjustment map

var SVG_TAG_NAMES_ADJUSTMENT_MAP = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {
  altglyph: 'altGlyph',
  altglyphdef: 'altGlyphDef',
  altglyphitem: 'altGlyphItem',
  animatecolor: 'animateColor',
  animatemotion: 'animateMotion',
  animatetransform: 'animateTransform',
  clippath: 'clipPath',
  feblend: 'feBlend',
  fecolormatrix: 'feColorMatrix',
  fecomponenttransfer: 'feComponentTransfer',
  fecomposite: 'feComposite',
  feconvolvematrix: 'feConvolveMatrix',
  fediffuselighting: 'feDiffuseLighting',
  fedisplacementmap: 'feDisplacementMap',
  fedistantlight: 'feDistantLight',
  feflood: 'feFlood',
  fefunca: 'feFuncA',
  fefuncb: 'feFuncB',
  fefuncg: 'feFuncG',
  fefuncr: 'feFuncR',
  fegaussianblur: 'feGaussianBlur',
  feimage: 'feImage',
  femerge: 'feMerge',
  femergenode: 'feMergeNode',
  femorphology: 'feMorphology',
  feoffset: 'feOffset',
  fepointlight: 'fePointLight',
  fespecularlighting: 'feSpecularLighting',
  fespotlight: 'feSpotLight',
  fetile: 'feTile',
  feturbulence: 'feTurbulence',
  foreignobject: 'foreignObject',
  glyphref: 'glyphRef',
  lineargradient: 'linearGradient',
  radialgradient: 'radialGradient',
  textpath: 'textPath'
}; //Tags that causes exit from foreign content

var EXITS_FOREIGN_CONTENT = (_EXITS_FOREIGN_CONTEN = {}, _defineProperty(_EXITS_FOREIGN_CONTEN, $.B, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.BIG, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.BLOCKQUOTE, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.BODY, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.BR, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.CENTER, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.CODE, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.DD, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.DIV, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.DL, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.DT, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.EM, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.EMBED, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.H1, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.H2, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.H3, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.H4, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.H5, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.H6, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.HEAD, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.HR, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.I, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.IMG, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.LI, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.LISTING, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.MENU, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.META, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.NOBR, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.OL, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.P, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.PRE, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.RUBY, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.S, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.SMALL, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.SPAN, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.STRONG, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.STRIKE, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.SUB, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.SUP, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.TABLE, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.TT, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.U, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.UL, true), _defineProperty(_EXITS_FOREIGN_CONTEN, $.VAR, true), _EXITS_FOREIGN_CONTEN); //Check exit from foreign content

exports.causesExit = function (startTagToken) {
  var tn = startTagToken.tagName;
  var isFontWithAttrs = tn === $.FONT && (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null);
  return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];
}; //Token adjustments


exports.adjustTokenMathMLAttrs = function (token) {
  for (var i = 0; i < token.attrs.length; i++) {
    if (token.attrs[i].name === DEFINITION_URL_ATTR) {
      token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
      break;
    }
  }
};

exports.adjustTokenSVGAttrs = function (token) {
  for (var i = 0; i < token.attrs.length; i++) {
    var adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

    if (adjustedAttrName) {
      token.attrs[i].name = adjustedAttrName;
    }
  }
};

exports.adjustTokenXMLAttrs = function (token) {
  for (var i = 0; i < token.attrs.length; i++) {
    var adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

    if (adjustedAttrEntry) {
      token.attrs[i].prefix = adjustedAttrEntry.prefix;
      token.attrs[i].name = adjustedAttrEntry.name;
      token.attrs[i].namespace = adjustedAttrEntry.namespace;
    }
  }
};

exports.adjustTokenSVGTagName = function (token) {
  var adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];

  if (adjustedTagName) {
    token.tagName = adjustedTagName;
  }
}; //Integration points


function isMathMLTextIntegrationPoint(tn, ns) {
  return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
}

function isHtmlIntegrationPoint(tn, ns, attrs) {
  if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
    for (var i = 0; i < attrs.length; i++) {
      if (attrs[i].name === ATTRS.ENCODING) {
        var value = attrs[i].value.toLowerCase();
        return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
      }
    }
  }

  return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
}

exports.isIntegrationPoint = function (tn, ns, attrs, foreignNS) {
  if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) {
    return true;
  }

  if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)) {
    return true;
  }

  return false;
};

/***/ }),

/***/ 7682:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _defineProperty = (__webpack_require__(9713)["default"]);

var _NS$HTML, _NS$MATHML, _NS$SVG, _exports$SPECIAL_ELEM;

var NS = exports.NAMESPACES = {
  HTML: 'http://www.w3.org/1999/xhtml',
  MATHML: 'http://www.w3.org/1998/Math/MathML',
  SVG: 'http://www.w3.org/2000/svg',
  XLINK: 'http://www.w3.org/1999/xlink',
  XML: 'http://www.w3.org/XML/1998/namespace',
  XMLNS: 'http://www.w3.org/2000/xmlns/'
};
exports.ATTRS = {
  TYPE: 'type',
  ACTION: 'action',
  ENCODING: 'encoding',
  PROMPT: 'prompt',
  NAME: 'name',
  COLOR: 'color',
  FACE: 'face',
  SIZE: 'size'
};
exports.DOCUMENT_MODE = {
  NO_QUIRKS: 'no-quirks',
  QUIRKS: 'quirks',
  LIMITED_QUIRKS: 'limited-quirks'
};
var $ = exports.TAG_NAMES = {
  A: 'a',
  ADDRESS: 'address',
  ANNOTATION_XML: 'annotation-xml',
  APPLET: 'applet',
  AREA: 'area',
  ARTICLE: 'article',
  ASIDE: 'aside',
  B: 'b',
  BASE: 'base',
  BASEFONT: 'basefont',
  BGSOUND: 'bgsound',
  BIG: 'big',
  BLOCKQUOTE: 'blockquote',
  BODY: 'body',
  BR: 'br',
  BUTTON: 'button',
  CAPTION: 'caption',
  CENTER: 'center',
  CODE: 'code',
  COL: 'col',
  COLGROUP: 'colgroup',
  DD: 'dd',
  DESC: 'desc',
  DETAILS: 'details',
  DIALOG: 'dialog',
  DIR: 'dir',
  DIV: 'div',
  DL: 'dl',
  DT: 'dt',
  EM: 'em',
  EMBED: 'embed',
  FIELDSET: 'fieldset',
  FIGCAPTION: 'figcaption',
  FIGURE: 'figure',
  FONT: 'font',
  FOOTER: 'footer',
  FOREIGN_OBJECT: 'foreignObject',
  FORM: 'form',
  FRAME: 'frame',
  FRAMESET: 'frameset',
  H1: 'h1',
  H2: 'h2',
  H3: 'h3',
  H4: 'h4',
  H5: 'h5',
  H6: 'h6',
  HEAD: 'head',
  HEADER: 'header',
  HGROUP: 'hgroup',
  HR: 'hr',
  HTML: 'html',
  I: 'i',
  IMG: 'img',
  IMAGE: 'image',
  INPUT: 'input',
  IFRAME: 'iframe',
  KEYGEN: 'keygen',
  LABEL: 'label',
  LI: 'li',
  LINK: 'link',
  LISTING: 'listing',
  MAIN: 'main',
  MALIGNMARK: 'malignmark',
  MARQUEE: 'marquee',
  MATH: 'math',
  MENU: 'menu',
  META: 'meta',
  MGLYPH: 'mglyph',
  MI: 'mi',
  MO: 'mo',
  MN: 'mn',
  MS: 'ms',
  MTEXT: 'mtext',
  NAV: 'nav',
  NOBR: 'nobr',
  NOFRAMES: 'noframes',
  NOEMBED: 'noembed',
  NOSCRIPT: 'noscript',
  OBJECT: 'object',
  OL: 'ol',
  OPTGROUP: 'optgroup',
  OPTION: 'option',
  P: 'p',
  PARAM: 'param',
  PLAINTEXT: 'plaintext',
  PRE: 'pre',
  RB: 'rb',
  RP: 'rp',
  RT: 'rt',
  RTC: 'rtc',
  RUBY: 'ruby',
  S: 's',
  SCRIPT: 'script',
  SECTION: 'section',
  SELECT: 'select',
  SOURCE: 'source',
  SMALL: 'small',
  SPAN: 'span',
  STRIKE: 'strike',
  STRONG: 'strong',
  STYLE: 'style',
  SUB: 'sub',
  SUMMARY: 'summary',
  SUP: 'sup',
  TABLE: 'table',
  TBODY: 'tbody',
  TEMPLATE: 'template',
  TEXTAREA: 'textarea',
  TFOOT: 'tfoot',
  TD: 'td',
  TH: 'th',
  THEAD: 'thead',
  TITLE: 'title',
  TR: 'tr',
  TRACK: 'track',
  TT: 'tt',
  U: 'u',
  UL: 'ul',
  SVG: 'svg',
  VAR: 'var',
  WBR: 'wbr',
  XMP: 'xmp'
};
exports.SPECIAL_ELEMENTS = (_exports$SPECIAL_ELEM = {}, _defineProperty(_exports$SPECIAL_ELEM, NS.HTML, (_NS$HTML = {}, _defineProperty(_NS$HTML, $.ADDRESS, true), _defineProperty(_NS$HTML, $.APPLET, true), _defineProperty(_NS$HTML, $.AREA, true), _defineProperty(_NS$HTML, $.ARTICLE, true), _defineProperty(_NS$HTML, $.ASIDE, true), _defineProperty(_NS$HTML, $.BASE, true), _defineProperty(_NS$HTML, $.BASEFONT, true), _defineProperty(_NS$HTML, $.BGSOUND, true), _defineProperty(_NS$HTML, $.BLOCKQUOTE, true), _defineProperty(_NS$HTML, $.BODY, true), _defineProperty(_NS$HTML, $.BR, true), _defineProperty(_NS$HTML, $.BUTTON, true), _defineProperty(_NS$HTML, $.CAPTION, true), _defineProperty(_NS$HTML, $.CENTER, true), _defineProperty(_NS$HTML, $.COL, true), _defineProperty(_NS$HTML, $.COLGROUP, true), _defineProperty(_NS$HTML, $.DD, true), _defineProperty(_NS$HTML, $.DETAILS, true), _defineProperty(_NS$HTML, $.DIR, true), _defineProperty(_NS$HTML, $.DIV, true), _defineProperty(_NS$HTML, $.DL, true), _defineProperty(_NS$HTML, $.DT, true), _defineProperty(_NS$HTML, $.EMBED, true), _defineProperty(_NS$HTML, $.FIELDSET, true), _defineProperty(_NS$HTML, $.FIGCAPTION, true), _defineProperty(_NS$HTML, $.FIGURE, true), _defineProperty(_NS$HTML, $.FOOTER, true), _defineProperty(_NS$HTML, $.FORM, true), _defineProperty(_NS$HTML, $.FRAME, true), _defineProperty(_NS$HTML, $.FRAMESET, true), _defineProperty(_NS$HTML, $.H1, true), _defineProperty(_NS$HTML, $.H2, true), _defineProperty(_NS$HTML, $.H3, true), _defineProperty(_NS$HTML, $.H4, true), _defineProperty(_NS$HTML, $.H5, true), _defineProperty(_NS$HTML, $.H6, true), _defineProperty(_NS$HTML, $.HEAD, true), _defineProperty(_NS$HTML, $.HEADER, true), _defineProperty(_NS$HTML, $.HGROUP, true), _defineProperty(_NS$HTML, $.HR, true), _defineProperty(_NS$HTML, $.HTML, true), _defineProperty(_NS$HTML, $.IFRAME, true), _defineProperty(_NS$HTML, $.IMG, true), _defineProperty(_NS$HTML, $.INPUT, true), _defineProperty(_NS$HTML, $.LI, true), _defineProperty(_NS$HTML, $.LINK, true), _defineProperty(_NS$HTML, $.LISTING, true), _defineProperty(_NS$HTML, $.MAIN, true), _defineProperty(_NS$HTML, $.MARQUEE, true), _defineProperty(_NS$HTML, $.MENU, true), _defineProperty(_NS$HTML, $.META, true), _defineProperty(_NS$HTML, $.NAV, true), _defineProperty(_NS$HTML, $.NOEMBED, true), _defineProperty(_NS$HTML, $.NOFRAMES, true), _defineProperty(_NS$HTML, $.NOSCRIPT, true), _defineProperty(_NS$HTML, $.OBJECT, true), _defineProperty(_NS$HTML, $.OL, true), _defineProperty(_NS$HTML, $.P, true), _defineProperty(_NS$HTML, $.PARAM, true), _defineProperty(_NS$HTML, $.PLAINTEXT, true), _defineProperty(_NS$HTML, $.PRE, true), _defineProperty(_NS$HTML, $.SCRIPT, true), _defineProperty(_NS$HTML, $.SECTION, true), _defineProperty(_NS$HTML, $.SELECT, true), _defineProperty(_NS$HTML, $.SOURCE, true), _defineProperty(_NS$HTML, $.STYLE, true), _defineProperty(_NS$HTML, $.SUMMARY, true), _defineProperty(_NS$HTML, $.TABLE, true), _defineProperty(_NS$HTML, $.TBODY, true), _defineProperty(_NS$HTML, $.TD, true), _defineProperty(_NS$HTML, $.TEMPLATE, true), _defineProperty(_NS$HTML, $.TEXTAREA, true), _defineProperty(_NS$HTML, $.TFOOT, true), _defineProperty(_NS$HTML, $.TH, true), _defineProperty(_NS$HTML, $.THEAD, true), _defineProperty(_NS$HTML, $.TITLE, true), _defineProperty(_NS$HTML, $.TR, true), _defineProperty(_NS$HTML, $.TRACK, true), _defineProperty(_NS$HTML, $.UL, true), _defineProperty(_NS$HTML, $.WBR, true), _defineProperty(_NS$HTML, $.XMP, true), _NS$HTML)), _defineProperty(_exports$SPECIAL_ELEM, NS.MATHML, (_NS$MATHML = {}, _defineProperty(_NS$MATHML, $.MI, true), _defineProperty(_NS$MATHML, $.MO, true), _defineProperty(_NS$MATHML, $.MN, true), _defineProperty(_NS$MATHML, $.MS, true), _defineProperty(_NS$MATHML, $.MTEXT, true), _defineProperty(_NS$MATHML, $.ANNOTATION_XML, true), _NS$MATHML)), _defineProperty(_exports$SPECIAL_ELEM, NS.SVG, (_NS$SVG = {}, _defineProperty(_NS$SVG, $.TITLE, true), _defineProperty(_NS$SVG, $.FOREIGN_OBJECT, true), _defineProperty(_NS$SVG, $.DESC, true), _NS$SVG)), _exports$SPECIAL_ELEM);

/***/ }),

/***/ 676:
/***/ ((__unused_webpack_module, exports) => {



var UNDEFINED_CODE_POINTS = [0xfffe, 0xffff, 0x1fffe, 0x1ffff, 0x2fffe, 0x2ffff, 0x3fffe, 0x3ffff, 0x4fffe, 0x4ffff, 0x5fffe, 0x5ffff, 0x6fffe, 0x6ffff, 0x7fffe, 0x7ffff, 0x8fffe, 0x8ffff, 0x9fffe, 0x9ffff, 0xafffe, 0xaffff, 0xbfffe, 0xbffff, 0xcfffe, 0xcffff, 0xdfffe, 0xdffff, 0xefffe, 0xeffff, 0xffffe, 0xfffff, 0x10fffe, 0x10ffff];
exports.REPLACEMENT_CHARACTER = "\uFFFD";
exports.CODE_POINTS = {
  EOF: -1,
  NULL: 0x00,
  TABULATION: 0x09,
  CARRIAGE_RETURN: 0x0d,
  LINE_FEED: 0x0a,
  FORM_FEED: 0x0c,
  SPACE: 0x20,
  EXCLAMATION_MARK: 0x21,
  QUOTATION_MARK: 0x22,
  NUMBER_SIGN: 0x23,
  AMPERSAND: 0x26,
  APOSTROPHE: 0x27,
  HYPHEN_MINUS: 0x2d,
  SOLIDUS: 0x2f,
  DIGIT_0: 0x30,
  DIGIT_9: 0x39,
  SEMICOLON: 0x3b,
  LESS_THAN_SIGN: 0x3c,
  EQUALS_SIGN: 0x3d,
  GREATER_THAN_SIGN: 0x3e,
  QUESTION_MARK: 0x3f,
  LATIN_CAPITAL_A: 0x41,
  LATIN_CAPITAL_F: 0x46,
  LATIN_CAPITAL_X: 0x58,
  LATIN_CAPITAL_Z: 0x5a,
  RIGHT_SQUARE_BRACKET: 0x5d,
  GRAVE_ACCENT: 0x60,
  LATIN_SMALL_A: 0x61,
  LATIN_SMALL_F: 0x66,
  LATIN_SMALL_X: 0x78,
  LATIN_SMALL_Z: 0x7a,
  REPLACEMENT_CHARACTER: 0xfffd
};
exports.CODE_POINT_SEQUENCES = {
  DASH_DASH_STRING: [0x2d, 0x2d],
  //--
  DOCTYPE_STRING: [0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45],
  //DOCTYPE
  CDATA_START_STRING: [0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b],
  //[CDATA[
  SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74],
  //script
  PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4c, 0x49, 0x43],
  //PUBLIC
  SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4d] //SYSTEM

}; //Surrogates

exports.isSurrogate = function (cp) {
  return cp >= 0xd800 && cp <= 0xdfff;
};

exports.isSurrogatePair = function (cp) {
  return cp >= 0xdc00 && cp <= 0xdfff;
};

exports.getSurrogatePairCodePoint = function (cp1, cp2) {
  return (cp1 - 0xd800) * 0x400 + 0x2400 + cp2;
}; //NOTE: excluding NULL and ASCII whitespace


exports.isControlCodePoint = function (cp) {
  return cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f || cp >= 0x7f && cp <= 0x9f;
};

exports.isUndefinedCodePoint = function (cp) {
  return cp >= 0xfdd0 && cp <= 0xfdef || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;
};

/***/ }),

/***/ 5279:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var _inherits = (__webpack_require__(2205)["default"]);

var _createSuper = (__webpack_require__(9842)["default"]);

var Mixin = __webpack_require__(362);

var ErrorReportingMixinBase = /*#__PURE__*/function (_Mixin) {
  _inherits(ErrorReportingMixinBase, _Mixin);

  var _super = _createSuper(ErrorReportingMixinBase);

  function ErrorReportingMixinBase(host, opts) {
    var _this;

    _classCallCheck(this, ErrorReportingMixinBase);

    _this = _super.call(this, host);
    _this.posTracker = null;
    _this.onParseError = opts.onParseError;
    return _this;
  }

  _createClass(ErrorReportingMixinBase, [{
    key: "_setErrorLocation",
    value: function _setErrorLocation(err) {
      err.startLine = err.endLine = this.posTracker.line;
      err.startCol = err.endCol = this.posTracker.col;
      err.startOffset = err.endOffset = this.posTracker.offset;
    }
  }, {
    key: "_reportError",
    value: function _reportError(code) {
      var err = {
        code: code,
        startLine: -1,
        startCol: -1,
        startOffset: -1,
        endLine: -1,
        endCol: -1,
        endOffset: -1
      };

      this._setErrorLocation(err);

      this.onParseError(err);
    }
  }, {
    key: "_getOverriddenMethods",
    value: function _getOverriddenMethods(mxn) {
      return {
        _err: function _err(code) {
          mxn._reportError(code);
        }
      };
    }
  }]);

  return ErrorReportingMixinBase;
}(Mixin);

module.exports = ErrorReportingMixinBase;

/***/ }),

/***/ 4187:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var _inherits = (__webpack_require__(2205)["default"]);

var _createSuper = (__webpack_require__(9842)["default"]);

var ErrorReportingMixinBase = __webpack_require__(5279);

var ErrorReportingTokenizerMixin = __webpack_require__(5763);

var LocationInfoTokenizerMixin = __webpack_require__(6710);

var Mixin = __webpack_require__(362);

var ErrorReportingParserMixin = /*#__PURE__*/function (_ErrorReportingMixinB) {
  _inherits(ErrorReportingParserMixin, _ErrorReportingMixinB);

  var _super = _createSuper(ErrorReportingParserMixin);

  function ErrorReportingParserMixin(parser, opts) {
    var _this;

    _classCallCheck(this, ErrorReportingParserMixin);

    _this = _super.call(this, parser, opts);
    _this.opts = opts;
    _this.ctLoc = null;
    _this.locBeforeToken = false;
    return _this;
  }

  _createClass(ErrorReportingParserMixin, [{
    key: "_setErrorLocation",
    value: function _setErrorLocation(err) {
      if (this.ctLoc) {
        err.startLine = this.ctLoc.startLine;
        err.startCol = this.ctLoc.startCol;
        err.startOffset = this.ctLoc.startOffset;
        err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;
        err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;
        err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;
      }
    }
  }, {
    key: "_getOverriddenMethods",
    value: function _getOverriddenMethods(mxn, orig) {
      return {
        _bootstrap: function _bootstrap(document, fragmentContext) {
          orig._bootstrap.call(this, document, fragmentContext);

          Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);
          Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
        },
        _processInputToken: function _processInputToken(token) {
          mxn.ctLoc = token.location;

          orig._processInputToken.call(this, token);
        },
        _err: function _err(code, options) {
          mxn.locBeforeToken = options && options.beforeToken;

          mxn._reportError(code);
        }
      };
    }
  }]);

  return ErrorReportingParserMixin;
}(ErrorReportingMixinBase);

module.exports = ErrorReportingParserMixin;

/***/ }),

/***/ 6465:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var _get = (__webpack_require__(6525)["default"]);

var _getPrototypeOf = (__webpack_require__(9754)["default"]);

var _inherits = (__webpack_require__(2205)["default"]);

var _createSuper = (__webpack_require__(9842)["default"]);

var ErrorReportingMixinBase = __webpack_require__(5279);

var PositionTrackingPreprocessorMixin = __webpack_require__(5234);

var Mixin = __webpack_require__(362);

var ErrorReportingPreprocessorMixin = /*#__PURE__*/function (_ErrorReportingMixinB) {
  _inherits(ErrorReportingPreprocessorMixin, _ErrorReportingMixinB);

  var _super = _createSuper(ErrorReportingPreprocessorMixin);

  function ErrorReportingPreprocessorMixin(preprocessor, opts) {
    var _this;

    _classCallCheck(this, ErrorReportingPreprocessorMixin);

    _this = _super.call(this, preprocessor, opts);
    _this.posTracker = Mixin.install(preprocessor, PositionTrackingPreprocessorMixin);
    _this.lastErrOffset = -1;
    return _this;
  }

  _createClass(ErrorReportingPreprocessorMixin, [{
    key: "_reportError",
    value: function _reportError(code) {
      //NOTE: avoid reporting error twice on advance/retreat
      if (this.lastErrOffset !== this.posTracker.offset) {
        this.lastErrOffset = this.posTracker.offset;

        _get(_getPrototypeOf(ErrorReportingPreprocessorMixin.prototype), "_reportError", this).call(this, code);
      }
    }
  }]);

  return ErrorReportingPreprocessorMixin;
}(ErrorReportingMixinBase);

module.exports = ErrorReportingPreprocessorMixin;

/***/ }),

/***/ 5763:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _createClass = (__webpack_require__(3913)["default"]);

var _classCallCheck = (__webpack_require__(4575)["default"]);

var _inherits = (__webpack_require__(2205)["default"]);

var _createSuper = (__webpack_require__(9842)["default"]);

var ErrorReportingMixinBase = __webpack_require__(5279);

var ErrorReportingPreprocessorMixin = __webpack_require__(6465);

var Mixin = __webpack_require__(362);

var ErrorReportingTokenizerMixin = /*#__PURE__*/function (_ErrorReportingMixinB) {
  _inherits(ErrorReportingTokenizerMixin, _ErrorReportingMixinB);

  var _super = _createSuper(ErrorReportingTokenizerMixin);

  function ErrorReportingTokenizerMixin(tokenizer, opts) {
    var _this;

    _classCallCheck(this, ErrorReportingTokenizerMixin);

    _this = _super.call(this, tokenizer, opts);
    var preprocessorMixin = Mixin.install(tokenizer.preprocessor, ErrorReportingPreprocessorMixin, opts);
    _this.posTracker = preprocessorMixin.posTracker;
    return _this;
  }

  return _createClass(ErrorReportingTokenizerMixin);
}(ErrorReportingMixinBase);

module.exports = ErrorReportingTokenizerMixin;

/***/ }),

/***/ 4782:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var _inherits = (__webpack_require__(2205)["default"]);

var _createSuper = (__webpack_require__(9842)["default"]);

var Mixin = __webpack_require__(362);

var LocationInfoOpenElementStackMixin = /*#__PURE__*/function (_Mixin) {
  _inherits(LocationInfoOpenElementStackMixin, _Mixin);

  var _super = _createSuper(LocationInfoOpenElementStackMixin);

  function LocationInfoOpenElementStackMixin(stack, opts) {
    var _this;

    _classCallCheck(this, LocationInfoOpenElementStackMixin);

    _this = _super.call(this, stack);
    _this.onItemPop = opts.onItemPop;
    return _this;
  }

  _createClass(LocationInfoOpenElementStackMixin, [{
    key: "_getOverriddenMethods",
    value: function _getOverriddenMethods(mxn, orig) {
      return {
        pop: function pop() {
          mxn.onItemPop(this.current);
          orig.pop.call(this);
        },
        popAllUpToHtmlElement: function popAllUpToHtmlElement() {
          for (var i = this.stackTop; i > 0; i--) {
            mxn.onItemPop(this.items[i]);
          }

          orig.popAllUpToHtmlElement.call(this);
        },
        remove: function remove(element) {
          mxn.onItemPop(this.current);
          orig.remove.call(this, element);
        }
      };
    }
  }]);

  return LocationInfoOpenElementStackMixin;
}(Mixin);

module.exports = LocationInfoOpenElementStackMixin;

/***/ }),

/***/ 2143:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var _inherits = (__webpack_require__(2205)["default"]);

var _createSuper = (__webpack_require__(9842)["default"]);

var Mixin = __webpack_require__(362);

var Tokenizer = __webpack_require__(504);

var LocationInfoTokenizerMixin = __webpack_require__(6710);

var LocationInfoOpenElementStackMixin = __webpack_require__(4782);

var HTML = __webpack_require__(7682); //Aliases


var $ = HTML.TAG_NAMES;

var LocationInfoParserMixin = /*#__PURE__*/function (_Mixin) {
  _inherits(LocationInfoParserMixin, _Mixin);

  var _super = _createSuper(LocationInfoParserMixin);

  function LocationInfoParserMixin(parser) {
    var _this;

    _classCallCheck(this, LocationInfoParserMixin);

    _this = _super.call(this, parser);
    _this.parser = parser;
    _this.treeAdapter = _this.parser.treeAdapter;
    _this.posTracker = null;
    _this.lastStartTagToken = null;
    _this.lastFosterParentingLocation = null;
    _this.currentToken = null;
    return _this;
  }

  _createClass(LocationInfoParserMixin, [{
    key: "_setStartLocation",
    value: function _setStartLocation(element) {
      var loc = null;

      if (this.lastStartTagToken) {
        loc = Object.assign({}, this.lastStartTagToken.location);
        loc.startTag = this.lastStartTagToken.location;
      }

      this.treeAdapter.setNodeSourceCodeLocation(element, loc);
    }
  }, {
    key: "_setEndLocation",
    value: function _setEndLocation(element, closingToken) {
      var loc = this.treeAdapter.getNodeSourceCodeLocation(element);

      if (loc) {
        if (closingToken.location) {
          var ctLoc = closingToken.location;
          var tn = this.treeAdapter.getTagName(element); // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing
          // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.

          var isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;
          var endLoc = {};

          if (isClosingEndTag) {
            endLoc.endTag = Object.assign({}, ctLoc);
            endLoc.endLine = ctLoc.endLine;
            endLoc.endCol = ctLoc.endCol;
            endLoc.endOffset = ctLoc.endOffset;
          } else {
            endLoc.endLine = ctLoc.startLine;
            endLoc.endCol = ctLoc.startCol;
            endLoc.endOffset = ctLoc.startOffset;
          }

          this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
        }
      }
    }
  }, {
    key: "_getOverriddenMethods",
    value: function _getOverriddenMethods(mxn, orig) {
      return {
        _bootstrap: function _bootstrap(document, fragmentContext) {
          orig._bootstrap.call(this, document, fragmentContext);

          mxn.lastStartTagToken = null;
          mxn.lastFosterParentingLocation = null;
          mxn.currentToken = null;
          var tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
          mxn.posTracker = tokenizerMixin.posTracker;
          Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {
            onItemPop: function onItemPop(element) {
              mxn._setEndLocation(element, mxn.currentToken);
            }
          });
        },
        _runParsingLoop: function _runParsingLoop(scriptHandler) {
          orig._runParsingLoop.call(this, scriptHandler); // NOTE: generate location info for elements
          // that remains on open element stack


          for (var i = this.openElements.stackTop; i >= 0; i--) {
            mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);
          }
        },
        //Token processing
        _processTokenInForeignContent: function _processTokenInForeignContent(token) {
          mxn.currentToken = token;

          orig._processTokenInForeignContent.call(this, token);
        },
        _processToken: function _processToken(token) {
          mxn.currentToken = token;

          orig._processToken.call(this, token); //NOTE: <body> and <html> are never popped from the stack, so we need to updated
          //their end location explicitly.


          var requireExplicitUpdate = token.type === Tokenizer.END_TAG_TOKEN && (token.tagName === $.HTML || token.tagName === $.BODY && this.openElements.hasInScope($.BODY));

          if (requireExplicitUpdate) {
            for (var i = this.openElements.stackTop; i >= 0; i--) {
              var element = this.openElements.items[i];

              if (this.treeAdapter.getTagName(element) === token.tagName) {
                mxn._setEndLocation(element, token);

                break;
              }
            }
          }
        },
        //Doctype
        _setDocumentType: function _setDocumentType(token) {
          orig._setDocumentType.call(this, token);

          var documentChildren = this.treeAdapter.getChildNodes(this.document);
          var cnLength = documentChildren.length;

          for (var i = 0; i < cnLength; i++) {
            var node = documentChildren[i];

            if (this.treeAdapter.isDocumentTypeNode(node)) {
              this.treeAdapter.setNodeSourceCodeLocation(node, token.location);
              break;
            }
          }
        },
        //Elements
        _attachElementToTree: function _attachElementToTree(element) {
          //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.
          //So we will use token location stored in this methods for the element.
          mxn._setStartLocation(element);

          mxn.lastStartTagToken = null;

          orig._attachElementToTree.call(this, element);
        },
        _appendElement: function _appendElement(token, namespaceURI) {
          mxn.lastStartTagToken = token;

          orig._appendElement.call(this, token, namespaceURI);
        },
        _insertElement: function _insertElement(token, namespaceURI) {
          mxn.lastStartTagToken = token;

          orig._insertElement.call(this, token, namespaceURI);
        },
        _insertTemplate: function _insertTemplate(token) {
          mxn.lastStartTagToken = token;

          orig._insertTemplate.call(this, token);

          var tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);
          this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);
        },
        _insertFakeRootElement: function _insertFakeRootElement() {
          orig._insertFakeRootElement.call(this);

          this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);
        },
        //Comments
        _appendCommentNode: function _appendCommentNode(token, parent) {
          orig._appendCommentNode.call(this, token, parent);

          var children = this.treeAdapter.getChildNodes(parent);
          var commentNode = children[children.length - 1];
          this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
        },
        //Text
        _findFosterParentingLocation: function _findFosterParentingLocation() {
          //NOTE: store last foster parenting location, so we will be able to find inserted text
          //in case of foster parenting
          mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);
          return mxn.lastFosterParentingLocation;
        },
        _insertCharacters: function _insertCharacters(token) {
          orig._insertCharacters.call(this, token);

          var hasFosterParent = this._shouldFosterParentOnInsertion();

          var parent = hasFosterParent && mxn.lastFosterParentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current;
          var siblings = this.treeAdapter.getChildNodes(parent);
          var textNodeIdx = hasFosterParent && mxn.lastFosterParentingLocation.beforeElement ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1 : siblings.length - 1;
          var textNode = siblings[textNodeIdx]; //NOTE: if we have location assigned by another token, then just update end position

          var tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);

          if (tnLoc) {
            var _token$location = token.location,
                endLine = _token$location.endLine,
                endCol = _token$location.endCol,
                endOffset = _token$location.endOffset;
            this.treeAdapter.updateNodeSourceCodeLocation(textNode, {
              endLine: endLine,
              endCol: endCol,
              endOffset: endOffset
            });
          } else {
            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
          }
        }
      };
    }
  }]);

  return LocationInfoParserMixin;
}(Mixin);

module.exports = LocationInfoParserMixin;

/***/ }),

/***/ 6710:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var _inherits = (__webpack_require__(2205)["default"]);

var _createSuper = (__webpack_require__(9842)["default"]);

var Mixin = __webpack_require__(362);

var Tokenizer = __webpack_require__(504);

var PositionTrackingPreprocessorMixin = __webpack_require__(5234);

var LocationInfoTokenizerMixin = /*#__PURE__*/function (_Mixin) {
  _inherits(LocationInfoTokenizerMixin, _Mixin);

  var _super = _createSuper(LocationInfoTokenizerMixin);

  function LocationInfoTokenizerMixin(tokenizer) {
    var _this;

    _classCallCheck(this, LocationInfoTokenizerMixin);

    _this = _super.call(this, tokenizer);
    _this.tokenizer = tokenizer;
    _this.posTracker = Mixin.install(tokenizer.preprocessor, PositionTrackingPreprocessorMixin);
    _this.currentAttrLocation = null;
    _this.ctLoc = null;
    return _this;
  }

  _createClass(LocationInfoTokenizerMixin, [{
    key: "_getCurrentLocation",
    value: function _getCurrentLocation() {
      return {
        startLine: this.posTracker.line,
        startCol: this.posTracker.col,
        startOffset: this.posTracker.offset,
        endLine: -1,
        endCol: -1,
        endOffset: -1
      };
    }
  }, {
    key: "_attachCurrentAttrLocationInfo",
    value: function _attachCurrentAttrLocationInfo() {
      this.currentAttrLocation.endLine = this.posTracker.line;
      this.currentAttrLocation.endCol = this.posTracker.col;
      this.currentAttrLocation.endOffset = this.posTracker.offset;
      var currentToken = this.tokenizer.currentToken;
      var currentAttr = this.tokenizer.currentAttr;

      if (!currentToken.location.attrs) {
        currentToken.location.attrs = Object.create(null);
      }

      currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;
    }
  }, {
    key: "_getOverriddenMethods",
    value: function _getOverriddenMethods(mxn, orig) {
      var methods = {
        _createStartTagToken: function _createStartTagToken() {
          orig._createStartTagToken.call(this);

          this.currentToken.location = mxn.ctLoc;
        },
        _createEndTagToken: function _createEndTagToken() {
          orig._createEndTagToken.call(this);

          this.currentToken.location = mxn.ctLoc;
        },
        _createCommentToken: function _createCommentToken() {
          orig._createCommentToken.call(this);

          this.currentToken.location = mxn.ctLoc;
        },
        _createDoctypeToken: function _createDoctypeToken(initialName) {
          orig._createDoctypeToken.call(this, initialName);

          this.currentToken.location = mxn.ctLoc;
        },
        _createCharacterToken: function _createCharacterToken(type, ch) {
          orig._createCharacterToken.call(this, type, ch);

          this.currentCharacterToken.location = mxn.ctLoc;
        },
        _createEOFToken: function _createEOFToken() {
          orig._createEOFToken.call(this);

          this.currentToken.location = mxn._getCurrentLocation();
        },
        _createAttr: function _createAttr(attrNameFirstCh) {
          orig._createAttr.call(this, attrNameFirstCh);

          mxn.currentAttrLocation = mxn._getCurrentLocation();
        },
        _leaveAttrName: function _leaveAttrName(toState) {
          orig._leaveAttrName.call(this, toState);

          mxn._attachCurrentAttrLocationInfo();
        },
        _leaveAttrValue: function _leaveAttrValue(toState) {
          orig._leaveAttrValue.call(this, toState);

          mxn._attachCurrentAttrLocationInfo();
        },
        _emitCurrentToken: function _emitCurrentToken() {
          var ctLoc = this.currentToken.location; //NOTE: if we have pending character token make it's end location equal to the
          //current token's start location.

          if (this.currentCharacterToken) {
            this.currentCharacterToken.location.endLine = ctLoc.startLine;
            this.currentCharacterToken.location.endCol = ctLoc.startCol;
            this.currentCharacterToken.location.endOffset = ctLoc.startOffset;
          }

          if (this.currentToken.type === Tokenizer.EOF_TOKEN) {
            ctLoc.endLine = ctLoc.startLine;
            ctLoc.endCol = ctLoc.startCol;
            ctLoc.endOffset = ctLoc.startOffset;
          } else {
            ctLoc.endLine = mxn.posTracker.line;
            ctLoc.endCol = mxn.posTracker.col + 1;
            ctLoc.endOffset = mxn.posTracker.offset + 1;
          }

          orig._emitCurrentToken.call(this);
        },
        _emitCurrentCharacterToken: function _emitCurrentCharacterToken() {
          var ctLoc = this.currentCharacterToken && this.currentCharacterToken.location; //NOTE: if we have character token and it's location wasn't set in the _emitCurrentToken(),
          //then set it's location at the current preprocessor position.
          //We don't need to increment preprocessor position, since character token
          //emission is always forced by the start of the next character token here.
          //So, we already have advanced position.

          if (ctLoc && ctLoc.endOffset === -1) {
            ctLoc.endLine = mxn.posTracker.line;
            ctLoc.endCol = mxn.posTracker.col;
            ctLoc.endOffset = mxn.posTracker.offset;
          }

          orig._emitCurrentCharacterToken.call(this);
        }
      }; //NOTE: patch initial states for each mode to obtain token start position

      Object.keys(Tokenizer.MODE).forEach(function (modeName) {
        var state = Tokenizer.MODE[modeName];

        methods[state] = function (cp) {
          mxn.ctLoc = mxn._getCurrentLocation();
          orig[state].call(this, cp);
        };
      });
      return methods;
    }
  }]);

  return LocationInfoTokenizerMixin;
}(Mixin);

module.exports = LocationInfoTokenizerMixin;

/***/ }),

/***/ 5234:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var _inherits = (__webpack_require__(2205)["default"]);

var _createSuper = (__webpack_require__(9842)["default"]);

var Mixin = __webpack_require__(362);

var PositionTrackingPreprocessorMixin = /*#__PURE__*/function (_Mixin) {
  _inherits(PositionTrackingPreprocessorMixin, _Mixin);

  var _super = _createSuper(PositionTrackingPreprocessorMixin);

  function PositionTrackingPreprocessorMixin(preprocessor) {
    var _this;

    _classCallCheck(this, PositionTrackingPreprocessorMixin);

    _this = _super.call(this, preprocessor);
    _this.preprocessor = preprocessor;
    _this.isEol = false;
    _this.lineStartPos = 0;
    _this.droppedBufferSize = 0;
    _this.offset = 0;
    _this.col = 0;
    _this.line = 1;
    return _this;
  }

  _createClass(PositionTrackingPreprocessorMixin, [{
    key: "_getOverriddenMethods",
    value: function _getOverriddenMethods(mxn, orig) {
      return {
        advance: function advance() {
          var pos = this.pos + 1;
          var ch = this.html[pos]; //NOTE: LF should be in the last column of the line

          if (mxn.isEol) {
            mxn.isEol = false;
            mxn.line++;
            mxn.lineStartPos = pos;
          }

          if (ch === '\n' || ch === '\r' && this.html[pos + 1] !== '\n') {
            mxn.isEol = true;
          }

          mxn.col = pos - mxn.lineStartPos + 1;
          mxn.offset = mxn.droppedBufferSize + pos;
          return orig.advance.call(this);
        },
        retreat: function retreat() {
          orig.retreat.call(this);
          mxn.isEol = false;
          mxn.col = this.pos - mxn.lineStartPos + 1;
        },
        dropParsedChunk: function dropParsedChunk() {
          var prevPos = this.pos;
          orig.dropParsedChunk.call(this);
          var reduction = prevPos - this.pos;
          mxn.lineStartPos -= reduction;
          mxn.droppedBufferSize += reduction;
          mxn.offset = mxn.droppedBufferSize + this.pos;
        }
      };
    }
  }]);

  return PositionTrackingPreprocessorMixin;
}(Mixin);

module.exports = PositionTrackingPreprocessorMixin;

/***/ }),

/***/ 4300:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

 //Const

var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var NOAH_ARK_CAPACITY = 3; //List of formatting elements

var FormattingElementList = /*#__PURE__*/function () {
  function FormattingElementList(treeAdapter) {
    _classCallCheck(this, FormattingElementList);

    this.length = 0;
    this.entries = [];
    this.treeAdapter = treeAdapter;
    this.bookmark = null;
  } //Noah Ark's condition
  //OPTIMIZATION: at first we try to find possible candidates for exclusion using
  //lightweight heuristics without thorough attributes check.


  _createClass(FormattingElementList, [{
    key: "_getNoahArkConditionCandidates",
    value: function _getNoahArkConditionCandidates(newElement) {
      var candidates = [];

      if (this.length >= NOAH_ARK_CAPACITY) {
        var neAttrsLength = this.treeAdapter.getAttrList(newElement).length;
        var neTagName = this.treeAdapter.getTagName(newElement);
        var neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);

        for (var i = this.length - 1; i >= 0; i--) {
          var entry = this.entries[i];

          if (entry.type === FormattingElementList.MARKER_ENTRY) {
            break;
          }

          var element = entry.element;
          var elementAttrs = this.treeAdapter.getAttrList(element);
          var isCandidate = this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI && elementAttrs.length === neAttrsLength;

          if (isCandidate) {
            candidates.push({
              idx: i,
              attrs: elementAttrs
            });
          }
        }
      }

      return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
    }
  }, {
    key: "_ensureNoahArkCondition",
    value: function _ensureNoahArkCondition(newElement) {
      var candidates = this._getNoahArkConditionCandidates(newElement);

      var cLength = candidates.length;

      if (cLength) {
        var neAttrs = this.treeAdapter.getAttrList(newElement);
        var neAttrsLength = neAttrs.length;
        var neAttrsMap = Object.create(null); //NOTE: build attrs map for the new element so we can perform fast lookups

        for (var i = 0; i < neAttrsLength; i++) {
          var neAttr = neAttrs[i];
          neAttrsMap[neAttr.name] = neAttr.value;
        }

        for (var _i = 0; _i < neAttrsLength; _i++) {
          for (var j = 0; j < cLength; j++) {
            var cAttr = candidates[j].attrs[_i];

            if (neAttrsMap[cAttr.name] !== cAttr.value) {
              candidates.splice(j, 1);
              cLength--;
            }

            if (candidates.length < NOAH_ARK_CAPACITY) {
              return;
            }
          }
        } //NOTE: remove bottommost candidates until Noah's Ark condition will not be met


        for (var _i2 = cLength - 1; _i2 >= NOAH_ARK_CAPACITY - 1; _i2--) {
          this.entries.splice(candidates[_i2].idx, 1);
          this.length--;
        }
      }
    } //Mutations

  }, {
    key: "insertMarker",
    value: function insertMarker() {
      this.entries.push({
        type: FormattingElementList.MARKER_ENTRY
      });
      this.length++;
    }
  }, {
    key: "pushElement",
    value: function pushElement(element, token) {
      this._ensureNoahArkCondition(element);

      this.entries.push({
        type: FormattingElementList.ELEMENT_ENTRY,
        element: element,
        token: token
      });
      this.length++;
    }
  }, {
    key: "insertElementAfterBookmark",
    value: function insertElementAfterBookmark(element, token) {
      var bookmarkIdx = this.length - 1;

      for (; bookmarkIdx >= 0; bookmarkIdx--) {
        if (this.entries[bookmarkIdx] === this.bookmark) {
          break;
        }
      }

      this.entries.splice(bookmarkIdx + 1, 0, {
        type: FormattingElementList.ELEMENT_ENTRY,
        element: element,
        token: token
      });
      this.length++;
    }
  }, {
    key: "removeEntry",
    value: function removeEntry(entry) {
      for (var i = this.length - 1; i >= 0; i--) {
        if (this.entries[i] === entry) {
          this.entries.splice(i, 1);
          this.length--;
          break;
        }
      }
    }
  }, {
    key: "clearToLastMarker",
    value: function clearToLastMarker() {
      while (this.length) {
        var entry = this.entries.pop();
        this.length--;

        if (entry.type === FormattingElementList.MARKER_ENTRY) {
          break;
        }
      }
    } //Search

  }, {
    key: "getElementEntryInScopeWithTagName",
    value: function getElementEntryInScopeWithTagName(tagName) {
      for (var i = this.length - 1; i >= 0; i--) {
        var entry = this.entries[i];

        if (entry.type === FormattingElementList.MARKER_ENTRY) {
          return null;
        }

        if (this.treeAdapter.getTagName(entry.element) === tagName) {
          return entry;
        }
      }

      return null;
    }
  }, {
    key: "getElementEntry",
    value: function getElementEntry(element) {
      for (var i = this.length - 1; i >= 0; i--) {
        var entry = this.entries[i];

        if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element) {
          return entry;
        }
      }

      return null;
    }
  }]);

  return FormattingElementList;
}(); //Entry types


FormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';
FormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';
module.exports = FormattingElementList;

/***/ }),

/***/ 4016:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var _defineProperty = (__webpack_require__(9713)["default"]);

var _INSERTION_MODE_RESET, _TEMPLATE_INSERTION_M, _INITIAL_MODE, _BEFORE_HTML_MODE, _BEFORE_HEAD_MODE, _IN_HEAD_MODE, _IN_HEAD_NO_SCRIPT_MO, _AFTER_HEAD_MODE, _IN_BODY_MODE, _TEXT_MODE, _IN_TABLE_MODE, _IN_TABLE_TEXT_MODE, _IN_CAPTION_MODE, _IN_COLUMN_GROUP_MODE, _IN_TABLE_BODY_MODE, _IN_ROW_MODE, _IN_CELL_MODE, _IN_SELECT_MODE, _IN_SELECT_IN_TABLE_M, _IN_TEMPLATE_MODE, _AFTER_BODY_MODE, _IN_FRAMESET_MODE, _AFTER_FRAMESET_MODE, _AFTER_AFTER_BODY_MOD, _AFTER_AFTER_FRAMESET, _TOKEN_HANDLERS;

var Tokenizer = __webpack_require__(504);

var OpenElementStack = __webpack_require__(1902);

var FormattingElementList = __webpack_require__(4300);

var LocationInfoParserMixin = __webpack_require__(2143);

var ErrorReportingParserMixin = __webpack_require__(4187);

var Mixin = __webpack_require__(362);

var defaultTreeAdapter = __webpack_require__(4251);

var mergeOptions = __webpack_require__(1886);

var doctype = __webpack_require__(8148);

var foreignContent = __webpack_require__(4262);

var ERR = __webpack_require__(7983);

var unicode = __webpack_require__(676);

var HTML = __webpack_require__(7682); //Aliases


var $ = HTML.TAG_NAMES;
var NS = HTML.NAMESPACES;
var ATTRS = HTML.ATTRS;
var DEFAULT_OPTIONS = {
  scriptingEnabled: true,
  sourceCodeLocationInfo: false,
  onParseError: null,
  treeAdapter: defaultTreeAdapter
}; //Misc constants

var HIDDEN_INPUT_TYPE = 'hidden'; //Adoption agency loops iteration count

var AA_OUTER_LOOP_ITER = 8;
var AA_INNER_LOOP_ITER = 3; //Insertion modes

var INITIAL_MODE = 'INITIAL_MODE';
var BEFORE_HTML_MODE = 'BEFORE_HTML_MODE';
var BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE';
var IN_HEAD_MODE = 'IN_HEAD_MODE';
var IN_HEAD_NO_SCRIPT_MODE = 'IN_HEAD_NO_SCRIPT_MODE';
var AFTER_HEAD_MODE = 'AFTER_HEAD_MODE';
var IN_BODY_MODE = 'IN_BODY_MODE';
var TEXT_MODE = 'TEXT_MODE';
var IN_TABLE_MODE = 'IN_TABLE_MODE';
var IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE';
var IN_CAPTION_MODE = 'IN_CAPTION_MODE';
var IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE';
var IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE';
var IN_ROW_MODE = 'IN_ROW_MODE';
var IN_CELL_MODE = 'IN_CELL_MODE';
var IN_SELECT_MODE = 'IN_SELECT_MODE';
var IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE';
var IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE';
var AFTER_BODY_MODE = 'AFTER_BODY_MODE';
var IN_FRAMESET_MODE = 'IN_FRAMESET_MODE';
var AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE';
var AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE';
var AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE'; //Insertion mode reset map

var INSERTION_MODE_RESET_MAP = (_INSERTION_MODE_RESET = {}, _defineProperty(_INSERTION_MODE_RESET, $.TR, IN_ROW_MODE), _defineProperty(_INSERTION_MODE_RESET, $.TBODY, IN_TABLE_BODY_MODE), _defineProperty(_INSERTION_MODE_RESET, $.THEAD, IN_TABLE_BODY_MODE), _defineProperty(_INSERTION_MODE_RESET, $.TFOOT, IN_TABLE_BODY_MODE), _defineProperty(_INSERTION_MODE_RESET, $.CAPTION, IN_CAPTION_MODE), _defineProperty(_INSERTION_MODE_RESET, $.COLGROUP, IN_COLUMN_GROUP_MODE), _defineProperty(_INSERTION_MODE_RESET, $.TABLE, IN_TABLE_MODE), _defineProperty(_INSERTION_MODE_RESET, $.BODY, IN_BODY_MODE), _defineProperty(_INSERTION_MODE_RESET, $.FRAMESET, IN_FRAMESET_MODE), _INSERTION_MODE_RESET); //Template insertion mode switch map

var TEMPLATE_INSERTION_MODE_SWITCH_MAP = (_TEMPLATE_INSERTION_M = {}, _defineProperty(_TEMPLATE_INSERTION_M, $.CAPTION, IN_TABLE_MODE), _defineProperty(_TEMPLATE_INSERTION_M, $.COLGROUP, IN_TABLE_MODE), _defineProperty(_TEMPLATE_INSERTION_M, $.TBODY, IN_TABLE_MODE), _defineProperty(_TEMPLATE_INSERTION_M, $.TFOOT, IN_TABLE_MODE), _defineProperty(_TEMPLATE_INSERTION_M, $.THEAD, IN_TABLE_MODE), _defineProperty(_TEMPLATE_INSERTION_M, $.COL, IN_COLUMN_GROUP_MODE), _defineProperty(_TEMPLATE_INSERTION_M, $.TR, IN_TABLE_BODY_MODE), _defineProperty(_TEMPLATE_INSERTION_M, $.TD, IN_ROW_MODE), _defineProperty(_TEMPLATE_INSERTION_M, $.TH, IN_ROW_MODE), _TEMPLATE_INSERTION_M); //Token handlers map for insertion modes

var TOKEN_HANDLERS = (_TOKEN_HANDLERS = {}, _defineProperty(_TOKEN_HANDLERS, INITIAL_MODE, (_INITIAL_MODE = {}, _defineProperty(_INITIAL_MODE, Tokenizer.CHARACTER_TOKEN, tokenInInitialMode), _defineProperty(_INITIAL_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenInInitialMode), _defineProperty(_INITIAL_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, ignoreToken), _defineProperty(_INITIAL_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_INITIAL_MODE, Tokenizer.DOCTYPE_TOKEN, doctypeInInitialMode), _defineProperty(_INITIAL_MODE, Tokenizer.START_TAG_TOKEN, tokenInInitialMode), _defineProperty(_INITIAL_MODE, Tokenizer.END_TAG_TOKEN, tokenInInitialMode), _defineProperty(_INITIAL_MODE, Tokenizer.EOF_TOKEN, tokenInInitialMode), _INITIAL_MODE)), _defineProperty(_TOKEN_HANDLERS, BEFORE_HTML_MODE, (_BEFORE_HTML_MODE = {}, _defineProperty(_BEFORE_HTML_MODE, Tokenizer.CHARACTER_TOKEN, tokenBeforeHtml), _defineProperty(_BEFORE_HTML_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenBeforeHtml), _defineProperty(_BEFORE_HTML_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, ignoreToken), _defineProperty(_BEFORE_HTML_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_BEFORE_HTML_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_BEFORE_HTML_MODE, Tokenizer.START_TAG_TOKEN, startTagBeforeHtml), _defineProperty(_BEFORE_HTML_MODE, Tokenizer.END_TAG_TOKEN, endTagBeforeHtml), _defineProperty(_BEFORE_HTML_MODE, Tokenizer.EOF_TOKEN, tokenBeforeHtml), _BEFORE_HTML_MODE)), _defineProperty(_TOKEN_HANDLERS, BEFORE_HEAD_MODE, (_BEFORE_HEAD_MODE = {}, _defineProperty(_BEFORE_HEAD_MODE, Tokenizer.CHARACTER_TOKEN, tokenBeforeHead), _defineProperty(_BEFORE_HEAD_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenBeforeHead), _defineProperty(_BEFORE_HEAD_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, ignoreToken), _defineProperty(_BEFORE_HEAD_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_BEFORE_HEAD_MODE, Tokenizer.DOCTYPE_TOKEN, misplacedDoctype), _defineProperty(_BEFORE_HEAD_MODE, Tokenizer.START_TAG_TOKEN, startTagBeforeHead), _defineProperty(_BEFORE_HEAD_MODE, Tokenizer.END_TAG_TOKEN, endTagBeforeHead), _defineProperty(_BEFORE_HEAD_MODE, Tokenizer.EOF_TOKEN, tokenBeforeHead), _BEFORE_HEAD_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_HEAD_MODE, (_IN_HEAD_MODE = {}, _defineProperty(_IN_HEAD_MODE, Tokenizer.CHARACTER_TOKEN, tokenInHead), _defineProperty(_IN_HEAD_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenInHead), _defineProperty(_IN_HEAD_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), _defineProperty(_IN_HEAD_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_HEAD_MODE, Tokenizer.DOCTYPE_TOKEN, misplacedDoctype), _defineProperty(_IN_HEAD_MODE, Tokenizer.START_TAG_TOKEN, startTagInHead), _defineProperty(_IN_HEAD_MODE, Tokenizer.END_TAG_TOKEN, endTagInHead), _defineProperty(_IN_HEAD_MODE, Tokenizer.EOF_TOKEN, tokenInHead), _IN_HEAD_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_HEAD_NO_SCRIPT_MODE, (_IN_HEAD_NO_SCRIPT_MO = {}, _defineProperty(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.CHARACTER_TOKEN, tokenInHeadNoScript), _defineProperty(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.NULL_CHARACTER_TOKEN, tokenInHeadNoScript), _defineProperty(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), _defineProperty(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.DOCTYPE_TOKEN, misplacedDoctype), _defineProperty(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.START_TAG_TOKEN, startTagInHeadNoScript), _defineProperty(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.END_TAG_TOKEN, endTagInHeadNoScript), _defineProperty(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.EOF_TOKEN, tokenInHeadNoScript), _IN_HEAD_NO_SCRIPT_MO)), _defineProperty(_TOKEN_HANDLERS, AFTER_HEAD_MODE, (_AFTER_HEAD_MODE = {}, _defineProperty(_AFTER_HEAD_MODE, Tokenizer.CHARACTER_TOKEN, tokenAfterHead), _defineProperty(_AFTER_HEAD_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenAfterHead), _defineProperty(_AFTER_HEAD_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), _defineProperty(_AFTER_HEAD_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_AFTER_HEAD_MODE, Tokenizer.DOCTYPE_TOKEN, misplacedDoctype), _defineProperty(_AFTER_HEAD_MODE, Tokenizer.START_TAG_TOKEN, startTagAfterHead), _defineProperty(_AFTER_HEAD_MODE, Tokenizer.END_TAG_TOKEN, endTagAfterHead), _defineProperty(_AFTER_HEAD_MODE, Tokenizer.EOF_TOKEN, tokenAfterHead), _AFTER_HEAD_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_BODY_MODE, (_IN_BODY_MODE = {}, _defineProperty(_IN_BODY_MODE, Tokenizer.CHARACTER_TOKEN, characterInBody), _defineProperty(_IN_BODY_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), _defineProperty(_IN_BODY_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), _defineProperty(_IN_BODY_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_BODY_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_IN_BODY_MODE, Tokenizer.START_TAG_TOKEN, startTagInBody), _defineProperty(_IN_BODY_MODE, Tokenizer.END_TAG_TOKEN, endTagInBody), _defineProperty(_IN_BODY_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_BODY_MODE)), _defineProperty(_TOKEN_HANDLERS, TEXT_MODE, (_TEXT_MODE = {}, _defineProperty(_TEXT_MODE, Tokenizer.CHARACTER_TOKEN, insertCharacters), _defineProperty(_TEXT_MODE, Tokenizer.NULL_CHARACTER_TOKEN, insertCharacters), _defineProperty(_TEXT_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), _defineProperty(_TEXT_MODE, Tokenizer.COMMENT_TOKEN, ignoreToken), _defineProperty(_TEXT_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_TEXT_MODE, Tokenizer.START_TAG_TOKEN, ignoreToken), _defineProperty(_TEXT_MODE, Tokenizer.END_TAG_TOKEN, endTagInText), _defineProperty(_TEXT_MODE, Tokenizer.EOF_TOKEN, eofInText), _TEXT_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_TABLE_MODE, (_IN_TABLE_MODE = {}, _defineProperty(_IN_TABLE_MODE, Tokenizer.CHARACTER_TOKEN, characterInTable), _defineProperty(_IN_TABLE_MODE, Tokenizer.NULL_CHARACTER_TOKEN, characterInTable), _defineProperty(_IN_TABLE_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, characterInTable), _defineProperty(_IN_TABLE_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_TABLE_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_IN_TABLE_MODE, Tokenizer.START_TAG_TOKEN, startTagInTable), _defineProperty(_IN_TABLE_MODE, Tokenizer.END_TAG_TOKEN, endTagInTable), _defineProperty(_IN_TABLE_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_TABLE_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_TABLE_TEXT_MODE, (_IN_TABLE_TEXT_MODE = {}, _defineProperty(_IN_TABLE_TEXT_MODE, Tokenizer.CHARACTER_TOKEN, characterInTableText), _defineProperty(_IN_TABLE_TEXT_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), _defineProperty(_IN_TABLE_TEXT_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInTableText), _defineProperty(_IN_TABLE_TEXT_MODE, Tokenizer.COMMENT_TOKEN, tokenInTableText), _defineProperty(_IN_TABLE_TEXT_MODE, Tokenizer.DOCTYPE_TOKEN, tokenInTableText), _defineProperty(_IN_TABLE_TEXT_MODE, Tokenizer.START_TAG_TOKEN, tokenInTableText), _defineProperty(_IN_TABLE_TEXT_MODE, Tokenizer.END_TAG_TOKEN, tokenInTableText), _defineProperty(_IN_TABLE_TEXT_MODE, Tokenizer.EOF_TOKEN, tokenInTableText), _IN_TABLE_TEXT_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_CAPTION_MODE, (_IN_CAPTION_MODE = {}, _defineProperty(_IN_CAPTION_MODE, Tokenizer.CHARACTER_TOKEN, characterInBody), _defineProperty(_IN_CAPTION_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), _defineProperty(_IN_CAPTION_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), _defineProperty(_IN_CAPTION_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_CAPTION_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_IN_CAPTION_MODE, Tokenizer.START_TAG_TOKEN, startTagInCaption), _defineProperty(_IN_CAPTION_MODE, Tokenizer.END_TAG_TOKEN, endTagInCaption), _defineProperty(_IN_CAPTION_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_CAPTION_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_COLUMN_GROUP_MODE, (_IN_COLUMN_GROUP_MODE = {}, _defineProperty(_IN_COLUMN_GROUP_MODE, Tokenizer.CHARACTER_TOKEN, tokenInColumnGroup), _defineProperty(_IN_COLUMN_GROUP_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenInColumnGroup), _defineProperty(_IN_COLUMN_GROUP_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), _defineProperty(_IN_COLUMN_GROUP_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_COLUMN_GROUP_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_IN_COLUMN_GROUP_MODE, Tokenizer.START_TAG_TOKEN, startTagInColumnGroup), _defineProperty(_IN_COLUMN_GROUP_MODE, Tokenizer.END_TAG_TOKEN, endTagInColumnGroup), _defineProperty(_IN_COLUMN_GROUP_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_COLUMN_GROUP_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_TABLE_BODY_MODE, (_IN_TABLE_BODY_MODE = {}, _defineProperty(_IN_TABLE_BODY_MODE, Tokenizer.CHARACTER_TOKEN, characterInTable), _defineProperty(_IN_TABLE_BODY_MODE, Tokenizer.NULL_CHARACTER_TOKEN, characterInTable), _defineProperty(_IN_TABLE_BODY_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, characterInTable), _defineProperty(_IN_TABLE_BODY_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_TABLE_BODY_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_IN_TABLE_BODY_MODE, Tokenizer.START_TAG_TOKEN, startTagInTableBody), _defineProperty(_IN_TABLE_BODY_MODE, Tokenizer.END_TAG_TOKEN, endTagInTableBody), _defineProperty(_IN_TABLE_BODY_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_TABLE_BODY_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_ROW_MODE, (_IN_ROW_MODE = {}, _defineProperty(_IN_ROW_MODE, Tokenizer.CHARACTER_TOKEN, characterInTable), _defineProperty(_IN_ROW_MODE, Tokenizer.NULL_CHARACTER_TOKEN, characterInTable), _defineProperty(_IN_ROW_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, characterInTable), _defineProperty(_IN_ROW_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_ROW_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_IN_ROW_MODE, Tokenizer.START_TAG_TOKEN, startTagInRow), _defineProperty(_IN_ROW_MODE, Tokenizer.END_TAG_TOKEN, endTagInRow), _defineProperty(_IN_ROW_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_ROW_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_CELL_MODE, (_IN_CELL_MODE = {}, _defineProperty(_IN_CELL_MODE, Tokenizer.CHARACTER_TOKEN, characterInBody), _defineProperty(_IN_CELL_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), _defineProperty(_IN_CELL_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), _defineProperty(_IN_CELL_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_CELL_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_IN_CELL_MODE, Tokenizer.START_TAG_TOKEN, startTagInCell), _defineProperty(_IN_CELL_MODE, Tokenizer.END_TAG_TOKEN, endTagInCell), _defineProperty(_IN_CELL_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_CELL_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_SELECT_MODE, (_IN_SELECT_MODE = {}, _defineProperty(_IN_SELECT_MODE, Tokenizer.CHARACTER_TOKEN, insertCharacters), _defineProperty(_IN_SELECT_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), _defineProperty(_IN_SELECT_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), _defineProperty(_IN_SELECT_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_SELECT_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_IN_SELECT_MODE, Tokenizer.START_TAG_TOKEN, startTagInSelect), _defineProperty(_IN_SELECT_MODE, Tokenizer.END_TAG_TOKEN, endTagInSelect), _defineProperty(_IN_SELECT_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_SELECT_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_SELECT_IN_TABLE_MODE, (_IN_SELECT_IN_TABLE_M = {}, _defineProperty(_IN_SELECT_IN_TABLE_M, Tokenizer.CHARACTER_TOKEN, insertCharacters), _defineProperty(_IN_SELECT_IN_TABLE_M, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), _defineProperty(_IN_SELECT_IN_TABLE_M, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), _defineProperty(_IN_SELECT_IN_TABLE_M, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_SELECT_IN_TABLE_M, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_IN_SELECT_IN_TABLE_M, Tokenizer.START_TAG_TOKEN, startTagInSelectInTable), _defineProperty(_IN_SELECT_IN_TABLE_M, Tokenizer.END_TAG_TOKEN, endTagInSelectInTable), _defineProperty(_IN_SELECT_IN_TABLE_M, Tokenizer.EOF_TOKEN, eofInBody), _IN_SELECT_IN_TABLE_M)), _defineProperty(_TOKEN_HANDLERS, IN_TEMPLATE_MODE, (_IN_TEMPLATE_MODE = {}, _defineProperty(_IN_TEMPLATE_MODE, Tokenizer.CHARACTER_TOKEN, characterInBody), _defineProperty(_IN_TEMPLATE_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), _defineProperty(_IN_TEMPLATE_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), _defineProperty(_IN_TEMPLATE_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_TEMPLATE_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_IN_TEMPLATE_MODE, Tokenizer.START_TAG_TOKEN, startTagInTemplate), _defineProperty(_IN_TEMPLATE_MODE, Tokenizer.END_TAG_TOKEN, endTagInTemplate), _defineProperty(_IN_TEMPLATE_MODE, Tokenizer.EOF_TOKEN, eofInTemplate), _IN_TEMPLATE_MODE)), _defineProperty(_TOKEN_HANDLERS, AFTER_BODY_MODE, (_AFTER_BODY_MODE = {}, _defineProperty(_AFTER_BODY_MODE, Tokenizer.CHARACTER_TOKEN, tokenAfterBody), _defineProperty(_AFTER_BODY_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenAfterBody), _defineProperty(_AFTER_BODY_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), _defineProperty(_AFTER_BODY_MODE, Tokenizer.COMMENT_TOKEN, appendCommentToRootHtmlElement), _defineProperty(_AFTER_BODY_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_AFTER_BODY_MODE, Tokenizer.START_TAG_TOKEN, startTagAfterBody), _defineProperty(_AFTER_BODY_MODE, Tokenizer.END_TAG_TOKEN, endTagAfterBody), _defineProperty(_AFTER_BODY_MODE, Tokenizer.EOF_TOKEN, stopParsing), _AFTER_BODY_MODE)), _defineProperty(_TOKEN_HANDLERS, IN_FRAMESET_MODE, (_IN_FRAMESET_MODE = {}, _defineProperty(_IN_FRAMESET_MODE, Tokenizer.CHARACTER_TOKEN, ignoreToken), _defineProperty(_IN_FRAMESET_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), _defineProperty(_IN_FRAMESET_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), _defineProperty(_IN_FRAMESET_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_IN_FRAMESET_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_IN_FRAMESET_MODE, Tokenizer.START_TAG_TOKEN, startTagInFrameset), _defineProperty(_IN_FRAMESET_MODE, Tokenizer.END_TAG_TOKEN, endTagInFrameset), _defineProperty(_IN_FRAMESET_MODE, Tokenizer.EOF_TOKEN, stopParsing), _IN_FRAMESET_MODE)), _defineProperty(_TOKEN_HANDLERS, AFTER_FRAMESET_MODE, (_AFTER_FRAMESET_MODE = {}, _defineProperty(_AFTER_FRAMESET_MODE, Tokenizer.CHARACTER_TOKEN, ignoreToken), _defineProperty(_AFTER_FRAMESET_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), _defineProperty(_AFTER_FRAMESET_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), _defineProperty(_AFTER_FRAMESET_MODE, Tokenizer.COMMENT_TOKEN, appendComment), _defineProperty(_AFTER_FRAMESET_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_AFTER_FRAMESET_MODE, Tokenizer.START_TAG_TOKEN, startTagAfterFrameset), _defineProperty(_AFTER_FRAMESET_MODE, Tokenizer.END_TAG_TOKEN, endTagAfterFrameset), _defineProperty(_AFTER_FRAMESET_MODE, Tokenizer.EOF_TOKEN, stopParsing), _AFTER_FRAMESET_MODE)), _defineProperty(_TOKEN_HANDLERS, AFTER_AFTER_BODY_MODE, (_AFTER_AFTER_BODY_MOD = {}, _defineProperty(_AFTER_AFTER_BODY_MOD, Tokenizer.CHARACTER_TOKEN, tokenAfterAfterBody), _defineProperty(_AFTER_AFTER_BODY_MOD, Tokenizer.NULL_CHARACTER_TOKEN, tokenAfterAfterBody), _defineProperty(_AFTER_AFTER_BODY_MOD, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), _defineProperty(_AFTER_AFTER_BODY_MOD, Tokenizer.COMMENT_TOKEN, appendCommentToDocument), _defineProperty(_AFTER_AFTER_BODY_MOD, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_AFTER_AFTER_BODY_MOD, Tokenizer.START_TAG_TOKEN, startTagAfterAfterBody), _defineProperty(_AFTER_AFTER_BODY_MOD, Tokenizer.END_TAG_TOKEN, tokenAfterAfterBody), _defineProperty(_AFTER_AFTER_BODY_MOD, Tokenizer.EOF_TOKEN, stopParsing), _AFTER_AFTER_BODY_MOD)), _defineProperty(_TOKEN_HANDLERS, AFTER_AFTER_FRAMESET_MODE, (_AFTER_AFTER_FRAMESET = {}, _defineProperty(_AFTER_AFTER_FRAMESET, Tokenizer.CHARACTER_TOKEN, ignoreToken), _defineProperty(_AFTER_AFTER_FRAMESET, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), _defineProperty(_AFTER_AFTER_FRAMESET, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), _defineProperty(_AFTER_AFTER_FRAMESET, Tokenizer.COMMENT_TOKEN, appendCommentToDocument), _defineProperty(_AFTER_AFTER_FRAMESET, Tokenizer.DOCTYPE_TOKEN, ignoreToken), _defineProperty(_AFTER_AFTER_FRAMESET, Tokenizer.START_TAG_TOKEN, startTagAfterAfterFrameset), _defineProperty(_AFTER_AFTER_FRAMESET, Tokenizer.END_TAG_TOKEN, ignoreToken), _defineProperty(_AFTER_AFTER_FRAMESET, Tokenizer.EOF_TOKEN, stopParsing), _AFTER_AFTER_FRAMESET)), _TOKEN_HANDLERS); //Parser

var Parser = /*#__PURE__*/function () {
  function Parser(options) {
    _classCallCheck(this, Parser);

    this.options = mergeOptions(DEFAULT_OPTIONS, options);
    this.treeAdapter = this.options.treeAdapter;
    this.pendingScript = null;

    if (this.options.sourceCodeLocationInfo) {
      Mixin.install(this, LocationInfoParserMixin);
    }

    if (this.options.onParseError) {
      Mixin.install(this, ErrorReportingParserMixin, {
        onParseError: this.options.onParseError
      });
    }
  } // API


  _createClass(Parser, [{
    key: "parse",
    value: function parse(html) {
      var document = this.treeAdapter.createDocument();

      this._bootstrap(document, null);

      this.tokenizer.write(html, true);

      this._runParsingLoop(null);

      return document;
    }
  }, {
    key: "parseFragment",
    value: function parseFragment(html, fragmentContext) {
      //NOTE: use <template> element as a fragment context if context element was not provided,
      //so we will parse in "forgiving" manner
      if (!fragmentContext) {
        fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);
      } //NOTE: create fake element which will be used as 'document' for fragment parsing.
      //This is important for jsdom there 'document' can't be recreated, therefore
      //fragment parsing causes messing of the main `document`.


      var documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);

      this._bootstrap(documentMock, fragmentContext);

      if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) {
        this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
      }

      this._initTokenizerForFragmentParsing();

      this._insertFakeRootElement();

      this._resetInsertionMode();

      this._findFormInFragmentContext();

      this.tokenizer.write(html, true);

      this._runParsingLoop(null);

      var rootElement = this.treeAdapter.getFirstChild(documentMock);
      var fragment = this.treeAdapter.createDocumentFragment();

      this._adoptNodes(rootElement, fragment);

      return fragment;
    } //Bootstrap parser

  }, {
    key: "_bootstrap",
    value: function _bootstrap(document, fragmentContext) {
      this.tokenizer = new Tokenizer(this.options);
      this.stopped = false;
      this.insertionMode = INITIAL_MODE;
      this.originalInsertionMode = '';
      this.document = document;
      this.fragmentContext = fragmentContext;
      this.headElement = null;
      this.formElement = null;
      this.openElements = new OpenElementStack(this.document, this.treeAdapter);
      this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
      this.tmplInsertionModeStack = [];
      this.tmplInsertionModeStackTop = -1;
      this.currentTmplInsertionMode = null;
      this.pendingCharacterTokens = [];
      this.hasNonWhitespacePendingCharacterToken = false;
      this.framesetOk = true;
      this.skipNextNewLine = false;
      this.fosterParentingEnabled = false;
    } //Errors

  }, {
    key: "_err",
    value: function _err() {// NOTE: err reporting is noop by default. Enabled by mixin.
    } //Parsing loop

  }, {
    key: "_runParsingLoop",
    value: function _runParsingLoop(scriptHandler) {
      while (!this.stopped) {
        this._setupTokenizerCDATAMode();

        var token = this.tokenizer.getNextToken();

        if (token.type === Tokenizer.HIBERNATION_TOKEN) {
          break;
        }

        if (this.skipNextNewLine) {
          this.skipNextNewLine = false;

          if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\n') {
            if (token.chars.length === 1) {
              continue;
            }

            token.chars = token.chars.substr(1);
          }
        }

        this._processInputToken(token);

        if (scriptHandler && this.pendingScript) {
          break;
        }
      }
    }
  }, {
    key: "runParsingLoopForCurrentChunk",
    value: function runParsingLoopForCurrentChunk(writeCallback, scriptHandler) {
      this._runParsingLoop(scriptHandler);

      if (scriptHandler && this.pendingScript) {
        var script = this.pendingScript;
        this.pendingScript = null;
        scriptHandler(script);
        return;
      }

      if (writeCallback) {
        writeCallback();
      }
    } //Text parsing

  }, {
    key: "_setupTokenizerCDATAMode",
    value: function _setupTokenizerCDATAMode() {
      var current = this._getAdjustedCurrentElement();

      this.tokenizer.allowCDATA = current && current !== this.document && this.treeAdapter.getNamespaceURI(current) !== NS.HTML && !this._isIntegrationPoint(current);
    }
  }, {
    key: "_switchToTextParsing",
    value: function _switchToTextParsing(currentToken, nextTokenizerState) {
      this._insertElement(currentToken, NS.HTML);

      this.tokenizer.state = nextTokenizerState;
      this.originalInsertionMode = this.insertionMode;
      this.insertionMode = TEXT_MODE;
    }
  }, {
    key: "switchToPlaintextParsing",
    value: function switchToPlaintextParsing() {
      this.insertionMode = TEXT_MODE;
      this.originalInsertionMode = IN_BODY_MODE;
      this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
    } //Fragment parsing

  }, {
    key: "_getAdjustedCurrentElement",
    value: function _getAdjustedCurrentElement() {
      return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
    }
  }, {
    key: "_findFormInFragmentContext",
    value: function _findFormInFragmentContext() {
      var node = this.fragmentContext;

      do {
        if (this.treeAdapter.getTagName(node) === $.FORM) {
          this.formElement = node;
          break;
        }

        node = this.treeAdapter.getParentNode(node);
      } while (node);
    }
  }, {
    key: "_initTokenizerForFragmentParsing",
    value: function _initTokenizerForFragmentParsing() {
      if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {
        var tn = this.treeAdapter.getTagName(this.fragmentContext);

        if (tn === $.TITLE || tn === $.TEXTAREA) {
          this.tokenizer.state = Tokenizer.MODE.RCDATA;
        } else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
          this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
        } else if (tn === $.SCRIPT) {
          this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;
        } else if (tn === $.PLAINTEXT) {
          this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
        }
      }
    } //Tree mutation

  }, {
    key: "_setDocumentType",
    value: function _setDocumentType(token) {
      var name = token.name || '';
      var publicId = token.publicId || '';
      var systemId = token.systemId || '';
      this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
    }
  }, {
    key: "_attachElementToTree",
    value: function _attachElementToTree(element) {
      if (this._shouldFosterParentOnInsertion()) {
        this._fosterParentElement(element);
      } else {
        var parent = this.openElements.currentTmplContent || this.openElements.current;
        this.treeAdapter.appendChild(parent, element);
      }
    }
  }, {
    key: "_appendElement",
    value: function _appendElement(token, namespaceURI) {
      var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

      this._attachElementToTree(element);
    }
  }, {
    key: "_insertElement",
    value: function _insertElement(token, namespaceURI) {
      var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

      this._attachElementToTree(element);

      this.openElements.push(element);
    }
  }, {
    key: "_insertFakeElement",
    value: function _insertFakeElement(tagName) {
      var element = this.treeAdapter.createElement(tagName, NS.HTML, []);

      this._attachElementToTree(element);

      this.openElements.push(element);
    }
  }, {
    key: "_insertTemplate",
    value: function _insertTemplate(token) {
      var tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
      var content = this.treeAdapter.createDocumentFragment();
      this.treeAdapter.setTemplateContent(tmpl, content);

      this._attachElementToTree(tmpl);

      this.openElements.push(tmpl);
    }
  }, {
    key: "_insertFakeRootElement",
    value: function _insertFakeRootElement() {
      var element = this.treeAdapter.createElement($.HTML, NS.HTML, []);
      this.treeAdapter.appendChild(this.openElements.current, element);
      this.openElements.push(element);
    }
  }, {
    key: "_appendCommentNode",
    value: function _appendCommentNode(token, parent) {
      var commentNode = this.treeAdapter.createCommentNode(token.data);
      this.treeAdapter.appendChild(parent, commentNode);
    }
  }, {
    key: "_insertCharacters",
    value: function _insertCharacters(token) {
      if (this._shouldFosterParentOnInsertion()) {
        this._fosterParentText(token.chars);
      } else {
        var parent = this.openElements.currentTmplContent || this.openElements.current;
        this.treeAdapter.insertText(parent, token.chars);
      }
    }
  }, {
    key: "_adoptNodes",
    value: function _adoptNodes(donor, recipient) {
      for (var child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
        this.treeAdapter.detachNode(child);
        this.treeAdapter.appendChild(recipient, child);
      }
    } //Token processing

  }, {
    key: "_shouldProcessTokenInForeignContent",
    value: function _shouldProcessTokenInForeignContent(token) {
      var current = this._getAdjustedCurrentElement();

      if (!current || current === this.document) {
        return false;
      }

      var ns = this.treeAdapter.getNamespaceURI(current);

      if (ns === NS.HTML) {
        return false;
      }

      if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML && token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG) {
        return false;
      }

      var isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN;
      var isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;

      if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) {
        return false;
      }

      if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isIntegrationPoint(current, NS.HTML)) {
        return false;
      }

      return token.type !== Tokenizer.EOF_TOKEN;
    }
  }, {
    key: "_processToken",
    value: function _processToken(token) {
      TOKEN_HANDLERS[this.insertionMode][token.type](this, token);
    }
  }, {
    key: "_processTokenInBodyMode",
    value: function _processTokenInBodyMode(token) {
      TOKEN_HANDLERS[IN_BODY_MODE][token.type](this, token);
    }
  }, {
    key: "_processTokenInForeignContent",
    value: function _processTokenInForeignContent(token) {
      if (token.type === Tokenizer.CHARACTER_TOKEN) {
        characterInForeignContent(this, token);
      } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
        nullCharacterInForeignContent(this, token);
      } else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) {
        insertCharacters(this, token);
      } else if (token.type === Tokenizer.COMMENT_TOKEN) {
        appendComment(this, token);
      } else if (token.type === Tokenizer.START_TAG_TOKEN) {
        startTagInForeignContent(this, token);
      } else if (token.type === Tokenizer.END_TAG_TOKEN) {
        endTagInForeignContent(this, token);
      }
    }
  }, {
    key: "_processInputToken",
    value: function _processInputToken(token) {
      if (this._shouldProcessTokenInForeignContent(token)) {
        this._processTokenInForeignContent(token);
      } else {
        this._processToken(token);
      }

      if (token.type === Tokenizer.START_TAG_TOKEN && token.selfClosing && !token.ackSelfClosing) {
        this._err(ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
      }
    } //Integration points

  }, {
    key: "_isIntegrationPoint",
    value: function _isIntegrationPoint(element, foreignNS) {
      var tn = this.treeAdapter.getTagName(element);
      var ns = this.treeAdapter.getNamespaceURI(element);
      var attrs = this.treeAdapter.getAttrList(element);
      return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);
    } //Active formatting elements reconstruction

  }, {
    key: "_reconstructActiveFormattingElements",
    value: function _reconstructActiveFormattingElements() {
      var listLength = this.activeFormattingElements.length;

      if (listLength) {
        var unopenIdx = listLength;
        var entry = null;

        do {
          unopenIdx--;
          entry = this.activeFormattingElements.entries[unopenIdx];

          if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
            unopenIdx++;
            break;
          }
        } while (unopenIdx > 0);

        for (var i = unopenIdx; i < listLength; i++) {
          entry = this.activeFormattingElements.entries[i];

          this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));

          entry.element = this.openElements.current;
        }
      }
    } //Close elements

  }, {
    key: "_closeTableCell",
    value: function _closeTableCell() {
      this.openElements.generateImpliedEndTags();
      this.openElements.popUntilTableCellPopped();
      this.activeFormattingElements.clearToLastMarker();
      this.insertionMode = IN_ROW_MODE;
    }
  }, {
    key: "_closePElement",
    value: function _closePElement() {
      this.openElements.generateImpliedEndTagsWithExclusion($.P);
      this.openElements.popUntilTagNamePopped($.P);
    } //Insertion modes

  }, {
    key: "_resetInsertionMode",
    value: function _resetInsertionMode() {
      for (var i = this.openElements.stackTop, last = false; i >= 0; i--) {
        var element = this.openElements.items[i];

        if (i === 0) {
          last = true;

          if (this.fragmentContext) {
            element = this.fragmentContext;
          }
        }

        var tn = this.treeAdapter.getTagName(element);
        var newInsertionMode = INSERTION_MODE_RESET_MAP[tn];

        if (newInsertionMode) {
          this.insertionMode = newInsertionMode;
          break;
        } else if (!last && (tn === $.TD || tn === $.TH)) {
          this.insertionMode = IN_CELL_MODE;
          break;
        } else if (!last && tn === $.HEAD) {
          this.insertionMode = IN_HEAD_MODE;
          break;
        } else if (tn === $.SELECT) {
          this._resetInsertionModeForSelect(i);

          break;
        } else if (tn === $.TEMPLATE) {
          this.insertionMode = this.currentTmplInsertionMode;
          break;
        } else if (tn === $.HTML) {
          this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
          break;
        } else if (last) {
          this.insertionMode = IN_BODY_MODE;
          break;
        }
      }
    }
  }, {
    key: "_resetInsertionModeForSelect",
    value: function _resetInsertionModeForSelect(selectIdx) {
      if (selectIdx > 0) {
        for (var i = selectIdx - 1; i > 0; i--) {
          var ancestor = this.openElements.items[i];
          var tn = this.treeAdapter.getTagName(ancestor);

          if (tn === $.TEMPLATE) {
            break;
          } else if (tn === $.TABLE) {
            this.insertionMode = IN_SELECT_IN_TABLE_MODE;
            return;
          }
        }
      }

      this.insertionMode = IN_SELECT_MODE;
    }
  }, {
    key: "_pushTmplInsertionMode",
    value: function _pushTmplInsertionMode(mode) {
      this.tmplInsertionModeStack.push(mode);
      this.tmplInsertionModeStackTop++;
      this.currentTmplInsertionMode = mode;
    }
  }, {
    key: "_popTmplInsertionMode",
    value: function _popTmplInsertionMode() {
      this.tmplInsertionModeStack.pop();
      this.tmplInsertionModeStackTop--;
      this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
    } //Foster parenting

  }, {
    key: "_isElementCausesFosterParenting",
    value: function _isElementCausesFosterParenting(element) {
      var tn = this.treeAdapter.getTagName(element);
      return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;
    }
  }, {
    key: "_shouldFosterParentOnInsertion",
    value: function _shouldFosterParentOnInsertion() {
      return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
    }
  }, {
    key: "_findFosterParentingLocation",
    value: function _findFosterParentingLocation() {
      var location = {
        parent: null,
        beforeElement: null
      };

      for (var i = this.openElements.stackTop; i >= 0; i--) {
        var openElement = this.openElements.items[i];
        var tn = this.treeAdapter.getTagName(openElement);
        var ns = this.treeAdapter.getNamespaceURI(openElement);

        if (tn === $.TEMPLATE && ns === NS.HTML) {
          location.parent = this.treeAdapter.getTemplateContent(openElement);
          break;
        } else if (tn === $.TABLE) {
          location.parent = this.treeAdapter.getParentNode(openElement);

          if (location.parent) {
            location.beforeElement = openElement;
          } else {
            location.parent = this.openElements.items[i - 1];
          }

          break;
        }
      }

      if (!location.parent) {
        location.parent = this.openElements.items[0];
      }

      return location;
    }
  }, {
    key: "_fosterParentElement",
    value: function _fosterParentElement(element) {
      var location = this._findFosterParentingLocation();

      if (location.beforeElement) {
        this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
      } else {
        this.treeAdapter.appendChild(location.parent, element);
      }
    }
  }, {
    key: "_fosterParentText",
    value: function _fosterParentText(chars) {
      var location = this._findFosterParentingLocation();

      if (location.beforeElement) {
        this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);
      } else {
        this.treeAdapter.insertText(location.parent, chars);
      }
    } //Special elements

  }, {
    key: "_isSpecialElement",
    value: function _isSpecialElement(element) {
      var tn = this.treeAdapter.getTagName(element);
      var ns = this.treeAdapter.getNamespaceURI(element);
      return HTML.SPECIAL_ELEMENTS[ns][tn];
    }
  }]);

  return Parser;
}();

module.exports = Parser; //Adoption agency algorithm
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)
//------------------------------------------------------------------
//Steps 5-8 of the algorithm

function aaObtainFormattingElementEntry(p, token) {
  var formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);

  if (formattingElementEntry) {
    if (!p.openElements.contains(formattingElementEntry.element)) {
      p.activeFormattingElements.removeEntry(formattingElementEntry);
      formattingElementEntry = null;
    } else if (!p.openElements.hasInScope(token.tagName)) {
      formattingElementEntry = null;
    }
  } else {
    genericEndTagInBody(p, token);
  }

  return formattingElementEntry;
} //Steps 9 and 10 of the algorithm


function aaObtainFurthestBlock(p, formattingElementEntry) {
  var furthestBlock = null;

  for (var i = p.openElements.stackTop; i >= 0; i--) {
    var element = p.openElements.items[i];

    if (element === formattingElementEntry.element) {
      break;
    }

    if (p._isSpecialElement(element)) {
      furthestBlock = element;
    }
  }

  if (!furthestBlock) {
    p.openElements.popUntilElementPopped(formattingElementEntry.element);
    p.activeFormattingElements.removeEntry(formattingElementEntry);
  }

  return furthestBlock;
} //Step 13 of the algorithm


function aaInnerLoop(p, furthestBlock, formattingElement) {
  var lastElement = furthestBlock;
  var nextElement = p.openElements.getCommonAncestor(furthestBlock);

  for (var i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
    //NOTE: store next element for the next loop iteration (it may be deleted from the stack by step 9.5)
    nextElement = p.openElements.getCommonAncestor(element);
    var elementEntry = p.activeFormattingElements.getElementEntry(element);
    var counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
    var shouldRemoveFromOpenElements = !elementEntry || counterOverflow;

    if (shouldRemoveFromOpenElements) {
      if (counterOverflow) {
        p.activeFormattingElements.removeEntry(elementEntry);
      }

      p.openElements.remove(element);
    } else {
      element = aaRecreateElementFromEntry(p, elementEntry);

      if (lastElement === furthestBlock) {
        p.activeFormattingElements.bookmark = elementEntry;
      }

      p.treeAdapter.detachNode(lastElement);
      p.treeAdapter.appendChild(element, lastElement);
      lastElement = element;
    }
  }

  return lastElement;
} //Step 13.7 of the algorithm


function aaRecreateElementFromEntry(p, elementEntry) {
  var ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
  var newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
  p.openElements.replace(elementEntry.element, newElement);
  elementEntry.element = newElement;
  return newElement;
} //Step 14 of the algorithm


function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
  if (p._isElementCausesFosterParenting(commonAncestor)) {
    p._fosterParentElement(lastElement);
  } else {
    var tn = p.treeAdapter.getTagName(commonAncestor);
    var ns = p.treeAdapter.getNamespaceURI(commonAncestor);

    if (tn === $.TEMPLATE && ns === NS.HTML) {
      commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
    }

    p.treeAdapter.appendChild(commonAncestor, lastElement);
  }
} //Steps 15-19 of the algorithm


function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
  var ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
  var token = formattingElementEntry.token;
  var newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);

  p._adoptNodes(furthestBlock, newElement);

  p.treeAdapter.appendChild(furthestBlock, newElement);
  p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
  p.activeFormattingElements.removeEntry(formattingElementEntry);
  p.openElements.remove(formattingElementEntry.element);
  p.openElements.insertAfter(furthestBlock, newElement);
} //Algorithm entry point


function callAdoptionAgency(p, token) {
  var formattingElementEntry;

  for (var i = 0; i < AA_OUTER_LOOP_ITER; i++) {
    formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);

    if (!formattingElementEntry) {
      break;
    }

    var furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);

    if (!furthestBlock) {
      break;
    }

    p.activeFormattingElements.bookmark = formattingElementEntry;
    var lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
    var commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
    p.treeAdapter.detachNode(lastElement);
    aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
    aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
  }
} //Generic token handlers
//------------------------------------------------------------------


function ignoreToken() {//NOTE: do nothing =)
}

function misplacedDoctype(p) {
  p._err(ERR.misplacedDoctype);
}

function appendComment(p, token) {
  p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
}

function appendCommentToRootHtmlElement(p, token) {
  p._appendCommentNode(token, p.openElements.items[0]);
}

function appendCommentToDocument(p, token) {
  p._appendCommentNode(token, p.document);
}

function insertCharacters(p, token) {
  p._insertCharacters(token);
}

function stopParsing(p) {
  p.stopped = true;
} // The "initial" insertion mode
//------------------------------------------------------------------


function doctypeInInitialMode(p, token) {
  p._setDocumentType(token);

  var mode = token.forceQuirks ? HTML.DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);

  if (!doctype.isConforming(token)) {
    p._err(ERR.nonConformingDoctype);
  }

  p.treeAdapter.setDocumentMode(p.document, mode);
  p.insertionMode = BEFORE_HTML_MODE;
}

function tokenInInitialMode(p, token) {
  p._err(ERR.missingDoctype, {
    beforeToken: true
  });

  p.treeAdapter.setDocumentMode(p.document, HTML.DOCUMENT_MODE.QUIRKS);
  p.insertionMode = BEFORE_HTML_MODE;

  p._processToken(token);
} // The "before html" insertion mode
//------------------------------------------------------------------


function startTagBeforeHtml(p, token) {
  if (token.tagName === $.HTML) {
    p._insertElement(token, NS.HTML);

    p.insertionMode = BEFORE_HEAD_MODE;
  } else {
    tokenBeforeHtml(p, token);
  }
}

function endTagBeforeHtml(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {
    tokenBeforeHtml(p, token);
  }
}

function tokenBeforeHtml(p, token) {
  p._insertFakeRootElement();

  p.insertionMode = BEFORE_HEAD_MODE;

  p._processToken(token);
} // The "before head" insertion mode
//------------------------------------------------------------------


function startTagBeforeHead(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.HEAD) {
    p._insertElement(token, NS.HTML);

    p.headElement = p.openElements.current;
    p.insertionMode = IN_HEAD_MODE;
  } else {
    tokenBeforeHead(p, token);
  }
}

function endTagBeforeHead(p, token) {
  var tn = token.tagName;

  if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {
    tokenBeforeHead(p, token);
  } else {
    p._err(ERR.endTagWithoutMatchingOpenElement);
  }
}

function tokenBeforeHead(p, token) {
  p._insertFakeElement($.HEAD);

  p.headElement = p.openElements.current;
  p.insertionMode = IN_HEAD_MODE;

  p._processToken(token);
} // The "in head" insertion mode
//------------------------------------------------------------------


function startTagInHead(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META) {
    p._appendElement(token, NS.HTML);

    token.ackSelfClosing = true;
  } else if (tn === $.TITLE) {
    p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);
  } else if (tn === $.NOSCRIPT) {
    if (p.options.scriptingEnabled) {
      p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
    } else {
      p._insertElement(token, NS.HTML);

      p.insertionMode = IN_HEAD_NO_SCRIPT_MODE;
    }
  } else if (tn === $.NOFRAMES || tn === $.STYLE) {
    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
  } else if (tn === $.SCRIPT) {
    p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);
  } else if (tn === $.TEMPLATE) {
    p._insertTemplate(token, NS.HTML);

    p.activeFormattingElements.insertMarker();
    p.framesetOk = false;
    p.insertionMode = IN_TEMPLATE_MODE;

    p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
  } else if (tn === $.HEAD) {
    p._err(ERR.misplacedStartTagForHeadElement);
  } else {
    tokenInHead(p, token);
  }
}

function endTagInHead(p, token) {
  var tn = token.tagName;

  if (tn === $.HEAD) {
    p.openElements.pop();
    p.insertionMode = AFTER_HEAD_MODE;
  } else if (tn === $.BODY || tn === $.BR || tn === $.HTML) {
    tokenInHead(p, token);
  } else if (tn === $.TEMPLATE) {
    if (p.openElements.tmplCount > 0) {
      p.openElements.generateImpliedEndTagsThoroughly();

      if (p.openElements.currentTagName !== $.TEMPLATE) {
        p._err(ERR.closingOfElementWithOpenChildElements);
      }

      p.openElements.popUntilTagNamePopped($.TEMPLATE);
      p.activeFormattingElements.clearToLastMarker();

      p._popTmplInsertionMode();

      p._resetInsertionMode();
    } else {
      p._err(ERR.endTagWithoutMatchingOpenElement);
    }
  } else {
    p._err(ERR.endTagWithoutMatchingOpenElement);
  }
}

function tokenInHead(p, token) {
  p.openElements.pop();
  p.insertionMode = AFTER_HEAD_MODE;

  p._processToken(token);
} // The "in head no script" insertion mode
//------------------------------------------------------------------


function startTagInHeadNoScript(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.BASEFONT || tn === $.BGSOUND || tn === $.HEAD || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.STYLE) {
    startTagInHead(p, token);
  } else if (tn === $.NOSCRIPT) {
    p._err(ERR.nestedNoscriptInHead);
  } else {
    tokenInHeadNoScript(p, token);
  }
}

function endTagInHeadNoScript(p, token) {
  var tn = token.tagName;

  if (tn === $.NOSCRIPT) {
    p.openElements.pop();
    p.insertionMode = IN_HEAD_MODE;
  } else if (tn === $.BR) {
    tokenInHeadNoScript(p, token);
  } else {
    p._err(ERR.endTagWithoutMatchingOpenElement);
  }
}

function tokenInHeadNoScript(p, token) {
  var errCode = token.type === Tokenizer.EOF_TOKEN ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;

  p._err(errCode);

  p.openElements.pop();
  p.insertionMode = IN_HEAD_MODE;

  p._processToken(token);
} // The "after head" insertion mode
//------------------------------------------------------------------


function startTagAfterHead(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.BODY) {
    p._insertElement(token, NS.HTML);

    p.framesetOk = false;
    p.insertionMode = IN_BODY_MODE;
  } else if (tn === $.FRAMESET) {
    p._insertElement(token, NS.HTML);

    p.insertionMode = IN_FRAMESET_MODE;
  } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
    p._err(ERR.abandonedHeadElementChild);

    p.openElements.push(p.headElement);
    startTagInHead(p, token);
    p.openElements.remove(p.headElement);
  } else if (tn === $.HEAD) {
    p._err(ERR.misplacedStartTagForHeadElement);
  } else {
    tokenAfterHead(p, token);
  }
}

function endTagAfterHead(p, token) {
  var tn = token.tagName;

  if (tn === $.BODY || tn === $.HTML || tn === $.BR) {
    tokenAfterHead(p, token);
  } else if (tn === $.TEMPLATE) {
    endTagInHead(p, token);
  } else {
    p._err(ERR.endTagWithoutMatchingOpenElement);
  }
}

function tokenAfterHead(p, token) {
  p._insertFakeElement($.BODY);

  p.insertionMode = IN_BODY_MODE;

  p._processToken(token);
} // The "in body" insertion mode
//------------------------------------------------------------------


function whitespaceCharacterInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertCharacters(token);
}

function characterInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertCharacters(token);

  p.framesetOk = false;
}

function htmlStartTagInBody(p, token) {
  if (p.openElements.tmplCount === 0) {
    p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
  }
}

function bodyStartTagInBody(p, token) {
  var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

  if (bodyElement && p.openElements.tmplCount === 0) {
    p.framesetOk = false;
    p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
  }
}

function framesetStartTagInBody(p, token) {
  var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

  if (p.framesetOk && bodyElement) {
    p.treeAdapter.detachNode(bodyElement);
    p.openElements.popAllUpToHtmlElement();

    p._insertElement(token, NS.HTML);

    p.insertionMode = IN_FRAMESET_MODE;
  }
}

function addressStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._insertElement(token, NS.HTML);
}

function numberedHeaderStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  var tn = p.openElements.currentTagName;

  if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
    p.openElements.pop();
  }

  p._insertElement(token, NS.HTML);
}

function preStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._insertElement(token, NS.HTML); //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
  //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)


  p.skipNextNewLine = true;
  p.framesetOk = false;
}

function formStartTagInBody(p, token) {
  var inTemplate = p.openElements.tmplCount > 0;

  if (!p.formElement || inTemplate) {
    if (p.openElements.hasInButtonScope($.P)) {
      p._closePElement();
    }

    p._insertElement(token, NS.HTML);

    if (!inTemplate) {
      p.formElement = p.openElements.current;
    }
  }
}

function listItemStartTagInBody(p, token) {
  p.framesetOk = false;
  var tn = token.tagName;

  for (var i = p.openElements.stackTop; i >= 0; i--) {
    var element = p.openElements.items[i];
    var elementTn = p.treeAdapter.getTagName(element);
    var closeTn = null;

    if (tn === $.LI && elementTn === $.LI) {
      closeTn = $.LI;
    } else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT)) {
      closeTn = elementTn;
    }

    if (closeTn) {
      p.openElements.generateImpliedEndTagsWithExclusion(closeTn);
      p.openElements.popUntilTagNamePopped(closeTn);
      break;
    }

    if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element)) {
      break;
    }
  }

  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._insertElement(token, NS.HTML);
}

function plaintextStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._insertElement(token, NS.HTML);

  p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
}

function buttonStartTagInBody(p, token) {
  if (p.openElements.hasInScope($.BUTTON)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped($.BUTTON);
  }

  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.framesetOk = false;
}

function aStartTagInBody(p, token) {
  var activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);

  if (activeElementEntry) {
    callAdoptionAgency(p, token);
    p.openElements.remove(activeElementEntry.element);
    p.activeFormattingElements.removeEntry(activeElementEntry);
  }

  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function bStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function nobrStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  if (p.openElements.hasInScope($.NOBR)) {
    callAdoptionAgency(p, token);

    p._reconstructActiveFormattingElements();
  }

  p._insertElement(token, NS.HTML);

  p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function appletStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.activeFormattingElements.insertMarker();
  p.framesetOk = false;
}

function tableStartTagInBody(p, token) {
  if (p.treeAdapter.getDocumentMode(p.document) !== HTML.DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._insertElement(token, NS.HTML);

  p.framesetOk = false;
  p.insertionMode = IN_TABLE_MODE;
}

function areaStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._appendElement(token, NS.HTML);

  p.framesetOk = false;
  token.ackSelfClosing = true;
}

function inputStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._appendElement(token, NS.HTML);

  var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

  if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) {
    p.framesetOk = false;
  }

  token.ackSelfClosing = true;
}

function paramStartTagInBody(p, token) {
  p._appendElement(token, NS.HTML);

  token.ackSelfClosing = true;
}

function hrStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._appendElement(token, NS.HTML);

  p.framesetOk = false;
  token.ackSelfClosing = true;
}

function imageStartTagInBody(p, token) {
  token.tagName = $.IMG;
  areaStartTagInBody(p, token);
}

function textareaStartTagInBody(p, token) {
  p._insertElement(token, NS.HTML); //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
  //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)


  p.skipNextNewLine = true;
  p.tokenizer.state = Tokenizer.MODE.RCDATA;
  p.originalInsertionMode = p.insertionMode;
  p.framesetOk = false;
  p.insertionMode = TEXT_MODE;
}

function xmpStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._reconstructActiveFormattingElements();

  p.framesetOk = false;

  p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

function iframeStartTagInBody(p, token) {
  p.framesetOk = false;

  p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
} //NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse
//<noembed> as a rawtext.


function noembedStartTagInBody(p, token) {
  p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

function selectStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.framesetOk = false;

  if (p.insertionMode === IN_TABLE_MODE || p.insertionMode === IN_CAPTION_MODE || p.insertionMode === IN_TABLE_BODY_MODE || p.insertionMode === IN_ROW_MODE || p.insertionMode === IN_CELL_MODE) {
    p.insertionMode = IN_SELECT_IN_TABLE_MODE;
  } else {
    p.insertionMode = IN_SELECT_MODE;
  }
}

function optgroupStartTagInBody(p, token) {
  if (p.openElements.currentTagName === $.OPTION) {
    p.openElements.pop();
  }

  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);
}

function rbStartTagInBody(p, token) {
  if (p.openElements.hasInScope($.RUBY)) {
    p.openElements.generateImpliedEndTags();
  }

  p._insertElement(token, NS.HTML);
}

function rtStartTagInBody(p, token) {
  if (p.openElements.hasInScope($.RUBY)) {
    p.openElements.generateImpliedEndTagsWithExclusion($.RTC);
  }

  p._insertElement(token, NS.HTML);
}

function menuStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._insertElement(token, NS.HTML);
}

function mathStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  foreignContent.adjustTokenMathMLAttrs(token);
  foreignContent.adjustTokenXMLAttrs(token);

  if (token.selfClosing) {
    p._appendElement(token, NS.MATHML);
  } else {
    p._insertElement(token, NS.MATHML);
  }

  token.ackSelfClosing = true;
}

function svgStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  foreignContent.adjustTokenSVGAttrs(token);
  foreignContent.adjustTokenXMLAttrs(token);

  if (token.selfClosing) {
    p._appendElement(token, NS.SVG);
  } else {
    p._insertElement(token, NS.SVG);
  }

  token.ackSelfClosing = true;
}

function genericStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);
} //OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
//It's faster than using dictionary.


function startTagInBody(p, token) {
  var tn = token.tagName;

  switch (tn.length) {
    case 1:
      if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) {
        bStartTagInBody(p, token);
      } else if (tn === $.P) {
        addressStartTagInBody(p, token);
      } else if (tn === $.A) {
        aStartTagInBody(p, token);
      } else {
        genericStartTagInBody(p, token);
      }

      break;

    case 2:
      if (tn === $.DL || tn === $.OL || tn === $.UL) {
        addressStartTagInBody(p, token);
      } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
        numberedHeaderStartTagInBody(p, token);
      } else if (tn === $.LI || tn === $.DD || tn === $.DT) {
        listItemStartTagInBody(p, token);
      } else if (tn === $.EM || tn === $.TT) {
        bStartTagInBody(p, token);
      } else if (tn === $.BR) {
        areaStartTagInBody(p, token);
      } else if (tn === $.HR) {
        hrStartTagInBody(p, token);
      } else if (tn === $.RB) {
        rbStartTagInBody(p, token);
      } else if (tn === $.RT || tn === $.RP) {
        rtStartTagInBody(p, token);
      } else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) {
        genericStartTagInBody(p, token);
      }

      break;

    case 3:
      if (tn === $.DIV || tn === $.DIR || tn === $.NAV) {
        addressStartTagInBody(p, token);
      } else if (tn === $.PRE) {
        preStartTagInBody(p, token);
      } else if (tn === $.BIG) {
        bStartTagInBody(p, token);
      } else if (tn === $.IMG || tn === $.WBR) {
        areaStartTagInBody(p, token);
      } else if (tn === $.XMP) {
        xmpStartTagInBody(p, token);
      } else if (tn === $.SVG) {
        svgStartTagInBody(p, token);
      } else if (tn === $.RTC) {
        rbStartTagInBody(p, token);
      } else if (tn !== $.COL) {
        genericStartTagInBody(p, token);
      }

      break;

    case 4:
      if (tn === $.HTML) {
        htmlStartTagInBody(p, token);
      } else if (tn === $.BASE || tn === $.LINK || tn === $.META) {
        startTagInHead(p, token);
      } else if (tn === $.BODY) {
        bodyStartTagInBody(p, token);
      } else if (tn === $.MAIN || tn === $.MENU) {
        addressStartTagInBody(p, token);
      } else if (tn === $.FORM) {
        formStartTagInBody(p, token);
      } else if (tn === $.CODE || tn === $.FONT) {
        bStartTagInBody(p, token);
      } else if (tn === $.NOBR) {
        nobrStartTagInBody(p, token);
      } else if (tn === $.AREA) {
        areaStartTagInBody(p, token);
      } else if (tn === $.MATH) {
        mathStartTagInBody(p, token);
      } else if (tn === $.MENU) {
        menuStartTagInBody(p, token);
      } else if (tn !== $.HEAD) {
        genericStartTagInBody(p, token);
      }

      break;

    case 5:
      if (tn === $.STYLE || tn === $.TITLE) {
        startTagInHead(p, token);
      } else if (tn === $.ASIDE) {
        addressStartTagInBody(p, token);
      } else if (tn === $.SMALL) {
        bStartTagInBody(p, token);
      } else if (tn === $.TABLE) {
        tableStartTagInBody(p, token);
      } else if (tn === $.EMBED) {
        areaStartTagInBody(p, token);
      } else if (tn === $.INPUT) {
        inputStartTagInBody(p, token);
      } else if (tn === $.PARAM || tn === $.TRACK) {
        paramStartTagInBody(p, token);
      } else if (tn === $.IMAGE) {
        imageStartTagInBody(p, token);
      } else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) {
        genericStartTagInBody(p, token);
      }

      break;

    case 6:
      if (tn === $.SCRIPT) {
        startTagInHead(p, token);
      } else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP || tn === $.DIALOG) {
        addressStartTagInBody(p, token);
      } else if (tn === $.BUTTON) {
        buttonStartTagInBody(p, token);
      } else if (tn === $.STRIKE || tn === $.STRONG) {
        bStartTagInBody(p, token);
      } else if (tn === $.APPLET || tn === $.OBJECT) {
        appletStartTagInBody(p, token);
      } else if (tn === $.KEYGEN) {
        areaStartTagInBody(p, token);
      } else if (tn === $.SOURCE) {
        paramStartTagInBody(p, token);
      } else if (tn === $.IFRAME) {
        iframeStartTagInBody(p, token);
      } else if (tn === $.SELECT) {
        selectStartTagInBody(p, token);
      } else if (tn === $.OPTION) {
        optgroupStartTagInBody(p, token);
      } else {
        genericStartTagInBody(p, token);
      }

      break;

    case 7:
      if (tn === $.BGSOUND) {
        startTagInHead(p, token);
      } else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY) {
        addressStartTagInBody(p, token);
      } else if (tn === $.LISTING) {
        preStartTagInBody(p, token);
      } else if (tn === $.MARQUEE) {
        appletStartTagInBody(p, token);
      } else if (tn === $.NOEMBED) {
        noembedStartTagInBody(p, token);
      } else if (tn !== $.CAPTION) {
        genericStartTagInBody(p, token);
      }

      break;

    case 8:
      if (tn === $.BASEFONT) {
        startTagInHead(p, token);
      } else if (tn === $.FRAMESET) {
        framesetStartTagInBody(p, token);
      } else if (tn === $.FIELDSET) {
        addressStartTagInBody(p, token);
      } else if (tn === $.TEXTAREA) {
        textareaStartTagInBody(p, token);
      } else if (tn === $.TEMPLATE) {
        startTagInHead(p, token);
      } else if (tn === $.NOSCRIPT) {
        if (p.options.scriptingEnabled) {
          noembedStartTagInBody(p, token);
        } else {
          genericStartTagInBody(p, token);
        }
      } else if (tn === $.OPTGROUP) {
        optgroupStartTagInBody(p, token);
      } else if (tn !== $.COLGROUP) {
        genericStartTagInBody(p, token);
      }

      break;

    case 9:
      if (tn === $.PLAINTEXT) {
        plaintextStartTagInBody(p, token);
      } else {
        genericStartTagInBody(p, token);
      }

      break;

    case 10:
      if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
        addressStartTagInBody(p, token);
      } else {
        genericStartTagInBody(p, token);
      }

      break;

    default:
      genericStartTagInBody(p, token);
  }
}

function bodyEndTagInBody(p) {
  if (p.openElements.hasInScope($.BODY)) {
    p.insertionMode = AFTER_BODY_MODE;
  }
}

function htmlEndTagInBody(p, token) {
  if (p.openElements.hasInScope($.BODY)) {
    p.insertionMode = AFTER_BODY_MODE;

    p._processToken(token);
  }
}

function addressEndTagInBody(p, token) {
  var tn = token.tagName;

  if (p.openElements.hasInScope(tn)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped(tn);
  }
}

function formEndTagInBody(p) {
  var inTemplate = p.openElements.tmplCount > 0;
  var formElement = p.formElement;

  if (!inTemplate) {
    p.formElement = null;
  }

  if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
    p.openElements.generateImpliedEndTags();

    if (inTemplate) {
      p.openElements.popUntilTagNamePopped($.FORM);
    } else {
      p.openElements.remove(formElement);
    }
  }
}

function pEndTagInBody(p) {
  if (!p.openElements.hasInButtonScope($.P)) {
    p._insertFakeElement($.P);
  }

  p._closePElement();
}

function liEndTagInBody(p) {
  if (p.openElements.hasInListItemScope($.LI)) {
    p.openElements.generateImpliedEndTagsWithExclusion($.LI);
    p.openElements.popUntilTagNamePopped($.LI);
  }
}

function ddEndTagInBody(p, token) {
  var tn = token.tagName;

  if (p.openElements.hasInScope(tn)) {
    p.openElements.generateImpliedEndTagsWithExclusion(tn);
    p.openElements.popUntilTagNamePopped(tn);
  }
}

function numberedHeaderEndTagInBody(p) {
  if (p.openElements.hasNumberedHeaderInScope()) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilNumberedHeaderPopped();
  }
}

function appletEndTagInBody(p, token) {
  var tn = token.tagName;

  if (p.openElements.hasInScope(tn)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped(tn);
    p.activeFormattingElements.clearToLastMarker();
  }
}

function brEndTagInBody(p) {
  p._reconstructActiveFormattingElements();

  p._insertFakeElement($.BR);

  p.openElements.pop();
  p.framesetOk = false;
}

function genericEndTagInBody(p, token) {
  var tn = token.tagName;

  for (var i = p.openElements.stackTop; i > 0; i--) {
    var element = p.openElements.items[i];

    if (p.treeAdapter.getTagName(element) === tn) {
      p.openElements.generateImpliedEndTagsWithExclusion(tn);
      p.openElements.popUntilElementPopped(element);
      break;
    }

    if (p._isSpecialElement(element)) {
      break;
    }
  }
} //OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
//It's faster than using dictionary.


function endTagInBody(p, token) {
  var tn = token.tagName;

  switch (tn.length) {
    case 1:
      if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U) {
        callAdoptionAgency(p, token);
      } else if (tn === $.P) {
        pEndTagInBody(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 2:
      if (tn === $.DL || tn === $.UL || tn === $.OL) {
        addressEndTagInBody(p, token);
      } else if (tn === $.LI) {
        liEndTagInBody(p, token);
      } else if (tn === $.DD || tn === $.DT) {
        ddEndTagInBody(p, token);
      } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
        numberedHeaderEndTagInBody(p, token);
      } else if (tn === $.BR) {
        brEndTagInBody(p, token);
      } else if (tn === $.EM || tn === $.TT) {
        callAdoptionAgency(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 3:
      if (tn === $.BIG) {
        callAdoptionAgency(p, token);
      } else if (tn === $.DIR || tn === $.DIV || tn === $.NAV || tn === $.PRE) {
        addressEndTagInBody(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 4:
      if (tn === $.BODY) {
        bodyEndTagInBody(p, token);
      } else if (tn === $.HTML) {
        htmlEndTagInBody(p, token);
      } else if (tn === $.FORM) {
        formEndTagInBody(p, token);
      } else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) {
        callAdoptionAgency(p, token);
      } else if (tn === $.MAIN || tn === $.MENU) {
        addressEndTagInBody(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 5:
      if (tn === $.ASIDE) {
        addressEndTagInBody(p, token);
      } else if (tn === $.SMALL) {
        callAdoptionAgency(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 6:
      if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP || tn === $.DIALOG) {
        addressEndTagInBody(p, token);
      } else if (tn === $.APPLET || tn === $.OBJECT) {
        appletEndTagInBody(p, token);
      } else if (tn === $.STRIKE || tn === $.STRONG) {
        callAdoptionAgency(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 7:
      if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY || tn === $.LISTING) {
        addressEndTagInBody(p, token);
      } else if (tn === $.MARQUEE) {
        appletEndTagInBody(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 8:
      if (tn === $.FIELDSET) {
        addressEndTagInBody(p, token);
      } else if (tn === $.TEMPLATE) {
        endTagInHead(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 10:
      if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
        addressEndTagInBody(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    default:
      genericEndTagInBody(p, token);
  }
}

function eofInBody(p, token) {
  if (p.tmplInsertionModeStackTop > -1) {
    eofInTemplate(p, token);
  } else {
    p.stopped = true;
  }
} // The "text" insertion mode
//------------------------------------------------------------------


function endTagInText(p, token) {
  if (token.tagName === $.SCRIPT) {
    p.pendingScript = p.openElements.current;
  }

  p.openElements.pop();
  p.insertionMode = p.originalInsertionMode;
}

function eofInText(p, token) {
  p._err(ERR.eofInElementThatCanContainOnlyText);

  p.openElements.pop();
  p.insertionMode = p.originalInsertionMode;

  p._processToken(token);
} // The "in table" insertion mode
//------------------------------------------------------------------


function characterInTable(p, token) {
  var curTn = p.openElements.currentTagName;

  if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
    p.pendingCharacterTokens = [];
    p.hasNonWhitespacePendingCharacterToken = false;
    p.originalInsertionMode = p.insertionMode;
    p.insertionMode = IN_TABLE_TEXT_MODE;

    p._processToken(token);
  } else {
    tokenInTable(p, token);
  }
}

function captionStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p.activeFormattingElements.insertMarker();

  p._insertElement(token, NS.HTML);

  p.insertionMode = IN_CAPTION_MODE;
}

function colgroupStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();

  p._insertElement(token, NS.HTML);

  p.insertionMode = IN_COLUMN_GROUP_MODE;
}

function colStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();

  p._insertFakeElement($.COLGROUP);

  p.insertionMode = IN_COLUMN_GROUP_MODE;

  p._processToken(token);
}

function tbodyStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();

  p._insertElement(token, NS.HTML);

  p.insertionMode = IN_TABLE_BODY_MODE;
}

function tdStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();

  p._insertFakeElement($.TBODY);

  p.insertionMode = IN_TABLE_BODY_MODE;

  p._processToken(token);
}

function tableStartTagInTable(p, token) {
  if (p.openElements.hasInTableScope($.TABLE)) {
    p.openElements.popUntilTagNamePopped($.TABLE);

    p._resetInsertionMode();

    p._processToken(token);
  }
}

function inputStartTagInTable(p, token) {
  var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

  if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) {
    p._appendElement(token, NS.HTML);
  } else {
    tokenInTable(p, token);
  }

  token.ackSelfClosing = true;
}

function formStartTagInTable(p, token) {
  if (!p.formElement && p.openElements.tmplCount === 0) {
    p._insertElement(token, NS.HTML);

    p.formElement = p.openElements.current;
    p.openElements.pop();
  }
}

function startTagInTable(p, token) {
  var tn = token.tagName;

  switch (tn.length) {
    case 2:
      if (tn === $.TD || tn === $.TH || tn === $.TR) {
        tdStartTagInTable(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    case 3:
      if (tn === $.COL) {
        colStartTagInTable(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    case 4:
      if (tn === $.FORM) {
        formStartTagInTable(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    case 5:
      if (tn === $.TABLE) {
        tableStartTagInTable(p, token);
      } else if (tn === $.STYLE) {
        startTagInHead(p, token);
      } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
        tbodyStartTagInTable(p, token);
      } else if (tn === $.INPUT) {
        inputStartTagInTable(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    case 6:
      if (tn === $.SCRIPT) {
        startTagInHead(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    case 7:
      if (tn === $.CAPTION) {
        captionStartTagInTable(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    case 8:
      if (tn === $.COLGROUP) {
        colgroupStartTagInTable(p, token);
      } else if (tn === $.TEMPLATE) {
        startTagInHead(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    default:
      tokenInTable(p, token);
  }
}

function endTagInTable(p, token) {
  var tn = token.tagName;

  if (tn === $.TABLE) {
    if (p.openElements.hasInTableScope($.TABLE)) {
      p.openElements.popUntilTagNamePopped($.TABLE);

      p._resetInsertionMode();
    }
  } else if (tn === $.TEMPLATE) {
    endTagInHead(p, token);
  } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
    tokenInTable(p, token);
  }
}

function tokenInTable(p, token) {
  var savedFosterParentingState = p.fosterParentingEnabled;
  p.fosterParentingEnabled = true;

  p._processTokenInBodyMode(token);

  p.fosterParentingEnabled = savedFosterParentingState;
} // The "in table text" insertion mode
//------------------------------------------------------------------


function whitespaceCharacterInTableText(p, token) {
  p.pendingCharacterTokens.push(token);
}

function characterInTableText(p, token) {
  p.pendingCharacterTokens.push(token);
  p.hasNonWhitespacePendingCharacterToken = true;
}

function tokenInTableText(p, token) {
  var i = 0;

  if (p.hasNonWhitespacePendingCharacterToken) {
    for (; i < p.pendingCharacterTokens.length; i++) {
      tokenInTable(p, p.pendingCharacterTokens[i]);
    }
  } else {
    for (; i < p.pendingCharacterTokens.length; i++) {
      p._insertCharacters(p.pendingCharacterTokens[i]);
    }
  }

  p.insertionMode = p.originalInsertionMode;

  p._processToken(token);
} // The "in caption" insertion mode
//------------------------------------------------------------------


function startTagInCaption(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
    if (p.openElements.hasInTableScope($.CAPTION)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped($.CAPTION);
      p.activeFormattingElements.clearToLastMarker();
      p.insertionMode = IN_TABLE_MODE;

      p._processToken(token);
    }
  } else {
    startTagInBody(p, token);
  }
}

function endTagInCaption(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.TABLE) {
    if (p.openElements.hasInTableScope($.CAPTION)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped($.CAPTION);
      p.activeFormattingElements.clearToLastMarker();
      p.insertionMode = IN_TABLE_MODE;

      if (tn === $.TABLE) {
        p._processToken(token);
      }
    }
  } else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
    endTagInBody(p, token);
  }
} // The "in column group" insertion mode
//------------------------------------------------------------------


function startTagInColumnGroup(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.COL) {
    p._appendElement(token, NS.HTML);

    token.ackSelfClosing = true;
  } else if (tn === $.TEMPLATE) {
    startTagInHead(p, token);
  } else {
    tokenInColumnGroup(p, token);
  }
}

function endTagInColumnGroup(p, token) {
  var tn = token.tagName;

  if (tn === $.COLGROUP) {
    if (p.openElements.currentTagName === $.COLGROUP) {
      p.openElements.pop();
      p.insertionMode = IN_TABLE_MODE;
    }
  } else if (tn === $.TEMPLATE) {
    endTagInHead(p, token);
  } else if (tn !== $.COL) {
    tokenInColumnGroup(p, token);
  }
}

function tokenInColumnGroup(p, token) {
  if (p.openElements.currentTagName === $.COLGROUP) {
    p.openElements.pop();
    p.insertionMode = IN_TABLE_MODE;

    p._processToken(token);
  }
} // The "in table body" insertion mode
//------------------------------------------------------------------


function startTagInTableBody(p, token) {
  var tn = token.tagName;

  if (tn === $.TR) {
    p.openElements.clearBackToTableBodyContext();

    p._insertElement(token, NS.HTML);

    p.insertionMode = IN_ROW_MODE;
  } else if (tn === $.TH || tn === $.TD) {
    p.openElements.clearBackToTableBodyContext();

    p._insertFakeElement($.TR);

    p.insertionMode = IN_ROW_MODE;

    p._processToken(token);
  } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
    if (p.openElements.hasTableBodyContextInTableScope()) {
      p.openElements.clearBackToTableBodyContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_MODE;

      p._processToken(token);
    }
  } else {
    startTagInTable(p, token);
  }
}

function endTagInTableBody(p, token) {
  var tn = token.tagName;

  if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
    if (p.openElements.hasInTableScope(tn)) {
      p.openElements.clearBackToTableBodyContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_MODE;
    }
  } else if (tn === $.TABLE) {
    if (p.openElements.hasTableBodyContextInTableScope()) {
      p.openElements.clearBackToTableBodyContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_MODE;

      p._processToken(token);
    }
  } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR) {
    endTagInTable(p, token);
  }
} // The "in row" insertion mode
//------------------------------------------------------------------


function startTagInRow(p, token) {
  var tn = token.tagName;

  if (tn === $.TH || tn === $.TD) {
    p.openElements.clearBackToTableRowContext();

    p._insertElement(token, NS.HTML);

    p.insertionMode = IN_CELL_MODE;
    p.activeFormattingElements.insertMarker();
  } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
    if (p.openElements.hasInTableScope($.TR)) {
      p.openElements.clearBackToTableRowContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_BODY_MODE;

      p._processToken(token);
    }
  } else {
    startTagInTable(p, token);
  }
}

function endTagInRow(p, token) {
  var tn = token.tagName;

  if (tn === $.TR) {
    if (p.openElements.hasInTableScope($.TR)) {
      p.openElements.clearBackToTableRowContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_BODY_MODE;
    }
  } else if (tn === $.TABLE) {
    if (p.openElements.hasInTableScope($.TR)) {
      p.openElements.clearBackToTableRowContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_BODY_MODE;

      p._processToken(token);
    }
  } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
    if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {
      p.openElements.clearBackToTableRowContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_BODY_MODE;

      p._processToken(token);
    }
  } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH) {
    endTagInTable(p, token);
  }
} // The "in cell" insertion mode
//------------------------------------------------------------------


function startTagInCell(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
    if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
      p._closeTableCell();

      p._processToken(token);
    }
  } else {
    startTagInBody(p, token);
  }
}

function endTagInCell(p, token) {
  var tn = token.tagName;

  if (tn === $.TD || tn === $.TH) {
    if (p.openElements.hasInTableScope(tn)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped(tn);
      p.activeFormattingElements.clearToLastMarker();
      p.insertionMode = IN_ROW_MODE;
    }
  } else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
    if (p.openElements.hasInTableScope(tn)) {
      p._closeTableCell();

      p._processToken(token);
    }
  } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) {
    endTagInBody(p, token);
  }
} // The "in select" insertion mode
//------------------------------------------------------------------


function startTagInSelect(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.OPTION) {
    if (p.openElements.currentTagName === $.OPTION) {
      p.openElements.pop();
    }

    p._insertElement(token, NS.HTML);
  } else if (tn === $.OPTGROUP) {
    if (p.openElements.currentTagName === $.OPTION) {
      p.openElements.pop();
    }

    if (p.openElements.currentTagName === $.OPTGROUP) {
      p.openElements.pop();
    }

    p._insertElement(token, NS.HTML);
  } else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {
    if (p.openElements.hasInSelectScope($.SELECT)) {
      p.openElements.popUntilTagNamePopped($.SELECT);

      p._resetInsertionMode();

      if (tn !== $.SELECT) {
        p._processToken(token);
      }
    }
  } else if (tn === $.SCRIPT || tn === $.TEMPLATE) {
    startTagInHead(p, token);
  }
}

function endTagInSelect(p, token) {
  var tn = token.tagName;

  if (tn === $.OPTGROUP) {
    var prevOpenElement = p.openElements.items[p.openElements.stackTop - 1];
    var prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);

    if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) {
      p.openElements.pop();
    }

    if (p.openElements.currentTagName === $.OPTGROUP) {
      p.openElements.pop();
    }
  } else if (tn === $.OPTION) {
    if (p.openElements.currentTagName === $.OPTION) {
      p.openElements.pop();
    }
  } else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
    p.openElements.popUntilTagNamePopped($.SELECT);

    p._resetInsertionMode();
  } else if (tn === $.TEMPLATE) {
    endTagInHead(p, token);
  }
} //12.2.5.4.17 The "in select in table" insertion mode
//------------------------------------------------------------------


function startTagInSelectInTable(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
    p.openElements.popUntilTagNamePopped($.SELECT);

    p._resetInsertionMode();

    p._processToken(token);
  } else {
    startTagInSelect(p, token);
  }
}

function endTagInSelectInTable(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
    if (p.openElements.hasInTableScope(tn)) {
      p.openElements.popUntilTagNamePopped($.SELECT);

      p._resetInsertionMode();

      p._processToken(token);
    }
  } else {
    endTagInSelect(p, token);
  }
} // The "in template" insertion mode
//------------------------------------------------------------------


function startTagInTemplate(p, token) {
  var tn = token.tagName;

  if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
    startTagInHead(p, token);
  } else {
    var newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;

    p._popTmplInsertionMode();

    p._pushTmplInsertionMode(newInsertionMode);

    p.insertionMode = newInsertionMode;

    p._processToken(token);
  }
}

function endTagInTemplate(p, token) {
  if (token.tagName === $.TEMPLATE) {
    endTagInHead(p, token);
  }
}

function eofInTemplate(p, token) {
  if (p.openElements.tmplCount > 0) {
    p.openElements.popUntilTagNamePopped($.TEMPLATE);
    p.activeFormattingElements.clearToLastMarker();

    p._popTmplInsertionMode();

    p._resetInsertionMode();

    p._processToken(token);
  } else {
    p.stopped = true;
  }
} // The "after body" insertion mode
//------------------------------------------------------------------


function startTagAfterBody(p, token) {
  if (token.tagName === $.HTML) {
    startTagInBody(p, token);
  } else {
    tokenAfterBody(p, token);
  }
}

function endTagAfterBody(p, token) {
  if (token.tagName === $.HTML) {
    if (!p.fragmentContext) {
      p.insertionMode = AFTER_AFTER_BODY_MODE;
    }
  } else {
    tokenAfterBody(p, token);
  }
}

function tokenAfterBody(p, token) {
  p.insertionMode = IN_BODY_MODE;

  p._processToken(token);
} // The "in frameset" insertion mode
//------------------------------------------------------------------


function startTagInFrameset(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.FRAMESET) {
    p._insertElement(token, NS.HTML);
  } else if (tn === $.FRAME) {
    p._appendElement(token, NS.HTML);

    token.ackSelfClosing = true;
  } else if (tn === $.NOFRAMES) {
    startTagInHead(p, token);
  }
}

function endTagInFrameset(p, token) {
  if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
    p.openElements.pop();

    if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) {
      p.insertionMode = AFTER_FRAMESET_MODE;
    }
  }
} // The "after frameset" insertion mode
//------------------------------------------------------------------


function startTagAfterFrameset(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.NOFRAMES) {
    startTagInHead(p, token);
  }
}

function endTagAfterFrameset(p, token) {
  if (token.tagName === $.HTML) {
    p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
  }
} // The "after after body" insertion mode
//------------------------------------------------------------------


function startTagAfterAfterBody(p, token) {
  if (token.tagName === $.HTML) {
    startTagInBody(p, token);
  } else {
    tokenAfterAfterBody(p, token);
  }
}

function tokenAfterAfterBody(p, token) {
  p.insertionMode = IN_BODY_MODE;

  p._processToken(token);
} // The "after after frameset" insertion mode
//------------------------------------------------------------------


function startTagAfterAfterFrameset(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.NOFRAMES) {
    startTagInHead(p, token);
  }
} // The rules for parsing tokens in foreign content
//------------------------------------------------------------------


function nullCharacterInForeignContent(p, token) {
  token.chars = unicode.REPLACEMENT_CHARACTER;

  p._insertCharacters(token);
}

function characterInForeignContent(p, token) {
  p._insertCharacters(token);

  p.framesetOk = false;
}

function startTagInForeignContent(p, token) {
  if (foreignContent.causesExit(token) && !p.fragmentContext) {
    while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isIntegrationPoint(p.openElements.current)) {
      p.openElements.pop();
    }

    p._processToken(token);
  } else {
    var current = p._getAdjustedCurrentElement();

    var currentNs = p.treeAdapter.getNamespaceURI(current);

    if (currentNs === NS.MATHML) {
      foreignContent.adjustTokenMathMLAttrs(token);
    } else if (currentNs === NS.SVG) {
      foreignContent.adjustTokenSVGTagName(token);
      foreignContent.adjustTokenSVGAttrs(token);
    }

    foreignContent.adjustTokenXMLAttrs(token);

    if (token.selfClosing) {
      p._appendElement(token, currentNs);
    } else {
      p._insertElement(token, currentNs);
    }

    token.ackSelfClosing = true;
  }
}

function endTagInForeignContent(p, token) {
  for (var i = p.openElements.stackTop; i > 0; i--) {
    var element = p.openElements.items[i];

    if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
      p._processToken(token);

      break;
    }

    if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
      p.openElements.popUntilElementPopped(element);
      break;
    }
  }
}

/***/ }),

/***/ 1902:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var HTML = __webpack_require__(7682); //Aliases


var $ = HTML.TAG_NAMES;
var NS = HTML.NAMESPACES; //Element utils
//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
//It's faster than using dictionary.

function isImpliedEndTagRequired(tn) {
  switch (tn.length) {
    case 1:
      return tn === $.P;

    case 2:
      return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;

    case 3:
      return tn === $.RTC;

    case 6:
      return tn === $.OPTION;

    case 8:
      return tn === $.OPTGROUP;
  }

  return false;
}

function isImpliedEndTagRequiredThoroughly(tn) {
  switch (tn.length) {
    case 1:
      return tn === $.P;

    case 2:
      return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI || tn === $.TD || tn === $.TH || tn === $.TR;

    case 3:
      return tn === $.RTC;

    case 5:
      return tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD;

    case 6:
      return tn === $.OPTION;

    case 7:
      return tn === $.CAPTION;

    case 8:
      return tn === $.OPTGROUP || tn === $.COLGROUP;
  }

  return false;
}

function isScopingElement(tn, ns) {
  switch (tn.length) {
    case 2:
      if (tn === $.TD || tn === $.TH) {
        return ns === NS.HTML;
      } else if (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS) {
        return ns === NS.MATHML;
      }

      break;

    case 4:
      if (tn === $.HTML) {
        return ns === NS.HTML;
      } else if (tn === $.DESC) {
        return ns === NS.SVG;
      }

      break;

    case 5:
      if (tn === $.TABLE) {
        return ns === NS.HTML;
      } else if (tn === $.MTEXT) {
        return ns === NS.MATHML;
      } else if (tn === $.TITLE) {
        return ns === NS.SVG;
      }

      break;

    case 6:
      return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;

    case 7:
      return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;

    case 8:
      return tn === $.TEMPLATE && ns === NS.HTML;

    case 13:
      return tn === $.FOREIGN_OBJECT && ns === NS.SVG;

    case 14:
      return tn === $.ANNOTATION_XML && ns === NS.MATHML;
  }

  return false;
} //Stack of open elements


var OpenElementStack = /*#__PURE__*/function () {
  function OpenElementStack(document, treeAdapter) {
    _classCallCheck(this, OpenElementStack);

    this.stackTop = -1;
    this.items = [];
    this.current = document;
    this.currentTagName = null;
    this.currentTmplContent = null;
    this.tmplCount = 0;
    this.treeAdapter = treeAdapter;
  } //Index of element


  _createClass(OpenElementStack, [{
    key: "_indexOf",
    value: function _indexOf(element) {
      var idx = -1;

      for (var i = this.stackTop; i >= 0; i--) {
        if (this.items[i] === element) {
          idx = i;
          break;
        }
      }

      return idx;
    } //Update current element

  }, {
    key: "_isInTemplate",
    value: function _isInTemplate() {
      return this.currentTagName === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
    }
  }, {
    key: "_updateCurrentElement",
    value: function _updateCurrentElement() {
      this.current = this.items[this.stackTop];
      this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);
      this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;
    } //Mutations

  }, {
    key: "push",
    value: function push(element) {
      this.items[++this.stackTop] = element;

      this._updateCurrentElement();

      if (this._isInTemplate()) {
        this.tmplCount++;
      }
    }
  }, {
    key: "pop",
    value: function pop() {
      this.stackTop--;

      if (this.tmplCount > 0 && this._isInTemplate()) {
        this.tmplCount--;
      }

      this._updateCurrentElement();
    }
  }, {
    key: "replace",
    value: function replace(oldElement, newElement) {
      var idx = this._indexOf(oldElement);

      this.items[idx] = newElement;

      if (idx === this.stackTop) {
        this._updateCurrentElement();
      }
    }
  }, {
    key: "insertAfter",
    value: function insertAfter(referenceElement, newElement) {
      var insertionIdx = this._indexOf(referenceElement) + 1;
      this.items.splice(insertionIdx, 0, newElement);

      if (insertionIdx === ++this.stackTop) {
        this._updateCurrentElement();
      }
    }
  }, {
    key: "popUntilTagNamePopped",
    value: function popUntilTagNamePopped(tagName) {
      while (this.stackTop > -1) {
        var tn = this.currentTagName;
        var ns = this.treeAdapter.getNamespaceURI(this.current);
        this.pop();

        if (tn === tagName && ns === NS.HTML) {
          break;
        }
      }
    }
  }, {
    key: "popUntilElementPopped",
    value: function popUntilElementPopped(element) {
      while (this.stackTop > -1) {
        var poppedElement = this.current;
        this.pop();

        if (poppedElement === element) {
          break;
        }
      }
    }
  }, {
    key: "popUntilNumberedHeaderPopped",
    value: function popUntilNumberedHeaderPopped() {
      while (this.stackTop > -1) {
        var tn = this.currentTagName;
        var ns = this.treeAdapter.getNamespaceURI(this.current);
        this.pop();

        if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6 && ns === NS.HTML) {
          break;
        }
      }
    }
  }, {
    key: "popUntilTableCellPopped",
    value: function popUntilTableCellPopped() {
      while (this.stackTop > -1) {
        var tn = this.currentTagName;
        var ns = this.treeAdapter.getNamespaceURI(this.current);
        this.pop();

        if (tn === $.TD || tn === $.TH && ns === NS.HTML) {
          break;
        }
      }
    }
  }, {
    key: "popAllUpToHtmlElement",
    value: function popAllUpToHtmlElement() {
      //NOTE: here we assume that root <html> element is always first in the open element stack, so
      //we perform this fast stack clean up.
      this.stackTop = 0;

      this._updateCurrentElement();
    }
  }, {
    key: "clearBackToTableContext",
    value: function clearBackToTableContext() {
      while (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
        this.pop();
      }
    }
  }, {
    key: "clearBackToTableBodyContext",
    value: function clearBackToTableBodyContext() {
      while (this.currentTagName !== $.TBODY && this.currentTagName !== $.TFOOT && this.currentTagName !== $.THEAD && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
        this.pop();
      }
    }
  }, {
    key: "clearBackToTableRowContext",
    value: function clearBackToTableRowContext() {
      while (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
        this.pop();
      }
    }
  }, {
    key: "remove",
    value: function remove(element) {
      for (var i = this.stackTop; i >= 0; i--) {
        if (this.items[i] === element) {
          this.items.splice(i, 1);
          this.stackTop--;

          this._updateCurrentElement();

          break;
        }
      }
    } //Search

  }, {
    key: "tryPeekProperlyNestedBodyElement",
    value: function tryPeekProperlyNestedBodyElement() {
      //Properly nested <body> element (should be second element in stack).
      var element = this.items[1];
      return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
    }
  }, {
    key: "contains",
    value: function contains(element) {
      return this._indexOf(element) > -1;
    }
  }, {
    key: "getCommonAncestor",
    value: function getCommonAncestor(element) {
      var elementIdx = this._indexOf(element);

      return --elementIdx >= 0 ? this.items[elementIdx] : null;
    }
  }, {
    key: "isRootHtmlElementCurrent",
    value: function isRootHtmlElementCurrent() {
      return this.stackTop === 0 && this.currentTagName === $.HTML;
    } //Element in scope

  }, {
    key: "hasInScope",
    value: function hasInScope(tagName) {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (tn === tagName && ns === NS.HTML) {
          return true;
        }

        if (isScopingElement(tn, ns)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "hasNumberedHeaderInScope",
    value: function hasNumberedHeaderInScope() {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if ((tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) && ns === NS.HTML) {
          return true;
        }

        if (isScopingElement(tn, ns)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "hasInListItemScope",
    value: function hasInListItemScope(tagName) {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (tn === tagName && ns === NS.HTML) {
          return true;
        }

        if ((tn === $.UL || tn === $.OL) && ns === NS.HTML || isScopingElement(tn, ns)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "hasInButtonScope",
    value: function hasInButtonScope(tagName) {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (tn === tagName && ns === NS.HTML) {
          return true;
        }

        if (tn === $.BUTTON && ns === NS.HTML || isScopingElement(tn, ns)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "hasInTableScope",
    value: function hasInTableScope(tagName) {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (ns !== NS.HTML) {
          continue;
        }

        if (tn === tagName) {
          return true;
        }

        if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "hasTableBodyContextInTableScope",
    value: function hasTableBodyContextInTableScope() {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (ns !== NS.HTML) {
          continue;
        }

        if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) {
          return true;
        }

        if (tn === $.TABLE || tn === $.HTML) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "hasInSelectScope",
    value: function hasInSelectScope(tagName) {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (ns !== NS.HTML) {
          continue;
        }

        if (tn === tagName) {
          return true;
        }

        if (tn !== $.OPTION && tn !== $.OPTGROUP) {
          return false;
        }
      }

      return true;
    } //Implied end tags

  }, {
    key: "generateImpliedEndTags",
    value: function generateImpliedEndTags() {
      while (isImpliedEndTagRequired(this.currentTagName)) {
        this.pop();
      }
    }
  }, {
    key: "generateImpliedEndTagsThoroughly",
    value: function generateImpliedEndTagsThoroughly() {
      while (isImpliedEndTagRequiredThoroughly(this.currentTagName)) {
        this.pop();
      }
    }
  }, {
    key: "generateImpliedEndTagsWithExclusion",
    value: function generateImpliedEndTagsWithExclusion(exclusionTagName) {
      while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {
        this.pop();
      }
    }
  }]);

  return OpenElementStack;
}();

module.exports = OpenElementStack;

/***/ }),

/***/ 504:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var Preprocessor = __webpack_require__(9446);

var unicode = __webpack_require__(676);

var neTree = __webpack_require__(8748);

var ERR = __webpack_require__(7983); //Aliases


var $ = unicode.CODE_POINTS;
var $$ = unicode.CODE_POINT_SEQUENCES; //C1 Unicode control character reference replacements

var C1_CONTROLS_REFERENCE_REPLACEMENTS = {
  0x80: 0x20ac,
  0x82: 0x201a,
  0x83: 0x0192,
  0x84: 0x201e,
  0x85: 0x2026,
  0x86: 0x2020,
  0x87: 0x2021,
  0x88: 0x02c6,
  0x89: 0x2030,
  0x8a: 0x0160,
  0x8b: 0x2039,
  0x8c: 0x0152,
  0x8e: 0x017d,
  0x91: 0x2018,
  0x92: 0x2019,
  0x93: 0x201c,
  0x94: 0x201d,
  0x95: 0x2022,
  0x96: 0x2013,
  0x97: 0x2014,
  0x98: 0x02dc,
  0x99: 0x2122,
  0x9a: 0x0161,
  0x9b: 0x203a,
  0x9c: 0x0153,
  0x9e: 0x017e,
  0x9f: 0x0178
}; // Named entity tree flags

var HAS_DATA_FLAG = 1 << 0;
var DATA_DUPLET_FLAG = 1 << 1;
var HAS_BRANCHES_FLAG = 1 << 2;
var MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG; //States

var DATA_STATE = 'DATA_STATE';
var RCDATA_STATE = 'RCDATA_STATE';
var RAWTEXT_STATE = 'RAWTEXT_STATE';
var SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';
var PLAINTEXT_STATE = 'PLAINTEXT_STATE';
var TAG_OPEN_STATE = 'TAG_OPEN_STATE';
var END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';
var TAG_NAME_STATE = 'TAG_NAME_STATE';
var RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';
var RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';
var RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';
var RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';
var RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';
var RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';
var SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';
var SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';
var SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';
var SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';
var SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';
var SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';
var SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';
var SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';
var SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';
var SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';
var SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';
var SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';
var SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';
var SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';
var SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';
var SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';
var SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';
var BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';
var ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';
var AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';
var BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';
var ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';
var ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';
var ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';
var AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';
var SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';
var BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';
var MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';
var COMMENT_START_STATE = 'COMMENT_START_STATE';
var COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';
var COMMENT_STATE = 'COMMENT_STATE';
var COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';
var COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';
var COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';
var COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';
var COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';
var COMMENT_END_STATE = 'COMMENT_END_STATE';
var COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';
var DOCTYPE_STATE = 'DOCTYPE_STATE';
var BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';
var DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';
var AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';
var AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';
var BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';
var DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';
var DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';
var AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';
var BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';
var AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';
var BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';
var DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';
var DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';
var AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';
var BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';
var CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';
var CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';
var CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';
var CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';
var NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';
var AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';
var NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';
var HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';
var DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';
var HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';
var DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';
var NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE'; //Utils
//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
//this functions if they will be situated in another module due to context switch.
//Always perform inlining check before modifying this functions ('node --trace-inlining').

function isWhitespace(cp) {
  return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
}

function isAsciiDigit(cp) {
  return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
}

function isAsciiUpper(cp) {
  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
}

function isAsciiLower(cp) {
  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
}

function isAsciiLetter(cp) {
  return isAsciiLower(cp) || isAsciiUpper(cp);
}

function isAsciiAlphaNumeric(cp) {
  return isAsciiLetter(cp) || isAsciiDigit(cp);
}

function isAsciiUpperHexDigit(cp) {
  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;
}

function isAsciiLowerHexDigit(cp) {
  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;
}

function isAsciiHexDigit(cp) {
  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
}

function toAsciiLowerCodePoint(cp) {
  return cp + 0x0020;
} //NOTE: String.fromCharCode() function can handle only characters from BMP subset.
//So, we need to workaround this manually.
//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)


function toChar(cp) {
  if (cp <= 0xffff) {
    return String.fromCharCode(cp);
  }

  cp -= 0x10000;
  return String.fromCharCode(cp >>> 10 & 0x3ff | 0xd800) + String.fromCharCode(0xdc00 | cp & 0x3ff);
}

function toAsciiLowerChar(cp) {
  return String.fromCharCode(toAsciiLowerCodePoint(cp));
}

function findNamedEntityTreeBranch(nodeIx, cp) {
  var branchCount = neTree[++nodeIx];
  var lo = ++nodeIx;
  var hi = lo + branchCount - 1;

  while (lo <= hi) {
    var mid = lo + hi >>> 1;
    var midCp = neTree[mid];

    if (midCp < cp) {
      lo = mid + 1;
    } else if (midCp > cp) {
      hi = mid - 1;
    } else {
      return neTree[mid + branchCount];
    }
  }

  return -1;
} //Tokenizer


var Tokenizer = /*#__PURE__*/function () {
  function Tokenizer() {
    _classCallCheck(this, Tokenizer);

    this.preprocessor = new Preprocessor();
    this.tokenQueue = [];
    this.allowCDATA = false;
    this.state = DATA_STATE;
    this.returnState = '';
    this.charRefCode = -1;
    this.tempBuff = [];
    this.lastStartTagName = '';
    this.consumedAfterSnapshot = -1;
    this.active = false;
    this.currentCharacterToken = null;
    this.currentToken = null;
    this.currentAttr = null;
  } //Errors


  _createClass(Tokenizer, [{
    key: "_err",
    value: function _err() {// NOTE: err reporting is noop by default. Enabled by mixin.
    }
  }, {
    key: "_errOnNextCodePoint",
    value: function _errOnNextCodePoint(err) {
      this._consume();

      this._err(err);

      this._unconsume();
    } //API

  }, {
    key: "getNextToken",
    value: function getNextToken() {
      while (!this.tokenQueue.length && this.active) {
        this.consumedAfterSnapshot = 0;

        var cp = this._consume();

        if (!this._ensureHibernation()) {
          this[this.state](cp);
        }
      }

      return this.tokenQueue.shift();
    }
  }, {
    key: "write",
    value: function write(chunk, isLastChunk) {
      this.active = true;
      this.preprocessor.write(chunk, isLastChunk);
    }
  }, {
    key: "insertHtmlAtCurrentPos",
    value: function insertHtmlAtCurrentPos(chunk) {
      this.active = true;
      this.preprocessor.insertHtmlAtCurrentPos(chunk);
    } //Hibernation

  }, {
    key: "_ensureHibernation",
    value: function _ensureHibernation() {
      if (this.preprocessor.endOfChunkHit) {
        for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {
          this.preprocessor.retreat();
        }

        this.active = false;
        this.tokenQueue.push({
          type: Tokenizer.HIBERNATION_TOKEN
        });
        return true;
      }

      return false;
    } //Consumption

  }, {
    key: "_consume",
    value: function _consume() {
      this.consumedAfterSnapshot++;
      return this.preprocessor.advance();
    }
  }, {
    key: "_unconsume",
    value: function _unconsume() {
      this.consumedAfterSnapshot--;
      this.preprocessor.retreat();
    }
  }, {
    key: "_reconsumeInState",
    value: function _reconsumeInState(state) {
      this.state = state;

      this._unconsume();
    }
  }, {
    key: "_consumeSequenceIfMatch",
    value: function _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {
      var consumedCount = 0;
      var isMatch = true;
      var patternLength = pattern.length;
      var patternPos = 0;
      var cp = startCp;
      var patternCp = void 0;

      for (; patternPos < patternLength; patternPos++) {
        if (patternPos > 0) {
          cp = this._consume();
          consumedCount++;
        }

        if (cp === $.EOF) {
          isMatch = false;
          break;
        }

        patternCp = pattern[patternPos];

        if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
          isMatch = false;
          break;
        }
      }

      if (!isMatch) {
        while (consumedCount--) {
          this._unconsume();
        }
      }

      return isMatch;
    } //Temp buffer

  }, {
    key: "_isTempBufferEqualToScriptString",
    value: function _isTempBufferEqualToScriptString() {
      if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {
        return false;
      }

      for (var i = 0; i < this.tempBuff.length; i++) {
        if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {
          return false;
        }
      }

      return true;
    } //Token creation

  }, {
    key: "_createStartTagToken",
    value: function _createStartTagToken() {
      this.currentToken = {
        type: Tokenizer.START_TAG_TOKEN,
        tagName: '',
        selfClosing: false,
        ackSelfClosing: false,
        attrs: []
      };
    }
  }, {
    key: "_createEndTagToken",
    value: function _createEndTagToken() {
      this.currentToken = {
        type: Tokenizer.END_TAG_TOKEN,
        tagName: '',
        selfClosing: false,
        attrs: []
      };
    }
  }, {
    key: "_createCommentToken",
    value: function _createCommentToken() {
      this.currentToken = {
        type: Tokenizer.COMMENT_TOKEN,
        data: ''
      };
    }
  }, {
    key: "_createDoctypeToken",
    value: function _createDoctypeToken(initialName) {
      this.currentToken = {
        type: Tokenizer.DOCTYPE_TOKEN,
        name: initialName,
        forceQuirks: false,
        publicId: null,
        systemId: null
      };
    }
  }, {
    key: "_createCharacterToken",
    value: function _createCharacterToken(type, ch) {
      this.currentCharacterToken = {
        type: type,
        chars: ch
      };
    }
  }, {
    key: "_createEOFToken",
    value: function _createEOFToken() {
      this.currentToken = {
        type: Tokenizer.EOF_TOKEN
      };
    } //Tag attributes

  }, {
    key: "_createAttr",
    value: function _createAttr(attrNameFirstCh) {
      this.currentAttr = {
        name: attrNameFirstCh,
        value: ''
      };
    }
  }, {
    key: "_leaveAttrName",
    value: function _leaveAttrName(toState) {
      if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {
        this.currentToken.attrs.push(this.currentAttr);
      } else {
        this._err(ERR.duplicateAttribute);
      }

      this.state = toState;
    }
  }, {
    key: "_leaveAttrValue",
    value: function _leaveAttrValue(toState) {
      this.state = toState;
    } //Token emission

  }, {
    key: "_emitCurrentToken",
    value: function _emitCurrentToken() {
      this._emitCurrentCharacterToken();

      var ct = this.currentToken;
      this.currentToken = null; //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.

      if (ct.type === Tokenizer.START_TAG_TOKEN) {
        this.lastStartTagName = ct.tagName;
      } else if (ct.type === Tokenizer.END_TAG_TOKEN) {
        if (ct.attrs.length > 0) {
          this._err(ERR.endTagWithAttributes);
        }

        if (ct.selfClosing) {
          this._err(ERR.endTagWithTrailingSolidus);
        }
      }

      this.tokenQueue.push(ct);
    }
  }, {
    key: "_emitCurrentCharacterToken",
    value: function _emitCurrentCharacterToken() {
      if (this.currentCharacterToken) {
        this.tokenQueue.push(this.currentCharacterToken);
        this.currentCharacterToken = null;
      }
    }
  }, {
    key: "_emitEOFToken",
    value: function _emitEOFToken() {
      this._createEOFToken();

      this._emitCurrentToken();
    } //Characters emission
    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).
    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
    //If we have a sequence of characters that belong to the same group, parser can process it
    //as a single solid character token.
    //So, there are 3 types of character tokens in parse5:
    //1)NULL_CHARACTER_TOKEN - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')

  }, {
    key: "_appendCharToCurrentCharacterToken",
    value: function _appendCharToCurrentCharacterToken(type, ch) {
      if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {
        this._emitCurrentCharacterToken();
      }

      if (this.currentCharacterToken) {
        this.currentCharacterToken.chars += ch;
      } else {
        this._createCharacterToken(type, ch);
      }
    }
  }, {
    key: "_emitCodePoint",
    value: function _emitCodePoint(cp) {
      var type = Tokenizer.CHARACTER_TOKEN;

      if (isWhitespace(cp)) {
        type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;
      } else if (cp === $.NULL) {
        type = Tokenizer.NULL_CHARACTER_TOKEN;
      }

      this._appendCharToCurrentCharacterToken(type, toChar(cp));
    }
  }, {
    key: "_emitSeveralCodePoints",
    value: function _emitSeveralCodePoints(codePoints) {
      for (var i = 0; i < codePoints.length; i++) {
        this._emitCodePoint(codePoints[i]);
      }
    } //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.
    //So we can avoid additional checks here.

  }, {
    key: "_emitChars",
    value: function _emitChars(ch) {
      this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
    } // Character reference helpers

  }, {
    key: "_matchNamedCharacterReference",
    value: function _matchNamedCharacterReference(startCp) {
      var result = null;
      var excess = 1;
      var i = findNamedEntityTreeBranch(0, startCp);
      this.tempBuff.push(startCp);

      while (i > -1) {
        var current = neTree[i];
        var inNode = current < MAX_BRANCH_MARKER_VALUE;
        var nodeWithData = inNode && current & HAS_DATA_FLAG;

        if (nodeWithData) {
          //NOTE: we use greedy search, so we continue lookup at this point
          result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];
          excess = 0;
        }

        var cp = this._consume();

        this.tempBuff.push(cp);
        excess++;

        if (cp === $.EOF) {
          break;
        }

        if (inNode) {
          i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;
        } else {
          i = cp === current ? ++i : -1;
        }
      }

      while (excess--) {
        this.tempBuff.pop();

        this._unconsume();
      }

      return result;
    }
  }, {
    key: "_isCharacterReferenceInAttribute",
    value: function _isCharacterReferenceInAttribute() {
      return this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE;
    }
  }, {
    key: "_isCharacterReferenceAttributeQuirk",
    value: function _isCharacterReferenceAttributeQuirk(withSemicolon) {
      if (!withSemicolon && this._isCharacterReferenceInAttribute()) {
        var nextCp = this._consume();

        this._unconsume();

        return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
      }

      return false;
    }
  }, {
    key: "_flushCodePointsConsumedAsCharacterReference",
    value: function _flushCodePointsConsumedAsCharacterReference() {
      if (this._isCharacterReferenceInAttribute()) {
        for (var i = 0; i < this.tempBuff.length; i++) {
          this.currentAttr.value += toChar(this.tempBuff[i]);
        }
      } else {
        this._emitSeveralCodePoints(this.tempBuff);
      }

      this.tempBuff = [];
    } // State machine
    // Data state
    //------------------------------------------------------------------

  }, {
    key: DATA_STATE,
    value: function value(cp) {
      this.preprocessor.dropParsedChunk();

      if (cp === $.LESS_THAN_SIGN) {
        this.state = TAG_OPEN_STATE;
      } else if (cp === $.AMPERSAND) {
        this.returnState = DATA_STATE;
        this.state = CHARACTER_REFERENCE_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitCodePoint(cp);
      } else if (cp === $.EOF) {
        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    } //  RCDATA state
    //------------------------------------------------------------------

  }, {
    key: RCDATA_STATE,
    value: function value(cp) {
      this.preprocessor.dropParsedChunk();

      if (cp === $.AMPERSAND) {
        this.returnState = RCDATA_STATE;
        this.state = CHARACTER_REFERENCE_STATE;
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = RCDATA_LESS_THAN_SIGN_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    } // RAWTEXT state
    //------------------------------------------------------------------

  }, {
    key: RAWTEXT_STATE,
    value: function value(cp) {
      this.preprocessor.dropParsedChunk();

      if (cp === $.LESS_THAN_SIGN) {
        this.state = RAWTEXT_LESS_THAN_SIGN_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    } // Script data state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_STATE,
    value: function value(cp) {
      this.preprocessor.dropParsedChunk();

      if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    } // PLAINTEXT state
    //------------------------------------------------------------------

  }, {
    key: PLAINTEXT_STATE,
    value: function value(cp) {
      this.preprocessor.dropParsedChunk();

      if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    } // Tag open state
    //------------------------------------------------------------------

  }, {
    key: TAG_OPEN_STATE,
    value: function value(cp) {
      if (cp === $.EXCLAMATION_MARK) {
        this.state = MARKUP_DECLARATION_OPEN_STATE;
      } else if (cp === $.SOLIDUS) {
        this.state = END_TAG_OPEN_STATE;
      } else if (isAsciiLetter(cp)) {
        this._createStartTagToken();

        this._reconsumeInState(TAG_NAME_STATE);
      } else if (cp === $.QUESTION_MARK) {
        this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);

        this._createCommentToken();

        this._reconsumeInState(BOGUS_COMMENT_STATE);
      } else if (cp === $.EOF) {
        this._err(ERR.eofBeforeTagName);

        this._emitChars('<');

        this._emitEOFToken();
      } else {
        this._err(ERR.invalidFirstCharacterOfTagName);

        this._emitChars('<');

        this._reconsumeInState(DATA_STATE);
      }
    } // End tag open state
    //------------------------------------------------------------------

  }, {
    key: END_TAG_OPEN_STATE,
    value: function value(cp) {
      if (isAsciiLetter(cp)) {
        this._createEndTagToken();

        this._reconsumeInState(TAG_NAME_STATE);
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingEndTagName);

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofBeforeTagName);

        this._emitChars('</');

        this._emitEOFToken();
      } else {
        this._err(ERR.invalidFirstCharacterOfTagName);

        this._createCommentToken();

        this._reconsumeInState(BOGUS_COMMENT_STATE);
      }
    } // Tag name state
    //------------------------------------------------------------------

  }, {
    key: TAG_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this.state = BEFORE_ATTRIBUTE_NAME_STATE;
      } else if (cp === $.SOLIDUS) {
        this.state = SELF_CLOSING_START_TAG_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this.currentToken.tagName += toChar(cp);
      }
    } // RCDATA less-than sign state
    //------------------------------------------------------------------

  }, {
    key: RCDATA_LESS_THAN_SIGN_STATE,
    value: function value(cp) {
      if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = RCDATA_END_TAG_OPEN_STATE;
      } else {
        this._emitChars('<');

        this._reconsumeInState(RCDATA_STATE);
      }
    } // RCDATA end tag open state
    //------------------------------------------------------------------

  }, {
    key: RCDATA_END_TAG_OPEN_STATE,
    value: function value(cp) {
      if (isAsciiLetter(cp)) {
        this._createEndTagToken();

        this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
      } else {
        this._emitChars('</');

        this._reconsumeInState(RCDATA_STATE);
      }
    } // RCDATA end tag name state
    //------------------------------------------------------------------

  }, {
    key: RCDATA_END_TAG_NAME_STATE,
    value: function value(cp) {
      if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
      } else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
      } else {
        if (this.lastStartTagName === this.currentToken.tagName) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_ATTRIBUTE_NAME_STATE;
            return;
          }

          if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
            return;
          }

          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;

            this._emitCurrentToken();

            return;
          }
        }

        this._emitChars('</');

        this._emitSeveralCodePoints(this.tempBuff);

        this._reconsumeInState(RCDATA_STATE);
      }
    } // RAWTEXT less-than sign state
    //------------------------------------------------------------------

  }, {
    key: RAWTEXT_LESS_THAN_SIGN_STATE,
    value: function value(cp) {
      if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = RAWTEXT_END_TAG_OPEN_STATE;
      } else {
        this._emitChars('<');

        this._reconsumeInState(RAWTEXT_STATE);
      }
    } // RAWTEXT end tag open state
    //------------------------------------------------------------------

  }, {
    key: RAWTEXT_END_TAG_OPEN_STATE,
    value: function value(cp) {
      if (isAsciiLetter(cp)) {
        this._createEndTagToken();

        this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
      } else {
        this._emitChars('</');

        this._reconsumeInState(RAWTEXT_STATE);
      }
    } // RAWTEXT end tag name state
    //------------------------------------------------------------------

  }, {
    key: RAWTEXT_END_TAG_NAME_STATE,
    value: function value(cp) {
      if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
      } else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
      } else {
        if (this.lastStartTagName === this.currentToken.tagName) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_ATTRIBUTE_NAME_STATE;
            return;
          }

          if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
            return;
          }

          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();

            this.state = DATA_STATE;
            return;
          }
        }

        this._emitChars('</');

        this._emitSeveralCodePoints(this.tempBuff);

        this._reconsumeInState(RAWTEXT_STATE);
      }
    } // Script data less-than sign state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_LESS_THAN_SIGN_STATE,
    value: function value(cp) {
      if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
      } else if (cp === $.EXCLAMATION_MARK) {
        this.state = SCRIPT_DATA_ESCAPE_START_STATE;

        this._emitChars('<!');
      } else {
        this._emitChars('<');

        this._reconsumeInState(SCRIPT_DATA_STATE);
      }
    } // Script data end tag open state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_END_TAG_OPEN_STATE,
    value: function value(cp) {
      if (isAsciiLetter(cp)) {
        this._createEndTagToken();

        this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
      } else {
        this._emitChars('</');

        this._reconsumeInState(SCRIPT_DATA_STATE);
      }
    } // Script data end tag name state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_END_TAG_NAME_STATE,
    value: function value(cp) {
      if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
      } else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
      } else {
        if (this.lastStartTagName === this.currentToken.tagName) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_ATTRIBUTE_NAME_STATE;
            return;
          } else if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
            return;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();

            this.state = DATA_STATE;
            return;
          }
        }

        this._emitChars('</');

        this._emitSeveralCodePoints(this.tempBuff);

        this._reconsumeInState(SCRIPT_DATA_STATE);
      }
    } // Script data escape start state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_ESCAPE_START_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;

        this._emitChars('-');
      } else {
        this._reconsumeInState(SCRIPT_DATA_STATE);
      }
    } // Script data escape start dash state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_ESCAPE_START_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;

        this._emitChars('-');
      } else {
        this._reconsumeInState(SCRIPT_DATA_STATE);
      }
    } // Script data escaped state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_ESCAPED_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;

        this._emitChars('-');
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInScriptHtmlCommentLikeText);

        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    } // Script data escaped dash state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_ESCAPED_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;

        this._emitChars('-');
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.state = SCRIPT_DATA_ESCAPED_STATE;

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInScriptHtmlCommentLikeText);

        this._emitEOFToken();
      } else {
        this.state = SCRIPT_DATA_ESCAPED_STATE;

        this._emitCodePoint(cp);
      }
    } // Script data escaped dash dash state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_ESCAPED_DASH_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this._emitChars('-');
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this.state = SCRIPT_DATA_STATE;

        this._emitChars('>');
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.state = SCRIPT_DATA_ESCAPED_STATE;

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInScriptHtmlCommentLikeText);

        this._emitEOFToken();
      } else {
        this.state = SCRIPT_DATA_ESCAPED_STATE;

        this._emitCodePoint(cp);
      }
    } // Script data escaped less-than sign state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE,
    value: function value(cp) {
      if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
      } else if (isAsciiLetter(cp)) {
        this.tempBuff = [];

        this._emitChars('<');

        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
      } else {
        this._emitChars('<');

        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
      }
    } // Script data escaped end tag open state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE,
    value: function value(cp) {
      if (isAsciiLetter(cp)) {
        this._createEndTagToken();

        this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
      } else {
        this._emitChars('</');

        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
      }
    } // Script data escaped end tag name state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE,
    value: function value(cp) {
      if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
      } else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
      } else {
        if (this.lastStartTagName === this.currentToken.tagName) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_ATTRIBUTE_NAME_STATE;
            return;
          }

          if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
            return;
          }

          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();

            this.state = DATA_STATE;
            return;
          }
        }

        this._emitChars('</');

        this._emitSeveralCodePoints(this.tempBuff);

        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
      }
    } // Script data double escape start state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE,
    value: function value(cp) {
      if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
        this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;

        this._emitCodePoint(cp);
      } else if (isAsciiUpper(cp)) {
        this.tempBuff.push(toAsciiLowerCodePoint(cp));

        this._emitCodePoint(cp);
      } else if (isAsciiLower(cp)) {
        this.tempBuff.push(cp);

        this._emitCodePoint(cp);
      } else {
        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
      }
    } // Script data double escaped state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_DOUBLE_ESCAPED_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;

        this._emitChars('-');
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;

        this._emitChars('<');
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInScriptHtmlCommentLikeText);

        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    } // Script data double escaped dash state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;

        this._emitChars('-');
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;

        this._emitChars('<');
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInScriptHtmlCommentLikeText);

        this._emitEOFToken();
      } else {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

        this._emitCodePoint(cp);
      }
    } // Script data double escaped dash dash state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this._emitChars('-');
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;

        this._emitChars('<');
      } else if (cp === $.GREATER_THAN_SIGN) {
        this.state = SCRIPT_DATA_STATE;

        this._emitChars('>');
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInScriptHtmlCommentLikeText);

        this._emitEOFToken();
      } else {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

        this._emitCodePoint(cp);
      }
    } // Script data double escaped less-than sign state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE,
    value: function value(cp) {
      if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;

        this._emitChars('/');
      } else {
        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
      }
    } // Script data double escape end state
    //------------------------------------------------------------------

  }, {
    key: SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE,
    value: function value(cp) {
      if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
        this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

        this._emitCodePoint(cp);
      } else if (isAsciiUpper(cp)) {
        this.tempBuff.push(toAsciiLowerCodePoint(cp));

        this._emitCodePoint(cp);
      } else if (isAsciiLower(cp)) {
        this.tempBuff.push(cp);

        this._emitCodePoint(cp);
      } else {
        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
      }
    } // Before attribute name state
    //------------------------------------------------------------------

  }, {
    key: BEFORE_ATTRIBUTE_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
        this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);
      } else if (cp === $.EQUALS_SIGN) {
        this._err(ERR.unexpectedEqualsSignBeforeAttributeName);

        this._createAttr('=');

        this.state = ATTRIBUTE_NAME_STATE;
      } else {
        this._createAttr('');

        this._reconsumeInState(ATTRIBUTE_NAME_STATE);
      }
    } // Attribute name state
    //------------------------------------------------------------------

  }, {
    key: ATTRIBUTE_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
        this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);

        this._unconsume();
      } else if (cp === $.EQUALS_SIGN) {
        this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);
      } else if (isAsciiUpper(cp)) {
        this.currentAttr.name += toAsciiLowerChar(cp);
      } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {
        this._err(ERR.unexpectedCharacterInAttributeName);

        this.currentAttr.name += toChar(cp);
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;
      } else {
        this.currentAttr.name += toChar(cp);
      }
    } // After attribute name state
    //------------------------------------------------------------------

  }, {
    key: AFTER_ATTRIBUTE_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.SOLIDUS) {
        this.state = SELF_CLOSING_START_TAG_STATE;
      } else if (cp === $.EQUALS_SIGN) {
        this.state = BEFORE_ATTRIBUTE_VALUE_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this._createAttr('');

        this._reconsumeInState(ATTRIBUTE_NAME_STATE);
      }
    } // Before attribute value state
    //------------------------------------------------------------------

  }, {
    key: BEFORE_ATTRIBUTE_VALUE_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.QUOTATION_MARK) {
        this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingAttributeValue);

        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else {
        this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
      }
    } // Attribute value (double-quoted) state
    //------------------------------------------------------------------

  }, {
    key: ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE,
    value: function value(cp) {
      if (cp === $.QUOTATION_MARK) {
        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
      } else if (cp === $.AMPERSAND) {
        this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
        this.state = CHARACTER_REFERENCE_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this.currentAttr.value += toChar(cp);
      }
    } // Attribute value (single-quoted) state
    //------------------------------------------------------------------

  }, {
    key: ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE,
    value: function value(cp) {
      if (cp === $.APOSTROPHE) {
        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
      } else if (cp === $.AMPERSAND) {
        this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
        this.state = CHARACTER_REFERENCE_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this.currentAttr.value += toChar(cp);
      }
    } // Attribute value (unquoted) state
    //------------------------------------------------------------------

  }, {
    key: ATTRIBUTE_VALUE_UNQUOTED_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
      } else if (cp === $.AMPERSAND) {
        this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;
        this.state = CHARACTER_REFERENCE_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._leaveAttrValue(DATA_STATE);

        this._emitCurrentToken();
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
        this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);

        this.currentAttr.value += toChar(cp);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this.currentAttr.value += toChar(cp);
      }
    } // After attribute value (quoted) state
    //------------------------------------------------------------------

  }, {
    key: AFTER_ATTRIBUTE_VALUE_QUOTED_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
      } else if (cp === $.SOLIDUS) {
        this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._leaveAttrValue(DATA_STATE);

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this._err(ERR.missingWhitespaceBetweenAttributes);

        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
      }
    } // Self-closing start tag state
    //------------------------------------------------------------------

  }, {
    key: SELF_CLOSING_START_TAG_STATE,
    value: function value(cp) {
      if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.selfClosing = true;
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this._err(ERR.unexpectedSolidusInTag);

        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
      }
    } // Bogus comment state
    //------------------------------------------------------------------

  }, {
    key: BOGUS_COMMENT_STATE,
    value: function value(cp) {
      if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._emitCurrentToken();

        this._emitEOFToken();
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
      } else {
        this.currentToken.data += toChar(cp);
      }
    } // Markup declaration open state
    //------------------------------------------------------------------

  }, {
    key: MARKUP_DECLARATION_OPEN_STATE,
    value: function value(cp) {
      if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {
        this._createCommentToken();

        this.state = COMMENT_START_STATE;
      } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {
        this.state = DOCTYPE_STATE;
      } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {
        if (this.allowCDATA) {
          this.state = CDATA_SECTION_STATE;
        } else {
          this._err(ERR.cdataInHtmlContent);

          this._createCommentToken();

          this.currentToken.data = '[CDATA[';
          this.state = BOGUS_COMMENT_STATE;
        }
      } //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup
      //results are no longer valid and we will need to start over.
      else if (!this._ensureHibernation()) {
        this._err(ERR.incorrectlyOpenedComment);

        this._createCommentToken();

        this._reconsumeInState(BOGUS_COMMENT_STATE);
      }
    } // Comment start state
    //------------------------------------------------------------------

  }, {
    key: COMMENT_START_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = COMMENT_START_DASH_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.abruptClosingOfEmptyComment);

        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else {
        this._reconsumeInState(COMMENT_STATE);
      }
    } // Comment start dash state
    //------------------------------------------------------------------

  }, {
    key: COMMENT_START_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = COMMENT_END_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.abruptClosingOfEmptyComment);

        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInComment);

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.data += '-';

        this._reconsumeInState(COMMENT_STATE);
      }
    } // Comment state
    //------------------------------------------------------------------

  }, {
    key: COMMENT_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = COMMENT_END_DASH_STATE;
      } else if (cp === $.LESS_THAN_SIGN) {
        this.currentToken.data += '<';
        this.state = COMMENT_LESS_THAN_SIGN_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInComment);

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.data += toChar(cp);
      }
    } // Comment less-than sign state
    //------------------------------------------------------------------

  }, {
    key: COMMENT_LESS_THAN_SIGN_STATE,
    value: function value(cp) {
      if (cp === $.EXCLAMATION_MARK) {
        this.currentToken.data += '!';
        this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;
      } else if (cp === $.LESS_THAN_SIGN) {
        this.currentToken.data += '!';
      } else {
        this._reconsumeInState(COMMENT_STATE);
      }
    } // Comment less-than sign bang state
    //------------------------------------------------------------------

  }, {
    key: COMMENT_LESS_THAN_SIGN_BANG_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;
      } else {
        this._reconsumeInState(COMMENT_STATE);
      }
    } // Comment less-than sign bang dash state
    //------------------------------------------------------------------

  }, {
    key: COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;
      } else {
        this._reconsumeInState(COMMENT_END_DASH_STATE);
      }
    } // Comment less-than sign bang dash dash state
    //------------------------------------------------------------------

  }, {
    key: COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE,
    value: function value(cp) {
      if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {
        this._err(ERR.nestedComment);
      }

      this._reconsumeInState(COMMENT_END_STATE);
    } // Comment end dash state
    //------------------------------------------------------------------

  }, {
    key: COMMENT_END_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = COMMENT_END_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInComment);

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.data += '-';

        this._reconsumeInState(COMMENT_STATE);
      }
    } // Comment end state
    //------------------------------------------------------------------

  }, {
    key: COMMENT_END_STATE,
    value: function value(cp) {
      if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EXCLAMATION_MARK) {
        this.state = COMMENT_END_BANG_STATE;
      } else if (cp === $.HYPHEN_MINUS) {
        this.currentToken.data += '-';
      } else if (cp === $.EOF) {
        this._err(ERR.eofInComment);

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.data += '--';

        this._reconsumeInState(COMMENT_STATE);
      }
    } // Comment end bang state
    //------------------------------------------------------------------

  }, {
    key: COMMENT_END_BANG_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.currentToken.data += '--!';
        this.state = COMMENT_END_DASH_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.incorrectlyClosedComment);

        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInComment);

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.data += '--!';

        this._reconsumeInState(COMMENT_STATE);
      }
    } // DOCTYPE state
    //------------------------------------------------------------------

  }, {
    key: DOCTYPE_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this.state = BEFORE_DOCTYPE_NAME_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this._createDoctypeToken(null);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingWhitespaceBeforeDoctypeName);

        this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
      }
    } // Before DOCTYPE name state
    //------------------------------------------------------------------

  }, {
    key: BEFORE_DOCTYPE_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (isAsciiUpper(cp)) {
        this._createDoctypeToken(toAsciiLowerChar(cp));

        this.state = DOCTYPE_NAME_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);

        this.state = DOCTYPE_NAME_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingDoctypeName);

        this._createDoctypeToken(null);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this._createDoctypeToken(null);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._createDoctypeToken(toChar(cp));

        this.state = DOCTYPE_NAME_STATE;
      }
    } // DOCTYPE name state
    //------------------------------------------------------------------

  }, {
    key: DOCTYPE_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this.state = AFTER_DOCTYPE_NAME_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (isAsciiUpper(cp)) {
        this.currentToken.name += toAsciiLowerChar(cp);
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.name += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.name += toChar(cp);
      }
    } // After DOCTYPE name state
    //------------------------------------------------------------------

  }, {
    key: AFTER_DOCTYPE_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {
        this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;
      } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {
        this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;
      } //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup
      //results are no longer valid and we will need to start over.
      else if (!this._ensureHibernation()) {
        this._err(ERR.invalidCharacterSequenceAfterDoctypeName);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    } // After DOCTYPE public keyword state
    //------------------------------------------------------------------

  }, {
    key: AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
      } else if (cp === $.QUOTATION_MARK) {
        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);

        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);

        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingDoctypePublicIdentifier);

        this.currentToken.forceQuirks = true;
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    } // Before DOCTYPE public identifier state
    //------------------------------------------------------------------

  }, {
    key: BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.QUOTATION_MARK) {
        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingDoctypePublicIdentifier);

        this.currentToken.forceQuirks = true;
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    } // DOCTYPE public identifier (double-quoted) state
    //------------------------------------------------------------------

  }, {
    key: DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE,
    value: function value(cp) {
      if (cp === $.QUOTATION_MARK) {
        this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.abruptDoctypePublicIdentifier);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.publicId += toChar(cp);
      }
    } // DOCTYPE public identifier (single-quoted) state
    //------------------------------------------------------------------

  }, {
    key: DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE,
    value: function value(cp) {
      if (cp === $.APOSTROPHE) {
        this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.abruptDoctypePublicIdentifier);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.publicId += toChar(cp);
      }
    } // After DOCTYPE public identifier state
    //------------------------------------------------------------------

  }, {
    key: AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.QUOTATION_MARK) {
        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);

        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);

        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    } // Between DOCTYPE public and system identifiers state
    //------------------------------------------------------------------

  }, {
    key: BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.QUOTATION_MARK) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    } // After DOCTYPE system keyword state
    //------------------------------------------------------------------

  }, {
    key: AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
      } else if (cp === $.QUOTATION_MARK) {
        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);

        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);

        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    } // Before DOCTYPE system identifier state
    //------------------------------------------------------------------

  }, {
    key: BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.QUOTATION_MARK) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    } // DOCTYPE system identifier (double-quoted) state
    //------------------------------------------------------------------

  }, {
    key: DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE,
    value: function value(cp) {
      if (cp === $.QUOTATION_MARK) {
        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.abruptDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.systemId += toChar(cp);
      }
    } // DOCTYPE system identifier (single-quoted) state
    //------------------------------------------------------------------

  }, {
    key: DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE,
    value: function value(cp) {
      if (cp === $.APOSTROPHE) {
        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.abruptDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.systemId += toChar(cp);
      }
    } // After DOCTYPE system identifier state
    //------------------------------------------------------------------

  }, {
    key: AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    } // Bogus DOCTYPE state
    //------------------------------------------------------------------

  }, {
    key: BOGUS_DOCTYPE_STATE,
    value: function value(cp) {
      if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);
      } else if (cp === $.EOF) {
        this._emitCurrentToken();

        this._emitEOFToken();
      }
    } // CDATA section state
    //------------------------------------------------------------------

  }, {
    key: CDATA_SECTION_STATE,
    value: function value(cp) {
      if (cp === $.RIGHT_SQUARE_BRACKET) {
        this.state = CDATA_SECTION_BRACKET_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInCdata);

        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    } // CDATA section bracket state
    //------------------------------------------------------------------

  }, {
    key: CDATA_SECTION_BRACKET_STATE,
    value: function value(cp) {
      if (cp === $.RIGHT_SQUARE_BRACKET) {
        this.state = CDATA_SECTION_END_STATE;
      } else {
        this._emitChars(']');

        this._reconsumeInState(CDATA_SECTION_STATE);
      }
    } // CDATA section end state
    //------------------------------------------------------------------

  }, {
    key: CDATA_SECTION_END_STATE,
    value: function value(cp) {
      if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
      } else if (cp === $.RIGHT_SQUARE_BRACKET) {
        this._emitChars(']');
      } else {
        this._emitChars(']]');

        this._reconsumeInState(CDATA_SECTION_STATE);
      }
    } // Character reference state
    //------------------------------------------------------------------

  }, {
    key: CHARACTER_REFERENCE_STATE,
    value: function value(cp) {
      this.tempBuff = [$.AMPERSAND];

      if (cp === $.NUMBER_SIGN) {
        this.tempBuff.push(cp);
        this.state = NUMERIC_CHARACTER_REFERENCE_STATE;
      } else if (isAsciiAlphaNumeric(cp)) {
        this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);
      } else {
        this._flushCodePointsConsumedAsCharacterReference();

        this._reconsumeInState(this.returnState);
      }
    } // Named character reference state
    //------------------------------------------------------------------

  }, {
    key: NAMED_CHARACTER_REFERENCE_STATE,
    value: function value(cp) {
      var matchResult = this._matchNamedCharacterReference(cp); //NOTE: matching can be abrupted by hibernation. In that case match
      //results are no longer valid and we will need to start over.


      if (this._ensureHibernation()) {
        this.tempBuff = [$.AMPERSAND];
      } else if (matchResult) {
        var withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;

        if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {
          if (!withSemicolon) {
            this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);
          }

          this.tempBuff = matchResult;
        }

        this._flushCodePointsConsumedAsCharacterReference();

        this.state = this.returnState;
      } else {
        this._flushCodePointsConsumedAsCharacterReference();

        this.state = AMBIGUOUS_AMPERSAND_STATE;
      }
    } // Ambiguos ampersand state
    //------------------------------------------------------------------

  }, {
    key: AMBIGUOUS_AMPERSAND_STATE,
    value: function value(cp) {
      if (isAsciiAlphaNumeric(cp)) {
        if (this._isCharacterReferenceInAttribute()) {
          this.currentAttr.value += toChar(cp);
        } else {
          this._emitCodePoint(cp);
        }
      } else {
        if (cp === $.SEMICOLON) {
          this._err(ERR.unknownNamedCharacterReference);
        }

        this._reconsumeInState(this.returnState);
      }
    } // Numeric character reference state
    //------------------------------------------------------------------

  }, {
    key: NUMERIC_CHARACTER_REFERENCE_STATE,
    value: function value(cp) {
      this.charRefCode = 0;

      if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {
        this.tempBuff.push(cp);
        this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;
      } else {
        this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);
      }
    } // Hexademical character reference start state
    //------------------------------------------------------------------

  }, {
    key: HEXADEMICAL_CHARACTER_REFERENCE_START_STATE,
    value: function value(cp) {
      if (isAsciiHexDigit(cp)) {
        this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);
      } else {
        this._err(ERR.absenceOfDigitsInNumericCharacterReference);

        this._flushCodePointsConsumedAsCharacterReference();

        this._reconsumeInState(this.returnState);
      }
    } // Decimal character reference start state
    //------------------------------------------------------------------

  }, {
    key: DECIMAL_CHARACTER_REFERENCE_START_STATE,
    value: function value(cp) {
      if (isAsciiDigit(cp)) {
        this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);
      } else {
        this._err(ERR.absenceOfDigitsInNumericCharacterReference);

        this._flushCodePointsConsumedAsCharacterReference();

        this._reconsumeInState(this.returnState);
      }
    } // Hexademical character reference state
    //------------------------------------------------------------------

  }, {
    key: HEXADEMICAL_CHARACTER_REFERENCE_STATE,
    value: function value(cp) {
      if (isAsciiUpperHexDigit(cp)) {
        this.charRefCode = this.charRefCode * 16 + cp - 0x37;
      } else if (isAsciiLowerHexDigit(cp)) {
        this.charRefCode = this.charRefCode * 16 + cp - 0x57;
      } else if (isAsciiDigit(cp)) {
        this.charRefCode = this.charRefCode * 16 + cp - 0x30;
      } else if (cp === $.SEMICOLON) {
        this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
      } else {
        this._err(ERR.missingSemicolonAfterCharacterReference);

        this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
      }
    } // Decimal character reference state
    //------------------------------------------------------------------

  }, {
    key: DECIMAL_CHARACTER_REFERENCE_STATE,
    value: function value(cp) {
      if (isAsciiDigit(cp)) {
        this.charRefCode = this.charRefCode * 10 + cp - 0x30;
      } else if (cp === $.SEMICOLON) {
        this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
      } else {
        this._err(ERR.missingSemicolonAfterCharacterReference);

        this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
      }
    } // Numeric character reference end state
    //------------------------------------------------------------------

  }, {
    key: NUMERIC_CHARACTER_REFERENCE_END_STATE,
    value: function value() {
      if (this.charRefCode === $.NULL) {
        this._err(ERR.nullCharacterReference);

        this.charRefCode = $.REPLACEMENT_CHARACTER;
      } else if (this.charRefCode > 0x10ffff) {
        this._err(ERR.characterReferenceOutsideUnicodeRange);

        this.charRefCode = $.REPLACEMENT_CHARACTER;
      } else if (unicode.isSurrogate(this.charRefCode)) {
        this._err(ERR.surrogateCharacterReference);

        this.charRefCode = $.REPLACEMENT_CHARACTER;
      } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {
        this._err(ERR.noncharacterCharacterReference);
      } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {
        this._err(ERR.controlCharacterReference);

        var replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];

        if (replacement) {
          this.charRefCode = replacement;
        }
      }

      this.tempBuff = [this.charRefCode];

      this._flushCodePointsConsumedAsCharacterReference();

      this._reconsumeInState(this.returnState);
    }
  }]);

  return Tokenizer;
}(); //Token types


Tokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';
Tokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';
Tokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';
Tokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';
Tokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';
Tokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';
Tokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';
Tokenizer.EOF_TOKEN = 'EOF_TOKEN';
Tokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN'; //Tokenizer initial states for different modes

Tokenizer.MODE = {
  DATA: DATA_STATE,
  RCDATA: RCDATA_STATE,
  RAWTEXT: RAWTEXT_STATE,
  SCRIPT_DATA: SCRIPT_DATA_STATE,
  PLAINTEXT: PLAINTEXT_STATE
}; //Static

Tokenizer.getTokenAttr = function (token, attrName) {
  for (var i = token.attrs.length - 1; i >= 0; i--) {
    if (token.attrs[i].name === attrName) {
      return token.attrs[i].value;
    }
  }

  return null;
};

module.exports = Tokenizer;

/***/ }),

/***/ 8748:
/***/ ((module) => {

 //NOTE: this file contains auto-generated array mapped radix tree that is used for the named entity references consumption
//(details: https://github.com/inikulin/parse5/tree/master/scripts/generate-named-entity-data/README.md)

module.exports = new Uint16Array([4, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 106, 303, 412, 810, 1432, 1701, 1796, 1987, 2114, 2360, 2420, 2484, 3170, 3251, 4140, 4393, 4575, 4610, 5106, 5512, 5728, 6117, 6274, 6315, 6345, 6427, 6516, 7002, 7910, 8733, 9323, 9870, 10170, 10631, 10893, 11318, 11386, 11467, 12773, 13092, 14474, 14922, 15448, 15542, 16419, 17666, 18166, 18611, 19004, 19095, 19298, 19397, 4, 16, 69, 77, 97, 98, 99, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 140, 150, 158, 169, 176, 194, 199, 210, 216, 222, 226, 242, 256, 266, 283, 294, 108, 105, 103, 5, 198, 1, 59, 148, 1, 198, 80, 5, 38, 1, 59, 156, 1, 38, 99, 117, 116, 101, 5, 193, 1, 59, 167, 1, 193, 114, 101, 118, 101, 59, 1, 258, 4, 2, 105, 121, 182, 191, 114, 99, 5, 194, 1, 59, 189, 1, 194, 59, 1, 1040, 114, 59, 3, 55349, 56580, 114, 97, 118, 101, 5, 192, 1, 59, 208, 1, 192, 112, 104, 97, 59, 1, 913, 97, 99, 114, 59, 1, 256, 100, 59, 1, 10835, 4, 2, 103, 112, 232, 237, 111, 110, 59, 1, 260, 102, 59, 3, 55349, 56632, 112, 108, 121, 70, 117, 110, 99, 116, 105, 111, 110, 59, 1, 8289, 105, 110, 103, 5, 197, 1, 59, 264, 1, 197, 4, 2, 99, 115, 272, 277, 114, 59, 3, 55349, 56476, 105, 103, 110, 59, 1, 8788, 105, 108, 100, 101, 5, 195, 1, 59, 292, 1, 195, 109, 108, 5, 196, 1, 59, 301, 1, 196, 4, 8, 97, 99, 101, 102, 111, 114, 115, 117, 321, 350, 354, 383, 388, 394, 400, 405, 4, 2, 99, 114, 327, 336, 107, 115, 108, 97, 115, 104, 59, 1, 8726, 4, 2, 118, 119, 342, 345, 59, 1, 10983, 101, 100, 59, 1, 8966, 121, 59, 1, 1041, 4, 3, 99, 114, 116, 362, 369, 379, 97, 117, 115, 101, 59, 1, 8757, 110, 111, 117, 108, 108, 105, 115, 59, 1, 8492, 97, 59, 1, 914, 114, 59, 3, 55349, 56581, 112, 102, 59, 3, 55349, 56633, 101, 118, 101, 59, 1, 728, 99, 114, 59, 1, 8492, 109, 112, 101, 113, 59, 1, 8782, 4, 14, 72, 79, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 117, 442, 447, 456, 504, 542, 547, 569, 573, 577, 616, 678, 784, 790, 796, 99, 121, 59, 1, 1063, 80, 89, 5, 169, 1, 59, 454, 1, 169, 4, 3, 99, 112, 121, 464, 470, 497, 117, 116, 101, 59, 1, 262, 4, 2, 59, 105, 476, 478, 1, 8914, 116, 97, 108, 68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 1, 8517, 108, 101, 121, 115, 59, 1, 8493, 4, 4, 97, 101, 105, 111, 514, 520, 530, 535, 114, 111, 110, 59, 1, 268, 100, 105, 108, 5, 199, 1, 59, 528, 1, 199, 114, 99, 59, 1, 264, 110, 105, 110, 116, 59, 1, 8752, 111, 116, 59, 1, 266, 4, 2, 100, 110, 553, 560, 105, 108, 108, 97, 59, 1, 184, 116, 101, 114, 68, 111, 116, 59, 1, 183, 114, 59, 1, 8493, 105, 59, 1, 935, 114, 99, 108, 101, 4, 4, 68, 77, 80, 84, 591, 596, 603, 609, 111, 116, 59, 1, 8857, 105, 110, 117, 115, 59, 1, 8854, 108, 117, 115, 59, 1, 8853, 105, 109, 101, 115, 59, 1, 8855, 111, 4, 2, 99, 115, 623, 646, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8754, 101, 67, 117, 114, 108, 121, 4, 2, 68, 81, 658, 671, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 1, 8221, 117, 111, 116, 101, 59, 1, 8217, 4, 4, 108, 110, 112, 117, 688, 701, 736, 753, 111, 110, 4, 2, 59, 101, 696, 698, 1, 8759, 59, 1, 10868, 4, 3, 103, 105, 116, 709, 717, 722, 114, 117, 101, 110, 116, 59, 1, 8801, 110, 116, 59, 1, 8751, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8750, 4, 2, 102, 114, 742, 745, 59, 1, 8450, 111, 100, 117, 99, 116, 59, 1, 8720, 110, 116, 101, 114, 67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8755, 111, 115, 115, 59, 1, 10799, 99, 114, 59, 3, 55349, 56478, 112, 4, 2, 59, 67, 803, 805, 1, 8915, 97, 112, 59, 1, 8781, 4, 11, 68, 74, 83, 90, 97, 99, 101, 102, 105, 111, 115, 834, 850, 855, 860, 865, 888, 903, 916, 921, 1011, 1415, 4, 2, 59, 111, 840, 842, 1, 8517, 116, 114, 97, 104, 100, 59, 1, 10513, 99, 121, 59, 1, 1026, 99, 121, 59, 1, 1029, 99, 121, 59, 1, 1039, 4, 3, 103, 114, 115, 873, 879, 883, 103, 101, 114, 59, 1, 8225, 114, 59, 1, 8609, 104, 118, 59, 1, 10980, 4, 2, 97, 121, 894, 900, 114, 111, 110, 59, 1, 270, 59, 1, 1044, 108, 4, 2, 59, 116, 910, 912, 1, 8711, 97, 59, 1, 916, 114, 59, 3, 55349, 56583, 4, 2, 97, 102, 927, 998, 4, 2, 99, 109, 933, 992, 114, 105, 116, 105, 99, 97, 108, 4, 4, 65, 68, 71, 84, 950, 957, 978, 985, 99, 117, 116, 101, 59, 1, 180, 111, 4, 2, 116, 117, 964, 967, 59, 1, 729, 98, 108, 101, 65, 99, 117, 116, 101, 59, 1, 733, 114, 97, 118, 101, 59, 1, 96, 105, 108, 100, 101, 59, 1, 732, 111, 110, 100, 59, 1, 8900, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 1, 8518, 4, 4, 112, 116, 117, 119, 1021, 1026, 1048, 1249, 102, 59, 3, 55349, 56635, 4, 3, 59, 68, 69, 1034, 1036, 1041, 1, 168, 111, 116, 59, 1, 8412, 113, 117, 97, 108, 59, 1, 8784, 98, 108, 101, 4, 6, 67, 68, 76, 82, 85, 86, 1065, 1082, 1101, 1189, 1211, 1236, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8751, 111, 4, 2, 116, 119, 1089, 1092, 59, 1, 168, 110, 65, 114, 114, 111, 119, 59, 1, 8659, 4, 2, 101, 111, 1107, 1141, 102, 116, 4, 3, 65, 82, 84, 1117, 1124, 1136, 114, 114, 111, 119, 59, 1, 8656, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8660, 101, 101, 59, 1, 10980, 110, 103, 4, 2, 76, 82, 1149, 1177, 101, 102, 116, 4, 2, 65, 82, 1158, 1165, 114, 114, 111, 119, 59, 1, 10232, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10234, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10233, 105, 103, 104, 116, 4, 2, 65, 84, 1199, 1206, 114, 114, 111, 119, 59, 1, 8658, 101, 101, 59, 1, 8872, 112, 4, 2, 65, 68, 1218, 1225, 114, 114, 111, 119, 59, 1, 8657, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8661, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8741, 110, 4, 6, 65, 66, 76, 82, 84, 97, 1264, 1292, 1299, 1352, 1391, 1408, 114, 114, 111, 119, 4, 3, 59, 66, 85, 1276, 1278, 1283, 1, 8595, 97, 114, 59, 1, 10515, 112, 65, 114, 114, 111, 119, 59, 1, 8693, 114, 101, 118, 101, 59, 1, 785, 101, 102, 116, 4, 3, 82, 84, 86, 1310, 1323, 1334, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59, 1, 10576, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10590, 101, 99, 116, 111, 114, 4, 2, 59, 66, 1345, 1347, 1, 8637, 97, 114, 59, 1, 10582, 105, 103, 104, 116, 4, 2, 84, 86, 1362, 1373, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10591, 101, 99, 116, 111, 114, 4, 2, 59, 66, 1384, 1386, 1, 8641, 97, 114, 59, 1, 10583, 101, 101, 4, 2, 59, 65, 1399, 1401, 1, 8868, 114, 114, 111, 119, 59, 1, 8615, 114, 114, 111, 119, 59, 1, 8659, 4, 2, 99, 116, 1421, 1426, 114, 59, 3, 55349, 56479, 114, 111, 107, 59, 1, 272, 4, 16, 78, 84, 97, 99, 100, 102, 103, 108, 109, 111, 112, 113, 115, 116, 117, 120, 1466, 1470, 1478, 1489, 1515, 1520, 1525, 1536, 1544, 1593, 1609, 1617, 1650, 1664, 1668, 1677, 71, 59, 1, 330, 72, 5, 208, 1, 59, 1476, 1, 208, 99, 117, 116, 101, 5, 201, 1, 59, 1487, 1, 201, 4, 3, 97, 105, 121, 1497, 1503, 1512, 114, 111, 110, 59, 1, 282, 114, 99, 5, 202, 1, 59, 1510, 1, 202, 59, 1, 1069, 111, 116, 59, 1, 278, 114, 59, 3, 55349, 56584, 114, 97, 118, 101, 5, 200, 1, 59, 1534, 1, 200, 101, 109, 101, 110, 116, 59, 1, 8712, 4, 2, 97, 112, 1550, 1555, 99, 114, 59, 1, 274, 116, 121, 4, 2, 83, 86, 1563, 1576, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9723, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9643, 4, 2, 103, 112, 1599, 1604, 111, 110, 59, 1, 280, 102, 59, 3, 55349, 56636, 115, 105, 108, 111, 110, 59, 1, 917, 117, 4, 2, 97, 105, 1624, 1640, 108, 4, 2, 59, 84, 1631, 1633, 1, 10869, 105, 108, 100, 101, 59, 1, 8770, 108, 105, 98, 114, 105, 117, 109, 59, 1, 8652, 4, 2, 99, 105, 1656, 1660, 114, 59, 1, 8496, 109, 59, 1, 10867, 97, 59, 1, 919, 109, 108, 5, 203, 1, 59, 1675, 1, 203, 4, 2, 105, 112, 1683, 1689, 115, 116, 115, 59, 1, 8707, 111, 110, 101, 110, 116, 105, 97, 108, 69, 59, 1, 8519, 4, 5, 99, 102, 105, 111, 115, 1713, 1717, 1722, 1762, 1791, 121, 59, 1, 1060, 114, 59, 3, 55349, 56585, 108, 108, 101, 100, 4, 2, 83, 86, 1732, 1745, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9724, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9642, 4, 3, 112, 114, 117, 1770, 1775, 1781, 102, 59, 3, 55349, 56637, 65, 108, 108, 59, 1, 8704, 114, 105, 101, 114, 116, 114, 102, 59, 1, 8497, 99, 114, 59, 1, 8497, 4, 12, 74, 84, 97, 98, 99, 100, 102, 103, 111, 114, 115, 116, 1822, 1827, 1834, 1848, 1855, 1877, 1882, 1887, 1890, 1896, 1978, 1984, 99, 121, 59, 1, 1027, 5, 62, 1, 59, 1832, 1, 62, 109, 109, 97, 4, 2, 59, 100, 1843, 1845, 1, 915, 59, 1, 988, 114, 101, 118, 101, 59, 1, 286, 4, 3, 101, 105, 121, 1863, 1869, 1874, 100, 105, 108, 59, 1, 290, 114, 99, 59, 1, 284, 59, 1, 1043, 111, 116, 59, 1, 288, 114, 59, 3, 55349, 56586, 59, 1, 8921, 112, 102, 59, 3, 55349, 56638, 101, 97, 116, 101, 114, 4, 6, 69, 70, 71, 76, 83, 84, 1915, 1933, 1944, 1953, 1959, 1971, 113, 117, 97, 108, 4, 2, 59, 76, 1925, 1927, 1, 8805, 101, 115, 115, 59, 1, 8923, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8807, 114, 101, 97, 116, 101, 114, 59, 1, 10914, 101, 115, 115, 59, 1, 8823, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 10878, 105, 108, 100, 101, 59, 1, 8819, 99, 114, 59, 3, 55349, 56482, 59, 1, 8811, 4, 8, 65, 97, 99, 102, 105, 111, 115, 117, 2005, 2012, 2026, 2032, 2036, 2049, 2073, 2089, 82, 68, 99, 121, 59, 1, 1066, 4, 2, 99, 116, 2018, 2023, 101, 107, 59, 1, 711, 59, 1, 94, 105, 114, 99, 59, 1, 292, 114, 59, 1, 8460, 108, 98, 101, 114, 116, 83, 112, 97, 99, 101, 59, 1, 8459, 4, 2, 112, 114, 2055, 2059, 102, 59, 1, 8461, 105, 122, 111, 110, 116, 97, 108, 76, 105, 110, 101, 59, 1, 9472, 4, 2, 99, 116, 2079, 2083, 114, 59, 1, 8459, 114, 111, 107, 59, 1, 294, 109, 112, 4, 2, 68, 69, 2097, 2107, 111, 119, 110, 72, 117, 109, 112, 59, 1, 8782, 113, 117, 97, 108, 59, 1, 8783, 4, 14, 69, 74, 79, 97, 99, 100, 102, 103, 109, 110, 111, 115, 116, 117, 2144, 2149, 2155, 2160, 2171, 2189, 2194, 2198, 2209, 2245, 2307, 2329, 2334, 2341, 99, 121, 59, 1, 1045, 108, 105, 103, 59, 1, 306, 99, 121, 59, 1, 1025, 99, 117, 116, 101, 5, 205, 1, 59, 2169, 1, 205, 4, 2, 105, 121, 2177, 2186, 114, 99, 5, 206, 1, 59, 2184, 1, 206, 59, 1, 1048, 111, 116, 59, 1, 304, 114, 59, 1, 8465, 114, 97, 118, 101, 5, 204, 1, 59, 2207, 1, 204, 4, 3, 59, 97, 112, 2217, 2219, 2238, 1, 8465, 4, 2, 99, 103, 2225, 2229, 114, 59, 1, 298, 105, 110, 97, 114, 121, 73, 59, 1, 8520, 108, 105, 101, 115, 59, 1, 8658, 4, 2, 116, 118, 2251, 2281, 4, 2, 59, 101, 2257, 2259, 1, 8748, 4, 2, 103, 114, 2265, 2271, 114, 97, 108, 59, 1, 8747, 115, 101, 99, 116, 105, 111, 110, 59, 1, 8898, 105, 115, 105, 98, 108, 101, 4, 2, 67, 84, 2293, 2300, 111, 109, 109, 97, 59, 1, 8291, 105, 109, 101, 115, 59, 1, 8290, 4, 3, 103, 112, 116, 2315, 2320, 2325, 111, 110, 59, 1, 302, 102, 59, 3, 55349, 56640, 97, 59, 1, 921, 99, 114, 59, 1, 8464, 105, 108, 100, 101, 59, 1, 296, 4, 2, 107, 109, 2347, 2352, 99, 121, 59, 1, 1030, 108, 5, 207, 1, 59, 2358, 1, 207, 4, 5, 99, 102, 111, 115, 117, 2372, 2386, 2391, 2397, 2414, 4, 2, 105, 121, 2378, 2383, 114, 99, 59, 1, 308, 59, 1, 1049, 114, 59, 3, 55349, 56589, 112, 102, 59, 3, 55349, 56641, 4, 2, 99, 101, 2403, 2408, 114, 59, 3, 55349, 56485, 114, 99, 121, 59, 1, 1032, 107, 99, 121, 59, 1, 1028, 4, 7, 72, 74, 97, 99, 102, 111, 115, 2436, 2441, 2446, 2452, 2467, 2472, 2478, 99, 121, 59, 1, 1061, 99, 121, 59, 1, 1036, 112, 112, 97, 59, 1, 922, 4, 2, 101, 121, 2458, 2464, 100, 105, 108, 59, 1, 310, 59, 1, 1050, 114, 59, 3, 55349, 56590, 112, 102, 59, 3, 55349, 56642, 99, 114, 59, 3, 55349, 56486, 4, 11, 74, 84, 97, 99, 101, 102, 108, 109, 111, 115, 116, 2508, 2513, 2520, 2562, 2585, 2981, 2986, 3004, 3011, 3146, 3167, 99, 121, 59, 1, 1033, 5, 60, 1, 59, 2518, 1, 60, 4, 5, 99, 109, 110, 112, 114, 2532, 2538, 2544, 2548, 2558, 117, 116, 101, 59, 1, 313, 98, 100, 97, 59, 1, 923, 103, 59, 1, 10218, 108, 97, 99, 101, 116, 114, 102, 59, 1, 8466, 114, 59, 1, 8606, 4, 3, 97, 101, 121, 2570, 2576, 2582, 114, 111, 110, 59, 1, 317, 100, 105, 108, 59, 1, 315, 59, 1, 1051, 4, 2, 102, 115, 2591, 2907, 116, 4, 10, 65, 67, 68, 70, 82, 84, 85, 86, 97, 114, 2614, 2663, 2672, 2728, 2735, 2760, 2820, 2870, 2888, 2895, 4, 2, 110, 114, 2620, 2633, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10216, 114, 111, 119, 4, 3, 59, 66, 82, 2644, 2646, 2651, 1, 8592, 97, 114, 59, 1, 8676, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8646, 101, 105, 108, 105, 110, 103, 59, 1, 8968, 111, 4, 2, 117, 119, 2679, 2692, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10214, 110, 4, 2, 84, 86, 2699, 2710, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10593, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2721, 2723, 1, 8643, 97, 114, 59, 1, 10585, 108, 111, 111, 114, 59, 1, 8970, 105, 103, 104, 116, 4, 2, 65, 86, 2745, 2752, 114, 114, 111, 119, 59, 1, 8596, 101, 99, 116, 111, 114, 59, 1, 10574, 4, 2, 101, 114, 2766, 2792, 101, 4, 3, 59, 65, 86, 2775, 2777, 2784, 1, 8867, 114, 114, 111, 119, 59, 1, 8612, 101, 99, 116, 111, 114, 59, 1, 10586, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 2806, 2808, 2813, 1, 8882, 97, 114, 59, 1, 10703, 113, 117, 97, 108, 59, 1, 8884, 112, 4, 3, 68, 84, 86, 2829, 2841, 2852, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 1, 10577, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10592, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2863, 2865, 1, 8639, 97, 114, 59, 1, 10584, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2881, 2883, 1, 8636, 97, 114, 59, 1, 10578, 114, 114, 111, 119, 59, 1, 8656, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8660, 115, 4, 6, 69, 70, 71, 76, 83, 84, 2922, 2936, 2947, 2956, 2962, 2974, 113, 117, 97, 108, 71, 114, 101, 97, 116, 101, 114, 59, 1, 8922, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8806, 114, 101, 97, 116, 101, 114, 59, 1, 8822, 101, 115, 115, 59, 1, 10913, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 10877, 105, 108, 100, 101, 59, 1, 8818, 114, 59, 3, 55349, 56591, 4, 2, 59, 101, 2992, 2994, 1, 8920, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8666, 105, 100, 111, 116, 59, 1, 319, 4, 3, 110, 112, 119, 3019, 3110, 3115, 103, 4, 4, 76, 82, 108, 114, 3030, 3058, 3070, 3098, 101, 102, 116, 4, 2, 65, 82, 3039, 3046, 114, 114, 111, 119, 59, 1, 10229, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10231, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10230, 101, 102, 116, 4, 2, 97, 114, 3079, 3086, 114, 114, 111, 119, 59, 1, 10232, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10234, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10233, 102, 59, 3, 55349, 56643, 101, 114, 4, 2, 76, 82, 3123, 3134, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8601, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8600, 4, 3, 99, 104, 116, 3154, 3158, 3161, 114, 59, 1, 8466, 59, 1, 8624, 114, 111, 107, 59, 1, 321, 59, 1, 8810, 4, 8, 97, 99, 101, 102, 105, 111, 115, 117, 3188, 3192, 3196, 3222, 3227, 3237, 3243, 3248, 112, 59, 1, 10501, 121, 59, 1, 1052, 4, 2, 100, 108, 3202, 3213, 105, 117, 109, 83, 112, 97, 99, 101, 59, 1, 8287, 108, 105, 110, 116, 114, 102, 59, 1, 8499, 114, 59, 3, 55349, 56592, 110, 117, 115, 80, 108, 117, 115, 59, 1, 8723, 112, 102, 59, 3, 55349, 56644, 99, 114, 59, 1, 8499, 59, 1, 924, 4, 9, 74, 97, 99, 101, 102, 111, 115, 116, 117, 3271, 3276, 3283, 3306, 3422, 3427, 4120, 4126, 4137, 99, 121, 59, 1, 1034, 99, 117, 116, 101, 59, 1, 323, 4, 3, 97, 101, 121, 3291, 3297, 3303, 114, 111, 110, 59, 1, 327, 100, 105, 108, 59, 1, 325, 59, 1, 1053, 4, 3, 103, 115, 119, 3314, 3380, 3415, 97, 116, 105, 118, 101, 4, 3, 77, 84, 86, 3327, 3340, 3365, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59, 1, 8203, 104, 105, 4, 2, 99, 110, 3348, 3357, 107, 83, 112, 97, 99, 101, 59, 1, 8203, 83, 112, 97, 99, 101, 59, 1, 8203, 101, 114, 121, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 1, 8203, 116, 101, 100, 4, 2, 71, 76, 3389, 3405, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 1, 8811, 101, 115, 115, 76, 101, 115, 115, 59, 1, 8810, 76, 105, 110, 101, 59, 1, 10, 114, 59, 3, 55349, 56593, 4, 4, 66, 110, 112, 116, 3437, 3444, 3460, 3464, 114, 101, 97, 107, 59, 1, 8288, 66, 114, 101, 97, 107, 105, 110, 103, 83, 112, 97, 99, 101, 59, 1, 160, 102, 59, 1, 8469, 4, 13, 59, 67, 68, 69, 71, 72, 76, 78, 80, 82, 83, 84, 86, 3492, 3494, 3517, 3536, 3578, 3657, 3685, 3784, 3823, 3860, 3915, 4066, 4107, 1, 10988, 4, 2, 111, 117, 3500, 3510, 110, 103, 114, 117, 101, 110, 116, 59, 1, 8802, 112, 67, 97, 112, 59, 1, 8813, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8742, 4, 3, 108, 113, 120, 3544, 3552, 3571, 101, 109, 101, 110, 116, 59, 1, 8713, 117, 97, 108, 4, 2, 59, 84, 3561, 3563, 1, 8800, 105, 108, 100, 101, 59, 3, 8770, 824, 105, 115, 116, 115, 59, 1, 8708, 114, 101, 97, 116, 101, 114, 4, 7, 59, 69, 70, 71, 76, 83, 84, 3600, 3602, 3609, 3621, 3631, 3637, 3650, 1, 8815, 113, 117, 97, 108, 59, 1, 8817, 117, 108, 108, 69, 113, 117, 97, 108, 59, 3, 8807, 824, 114, 101, 97, 116, 101, 114, 59, 3, 8811, 824, 101, 115, 115, 59, 1, 8825, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 3, 10878, 824, 105, 108, 100, 101, 59, 1, 8821, 117, 109, 112, 4, 2, 68, 69, 3666, 3677, 111, 119, 110, 72, 117, 109, 112, 59, 3, 8782, 824, 113, 117, 97, 108, 59, 3, 8783, 824, 101, 4, 2, 102, 115, 3692, 3724, 116, 84, 114, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 3709, 3711, 3717, 1, 8938, 97, 114, 59, 3, 10703, 824, 113, 117, 97, 108, 59, 1, 8940, 115, 4, 6, 59, 69, 71, 76, 83, 84, 3739, 3741, 3748, 3757, 3764, 3777, 1, 8814, 113, 117, 97, 108, 59, 1, 8816, 114, 101, 97, 116, 101, 114, 59, 1, 8824, 101, 115, 115, 59, 3, 8810, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 3, 10877, 824, 105, 108, 100, 101, 59, 1, 8820, 101, 115, 116, 101, 100, 4, 2, 71, 76, 3795, 3812, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 3, 10914, 824, 101, 115, 115, 76, 101, 115, 115, 59, 3, 10913, 824, 114, 101, 99, 101, 100, 101, 115, 4, 3, 59, 69, 83, 3838, 3840, 3848, 1, 8832, 113, 117, 97, 108, 59, 3, 10927, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8928, 4, 2, 101, 105, 3866, 3881, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59, 1, 8716, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 3900, 3902, 3908, 1, 8939, 97, 114, 59, 3, 10704, 824, 113, 117, 97, 108, 59, 1, 8941, 4, 2, 113, 117, 3921, 3973, 117, 97, 114, 101, 83, 117, 4, 2, 98, 112, 3933, 3952, 115, 101, 116, 4, 2, 59, 69, 3942, 3945, 3, 8847, 824, 113, 117, 97, 108, 59, 1, 8930, 101, 114, 115, 101, 116, 4, 2, 59, 69, 3963, 3966, 3, 8848, 824, 113, 117, 97, 108, 59, 1, 8931, 4, 3, 98, 99, 112, 3981, 4000, 4045, 115, 101, 116, 4, 2, 59, 69, 3990, 3993, 3, 8834, 8402, 113, 117, 97, 108, 59, 1, 8840, 99, 101, 101, 100, 115, 4, 4, 59, 69, 83, 84, 4015, 4017, 4025, 4037, 1, 8833, 113, 117, 97, 108, 59, 3, 10928, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8929, 105, 108, 100, 101, 59, 3, 8831, 824, 101, 114, 115, 101, 116, 4, 2, 59, 69, 4056, 4059, 3, 8835, 8402, 113, 117, 97, 108, 59, 1, 8841, 105, 108, 100, 101, 4, 4, 59, 69, 70, 84, 4080, 4082, 4089, 4100, 1, 8769, 113, 117, 97, 108, 59, 1, 8772, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8775, 105, 108, 100, 101, 59, 1, 8777, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8740, 99, 114, 59, 3, 55349, 56489, 105, 108, 100, 101, 5, 209, 1, 59, 4135, 1, 209, 59, 1, 925, 4, 14, 69, 97, 99, 100, 102, 103, 109, 111, 112, 114, 115, 116, 117, 118, 4170, 4176, 4187, 4205, 4212, 4217, 4228, 4253, 4259, 4292, 4295, 4316, 4337, 4346, 108, 105, 103, 59, 1, 338, 99, 117, 116, 101, 5, 211, 1, 59, 4185, 1, 211, 4, 2, 105, 121, 4193, 4202, 114, 99, 5, 212, 1, 59, 4200, 1, 212, 59, 1, 1054, 98, 108, 97, 99, 59, 1, 336, 114, 59, 3, 55349, 56594, 114, 97, 118, 101, 5, 210, 1, 59, 4226, 1, 210, 4, 3, 97, 101, 105, 4236, 4241, 4246, 99, 114, 59, 1, 332, 103, 97, 59, 1, 937, 99, 114, 111, 110, 59, 1, 927, 112, 102, 59, 3, 55349, 56646, 101, 110, 67, 117, 114, 108, 121, 4, 2, 68, 81, 4272, 4285, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 1, 8220, 117, 111, 116, 101, 59, 1, 8216, 59, 1, 10836, 4, 2, 99, 108, 4301, 4306, 114, 59, 3, 55349, 56490, 97, 115, 104, 5, 216, 1, 59, 4314, 1, 216, 105, 4, 2, 108, 109, 4323, 4332, 100, 101, 5, 213, 1, 59, 4330, 1, 213, 101, 115, 59, 1, 10807, 109, 108, 5, 214, 1, 59, 4344, 1, 214, 101, 114, 4, 2, 66, 80, 4354, 4380, 4, 2, 97, 114, 4360, 4364, 114, 59, 1, 8254, 97, 99, 4, 2, 101, 107, 4372, 4375, 59, 1, 9182, 101, 116, 59, 1, 9140, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 1, 9180, 4, 9, 97, 99, 102, 104, 105, 108, 111, 114, 115, 4413, 4422, 4426, 4431, 4435, 4438, 4448, 4471, 4561, 114, 116, 105, 97, 108, 68, 59, 1, 8706, 121, 59, 1, 1055, 114, 59, 3, 55349, 56595, 105, 59, 1, 934, 59, 1, 928, 117, 115, 77, 105, 110, 117, 115, 59, 1, 177, 4, 2, 105, 112, 4454, 4467, 110, 99, 97, 114, 101, 112, 108, 97, 110, 101, 59, 1, 8460, 102, 59, 1, 8473, 4, 4, 59, 101, 105, 111, 4481, 4483, 4526, 4531, 1, 10939, 99, 101, 100, 101, 115, 4, 4, 59, 69, 83, 84, 4498, 4500, 4507, 4519, 1, 8826, 113, 117, 97, 108, 59, 1, 10927, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8828, 105, 108, 100, 101, 59, 1, 8830, 109, 101, 59, 1, 8243, 4, 2, 100, 112, 4537, 4543, 117, 99, 116, 59, 1, 8719, 111, 114, 116, 105, 111, 110, 4, 2, 59, 97, 4555, 4557, 1, 8759, 108, 59, 1, 8733, 4, 2, 99, 105, 4567, 4572, 114, 59, 3, 55349, 56491, 59, 1, 936, 4, 4, 85, 102, 111, 115, 4585, 4594, 4599, 4604, 79, 84, 5, 34, 1, 59, 4592, 1, 34, 114, 59, 3, 55349, 56596, 112, 102, 59, 1, 8474, 99, 114, 59, 3, 55349, 56492, 4, 12, 66, 69, 97, 99, 101, 102, 104, 105, 111, 114, 115, 117, 4636, 4642, 4650, 4681, 4704, 4763, 4767, 4771, 5047, 5069, 5081, 5094, 97, 114, 114, 59, 1, 10512, 71, 5, 174, 1, 59, 4648, 1, 174, 4, 3, 99, 110, 114, 4658, 4664, 4668, 117, 116, 101, 59, 1, 340, 103, 59, 1, 10219, 114, 4, 2, 59, 116, 4675, 4677, 1, 8608, 108, 59, 1, 10518, 4, 3, 97, 101, 121, 4689, 4695, 4701, 114, 111, 110, 59, 1, 344, 100, 105, 108, 59, 1, 342, 59, 1, 1056, 4, 2, 59, 118, 4710, 4712, 1, 8476, 101, 114, 115, 101, 4, 2, 69, 85, 4722, 4748, 4, 2, 108, 113, 4728, 4736, 101, 109, 101, 110, 116, 59, 1, 8715, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 8651, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 10607, 114, 59, 1, 8476, 111, 59, 1, 929, 103, 104, 116, 4, 8, 65, 67, 68, 70, 84, 85, 86, 97, 4792, 4840, 4849, 4905, 4912, 4972, 5022, 5040, 4, 2, 110, 114, 4798, 4811, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10217, 114, 111, 119, 4, 3, 59, 66, 76, 4822, 4824, 4829, 1, 8594, 97, 114, 59, 1, 8677, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8644, 101, 105, 108, 105, 110, 103, 59, 1, 8969, 111, 4, 2, 117, 119, 4856, 4869, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10215, 110, 4, 2, 84, 86, 4876, 4887, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10589, 101, 99, 116, 111, 114, 4, 2, 59, 66, 4898, 4900, 1, 8642, 97, 114, 59, 1, 10581, 108, 111, 111, 114, 59, 1, 8971, 4, 2, 101, 114, 4918, 4944, 101, 4, 3, 59, 65, 86, 4927, 4929, 4936, 1, 8866, 114, 114, 111, 119, 59, 1, 8614, 101, 99, 116, 111, 114, 59, 1, 10587, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 4958, 4960, 4965, 1, 8883, 97, 114, 59, 1, 10704, 113, 117, 97, 108, 59, 1, 8885, 112, 4, 3, 68, 84, 86, 4981, 4993, 5004, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 1, 10575, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10588, 101, 99, 116, 111, 114, 4, 2, 59, 66, 5015, 5017, 1, 8638, 97, 114, 59, 1, 10580, 101, 99, 116, 111, 114, 4, 2, 59, 66, 5033, 5035, 1, 8640, 97, 114, 59, 1, 10579, 114, 114, 111, 119, 59, 1, 8658, 4, 2, 112, 117, 5053, 5057, 102, 59, 1, 8477, 110, 100, 73, 109, 112, 108, 105, 101, 115, 59, 1, 10608, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8667, 4, 2, 99, 104, 5087, 5091, 114, 59, 1, 8475, 59, 1, 8625, 108, 101, 68, 101, 108, 97, 121, 101, 100, 59, 1, 10740, 4, 13, 72, 79, 97, 99, 102, 104, 105, 109, 111, 113, 115, 116, 117, 5134, 5150, 5157, 5164, 5198, 5203, 5259, 5265, 5277, 5283, 5374, 5380, 5385, 4, 2, 67, 99, 5140, 5146, 72, 99, 121, 59, 1, 1065, 121, 59, 1, 1064, 70, 84, 99, 121, 59, 1, 1068, 99, 117, 116, 101, 59, 1, 346, 4, 5, 59, 97, 101, 105, 121, 5176, 5178, 5184, 5190, 5195, 1, 10940, 114, 111, 110, 59, 1, 352, 100, 105, 108, 59, 1, 350, 114, 99, 59, 1, 348, 59, 1, 1057, 114, 59, 3, 55349, 56598, 111, 114, 116, 4, 4, 68, 76, 82, 85, 5216, 5227, 5238, 5250, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8595, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8592, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8594, 112, 65, 114, 114, 111, 119, 59, 1, 8593, 103, 109, 97, 59, 1, 931, 97, 108, 108, 67, 105, 114, 99, 108, 101, 59, 1, 8728, 112, 102, 59, 3, 55349, 56650, 4, 2, 114, 117, 5289, 5293, 116, 59, 1, 8730, 97, 114, 101, 4, 4, 59, 73, 83, 85, 5306, 5308, 5322, 5367, 1, 9633, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59, 1, 8851, 117, 4, 2, 98, 112, 5329, 5347, 115, 101, 116, 4, 2, 59, 69, 5338, 5340, 1, 8847, 113, 117, 97, 108, 59, 1, 8849, 101, 114, 115, 101, 116, 4, 2, 59, 69, 5358, 5360, 1, 8848, 113, 117, 97, 108, 59, 1, 8850, 110, 105, 111, 110, 59, 1, 8852, 99, 114, 59, 3, 55349, 56494, 97, 114, 59, 1, 8902, 4, 4, 98, 99, 109, 112, 5395, 5420, 5475, 5478, 4, 2, 59, 115, 5401, 5403, 1, 8912, 101, 116, 4, 2, 59, 69, 5411, 5413, 1, 8912, 113, 117, 97, 108, 59, 1, 8838, 4, 2, 99, 104, 5426, 5468, 101, 101, 100, 115, 4, 4, 59, 69, 83, 84, 5440, 5442, 5449, 5461, 1, 8827, 113, 117, 97, 108, 59, 1, 10928, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8829, 105, 108, 100, 101, 59, 1, 8831, 84, 104, 97, 116, 59, 1, 8715, 59, 1, 8721, 4, 3, 59, 101, 115, 5486, 5488, 5507, 1, 8913, 114, 115, 101, 116, 4, 2, 59, 69, 5498, 5500, 1, 8835, 113, 117, 97, 108, 59, 1, 8839, 101, 116, 59, 1, 8913, 4, 11, 72, 82, 83, 97, 99, 102, 104, 105, 111, 114, 115, 5536, 5546, 5552, 5567, 5579, 5602, 5607, 5655, 5695, 5701, 5711, 79, 82, 78, 5, 222, 1, 59, 5544, 1, 222, 65, 68, 69, 59, 1, 8482, 4, 2, 72, 99, 5558, 5563, 99, 121, 59, 1, 1035, 121, 59, 1, 1062, 4, 2, 98, 117, 5573, 5576, 59, 1, 9, 59, 1, 932, 4, 3, 97, 101, 121, 5587, 5593, 5599, 114, 111, 110, 59, 1, 356, 100, 105, 108, 59, 1, 354, 59, 1, 1058, 114, 59, 3, 55349, 56599, 4, 2, 101, 105, 5613, 5631, 4, 2, 114, 116, 5619, 5627, 101, 102, 111, 114, 101, 59, 1, 8756, 97, 59, 1, 920, 4, 2, 99, 110, 5637, 5647, 107, 83, 112, 97, 99, 101, 59, 3, 8287, 8202, 83, 112, 97, 99, 101, 59, 1, 8201, 108, 100, 101, 4, 4, 59, 69, 70, 84, 5668, 5670, 5677, 5688, 1, 8764, 113, 117, 97, 108, 59, 1, 8771, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8773, 105, 108, 100, 101, 59, 1, 8776, 112, 102, 59, 3, 55349, 56651, 105, 112, 108, 101, 68, 111, 116, 59, 1, 8411, 4, 2, 99, 116, 5717, 5722, 114, 59, 3, 55349, 56495, 114, 111, 107, 59, 1, 358, 4, 14, 97, 98, 99, 100, 102, 103, 109, 110, 111, 112, 114, 115, 116, 117, 5758, 5789, 5805, 5823, 5830, 5835, 5846, 5852, 5921, 5937, 6089, 6095, 6101, 6108, 4, 2, 99, 114, 5764, 5774, 117, 116, 101, 5, 218, 1, 59, 5772, 1, 218, 114, 4, 2, 59, 111, 5781, 5783, 1, 8607, 99, 105, 114, 59, 1, 10569, 114, 4, 2, 99, 101, 5796, 5800, 121, 59, 1, 1038, 118, 101, 59, 1, 364, 4, 2, 105, 121, 5811, 5820, 114, 99, 5, 219, 1, 59, 5818, 1, 219, 59, 1, 1059, 98, 108, 97, 99, 59, 1, 368, 114, 59, 3, 55349, 56600, 114, 97, 118, 101, 5, 217, 1, 59, 5844, 1, 217, 97, 99, 114, 59, 1, 362, 4, 2, 100, 105, 5858, 5905, 101, 114, 4, 2, 66, 80, 5866, 5892, 4, 2, 97, 114, 5872, 5876, 114, 59, 1, 95, 97, 99, 4, 2, 101, 107, 5884, 5887, 59, 1, 9183, 101, 116, 59, 1, 9141, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 1, 9181, 111, 110, 4, 2, 59, 80, 5913, 5915, 1, 8899, 108, 117, 115, 59, 1, 8846, 4, 2, 103, 112, 5927, 5932, 111, 110, 59, 1, 370, 102, 59, 3, 55349, 56652, 4, 8, 65, 68, 69, 84, 97, 100, 112, 115, 5955, 5985, 5996, 6009, 6026, 6033, 6044, 6075, 114, 114, 111, 119, 4, 3, 59, 66, 68, 5967, 5969, 5974, 1, 8593, 97, 114, 59, 1, 10514, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8645, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8597, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 10606, 101, 101, 4, 2, 59, 65, 6017, 6019, 1, 8869, 114, 114, 111, 119, 59, 1, 8613, 114, 114, 111, 119, 59, 1, 8657, 111, 119, 110, 97, 114, 114, 111, 119, 59, 1, 8661, 101, 114, 4, 2, 76, 82, 6052, 6063, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8598, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8599, 105, 4, 2, 59, 108, 6082, 6084, 1, 978, 111, 110, 59, 1, 933, 105, 110, 103, 59, 1, 366, 99, 114, 59, 3, 55349, 56496, 105, 108, 100, 101, 59, 1, 360, 109, 108, 5, 220, 1, 59, 6115, 1, 220, 4, 9, 68, 98, 99, 100, 101, 102, 111, 115, 118, 6137, 6143, 6148, 6152, 6166, 6250, 6255, 6261, 6267, 97, 115, 104, 59, 1, 8875, 97, 114, 59, 1, 10987, 121, 59, 1, 1042, 97, 115, 104, 4, 2, 59, 108, 6161, 6163, 1, 8873, 59, 1, 10982, 4, 2, 101, 114, 6172, 6175, 59, 1, 8897, 4, 3, 98, 116, 121, 6183, 6188, 6238, 97, 114, 59, 1, 8214, 4, 2, 59, 105, 6194, 6196, 1, 8214, 99, 97, 108, 4, 4, 66, 76, 83, 84, 6209, 6214, 6220, 6231, 97, 114, 59, 1, 8739, 105, 110, 101, 59, 1, 124, 101, 112, 97, 114, 97, 116, 111, 114, 59, 1, 10072, 105, 108, 100, 101, 59, 1, 8768, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 1, 8202, 114, 59, 3, 55349, 56601, 112, 102, 59, 3, 55349, 56653, 99, 114, 59, 3, 55349, 56497, 100, 97, 115, 104, 59, 1, 8874, 4, 5, 99, 101, 102, 111, 115, 6286, 6292, 6298, 6303, 6309, 105, 114, 99, 59, 1, 372, 100, 103, 101, 59, 1, 8896, 114, 59, 3, 55349, 56602, 112, 102, 59, 3, 55349, 56654, 99, 114, 59, 3, 55349, 56498, 4, 4, 102, 105, 111, 115, 6325, 6330, 6333, 6339, 114, 59, 3, 55349, 56603, 59, 1, 926, 112, 102, 59, 3, 55349, 56655, 99, 114, 59, 3, 55349, 56499, 4, 9, 65, 73, 85, 97, 99, 102, 111, 115, 117, 6365, 6370, 6375, 6380, 6391, 6405, 6410, 6416, 6422, 99, 121, 59, 1, 1071, 99, 121, 59, 1, 1031, 99, 121, 59, 1, 1070, 99, 117, 116, 101, 5, 221, 1, 59, 6389, 1, 221, 4, 2, 105, 121, 6397, 6402, 114, 99, 59, 1, 374, 59, 1, 1067, 114, 59, 3, 55349, 56604, 112, 102, 59, 3, 55349, 56656, 99, 114, 59, 3, 55349, 56500, 109, 108, 59, 1, 376, 4, 8, 72, 97, 99, 100, 101, 102, 111, 115, 6445, 6450, 6457, 6472, 6477, 6501, 6505, 6510, 99, 121, 59, 1, 1046, 99, 117, 116, 101, 59, 1, 377, 4, 2, 97, 121, 6463, 6469, 114, 111, 110, 59, 1, 381, 59, 1, 1047, 111, 116, 59, 1, 379, 4, 2, 114, 116, 6483, 6497, 111, 87, 105, 100, 116, 104, 83, 112, 97, 99, 101, 59, 1, 8203, 97, 59, 1, 918, 114, 59, 1, 8488, 112, 102, 59, 1, 8484, 99, 114, 59, 3, 55349, 56501, 4, 16, 97, 98, 99, 101, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 6550, 6561, 6568, 6612, 6622, 6634, 6645, 6672, 6699, 6854, 6870, 6923, 6933, 6963, 6974, 6983, 99, 117, 116, 101, 5, 225, 1, 59, 6559, 1, 225, 114, 101, 118, 101, 59, 1, 259, 4, 6, 59, 69, 100, 105, 117, 121, 6582, 6584, 6588, 6591, 6600, 6609, 1, 8766, 59, 3, 8766, 819, 59, 1, 8767, 114, 99, 5, 226, 1, 59, 6598, 1, 226, 116, 101, 5, 180, 1, 59, 6607, 1, 180, 59, 1, 1072, 108, 105, 103, 5, 230, 1, 59, 6620, 1, 230, 4, 2, 59, 114, 6628, 6630, 1, 8289, 59, 3, 55349, 56606, 114, 97, 118, 101, 5, 224, 1, 59, 6643, 1, 224, 4, 2, 101, 112, 6651, 6667, 4, 2, 102, 112, 6657, 6663, 115, 121, 109, 59, 1, 8501, 104, 59, 1, 8501, 104, 97, 59, 1, 945, 4, 2, 97, 112, 6678, 6692, 4, 2, 99, 108, 6684, 6688, 114, 59, 1, 257, 103, 59, 1, 10815, 5, 38, 1, 59, 6697, 1, 38, 4, 2, 100, 103, 6705, 6737, 4, 5, 59, 97, 100, 115, 118, 6717, 6719, 6724, 6727, 6734, 1, 8743, 110, 100, 59, 1, 10837, 59, 1, 10844, 108, 111, 112, 101, 59, 1, 10840, 59, 1, 10842, 4, 7, 59, 101, 108, 109, 114, 115, 122, 6753, 6755, 6758, 6762, 6814, 6835, 6848, 1, 8736, 59, 1, 10660, 101, 59, 1, 8736, 115, 100, 4, 2, 59, 97, 6770, 6772, 1, 8737, 4, 8, 97, 98, 99, 100, 101, 102, 103, 104, 6790, 6793, 6796, 6799, 6802, 6805, 6808, 6811, 59, 1, 10664, 59, 1, 10665, 59, 1, 10666, 59, 1, 10667, 59, 1, 10668, 59, 1, 10669, 59, 1, 10670, 59, 1, 10671, 116, 4, 2, 59, 118, 6821, 6823, 1, 8735, 98, 4, 2, 59, 100, 6830, 6832, 1, 8894, 59, 1, 10653, 4, 2, 112, 116, 6841, 6845, 104, 59, 1, 8738, 59, 1, 197, 97, 114, 114, 59, 1, 9084, 4, 2, 103, 112, 6860, 6865, 111, 110, 59, 1, 261, 102, 59, 3, 55349, 56658, 4, 7, 59, 69, 97, 101, 105, 111, 112, 6886, 6888, 6891, 6897, 6900, 6904, 6908, 1, 8776, 59, 1, 10864, 99, 105, 114, 59, 1, 10863, 59, 1, 8778, 100, 59, 1, 8779, 115, 59, 1, 39, 114, 111, 120, 4, 2, 59, 101, 6917, 6919, 1, 8776, 113, 59, 1, 8778, 105, 110, 103, 5, 229, 1, 59, 6931, 1, 229, 4, 3, 99, 116, 121, 6941, 6946, 6949, 114, 59, 3, 55349, 56502, 59, 1, 42, 109, 112, 4, 2, 59, 101, 6957, 6959, 1, 8776, 113, 59, 1, 8781, 105, 108, 100, 101, 5, 227, 1, 59, 6972, 1, 227, 109, 108, 5, 228, 1, 59, 6981, 1, 228, 4, 2, 99, 105, 6989, 6997, 111, 110, 105, 110, 116, 59, 1, 8755, 110, 116, 59, 1, 10769, 4, 16, 78, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 114, 115, 117, 7036, 7041, 7119, 7135, 7149, 7155, 7219, 7224, 7347, 7354, 7463, 7489, 7786, 7793, 7814, 7866, 111, 116, 59, 1, 10989, 4, 2, 99, 114, 7047, 7094, 107, 4, 4, 99, 101, 112, 115, 7058, 7064, 7073, 7080, 111, 110, 103, 59, 1, 8780, 112, 115, 105, 108, 111, 110, 59, 1, 1014, 114, 105, 109, 101, 59, 1, 8245, 105, 109, 4, 2, 59, 101, 7088, 7090, 1, 8765, 113, 59, 1, 8909, 4, 2, 118, 119, 7100, 7105, 101, 101, 59, 1, 8893, 101, 100, 4, 2, 59, 103, 7113, 7115, 1, 8965, 101, 59, 1, 8965, 114, 107, 4, 2, 59, 116, 7127, 7129, 1, 9141, 98, 114, 107, 59, 1, 9142, 4, 2, 111, 121, 7141, 7146, 110, 103, 59, 1, 8780, 59, 1, 1073, 113, 117, 111, 59, 1, 8222, 4, 5, 99, 109, 112, 114, 116, 7167, 7181, 7188, 7193, 7199, 97, 117, 115, 4, 2, 59, 101, 7176, 7178, 1, 8757, 59, 1, 8757, 112, 116, 121, 118, 59, 1, 10672, 115, 105, 59, 1, 1014, 110, 111, 117, 59, 1, 8492, 4, 3, 97, 104, 119, 7207, 7210, 7213, 59, 1, 946, 59, 1, 8502, 101, 101, 110, 59, 1, 8812, 114, 59, 3, 55349, 56607, 103, 4, 7, 99, 111, 115, 116, 117, 118, 119, 7241, 7262, 7288, 7305, 7328, 7335, 7340, 4, 3, 97, 105, 117, 7249, 7253, 7258, 112, 59, 1, 8898, 114, 99, 59, 1, 9711, 112, 59, 1, 8899, 4, 3, 100, 112, 116, 7270, 7275, 7281, 111, 116, 59, 1, 10752, 108, 117, 115, 59, 1, 10753, 105, 109, 101, 115, 59, 1, 10754, 4, 2, 113, 116, 7294, 7300, 99, 117, 112, 59, 1, 10758, 97, 114, 59, 1, 9733, 114, 105, 97, 110, 103, 108, 101, 4, 2, 100, 117, 7318, 7324, 111, 119, 110, 59, 1, 9661, 112, 59, 1, 9651, 112, 108, 117, 115, 59, 1, 10756, 101, 101, 59, 1, 8897, 101, 100, 103, 101, 59, 1, 8896, 97, 114, 111, 119, 59, 1, 10509, 4, 3, 97, 107, 111, 7362, 7436, 7458, 4, 2, 99, 110, 7368, 7432, 107, 4, 3, 108, 115, 116, 7377, 7386, 7394, 111, 122, 101, 110, 103, 101, 59, 1, 10731, 113, 117, 97, 114, 101, 59, 1, 9642, 114, 105, 97, 110, 103, 108, 101, 4, 4, 59, 100, 108, 114, 7411, 7413, 7419, 7425, 1, 9652, 111, 119, 110, 59, 1, 9662, 101, 102, 116, 59, 1, 9666, 105, 103, 104, 116, 59, 1, 9656, 107, 59, 1, 9251, 4, 2, 49, 51, 7442, 7454, 4, 2, 50, 52, 7448, 7451, 59, 1, 9618, 59, 1, 9617, 52, 59, 1, 9619, 99, 107, 59, 1, 9608, 4, 2, 101, 111, 7469, 7485, 4, 2, 59, 113, 7475, 7478, 3, 61, 8421, 117, 105, 118, 59, 3, 8801, 8421, 116, 59, 1, 8976, 4, 4, 112, 116, 119, 120, 7499, 7504, 7517, 7523, 102, 59, 3, 55349, 56659, 4, 2, 59, 116, 7510, 7512, 1, 8869, 111, 109, 59, 1, 8869, 116, 105, 101, 59, 1, 8904, 4, 12, 68, 72, 85, 86, 98, 100, 104, 109, 112, 116, 117, 118, 7549, 7571, 7597, 7619, 7655, 7660, 7682, 7708, 7715, 7721, 7728, 7750, 4, 4, 76, 82, 108, 114, 7559, 7562, 7565, 7568, 59, 1, 9559, 59, 1, 9556, 59, 1, 9558, 59, 1, 9555, 4, 5, 59, 68, 85, 100, 117, 7583, 7585, 7588, 7591, 7594, 1, 9552, 59, 1, 9574, 59, 1, 9577, 59, 1, 9572, 59, 1, 9575, 4, 4, 76, 82, 108, 114, 7607, 7610, 7613, 7616, 59, 1, 9565, 59, 1, 9562, 59, 1, 9564, 59, 1, 9561, 4, 7, 59, 72, 76, 82, 104, 108, 114, 7635, 7637, 7640, 7643, 7646, 7649, 7652, 1, 9553, 59, 1, 9580, 59, 1, 9571, 59, 1, 9568, 59, 1, 9579, 59, 1, 9570, 59, 1, 9567, 111, 120, 59, 1, 10697, 4, 4, 76, 82, 108, 114, 7670, 7673, 7676, 7679, 59, 1, 9557, 59, 1, 9554, 59, 1, 9488, 59, 1, 9484, 4, 5, 59, 68, 85, 100, 117, 7694, 7696, 7699, 7702, 7705, 1, 9472, 59, 1, 9573, 59, 1, 9576, 59, 1, 9516, 59, 1, 9524, 105, 110, 117, 115, 59, 1, 8863, 108, 117, 115, 59, 1, 8862, 105, 109, 101, 115, 59, 1, 8864, 4, 4, 76, 82, 108, 114, 7738, 7741, 7744, 7747, 59, 1, 9563, 59, 1, 9560, 59, 1, 9496, 59, 1, 9492, 4, 7, 59, 72, 76, 82, 104, 108, 114, 7766, 7768, 7771, 7774, 7777, 7780, 7783, 1, 9474, 59, 1, 9578, 59, 1, 9569, 59, 1, 9566, 59, 1, 9532, 59, 1, 9508, 59, 1, 9500, 114, 105, 109, 101, 59, 1, 8245, 4, 2, 101, 118, 7799, 7804, 118, 101, 59, 1, 728, 98, 97, 114, 5, 166, 1, 59, 7812, 1, 166, 4, 4, 99, 101, 105, 111, 7824, 7829, 7834, 7846, 114, 59, 3, 55349, 56503, 109, 105, 59, 1, 8271, 109, 4, 2, 59, 101, 7841, 7843, 1, 8765, 59, 1, 8909, 108, 4, 3, 59, 98, 104, 7855, 7857, 7860, 1, 92, 59, 1, 10693, 115, 117, 98, 59, 1, 10184, 4, 2, 108, 109, 7872, 7885, 108, 4, 2, 59, 101, 7879, 7881, 1, 8226, 116, 59, 1, 8226, 112, 4, 3, 59, 69, 101, 7894, 7896, 7899, 1, 8782, 59, 1, 10926, 4, 2, 59, 113, 7905, 7907, 1, 8783, 59, 1, 8783, 4, 15, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 116, 117, 119, 121, 7942, 8021, 8075, 8080, 8121, 8126, 8157, 8279, 8295, 8430, 8446, 8485, 8491, 8707, 8726, 4, 3, 99, 112, 114, 7950, 7956, 8007, 117, 116, 101, 59, 1, 263, 4, 6, 59, 97, 98, 99, 100, 115, 7970, 7972, 7977, 7984, 7998, 8003, 1, 8745, 110, 100, 59, 1, 10820, 114, 99, 117, 112, 59, 1, 10825, 4, 2, 97, 117, 7990, 7994, 112, 59, 1, 10827, 112, 59, 1, 10823, 111, 116, 59, 1, 10816, 59, 3, 8745, 65024, 4, 2, 101, 111, 8013, 8017, 116, 59, 1, 8257, 110, 59, 1, 711, 4, 4, 97, 101, 105, 117, 8031, 8046, 8056, 8061, 4, 2, 112, 114, 8037, 8041, 115, 59, 1, 10829, 111, 110, 59, 1, 269, 100, 105, 108, 5, 231, 1, 59, 8054, 1, 231, 114, 99, 59, 1, 265, 112, 115, 4, 2, 59, 115, 8069, 8071, 1, 10828, 109, 59, 1, 10832, 111, 116, 59, 1, 267, 4, 3, 100, 109, 110, 8088, 8097, 8104, 105, 108, 5, 184, 1, 59, 8095, 1, 184, 112, 116, 121, 118, 59, 1, 10674, 116, 5, 162, 2, 59, 101, 8112, 8114, 1, 162, 114, 100, 111, 116, 59, 1, 183, 114, 59, 3, 55349, 56608, 4, 3, 99, 101, 105, 8134, 8138, 8154, 121, 59, 1, 1095, 99, 107, 4, 2, 59, 109, 8146, 8148, 1, 10003, 97, 114, 107, 59, 1, 10003, 59, 1, 967, 114, 4, 7, 59, 69, 99, 101, 102, 109, 115, 8174, 8176, 8179, 8258, 8261, 8268, 8273, 1, 9675, 59, 1, 10691, 4, 3, 59, 101, 108, 8187, 8189, 8193, 1, 710, 113, 59, 1, 8791, 101, 4, 2, 97, 100, 8200, 8223, 114, 114, 111, 119, 4, 2, 108, 114, 8210, 8216, 101, 102, 116, 59, 1, 8634, 105, 103, 104, 116, 59, 1, 8635, 4, 5, 82, 83, 97, 99, 100, 8235, 8238, 8241, 8246, 8252, 59, 1, 174, 59, 1, 9416, 115, 116, 59, 1, 8859, 105, 114, 99, 59, 1, 8858, 97, 115, 104, 59, 1, 8861, 59, 1, 8791, 110, 105, 110, 116, 59, 1, 10768, 105, 100, 59, 1, 10991, 99, 105, 114, 59, 1, 10690, 117, 98, 115, 4, 2, 59, 117, 8288, 8290, 1, 9827, 105, 116, 59, 1, 9827, 4, 4, 108, 109, 110, 112, 8305, 8326, 8376, 8400, 111, 110, 4, 2, 59, 101, 8313, 8315, 1, 58, 4, 2, 59, 113, 8321, 8323, 1, 8788, 59, 1, 8788, 4, 2, 109, 112, 8332, 8344, 97, 4, 2, 59, 116, 8339, 8341, 1, 44, 59, 1, 64, 4, 3, 59, 102, 108, 8352, 8354, 8358, 1, 8705, 110, 59, 1, 8728, 101, 4, 2, 109, 120, 8365, 8371, 101, 110, 116, 59, 1, 8705, 101, 115, 59, 1, 8450, 4, 2, 103, 105, 8382, 8395, 4, 2, 59, 100, 8388, 8390, 1, 8773, 111, 116, 59, 1, 10861, 110, 116, 59, 1, 8750, 4, 3, 102, 114, 121, 8408, 8412, 8417, 59, 3, 55349, 56660, 111, 100, 59, 1, 8720, 5, 169, 2, 59, 115, 8424, 8426, 1, 169, 114, 59, 1, 8471, 4, 2, 97, 111, 8436, 8441, 114, 114, 59, 1, 8629, 115, 115, 59, 1, 10007, 4, 2, 99, 117, 8452, 8457, 114, 59, 3, 55349, 56504, 4, 2, 98, 112, 8463, 8474, 4, 2, 59, 101, 8469, 8471, 1, 10959, 59, 1, 10961, 4, 2, 59, 101, 8480, 8482, 1, 10960, 59, 1, 10962, 100, 111, 116, 59, 1, 8943, 4, 7, 100, 101, 108, 112, 114, 118, 119, 8507, 8522, 8536, 8550, 8600, 8697, 8702, 97, 114, 114, 4, 2, 108, 114, 8516, 8519, 59, 1, 10552, 59, 1, 10549, 4, 2, 112, 115, 8528, 8532, 114, 59, 1, 8926, 99, 59, 1, 8927, 97, 114, 114, 4, 2, 59, 112, 8545, 8547, 1, 8630, 59, 1, 10557, 4, 6, 59, 98, 99, 100, 111, 115, 8564, 8566, 8573, 8587, 8592, 8596, 1, 8746, 114, 99, 97, 112, 59, 1, 10824, 4, 2, 97, 117, 8579, 8583, 112, 59, 1, 10822, 112, 59, 1, 10826, 111, 116, 59, 1, 8845, 114, 59, 1, 10821, 59, 3, 8746, 65024, 4, 4, 97, 108, 114, 118, 8610, 8623, 8663, 8672, 114, 114, 4, 2, 59, 109, 8618, 8620, 1, 8631, 59, 1, 10556, 121, 4, 3, 101, 118, 119, 8632, 8651, 8656, 113, 4, 2, 112, 115, 8639, 8645, 114, 101, 99, 59, 1, 8926, 117, 99, 99, 59, 1, 8927, 101, 101, 59, 1, 8910, 101, 100, 103, 101, 59, 1, 8911, 101, 110, 5, 164, 1, 59, 8670, 1, 164, 101, 97, 114, 114, 111, 119, 4, 2, 108, 114, 8684, 8690, 101, 102, 116, 59, 1, 8630, 105, 103, 104, 116, 59, 1, 8631, 101, 101, 59, 1, 8910, 101, 100, 59, 1, 8911, 4, 2, 99, 105, 8713, 8721, 111, 110, 105, 110, 116, 59, 1, 8754, 110, 116, 59, 1, 8753, 108, 99, 116, 121, 59, 1, 9005, 4, 19, 65, 72, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 111, 114, 115, 116, 117, 119, 122, 8773, 8778, 8783, 8821, 8839, 8854, 8887, 8914, 8930, 8944, 9036, 9041, 9058, 9197, 9227, 9258, 9281, 9297, 9305, 114, 114, 59, 1, 8659, 97, 114, 59, 1, 10597, 4, 4, 103, 108, 114, 115, 8793, 8799, 8805, 8809, 103, 101, 114, 59, 1, 8224, 101, 116, 104, 59, 1, 8504, 114, 59, 1, 8595, 104, 4, 2, 59, 118, 8816, 8818, 1, 8208, 59, 1, 8867, 4, 2, 107, 108, 8827, 8834, 97, 114, 111, 119, 59, 1, 10511, 97, 99, 59, 1, 733, 4, 2, 97, 121, 8845, 8851, 114, 111, 110, 59, 1, 271, 59, 1, 1076, 4, 3, 59, 97, 111, 8862, 8864, 8880, 1, 8518, 4, 2, 103, 114, 8870, 8876, 103, 101, 114, 59, 1, 8225, 114, 59, 1, 8650, 116, 115, 101, 113, 59, 1, 10871, 4, 3, 103, 108, 109, 8895, 8902, 8907, 5, 176, 1, 59, 8900, 1, 176, 116, 97, 59, 1, 948, 112, 116, 121, 118, 59, 1, 10673, 4, 2, 105, 114, 8920, 8926, 115, 104, 116, 59, 1, 10623, 59, 3, 55349, 56609, 97, 114, 4, 2, 108, 114, 8938, 8941, 59, 1, 8643, 59, 1, 8642, 4, 5, 97, 101, 103, 115, 118, 8956, 8986, 8989, 8996, 9001, 109, 4, 3, 59, 111, 115, 8965, 8967, 8983, 1, 8900, 110, 100, 4, 2, 59, 115, 8975, 8977, 1, 8900, 117, 105, 116, 59, 1, 9830, 59, 1, 9830, 59, 1, 168, 97, 109, 109, 97, 59, 1, 989, 105, 110, 59, 1, 8946, 4, 3, 59, 105, 111, 9009, 9011, 9031, 1, 247, 100, 101, 5, 247, 2, 59, 111, 9020, 9022, 1, 247, 110, 116, 105, 109, 101, 115, 59, 1, 8903, 110, 120, 59, 1, 8903, 99, 121, 59, 1, 1106, 99, 4, 2, 111, 114, 9048, 9053, 114, 110, 59, 1, 8990, 111, 112, 59, 1, 8973, 4, 5, 108, 112, 116, 117, 119, 9070, 9076, 9081, 9130, 9144, 108, 97, 114, 59, 1, 36, 102, 59, 3, 55349, 56661, 4, 5, 59, 101, 109, 112, 115, 9093, 9095, 9109, 9116, 9122, 1, 729, 113, 4, 2, 59, 100, 9102, 9104, 1, 8784, 111, 116, 59, 1, 8785, 105, 110, 117, 115, 59, 1, 8760, 108, 117, 115, 59, 1, 8724, 113, 117, 97, 114, 101, 59, 1, 8865, 98, 108, 101, 98, 97, 114, 119, 101, 100, 103, 101, 59, 1, 8966, 110, 4, 3, 97, 100, 104, 9153, 9160, 9172, 114, 114, 111, 119, 59, 1, 8595, 111, 119, 110, 97, 114, 114, 111, 119, 115, 59, 1, 8650, 97, 114, 112, 111, 111, 110, 4, 2, 108, 114, 9184, 9190, 101, 102, 116, 59, 1, 8643, 105, 103, 104, 116, 59, 1, 8642, 4, 2, 98, 99, 9203, 9211, 107, 97, 114, 111, 119, 59, 1, 10512, 4, 2, 111, 114, 9217, 9222, 114, 110, 59, 1, 8991, 111, 112, 59, 1, 8972, 4, 3, 99, 111, 116, 9235, 9248, 9252, 4, 2, 114, 121, 9241, 9245, 59, 3, 55349, 56505, 59, 1, 1109, 108, 59, 1, 10742, 114, 111, 107, 59, 1, 273, 4, 2, 100, 114, 9264, 9269, 111, 116, 59, 1, 8945, 105, 4, 2, 59, 102, 9276, 9278, 1, 9663, 59, 1, 9662, 4, 2, 97, 104, 9287, 9292, 114, 114, 59, 1, 8693, 97, 114, 59, 1, 10607, 97, 110, 103, 108, 101, 59, 1, 10662, 4, 2, 99, 105, 9311, 9315, 121, 59, 1, 1119, 103, 114, 97, 114, 114, 59, 1, 10239, 4, 18, 68, 97, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 9361, 9376, 9398, 9439, 9444, 9447, 9462, 9495, 9531, 9585, 9598, 9614, 9659, 9755, 9771, 9792, 9808, 9826, 4, 2, 68, 111, 9367, 9372, 111, 116, 59, 1, 10871, 116, 59, 1, 8785, 4, 2, 99, 115, 9382, 9392, 117, 116, 101, 5, 233, 1, 59, 9390, 1, 233, 116, 101, 114, 59, 1, 10862, 4, 4, 97, 105, 111, 121, 9408, 9414, 9430, 9436, 114, 111, 110, 59, 1, 283, 114, 4, 2, 59, 99, 9421, 9423, 1, 8790, 5, 234, 1, 59, 9428, 1, 234, 108, 111, 110, 59, 1, 8789, 59, 1, 1101, 111, 116, 59, 1, 279, 59, 1, 8519, 4, 2, 68, 114, 9453, 9458, 111, 116, 59, 1, 8786, 59, 3, 55349, 56610, 4, 3, 59, 114, 115, 9470, 9472, 9482, 1, 10906, 97, 118, 101, 5, 232, 1, 59, 9480, 1, 232, 4, 2, 59, 100, 9488, 9490, 1, 10902, 111, 116, 59, 1, 10904, 4, 4, 59, 105, 108, 115, 9505, 9507, 9515, 9518, 1, 10905, 110, 116, 101, 114, 115, 59, 1, 9191, 59, 1, 8467, 4, 2, 59, 100, 9524, 9526, 1, 10901, 111, 116, 59, 1, 10903, 4, 3, 97, 112, 115, 9539, 9544, 9564, 99, 114, 59, 1, 275, 116, 121, 4, 3, 59, 115, 118, 9554, 9556, 9561, 1, 8709, 101, 116, 59, 1, 8709, 59, 1, 8709, 112, 4, 2, 49, 59, 9571, 9583, 4, 2, 51, 52, 9577, 9580, 59, 1, 8196, 59, 1, 8197, 1, 8195, 4, 2, 103, 115, 9591, 9594, 59, 1, 331, 112, 59, 1, 8194, 4, 2, 103, 112, 9604, 9609, 111, 110, 59, 1, 281, 102, 59, 3, 55349, 56662, 4, 3, 97, 108, 115, 9622, 9635, 9640, 114, 4, 2, 59, 115, 9629, 9631, 1, 8917, 108, 59, 1, 10723, 117, 115, 59, 1, 10865, 105, 4, 3, 59, 108, 118, 9649, 9651, 9656, 1, 949, 111, 110, 59, 1, 949, 59, 1, 1013, 4, 4, 99, 115, 117, 118, 9669, 9686, 9716, 9747, 4, 2, 105, 111, 9675, 9680, 114, 99, 59, 1, 8790, 108, 111, 110, 59, 1, 8789, 4, 2, 105, 108, 9692, 9696, 109, 59, 1, 8770, 97, 110, 116, 4, 2, 103, 108, 9705, 9710, 116, 114, 59, 1, 10902, 101, 115, 115, 59, 1, 10901, 4, 3, 97, 101, 105, 9724, 9729, 9734, 108, 115, 59, 1, 61, 115, 116, 59, 1, 8799, 118, 4, 2, 59, 68, 9741, 9743, 1, 8801, 68, 59, 1, 10872, 112, 97, 114, 115, 108, 59, 1, 10725, 4, 2, 68, 97, 9761, 9766, 111, 116, 59, 1, 8787, 114, 114, 59, 1, 10609, 4, 3, 99, 100, 105, 9779, 9783, 9788, 114, 59, 1, 8495, 111, 116, 59, 1, 8784, 109, 59, 1, 8770, 4, 2, 97, 104, 9798, 9801, 59, 1, 951, 5, 240, 1, 59, 9806, 1, 240, 4, 2, 109, 114, 9814, 9822, 108, 5, 235, 1, 59, 9820, 1, 235, 111, 59, 1, 8364, 4, 3, 99, 105, 112, 9834, 9838, 9843, 108, 59, 1, 33, 115, 116, 59, 1, 8707, 4, 2, 101, 111, 9849, 9859, 99, 116, 97, 116, 105, 111, 110, 59, 1, 8496, 110, 101, 110, 116, 105, 97, 108, 101, 59, 1, 8519, 4, 12, 97, 99, 101, 102, 105, 106, 108, 110, 111, 112, 114, 115, 9896, 9910, 9914, 9921, 9954, 9960, 9967, 9989, 9994, 10027, 10036, 10164, 108, 108, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 1, 8786, 121, 59, 1, 1092, 109, 97, 108, 101, 59, 1, 9792, 4, 3, 105, 108, 114, 9929, 9935, 9950, 108, 105, 103, 59, 1, 64259, 4, 2, 105, 108, 9941, 9945, 103, 59, 1, 64256, 105, 103, 59, 1, 64260, 59, 3, 55349, 56611, 108, 105, 103, 59, 1, 64257, 108, 105, 103, 59, 3, 102, 106, 4, 3, 97, 108, 116, 9975, 9979, 9984, 116, 59, 1, 9837, 105, 103, 59, 1, 64258, 110, 115, 59, 1, 9649, 111, 102, 59, 1, 402, 4, 2, 112, 114, 10000, 10005, 102, 59, 3, 55349, 56663, 4, 2, 97, 107, 10011, 10016, 108, 108, 59, 1, 8704, 4, 2, 59, 118, 10022, 10024, 1, 8916, 59, 1, 10969, 97, 114, 116, 105, 110, 116, 59, 1, 10765, 4, 2, 97, 111, 10042, 10159, 4, 2, 99, 115, 10048, 10155, 4, 6, 49, 50, 51, 52, 53, 55, 10062, 10102, 10114, 10135, 10139, 10151, 4, 6, 50, 51, 52, 53, 54, 56, 10076, 10083, 10086, 10093, 10096, 10099, 5, 189, 1, 59, 10081, 1, 189, 59, 1, 8531, 5, 188, 1, 59, 10091, 1, 188, 59, 1, 8533, 59, 1, 8537, 59, 1, 8539, 4, 2, 51, 53, 10108, 10111, 59, 1, 8532, 59, 1, 8534, 4, 3, 52, 53, 56, 10122, 10129, 10132, 5, 190, 1, 59, 10127, 1, 190, 59, 1, 8535, 59, 1, 8540, 53, 59, 1, 8536, 4, 2, 54, 56, 10145, 10148, 59, 1, 8538, 59, 1, 8541, 56, 59, 1, 8542, 108, 59, 1, 8260, 119, 110, 59, 1, 8994, 99, 114, 59, 3, 55349, 56507, 4, 17, 69, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 114, 115, 116, 118, 10206, 10217, 10247, 10254, 10268, 10273, 10358, 10363, 10374, 10380, 10385, 10406, 10458, 10464, 10470, 10497, 10610, 4, 2, 59, 108, 10212, 10214, 1, 8807, 59, 1, 10892, 4, 3, 99, 109, 112, 10225, 10231, 10244, 117, 116, 101, 59, 1, 501, 109, 97, 4, 2, 59, 100, 10239, 10241, 1, 947, 59, 1, 989, 59, 1, 10886, 114, 101, 118, 101, 59, 1, 287, 4, 2, 105, 121, 10260, 10265, 114, 99, 59, 1, 285, 59, 1, 1075, 111, 116, 59, 1, 289, 4, 4, 59, 108, 113, 115, 10283, 10285, 10288, 10308, 1, 8805, 59, 1, 8923, 4, 3, 59, 113, 115, 10296, 10298, 10301, 1, 8805, 59, 1, 8807, 108, 97, 110, 116, 59, 1, 10878, 4, 4, 59, 99, 100, 108, 10318, 10320, 10324, 10345, 1, 10878, 99, 59, 1, 10921, 111, 116, 4, 2, 59, 111, 10332, 10334, 1, 10880, 4, 2, 59, 108, 10340, 10342, 1, 10882, 59, 1, 10884, 4, 2, 59, 101, 10351, 10354, 3, 8923, 65024, 115, 59, 1, 10900, 114, 59, 3, 55349, 56612, 4, 2, 59, 103, 10369, 10371, 1, 8811, 59, 1, 8921, 109, 101, 108, 59, 1, 8503, 99, 121, 59, 1, 1107, 4, 4, 59, 69, 97, 106, 10395, 10397, 10400, 10403, 1, 8823, 59, 1, 10898, 59, 1, 10917, 59, 1, 10916, 4, 4, 69, 97, 101, 115, 10416, 10419, 10434, 10453, 59, 1, 8809, 112, 4, 2, 59, 112, 10426, 10428, 1, 10890, 114, 111, 120, 59, 1, 10890, 4, 2, 59, 113, 10440, 10442, 1, 10888, 4, 2, 59, 113, 10448, 10450, 1, 10888, 59, 1, 8809, 105, 109, 59, 1, 8935, 112, 102, 59, 3, 55349, 56664, 97, 118, 101, 59, 1, 96, 4, 2, 99, 105, 10476, 10480, 114, 59, 1, 8458, 109, 4, 3, 59, 101, 108, 10489, 10491, 10494, 1, 8819, 59, 1, 10894, 59, 1, 10896, 5, 62, 6, 59, 99, 100, 108, 113, 114, 10512, 10514, 10527, 10532, 10538, 10545, 1, 62, 4, 2, 99, 105, 10520, 10523, 59, 1, 10919, 114, 59, 1, 10874, 111, 116, 59, 1, 8919, 80, 97, 114, 59, 1, 10645, 117, 101, 115, 116, 59, 1, 10876, 4, 5, 97, 100, 101, 108, 115, 10557, 10574, 10579, 10599, 10605, 4, 2, 112, 114, 10563, 10570, 112, 114, 111, 120, 59, 1, 10886, 114, 59, 1, 10616, 111, 116, 59, 1, 8919, 113, 4, 2, 108, 113, 10586, 10592, 101, 115, 115, 59, 1, 8923, 108, 101, 115, 115, 59, 1, 10892, 101, 115, 115, 59, 1, 8823, 105, 109, 59, 1, 8819, 4, 2, 101, 110, 10616, 10626, 114, 116, 110, 101, 113, 113, 59, 3, 8809, 65024, 69, 59, 3, 8809, 65024, 4, 10, 65, 97, 98, 99, 101, 102, 107, 111, 115, 121, 10653, 10658, 10713, 10718, 10724, 10760, 10765, 10786, 10850, 10875, 114, 114, 59, 1, 8660, 4, 4, 105, 108, 109, 114, 10668, 10674, 10678, 10684, 114, 115, 112, 59, 1, 8202, 102, 59, 1, 189, 105, 108, 116, 59, 1, 8459, 4, 2, 100, 114, 10690, 10695, 99, 121, 59, 1, 1098, 4, 3, 59, 99, 119, 10703, 10705, 10710, 1, 8596, 105, 114, 59, 1, 10568, 59, 1, 8621, 97, 114, 59, 1, 8463, 105, 114, 99, 59, 1, 293, 4, 3, 97, 108, 114, 10732, 10748, 10754, 114, 116, 115, 4, 2, 59, 117, 10741, 10743, 1, 9829, 105, 116, 59, 1, 9829, 108, 105, 112, 59, 1, 8230, 99, 111, 110, 59, 1, 8889, 114, 59, 3, 55349, 56613, 115, 4, 2, 101, 119, 10772, 10779, 97, 114, 111, 119, 59, 1, 10533, 97, 114, 111, 119, 59, 1, 10534, 4, 5, 97, 109, 111, 112, 114, 10798, 10803, 10809, 10839, 10844, 114, 114, 59, 1, 8703, 116, 104, 116, 59, 1, 8763, 107, 4, 2, 108, 114, 10816, 10827, 101, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8617, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8618, 102, 59, 3, 55349, 56665, 98, 97, 114, 59, 1, 8213, 4, 3, 99, 108, 116, 10858, 10863, 10869, 114, 59, 3, 55349, 56509, 97, 115, 104, 59, 1, 8463, 114, 111, 107, 59, 1, 295, 4, 2, 98, 112, 10881, 10887, 117, 108, 108, 59, 1, 8259, 104, 101, 110, 59, 1, 8208, 4, 15, 97, 99, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 115, 116, 117, 10925, 10936, 10958, 10977, 10990, 11001, 11039, 11045, 11101, 11192, 11220, 11226, 11237, 11285, 11299, 99, 117, 116, 101, 5, 237, 1, 59, 10934, 1, 237, 4, 3, 59, 105, 121, 10944, 10946, 10955, 1, 8291, 114, 99, 5, 238, 1, 59, 10953, 1, 238, 59, 1, 1080, 4, 2, 99, 120, 10964, 10968, 121, 59, 1, 1077, 99, 108, 5, 161, 1, 59, 10975, 1, 161, 4, 2, 102, 114, 10983, 10986, 59, 1, 8660, 59, 3, 55349, 56614, 114, 97, 118, 101, 5, 236, 1, 59, 10999, 1, 236, 4, 4, 59, 105, 110, 111, 11011, 11013, 11028, 11034, 1, 8520, 4, 2, 105, 110, 11019, 11024, 110, 116, 59, 1, 10764, 116, 59, 1, 8749, 102, 105, 110, 59, 1, 10716, 116, 97, 59, 1, 8489, 108, 105, 103, 59, 1, 307, 4, 3, 97, 111, 112, 11053, 11092, 11096, 4, 3, 99, 103, 116, 11061, 11065, 11088, 114, 59, 1, 299, 4, 3, 101, 108, 112, 11073, 11076, 11082, 59, 1, 8465, 105, 110, 101, 59, 1, 8464, 97, 114, 116, 59, 1, 8465, 104, 59, 1, 305, 102, 59, 1, 8887, 101, 100, 59, 1, 437, 4, 5, 59, 99, 102, 111, 116, 11113, 11115, 11121, 11136, 11142, 1, 8712, 97, 114, 101, 59, 1, 8453, 105, 110, 4, 2, 59, 116, 11129, 11131, 1, 8734, 105, 101, 59, 1, 10717, 100, 111, 116, 59, 1, 305, 4, 5, 59, 99, 101, 108, 112, 11154, 11156, 11161, 11179, 11186, 1, 8747, 97, 108, 59, 1, 8890, 4, 2, 103, 114, 11167, 11173, 101, 114, 115, 59, 1, 8484, 99, 97, 108, 59, 1, 8890, 97, 114, 104, 107, 59, 1, 10775, 114, 111, 100, 59, 1, 10812, 4, 4, 99, 103, 112, 116, 11202, 11206, 11211, 11216, 121, 59, 1, 1105, 111, 110, 59, 1, 303, 102, 59, 3, 55349, 56666, 97, 59, 1, 953, 114, 111, 100, 59, 1, 10812, 117, 101, 115, 116, 5, 191, 1, 59, 11235, 1, 191, 4, 2, 99, 105, 11243, 11248, 114, 59, 3, 55349, 56510, 110, 4, 5, 59, 69, 100, 115, 118, 11261, 11263, 11266, 11271, 11282, 1, 8712, 59, 1, 8953, 111, 116, 59, 1, 8949, 4, 2, 59, 118, 11277, 11279, 1, 8948, 59, 1, 8947, 59, 1, 8712, 4, 2, 59, 105, 11291, 11293, 1, 8290, 108, 100, 101, 59, 1, 297, 4, 2, 107, 109, 11305, 11310, 99, 121, 59, 1, 1110, 108, 5, 239, 1, 59, 11316, 1, 239, 4, 6, 99, 102, 109, 111, 115, 117, 11332, 11346, 11351, 11357, 11363, 11380, 4, 2, 105, 121, 11338, 11343, 114, 99, 59, 1, 309, 59, 1, 1081, 114, 59, 3, 55349, 56615, 97, 116, 104, 59, 1, 567, 112, 102, 59, 3, 55349, 56667, 4, 2, 99, 101, 11369, 11374, 114, 59, 3, 55349, 56511, 114, 99, 121, 59, 1, 1112, 107, 99, 121, 59, 1, 1108, 4, 8, 97, 99, 102, 103, 104, 106, 111, 115, 11404, 11418, 11433, 11438, 11445, 11450, 11455, 11461, 112, 112, 97, 4, 2, 59, 118, 11413, 11415, 1, 954, 59, 1, 1008, 4, 2, 101, 121, 11424, 11430, 100, 105, 108, 59, 1, 311, 59, 1, 1082, 114, 59, 3, 55349, 56616, 114, 101, 101, 110, 59, 1, 312, 99, 121, 59, 1, 1093, 99, 121, 59, 1, 1116, 112, 102, 59, 3, 55349, 56668, 99, 114, 59, 3, 55349, 56512, 4, 23, 65, 66, 69, 72, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 11515, 11538, 11544, 11555, 11560, 11721, 11780, 11818, 11868, 12136, 12160, 12171, 12203, 12208, 12246, 12275, 12327, 12509, 12523, 12569, 12641, 12732, 12752, 4, 3, 97, 114, 116, 11523, 11528, 11532, 114, 114, 59, 1, 8666, 114, 59, 1, 8656, 97, 105, 108, 59, 1, 10523, 97, 114, 114, 59, 1, 10510, 4, 2, 59, 103, 11550, 11552, 1, 8806, 59, 1, 10891, 97, 114, 59, 1, 10594, 4, 9, 99, 101, 103, 109, 110, 112, 113, 114, 116, 11580, 11586, 11594, 11600, 11606, 11624, 11627, 11636, 11694, 117, 116, 101, 59, 1, 314, 109, 112, 116, 121, 118, 59, 1, 10676, 114, 97, 110, 59, 1, 8466, 98, 100, 97, 59, 1, 955, 103, 4, 3, 59, 100, 108, 11615, 11617, 11620, 1, 10216, 59, 1, 10641, 101, 59, 1, 10216, 59, 1, 10885, 117, 111, 5, 171, 1, 59, 11634, 1, 171, 114, 4, 8, 59, 98, 102, 104, 108, 112, 115, 116, 11655, 11657, 11669, 11673, 11677, 11681, 11685, 11690, 1, 8592, 4, 2, 59, 102, 11663, 11665, 1, 8676, 115, 59, 1, 10527, 115, 59, 1, 10525, 107, 59, 1, 8617, 112, 59, 1, 8619, 108, 59, 1, 10553, 105, 109, 59, 1, 10611, 108, 59, 1, 8610, 4, 3, 59, 97, 101, 11702, 11704, 11709, 1, 10923, 105, 108, 59, 1, 10521, 4, 2, 59, 115, 11715, 11717, 1, 10925, 59, 3, 10925, 65024, 4, 3, 97, 98, 114, 11729, 11734, 11739, 114, 114, 59, 1, 10508, 114, 107, 59, 1, 10098, 4, 2, 97, 107, 11745, 11758, 99, 4, 2, 101, 107, 11752, 11755, 59, 1, 123, 59, 1, 91, 4, 2, 101, 115, 11764, 11767, 59, 1, 10635, 108, 4, 2, 100, 117, 11774, 11777, 59, 1, 10639, 59, 1, 10637, 4, 4, 97, 101, 117, 121, 11790, 11796, 11811, 11815, 114, 111, 110, 59, 1, 318, 4, 2, 100, 105, 11802, 11807, 105, 108, 59, 1, 316, 108, 59, 1, 8968, 98, 59, 1, 123, 59, 1, 1083, 4, 4, 99, 113, 114, 115, 11828, 11832, 11845, 11864, 97, 59, 1, 10550, 117, 111, 4, 2, 59, 114, 11840, 11842, 1, 8220, 59, 1, 8222, 4, 2, 100, 117, 11851, 11857, 104, 97, 114, 59, 1, 10599, 115, 104, 97, 114, 59, 1, 10571, 104, 59, 1, 8626, 4, 5, 59, 102, 103, 113, 115, 11880, 11882, 12008, 12011, 12031, 1, 8804, 116, 4, 5, 97, 104, 108, 114, 116, 11895, 11913, 11935, 11947, 11996, 114, 114, 111, 119, 4, 2, 59, 116, 11905, 11907, 1, 8592, 97, 105, 108, 59, 1, 8610, 97, 114, 112, 111, 111, 110, 4, 2, 100, 117, 11925, 11931, 111, 119, 110, 59, 1, 8637, 112, 59, 1, 8636, 101, 102, 116, 97, 114, 114, 111, 119, 115, 59, 1, 8647, 105, 103, 104, 116, 4, 3, 97, 104, 115, 11959, 11974, 11984, 114, 114, 111, 119, 4, 2, 59, 115, 11969, 11971, 1, 8596, 59, 1, 8646, 97, 114, 112, 111, 111, 110, 115, 59, 1, 8651, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 1, 8621, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 1, 8907, 59, 1, 8922, 4, 3, 59, 113, 115, 12019, 12021, 12024, 1, 8804, 59, 1, 8806, 108, 97, 110, 116, 59, 1, 10877, 4, 5, 59, 99, 100, 103, 115, 12043, 12045, 12049, 12070, 12083, 1, 10877, 99, 59, 1, 10920, 111, 116, 4, 2, 59, 111, 12057, 12059, 1, 10879, 4, 2, 59, 114, 12065, 12067, 1, 10881, 59, 1, 10883, 4, 2, 59, 101, 12076, 12079, 3, 8922, 65024, 115, 59, 1, 10899, 4, 5, 97, 100, 101, 103, 115, 12095, 12103, 12108, 12126, 12131, 112, 112, 114, 111, 120, 59, 1, 10885, 111, 116, 59, 1, 8918, 113, 4, 2, 103, 113, 12115, 12120, 116, 114, 59, 1, 8922, 103, 116, 114, 59, 1, 10891, 116, 114, 59, 1, 8822, 105, 109, 59, 1, 8818, 4, 3, 105, 108, 114, 12144, 12150, 12156, 115, 104, 116, 59, 1, 10620, 111, 111, 114, 59, 1, 8970, 59, 3, 55349, 56617, 4, 2, 59, 69, 12166, 12168, 1, 8822, 59, 1, 10897, 4, 2, 97, 98, 12177, 12198, 114, 4, 2, 100, 117, 12184, 12187, 59, 1, 8637, 4, 2, 59, 108, 12193, 12195, 1, 8636, 59, 1, 10602, 108, 107, 59, 1, 9604, 99, 121, 59, 1, 1113, 4, 5, 59, 97, 99, 104, 116, 12220, 12222, 12227, 12235, 12241, 1, 8810, 114, 114, 59, 1, 8647, 111, 114, 110, 101, 114, 59, 1, 8990, 97, 114, 100, 59, 1, 10603, 114, 105, 59, 1, 9722, 4, 2, 105, 111, 12252, 12258, 100, 111, 116, 59, 1, 320, 117, 115, 116, 4, 2, 59, 97, 12267, 12269, 1, 9136, 99, 104, 101, 59, 1, 9136, 4, 4, 69, 97, 101, 115, 12285, 12288, 12303, 12322, 59, 1, 8808, 112, 4, 2, 59, 112, 12295, 12297, 1, 10889, 114, 111, 120, 59, 1, 10889, 4, 2, 59, 113, 12309, 12311, 1, 10887, 4, 2, 59, 113, 12317, 12319, 1, 10887, 59, 1, 8808, 105, 109, 59, 1, 8934, 4, 8, 97, 98, 110, 111, 112, 116, 119, 122, 12345, 12359, 12364, 12421, 12446, 12467, 12474, 12490, 4, 2, 110, 114, 12351, 12355, 103, 59, 1, 10220, 114, 59, 1, 8701, 114, 107, 59, 1, 10214, 103, 4, 3, 108, 109, 114, 12373, 12401, 12409, 101, 102, 116, 4, 2, 97, 114, 12382, 12389, 114, 114, 111, 119, 59, 1, 10229, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10231, 97, 112, 115, 116, 111, 59, 1, 10236, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10230, 112, 97, 114, 114, 111, 119, 4, 2, 108, 114, 12433, 12439, 101, 102, 116, 59, 1, 8619, 105, 103, 104, 116, 59, 1, 8620, 4, 3, 97, 102, 108, 12454, 12458, 12462, 114, 59, 1, 10629, 59, 3, 55349, 56669, 117, 115, 59, 1, 10797, 105, 109, 101, 115, 59, 1, 10804, 4, 2, 97, 98, 12480, 12485, 115, 116, 59, 1, 8727, 97, 114, 59, 1, 95, 4, 3, 59, 101, 102, 12498, 12500, 12506, 1, 9674, 110, 103, 101, 59, 1, 9674, 59, 1, 10731, 97, 114, 4, 2, 59, 108, 12517, 12519, 1, 40, 116, 59, 1, 10643, 4, 5, 97, 99, 104, 109, 116, 12535, 12540, 12548, 12561, 12564, 114, 114, 59, 1, 8646, 111, 114, 110, 101, 114, 59, 1, 8991, 97, 114, 4, 2, 59, 100, 12556, 12558, 1, 8651, 59, 1, 10605, 59, 1, 8206, 114, 105, 59, 1, 8895, 4, 6, 97, 99, 104, 105, 113, 116, 12583, 12589, 12594, 12597, 12614, 12635, 113, 117, 111, 59, 1, 8249, 114, 59, 3, 55349, 56513, 59, 1, 8624, 109, 4, 3, 59, 101, 103, 12606, 12608, 12611, 1, 8818, 59, 1, 10893, 59, 1, 10895, 4, 2, 98, 117, 12620, 12623, 59, 1, 91, 111, 4, 2, 59, 114, 12630, 12632, 1, 8216, 59, 1, 8218, 114, 111, 107, 59, 1, 322, 5, 60, 8, 59, 99, 100, 104, 105, 108, 113, 114, 12660, 12662, 12675, 12680, 12686, 12692, 12698, 12705, 1, 60, 4, 2, 99, 105, 12668, 12671, 59, 1, 10918, 114, 59, 1, 10873, 111, 116, 59, 1, 8918, 114, 101, 101, 59, 1, 8907, 109, 101, 115, 59, 1, 8905, 97, 114, 114, 59, 1, 10614, 117, 101, 115, 116, 59, 1, 10875, 4, 2, 80, 105, 12711, 12716, 97, 114, 59, 1, 10646, 4, 3, 59, 101, 102, 12724, 12726, 12729, 1, 9667, 59, 1, 8884, 59, 1, 9666, 114, 4, 2, 100, 117, 12739, 12746, 115, 104, 97, 114, 59, 1, 10570, 104, 97, 114, 59, 1, 10598, 4, 2, 101, 110, 12758, 12768, 114, 116, 110, 101, 113, 113, 59, 3, 8808, 65024, 69, 59, 3, 8808, 65024, 4, 14, 68, 97, 99, 100, 101, 102, 104, 105, 108, 110, 111, 112, 115, 117, 12803, 12809, 12893, 12908, 12914, 12928, 12933, 12937, 13011, 13025, 13032, 13049, 13052, 13069, 68, 111, 116, 59, 1, 8762, 4, 4, 99, 108, 112, 114, 12819, 12827, 12849, 12887, 114, 5, 175, 1, 59, 12825, 1, 175, 4, 2, 101, 116, 12833, 12836, 59, 1, 9794, 4, 2, 59, 101, 12842, 12844, 1, 10016, 115, 101, 59, 1, 10016, 4, 2, 59, 115, 12855, 12857, 1, 8614, 116, 111, 4, 4, 59, 100, 108, 117, 12869, 12871, 12877, 12883, 1, 8614, 111, 119, 110, 59, 1, 8615, 101, 102, 116, 59, 1, 8612, 112, 59, 1, 8613, 107, 101, 114, 59, 1, 9646, 4, 2, 111, 121, 12899, 12905, 109, 109, 97, 59, 1, 10793, 59, 1, 1084, 97, 115, 104, 59, 1, 8212, 97, 115, 117, 114, 101, 100, 97, 110, 103, 108, 101, 59, 1, 8737, 114, 59, 3, 55349, 56618, 111, 59, 1, 8487, 4, 3, 99, 100, 110, 12945, 12954, 12985, 114, 111, 5, 181, 1, 59, 12952, 1, 181, 4, 4, 59, 97, 99, 100, 12964, 12966, 12971, 12976, 1, 8739, 115, 116, 59, 1, 42, 105, 114, 59, 1, 10992, 111, 116, 5, 183, 1, 59, 12983, 1, 183, 117, 115, 4, 3, 59, 98, 100, 12995, 12997, 13000, 1, 8722, 59, 1, 8863, 4, 2, 59, 117, 13006, 13008, 1, 8760, 59, 1, 10794, 4, 2, 99, 100, 13017, 13021, 112, 59, 1, 10971, 114, 59, 1, 8230, 112, 108, 117, 115, 59, 1, 8723, 4, 2, 100, 112, 13038, 13044, 101, 108, 115, 59, 1, 8871, 102, 59, 3, 55349, 56670, 59, 1, 8723, 4, 2, 99, 116, 13058, 13063, 114, 59, 3, 55349, 56514, 112, 111, 115, 59, 1, 8766, 4, 3, 59, 108, 109, 13077, 13079, 13087, 1, 956, 116, 105, 109, 97, 112, 59, 1, 8888, 97, 112, 59, 1, 8888, 4, 24, 71, 76, 82, 86, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 13142, 13165, 13217, 13229, 13247, 13330, 13359, 13414, 13420, 13508, 13513, 13579, 13602, 13626, 13631, 13762, 13767, 13855, 13936, 13995, 14214, 14285, 14312, 14432, 4, 2, 103, 116, 13148, 13152, 59, 3, 8921, 824, 4, 2, 59, 118, 13158, 13161, 3, 8811, 8402, 59, 3, 8811, 824, 4, 3, 101, 108, 116, 13173, 13200, 13204, 102, 116, 4, 2, 97, 114, 13181, 13188, 114, 114, 111, 119, 59, 1, 8653, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8654, 59, 3, 8920, 824, 4, 2, 59, 118, 13210, 13213, 3, 8810, 8402, 59, 3, 8810, 824, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8655, 4, 2, 68, 100, 13235, 13241, 97, 115, 104, 59, 1, 8879, 97, 115, 104, 59, 1, 8878, 4, 5, 98, 99, 110, 112, 116, 13259, 13264, 13270, 13275, 13308, 108, 97, 59, 1, 8711, 117, 116, 101, 59, 1, 324, 103, 59, 3, 8736, 8402, 4, 5, 59, 69, 105, 111, 112, 13287, 13289, 13293, 13298, 13302, 1, 8777, 59, 3, 10864, 824, 100, 59, 3, 8779, 824, 115, 59, 1, 329, 114, 111, 120, 59, 1, 8777, 117, 114, 4, 2, 59, 97, 13316, 13318, 1, 9838, 108, 4, 2, 59, 115, 13325, 13327, 1, 9838, 59, 1, 8469, 4, 2, 115, 117, 13336, 13344, 112, 5, 160, 1, 59, 13342, 1, 160, 109, 112, 4, 2, 59, 101, 13352, 13355, 3, 8782, 824, 59, 3, 8783, 824, 4, 5, 97, 101, 111, 117, 121, 13371, 13385, 13391, 13407, 13411, 4, 2, 112, 114, 13377, 13380, 59, 1, 10819, 111, 110, 59, 1, 328, 100, 105, 108, 59, 1, 326, 110, 103, 4, 2, 59, 100, 13399, 13401, 1, 8775, 111, 116, 59, 3, 10861, 824, 112, 59, 1, 10818, 59, 1, 1085, 97, 115, 104, 59, 1, 8211, 4, 7, 59, 65, 97, 100, 113, 115, 120, 13436, 13438, 13443, 13466, 13472, 13478, 13494, 1, 8800, 114, 114, 59, 1, 8663, 114, 4, 2, 104, 114, 13450, 13454, 107, 59, 1, 10532, 4, 2, 59, 111, 13460, 13462, 1, 8599, 119, 59, 1, 8599, 111, 116, 59, 3, 8784, 824, 117, 105, 118, 59, 1, 8802, 4, 2, 101, 105, 13484, 13489, 97, 114, 59, 1, 10536, 109, 59, 3, 8770, 824, 105, 115, 116, 4, 2, 59, 115, 13503, 13505, 1, 8708, 59, 1, 8708, 114, 59, 3, 55349, 56619, 4, 4, 69, 101, 115, 116, 13523, 13527, 13563, 13568, 59, 3, 8807, 824, 4, 3, 59, 113, 115, 13535, 13537, 13559, 1, 8817, 4, 3, 59, 113, 115, 13545, 13547, 13551, 1, 8817, 59, 3, 8807, 824, 108, 97, 110, 116, 59, 3, 10878, 824, 59, 3, 10878, 824, 105, 109, 59, 1, 8821, 4, 2, 59, 114, 13574, 13576, 1, 8815, 59, 1, 8815, 4, 3, 65, 97, 112, 13587, 13592, 13597, 114, 114, 59, 1, 8654, 114, 114, 59, 1, 8622, 97, 114, 59, 1, 10994, 4, 3, 59, 115, 118, 13610, 13612, 13623, 1, 8715, 4, 2, 59, 100, 13618, 13620, 1, 8956, 59, 1, 8954, 59, 1, 8715, 99, 121, 59, 1, 1114, 4, 7, 65, 69, 97, 100, 101, 115, 116, 13647, 13652, 13656, 13661, 13665, 13737, 13742, 114, 114, 59, 1, 8653, 59, 3, 8806, 824, 114, 114, 59, 1, 8602, 114, 59, 1, 8229, 4, 4, 59, 102, 113, 115, 13675, 13677, 13703, 13725, 1, 8816, 116, 4, 2, 97, 114, 13684, 13691, 114, 114, 111, 119, 59, 1, 8602, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8622, 4, 3, 59, 113, 115, 13711, 13713, 13717, 1, 8816, 59, 3, 8806, 824, 108, 97, 110, 116, 59, 3, 10877, 824, 4, 2, 59, 115, 13731, 13734, 3, 10877, 824, 59, 1, 8814, 105, 109, 59, 1, 8820, 4, 2, 59, 114, 13748, 13750, 1, 8814, 105, 4, 2, 59, 101, 13757, 13759, 1, 8938, 59, 1, 8940, 105, 100, 59, 1, 8740, 4, 2, 112, 116, 13773, 13778, 102, 59, 3, 55349, 56671, 5, 172, 3, 59, 105, 110, 13787, 13789, 13829, 1, 172, 110, 4, 4, 59, 69, 100, 118, 13800, 13802, 13806, 13812, 1, 8713, 59, 3, 8953, 824, 111, 116, 59, 3, 8949, 824, 4, 3, 97, 98, 99, 13820, 13823, 13826, 59, 1, 8713, 59, 1, 8951, 59, 1, 8950, 105, 4, 2, 59, 118, 13836, 13838, 1, 8716, 4, 3, 97, 98, 99, 13846, 13849, 13852, 59, 1, 8716, 59, 1, 8958, 59, 1, 8957, 4, 3, 97, 111, 114, 13863, 13892, 13899, 114, 4, 4, 59, 97, 115, 116, 13874, 13876, 13883, 13888, 1, 8742, 108, 108, 101, 108, 59, 1, 8742, 108, 59, 3, 11005, 8421, 59, 3, 8706, 824, 108, 105, 110, 116, 59, 1, 10772, 4, 3, 59, 99, 101, 13907, 13909, 13914, 1, 8832, 117, 101, 59, 1, 8928, 4, 2, 59, 99, 13920, 13923, 3, 10927, 824, 4, 2, 59, 101, 13929, 13931, 1, 8832, 113, 59, 3, 10927, 824, 4, 4, 65, 97, 105, 116, 13946, 13951, 13971, 13982, 114, 114, 59, 1, 8655, 114, 114, 4, 3, 59, 99, 119, 13961, 13963, 13967, 1, 8603, 59, 3, 10547, 824, 59, 3, 8605, 824, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8603, 114, 105, 4, 2, 59, 101, 13990, 13992, 1, 8939, 59, 1, 8941, 4, 7, 99, 104, 105, 109, 112, 113, 117, 14011, 14036, 14060, 14080, 14085, 14090, 14106, 4, 4, 59, 99, 101, 114, 14021, 14023, 14028, 14032, 1, 8833, 117, 101, 59, 1, 8929, 59, 3, 10928, 824, 59, 3, 55349, 56515, 111, 114, 116, 4, 2, 109, 112, 14045, 14050, 105, 100, 59, 1, 8740, 97, 114, 97, 108, 108, 101, 108, 59, 1, 8742, 109, 4, 2, 59, 101, 14067, 14069, 1, 8769, 4, 2, 59, 113, 14075, 14077, 1, 8772, 59, 1, 8772, 105, 100, 59, 1, 8740, 97, 114, 59, 1, 8742, 115, 117, 4, 2, 98, 112, 14098, 14102, 101, 59, 1, 8930, 101, 59, 1, 8931, 4, 3, 98, 99, 112, 14114, 14157, 14171, 4, 4, 59, 69, 101, 115, 14124, 14126, 14130, 14133, 1, 8836, 59, 3, 10949, 824, 59, 1, 8840, 101, 116, 4, 2, 59, 101, 14141, 14144, 3, 8834, 8402, 113, 4, 2, 59, 113, 14151, 14153, 1, 8840, 59, 3, 10949, 824, 99, 4, 2, 59, 101, 14164, 14166, 1, 8833, 113, 59, 3, 10928, 824, 4, 4, 59, 69, 101, 115, 14181, 14183, 14187, 14190, 1, 8837, 59, 3, 10950, 824, 59, 1, 8841, 101, 116, 4, 2, 59, 101, 14198, 14201, 3, 8835, 8402, 113, 4, 2, 59, 113, 14208, 14210, 1, 8841, 59, 3, 10950, 824, 4, 4, 103, 105, 108, 114, 14224, 14228, 14238, 14242, 108, 59, 1, 8825, 108, 100, 101, 5, 241, 1, 59, 14236, 1, 241, 103, 59, 1, 8824, 105, 97, 110, 103, 108, 101, 4, 2, 108, 114, 14254, 14269, 101, 102, 116, 4, 2, 59, 101, 14263, 14265, 1, 8938, 113, 59, 1, 8940, 105, 103, 104, 116, 4, 2, 59, 101, 14279, 14281, 1, 8939, 113, 59, 1, 8941, 4, 2, 59, 109, 14291, 14293, 1, 957, 4, 3, 59, 101, 115, 14301, 14303, 14308, 1, 35, 114, 111, 59, 1, 8470, 112, 59, 1, 8199, 4, 9, 68, 72, 97, 100, 103, 105, 108, 114, 115, 14332, 14338, 14344, 14349, 14355, 14369, 14376, 14408, 14426, 97, 115, 104, 59, 1, 8877, 97, 114, 114, 59, 1, 10500, 112, 59, 3, 8781, 8402, 97, 115, 104, 59, 1, 8876, 4, 2, 101, 116, 14361, 14365, 59, 3, 8805, 8402, 59, 3, 62, 8402, 110, 102, 105, 110, 59, 1, 10718, 4, 3, 65, 101, 116, 14384, 14389, 14393, 114, 114, 59, 1, 10498, 59, 3, 8804, 8402, 4, 2, 59, 114, 14399, 14402, 3, 60, 8402, 105, 101, 59, 3, 8884, 8402, 4, 2, 65, 116, 14414, 14419, 114, 114, 59, 1, 10499, 114, 105, 101, 59, 3, 8885, 8402, 105, 109, 59, 3, 8764, 8402, 4, 3, 65, 97, 110, 14440, 14445, 14468, 114, 114, 59, 1, 8662, 114, 4, 2, 104, 114, 14452, 14456, 107, 59, 1, 10531, 4, 2, 59, 111, 14462, 14464, 1, 8598, 119, 59, 1, 8598, 101, 97, 114, 59, 1, 10535, 4, 18, 83, 97, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 112, 114, 115, 116, 117, 118, 14512, 14515, 14535, 14560, 14597, 14603, 14618, 14643, 14657, 14662, 14701, 14741, 14747, 14769, 14851, 14877, 14907, 14916, 59, 1, 9416, 4, 2, 99, 115, 14521, 14531, 117, 116, 101, 5, 243, 1, 59, 14529, 1, 243, 116, 59, 1, 8859, 4, 2, 105, 121, 14541, 14557, 114, 4, 2, 59, 99, 14548, 14550, 1, 8858, 5, 244, 1, 59, 14555, 1, 244, 59, 1, 1086, 4, 5, 97, 98, 105, 111, 115, 14572, 14577, 14583, 14587, 14591, 115, 104, 59, 1, 8861, 108, 97, 99, 59, 1, 337, 118, 59, 1, 10808, 116, 59, 1, 8857, 111, 108, 100, 59, 1, 10684, 108, 105, 103, 59, 1, 339, 4, 2, 99, 114, 14609, 14614, 105, 114, 59, 1, 10687, 59, 3, 55349, 56620, 4, 3, 111, 114, 116, 14626, 14630, 14640, 110, 59, 1, 731, 97, 118, 101, 5, 242, 1, 59, 14638, 1, 242, 59, 1, 10689, 4, 2, 98, 109, 14649, 14654, 97, 114, 59, 1, 10677, 59, 1, 937, 110, 116, 59, 1, 8750, 4, 4, 97, 99, 105, 116, 14672, 14677, 14693, 14698, 114, 114, 59, 1, 8634, 4, 2, 105, 114, 14683, 14687, 114, 59, 1, 10686, 111, 115, 115, 59, 1, 10683, 110, 101, 59, 1, 8254, 59, 1, 10688, 4, 3, 97, 101, 105, 14709, 14714, 14719, 99, 114, 59, 1, 333, 103, 97, 59, 1, 969, 4, 3, 99, 100, 110, 14727, 14733, 14736, 114, 111, 110, 59, 1, 959, 59, 1, 10678, 117, 115, 59, 1, 8854, 112, 102, 59, 3, 55349, 56672, 4, 3, 97, 101, 108, 14755, 14759, 14764, 114, 59, 1, 10679, 114, 112, 59, 1, 10681, 117, 115, 59, 1, 8853, 4, 7, 59, 97, 100, 105, 111, 115, 118, 14785, 14787, 14792, 14831, 14837, 14841, 14848, 1, 8744, 114, 114, 59, 1, 8635, 4, 4, 59, 101, 102, 109, 14802, 14804, 14817, 14824, 1, 10845, 114, 4, 2, 59, 111, 14811, 14813, 1, 8500, 102, 59, 1, 8500, 5, 170, 1, 59, 14822, 1, 170, 5, 186, 1, 59, 14829, 1, 186, 103, 111, 102, 59, 1, 8886, 114, 59, 1, 10838, 108, 111, 112, 101, 59, 1, 10839, 59, 1, 10843, 4, 3, 99, 108, 111, 14859, 14863, 14873, 114, 59, 1, 8500, 97, 115, 104, 5, 248, 1, 59, 14871, 1, 248, 108, 59, 1, 8856, 105, 4, 2, 108, 109, 14884, 14893, 100, 101, 5, 245, 1, 59, 14891, 1, 245, 101, 115, 4, 2, 59, 97, 14901, 14903, 1, 8855, 115, 59, 1, 10806, 109, 108, 5, 246, 1, 59, 14914, 1, 246, 98, 97, 114, 59, 1, 9021, 4, 12, 97, 99, 101, 102, 104, 105, 108, 109, 111, 114, 115, 117, 14948, 14992, 14996, 15033, 15038, 15068, 15090, 15189, 15192, 15222, 15427, 15441, 114, 4, 4, 59, 97, 115, 116, 14959, 14961, 14976, 14989, 1, 8741, 5, 182, 2, 59, 108, 14968, 14970, 1, 182, 108, 101, 108, 59, 1, 8741, 4, 2, 105, 108, 14982, 14986, 109, 59, 1, 10995, 59, 1, 11005, 59, 1, 8706, 121, 59, 1, 1087, 114, 4, 5, 99, 105, 109, 112, 116, 15009, 15014, 15019, 15024, 15027, 110, 116, 59, 1, 37, 111, 100, 59, 1, 46, 105, 108, 59, 1, 8240, 59, 1, 8869, 101, 110, 107, 59, 1, 8241, 114, 59, 3, 55349, 56621, 4, 3, 105, 109, 111, 15046, 15057, 15063, 4, 2, 59, 118, 15052, 15054, 1, 966, 59, 1, 981, 109, 97, 116, 59, 1, 8499, 110, 101, 59, 1, 9742, 4, 3, 59, 116, 118, 15076, 15078, 15087, 1, 960, 99, 104, 102, 111, 114, 107, 59, 1, 8916, 59, 1, 982, 4, 2, 97, 117, 15096, 15119, 110, 4, 2, 99, 107, 15103, 15115, 107, 4, 2, 59, 104, 15110, 15112, 1, 8463, 59, 1, 8462, 118, 59, 1, 8463, 115, 4, 9, 59, 97, 98, 99, 100, 101, 109, 115, 116, 15140, 15142, 15148, 15151, 15156, 15168, 15171, 15179, 15184, 1, 43, 99, 105, 114, 59, 1, 10787, 59, 1, 8862, 105, 114, 59, 1, 10786, 4, 2, 111, 117, 15162, 15165, 59, 1, 8724, 59, 1, 10789, 59, 1, 10866, 110, 5, 177, 1, 59, 15177, 1, 177, 105, 109, 59, 1, 10790, 119, 111, 59, 1, 10791, 59, 1, 177, 4, 3, 105, 112, 117, 15200, 15208, 15213, 110, 116, 105, 110, 116, 59, 1, 10773, 102, 59, 3, 55349, 56673, 110, 100, 5, 163, 1, 59, 15220, 1, 163, 4, 10, 59, 69, 97, 99, 101, 105, 110, 111, 115, 117, 15244, 15246, 15249, 15253, 15258, 15334, 15347, 15367, 15416, 15421, 1, 8826, 59, 1, 10931, 112, 59, 1, 10935, 117, 101, 59, 1, 8828, 4, 2, 59, 99, 15264, 15266, 1, 10927, 4, 6, 59, 97, 99, 101, 110, 115, 15280, 15282, 15290, 15299, 15303, 15329, 1, 8826, 112, 112, 114, 111, 120, 59, 1, 10935, 117, 114, 108, 121, 101, 113, 59, 1, 8828, 113, 59, 1, 10927, 4, 3, 97, 101, 115, 15311, 15319, 15324, 112, 112, 114, 111, 120, 59, 1, 10937, 113, 113, 59, 1, 10933, 105, 109, 59, 1, 8936, 105, 109, 59, 1, 8830, 109, 101, 4, 2, 59, 115, 15342, 15344, 1, 8242, 59, 1, 8473, 4, 3, 69, 97, 115, 15355, 15358, 15362, 59, 1, 10933, 112, 59, 1, 10937, 105, 109, 59, 1, 8936, 4, 3, 100, 102, 112, 15375, 15378, 15404, 59, 1, 8719, 4, 3, 97, 108, 115, 15386, 15392, 15398, 108, 97, 114, 59, 1, 9006, 105, 110, 101, 59, 1, 8978, 117, 114, 102, 59, 1, 8979, 4, 2, 59, 116, 15410, 15412, 1, 8733, 111, 59, 1, 8733, 105, 109, 59, 1, 8830, 114, 101, 108, 59, 1, 8880, 4, 2, 99, 105, 15433, 15438, 114, 59, 3, 55349, 56517, 59, 1, 968, 110, 99, 115, 112, 59, 1, 8200, 4, 6, 102, 105, 111, 112, 115, 117, 15462, 15467, 15472, 15478, 15485, 15491, 114, 59, 3, 55349, 56622, 110, 116, 59, 1, 10764, 112, 102, 59, 3, 55349, 56674, 114, 105, 109, 101, 59, 1, 8279, 99, 114, 59, 3, 55349, 56518, 4, 3, 97, 101, 111, 15499, 15520, 15534, 116, 4, 2, 101, 105, 15506, 15515, 114, 110, 105, 111, 110, 115, 59, 1, 8461, 110, 116, 59, 1, 10774, 115, 116, 4, 2, 59, 101, 15528, 15530, 1, 63, 113, 59, 1, 8799, 116, 5, 34, 1, 59, 15540, 1, 34, 4, 21, 65, 66, 72, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 114, 115, 116, 117, 120, 15586, 15609, 15615, 15620, 15796, 15855, 15893, 15931, 15977, 16001, 16039, 16183, 16204, 16222, 16228, 16285, 16312, 16318, 16363, 16408, 16416, 4, 3, 97, 114, 116, 15594, 15599, 15603, 114, 114, 59, 1, 8667, 114, 59, 1, 8658, 97, 105, 108, 59, 1, 10524, 97, 114, 114, 59, 1, 10511, 97, 114, 59, 1, 10596, 4, 7, 99, 100, 101, 110, 113, 114, 116, 15636, 15651, 15656, 15664, 15687, 15696, 15770, 4, 2, 101, 117, 15642, 15646, 59, 3, 8765, 817, 116, 101, 59, 1, 341, 105, 99, 59, 1, 8730, 109, 112, 116, 121, 118, 59, 1, 10675, 103, 4, 4, 59, 100, 101, 108, 15675, 15677, 15680, 15683, 1, 10217, 59, 1, 10642, 59, 1, 10661, 101, 59, 1, 10217, 117, 111, 5, 187, 1, 59, 15694, 1, 187, 114, 4, 11, 59, 97, 98, 99, 102, 104, 108, 112, 115, 116, 119, 15721, 15723, 15727, 15739, 15742, 15746, 15750, 15754, 15758, 15763, 15767, 1, 8594, 112, 59, 1, 10613, 4, 2, 59, 102, 15733, 15735, 1, 8677, 115, 59, 1, 10528, 59, 1, 10547, 115, 59, 1, 10526, 107, 59, 1, 8618, 112, 59, 1, 8620, 108, 59, 1, 10565, 105, 109, 59, 1, 10612, 108, 59, 1, 8611, 59, 1, 8605, 4, 2, 97, 105, 15776, 15781, 105, 108, 59, 1, 10522, 111, 4, 2, 59, 110, 15788, 15790, 1, 8758, 97, 108, 115, 59, 1, 8474, 4, 3, 97, 98, 114, 15804, 15809, 15814, 114, 114, 59, 1, 10509, 114, 107, 59, 1, 10099, 4, 2, 97, 107, 15820, 15833, 99, 4, 2, 101, 107, 15827, 15830, 59, 1, 125, 59, 1, 93, 4, 2, 101, 115, 15839, 15842, 59, 1, 10636, 108, 4, 2, 100, 117, 15849, 15852, 59, 1, 10638, 59, 1, 10640, 4, 4, 97, 101, 117, 121, 15865, 15871, 15886, 15890, 114, 111, 110, 59, 1, 345, 4, 2, 100, 105, 15877, 15882, 105, 108, 59, 1, 343, 108, 59, 1, 8969, 98, 59, 1, 125, 59, 1, 1088, 4, 4, 99, 108, 113, 115, 15903, 15907, 15914, 15927, 97, 59, 1, 10551, 100, 104, 97, 114, 59, 1, 10601, 117, 111, 4, 2, 59, 114, 15922, 15924, 1, 8221, 59, 1, 8221, 104, 59, 1, 8627, 4, 3, 97, 99, 103, 15939, 15966, 15970, 108, 4, 4, 59, 105, 112, 115, 15950, 15952, 15957, 15963, 1, 8476, 110, 101, 59, 1, 8475, 97, 114, 116, 59, 1, 8476, 59, 1, 8477, 116, 59, 1, 9645, 5, 174, 1, 59, 15975, 1, 174, 4, 3, 105, 108, 114, 15985, 15991, 15997, 115, 104, 116, 59, 1, 10621, 111, 111, 114, 59, 1, 8971, 59, 3, 55349, 56623, 4, 2, 97, 111, 16007, 16028, 114, 4, 2, 100, 117, 16014, 16017, 59, 1, 8641, 4, 2, 59, 108, 16023, 16025, 1, 8640, 59, 1, 10604, 4, 2, 59, 118, 16034, 16036, 1, 961, 59, 1, 1009, 4, 3, 103, 110, 115, 16047, 16167, 16171, 104, 116, 4, 6, 97, 104, 108, 114, 115, 116, 16063, 16081, 16103, 16130, 16143, 16155, 114, 114, 111, 119, 4, 2, 59, 116, 16073, 16075, 1, 8594, 97, 105, 108, 59, 1, 8611, 97, 114, 112, 111, 111, 110, 4, 2, 100, 117, 16093, 16099, 111, 119, 110, 59, 1, 8641, 112, 59, 1, 8640, 101, 102, 116, 4, 2, 97, 104, 16112, 16120, 114, 114, 111, 119, 115, 59, 1, 8644, 97, 114, 112, 111, 111, 110, 115, 59, 1, 8652, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59, 1, 8649, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 1, 8605, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 1, 8908, 103, 59, 1, 730, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 1, 8787, 4, 3, 97, 104, 109, 16191, 16196, 16201, 114, 114, 59, 1, 8644, 97, 114, 59, 1, 8652, 59, 1, 8207, 111, 117, 115, 116, 4, 2, 59, 97, 16214, 16216, 1, 9137, 99, 104, 101, 59, 1, 9137, 109, 105, 100, 59, 1, 10990, 4, 4, 97, 98, 112, 116, 16238, 16252, 16257, 16278, 4, 2, 110, 114, 16244, 16248, 103, 59, 1, 10221, 114, 59, 1, 8702, 114, 107, 59, 1, 10215, 4, 3, 97, 102, 108, 16265, 16269, 16273, 114, 59, 1, 10630, 59, 3, 55349, 56675, 117, 115, 59, 1, 10798, 105, 109, 101, 115, 59, 1, 10805, 4, 2, 97, 112, 16291, 16304, 114, 4, 2, 59, 103, 16298, 16300, 1, 41, 116, 59, 1, 10644, 111, 108, 105, 110, 116, 59, 1, 10770, 97, 114, 114, 59, 1, 8649, 4, 4, 97, 99, 104, 113, 16328, 16334, 16339, 16342, 113, 117, 111, 59, 1, 8250, 114, 59, 3, 55349, 56519, 59, 1, 8625, 4, 2, 98, 117, 16348, 16351, 59, 1, 93, 111, 4, 2, 59, 114, 16358, 16360, 1, 8217, 59, 1, 8217, 4, 3, 104, 105, 114, 16371, 16377, 16383, 114, 101, 101, 59, 1, 8908, 109, 101, 115, 59, 1, 8906, 105, 4, 4, 59, 101, 102, 108, 16394, 16396, 16399, 16402, 1, 9657, 59, 1, 8885, 59, 1, 9656, 116, 114, 105, 59, 1, 10702, 108, 117, 104, 97, 114, 59, 1, 10600, 59, 1, 8478, 4, 19, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 122, 16459, 16466, 16472, 16572, 16590, 16672, 16687, 16746, 16844, 16850, 16924, 16963, 16988, 17115, 17121, 17154, 17206, 17614, 17656, 99, 117, 116, 101, 59, 1, 347, 113, 117, 111, 59, 1, 8218, 4, 10, 59, 69, 97, 99, 101, 105, 110, 112, 115, 121, 16494, 16496, 16499, 16513, 16518, 16531, 16536, 16556, 16564, 16569, 1, 8827, 59, 1, 10932, 4, 2, 112, 114, 16505, 16508, 59, 1, 10936, 111, 110, 59, 1, 353, 117, 101, 59, 1, 8829, 4, 2, 59, 100, 16524, 16526, 1, 10928, 105, 108, 59, 1, 351, 114, 99, 59, 1, 349, 4, 3, 69, 97, 115, 16544, 16547, 16551, 59, 1, 10934, 112, 59, 1, 10938, 105, 109, 59, 1, 8937, 111, 108, 105, 110, 116, 59, 1, 10771, 105, 109, 59, 1, 8831, 59, 1, 1089, 111, 116, 4, 3, 59, 98, 101, 16582, 16584, 16587, 1, 8901, 59, 1, 8865, 59, 1, 10854, 4, 7, 65, 97, 99, 109, 115, 116, 120, 16606, 16611, 16634, 16642, 16646, 16652, 16668, 114, 114, 59, 1, 8664, 114, 4, 2, 104, 114, 16618, 16622, 107, 59, 1, 10533, 4, 2, 59, 111, 16628, 16630, 1, 8600, 119, 59, 1, 8600, 116, 5, 167, 1, 59, 16640, 1, 167, 105, 59, 1, 59, 119, 97, 114, 59, 1, 10537, 109, 4, 2, 105, 110, 16659, 16665, 110, 117, 115, 59, 1, 8726, 59, 1, 8726, 116, 59, 1, 10038, 114, 4, 2, 59, 111, 16679, 16682, 3, 55349, 56624, 119, 110, 59, 1, 8994, 4, 4, 97, 99, 111, 121, 16697, 16702, 16716, 16739, 114, 112, 59, 1, 9839, 4, 2, 104, 121, 16708, 16713, 99, 121, 59, 1, 1097, 59, 1, 1096, 114, 116, 4, 2, 109, 112, 16724, 16729, 105, 100, 59, 1, 8739, 97, 114, 97, 108, 108, 101, 108, 59, 1, 8741, 5, 173, 1, 59, 16744, 1, 173, 4, 2, 103, 109, 16752, 16770, 109, 97, 4, 3, 59, 102, 118, 16762, 16764, 16767, 1, 963, 59, 1, 962, 59, 1, 962, 4, 8, 59, 100, 101, 103, 108, 110, 112, 114, 16788, 16790, 16795, 16806, 16817, 16828, 16832, 16838, 1, 8764, 111, 116, 59, 1, 10858, 4, 2, 59, 113, 16801, 16803, 1, 8771, 59, 1, 8771, 4, 2, 59, 69, 16812, 16814, 1, 10910, 59, 1, 10912, 4, 2, 59, 69, 16823, 16825, 1, 10909, 59, 1, 10911, 101, 59, 1, 8774, 108, 117, 115, 59, 1, 10788, 97, 114, 114, 59, 1, 10610, 97, 114, 114, 59, 1, 8592, 4, 4, 97, 101, 105, 116, 16860, 16883, 16891, 16904, 4, 2, 108, 115, 16866, 16878, 108, 115, 101, 116, 109, 105, 110, 117, 115, 59, 1, 8726, 104, 112, 59, 1, 10803, 112, 97, 114, 115, 108, 59, 1, 10724, 4, 2, 100, 108, 16897, 16900, 59, 1, 8739, 101, 59, 1, 8995, 4, 2, 59, 101, 16910, 16912, 1, 10922, 4, 2, 59, 115, 16918, 16920, 1, 10924, 59, 3, 10924, 65024, 4, 3, 102, 108, 112, 16932, 16938, 16958, 116, 99, 121, 59, 1, 1100, 4, 2, 59, 98, 16944, 16946, 1, 47, 4, 2, 59, 97, 16952, 16954, 1, 10692, 114, 59, 1, 9023, 102, 59, 3, 55349, 56676, 97, 4, 2, 100, 114, 16970, 16985, 101, 115, 4, 2, 59, 117, 16978, 16980, 1, 9824, 105, 116, 59, 1, 9824, 59, 1, 8741, 4, 3, 99, 115, 117, 16996, 17028, 17089, 4, 2, 97, 117, 17002, 17015, 112, 4, 2, 59, 115, 17009, 17011, 1, 8851, 59, 3, 8851, 65024, 112, 4, 2, 59, 115, 17022, 17024, 1, 8852, 59, 3, 8852, 65024, 117, 4, 2, 98, 112, 17035, 17062, 4, 3, 59, 101, 115, 17043, 17045, 17048, 1, 8847, 59, 1, 8849, 101, 116, 4, 2, 59, 101, 17056, 17058, 1, 8847, 113, 59, 1, 8849, 4, 3, 59, 101, 115, 17070, 17072, 17075, 1, 8848, 59, 1, 8850, 101, 116, 4, 2, 59, 101, 17083, 17085, 1, 8848, 113, 59, 1, 8850, 4, 3, 59, 97, 102, 17097, 17099, 17112, 1, 9633, 114, 4, 2, 101, 102, 17106, 17109, 59, 1, 9633, 59, 1, 9642, 59, 1, 9642, 97, 114, 114, 59, 1, 8594, 4, 4, 99, 101, 109, 116, 17131, 17136, 17142, 17148, 114, 59, 3, 55349, 56520, 116, 109, 110, 59, 1, 8726, 105, 108, 101, 59, 1, 8995, 97, 114, 102, 59, 1, 8902, 4, 2, 97, 114, 17160, 17172, 114, 4, 2, 59, 102, 17167, 17169, 1, 9734, 59, 1, 9733, 4, 2, 97, 110, 17178, 17202, 105, 103, 104, 116, 4, 2, 101, 112, 17188, 17197, 112, 115, 105, 108, 111, 110, 59, 1, 1013, 104, 105, 59, 1, 981, 115, 59, 1, 175, 4, 5, 98, 99, 109, 110, 112, 17218, 17351, 17420, 17423, 17427, 4, 9, 59, 69, 100, 101, 109, 110, 112, 114, 115, 17238, 17240, 17243, 17248, 17261, 17267, 17279, 17285, 17291, 1, 8834, 59, 1, 10949, 111, 116, 59, 1, 10941, 4, 2, 59, 100, 17254, 17256, 1, 8838, 111, 116, 59, 1, 10947, 117, 108, 116, 59, 1, 10945, 4, 2, 69, 101, 17273, 17276, 59, 1, 10955, 59, 1, 8842, 108, 117, 115, 59, 1, 10943, 97, 114, 114, 59, 1, 10617, 4, 3, 101, 105, 117, 17299, 17335, 17339, 116, 4, 3, 59, 101, 110, 17308, 17310, 17322, 1, 8834, 113, 4, 2, 59, 113, 17317, 17319, 1, 8838, 59, 1, 10949, 101, 113, 4, 2, 59, 113, 17330, 17332, 1, 8842, 59, 1, 10955, 109, 59, 1, 10951, 4, 2, 98, 112, 17345, 17348, 59, 1, 10965, 59, 1, 10963, 99, 4, 6, 59, 97, 99, 101, 110, 115, 17366, 17368, 17376, 17385, 17389, 17415, 1, 8827, 112, 112, 114, 111, 120, 59, 1, 10936, 117, 114, 108, 121, 101, 113, 59, 1, 8829, 113, 59, 1, 10928, 4, 3, 97, 101, 115, 17397, 17405, 17410, 112, 112, 114, 111, 120, 59, 1, 10938, 113, 113, 59, 1, 10934, 105, 109, 59, 1, 8937, 105, 109, 59, 1, 8831, 59, 1, 8721, 103, 59, 1, 9834, 4, 13, 49, 50, 51, 59, 69, 100, 101, 104, 108, 109, 110, 112, 115, 17455, 17462, 17469, 17476, 17478, 17481, 17496, 17509, 17524, 17530, 17536, 17548, 17554, 5, 185, 1, 59, 17460, 1, 185, 5, 178, 1, 59, 17467, 1, 178, 5, 179, 1, 59, 17474, 1, 179, 1, 8835, 59, 1, 10950, 4, 2, 111, 115, 17487, 17491, 116, 59, 1, 10942, 117, 98, 59, 1, 10968, 4, 2, 59, 100, 17502, 17504, 1, 8839, 111, 116, 59, 1, 10948, 115, 4, 2, 111, 117, 17516, 17520, 108, 59, 1, 10185, 98, 59, 1, 10967, 97, 114, 114, 59, 1, 10619, 117, 108, 116, 59, 1, 10946, 4, 2, 69, 101, 17542, 17545, 59, 1, 10956, 59, 1, 8843, 108, 117, 115, 59, 1, 10944, 4, 3, 101, 105, 117, 17562, 17598, 17602, 116, 4, 3, 59, 101, 110, 17571, 17573, 17585, 1, 8835, 113, 4, 2, 59, 113, 17580, 17582, 1, 8839, 59, 1, 10950, 101, 113, 4, 2, 59, 113, 17593, 17595, 1, 8843, 59, 1, 10956, 109, 59, 1, 10952, 4, 2, 98, 112, 17608, 17611, 59, 1, 10964, 59, 1, 10966, 4, 3, 65, 97, 110, 17622, 17627, 17650, 114, 114, 59, 1, 8665, 114, 4, 2, 104, 114, 17634, 17638, 107, 59, 1, 10534, 4, 2, 59, 111, 17644, 17646, 1, 8601, 119, 59, 1, 8601, 119, 97, 114, 59, 1, 10538, 108, 105, 103, 5, 223, 1, 59, 17664, 1, 223, 4, 13, 97, 98, 99, 100, 101, 102, 104, 105, 111, 112, 114, 115, 119, 17694, 17709, 17714, 17737, 17742, 17749, 17754, 17860, 17905, 17957, 17964, 18090, 18122, 4, 2, 114, 117, 17700, 17706, 103, 101, 116, 59, 1, 8982, 59, 1, 964, 114, 107, 59, 1, 9140, 4, 3, 97, 101, 121, 17722, 17728, 17734, 114, 111, 110, 59, 1, 357, 100, 105, 108, 59, 1, 355, 59, 1, 1090, 111, 116, 59, 1, 8411, 108, 114, 101, 99, 59, 1, 8981, 114, 59, 3, 55349, 56625, 4, 4, 101, 105, 107, 111, 17764, 17805, 17836, 17851, 4, 2, 114, 116, 17770, 17786, 101, 4, 2, 52, 102, 17777, 17780, 59, 1, 8756, 111, 114, 101, 59, 1, 8756, 97, 4, 3, 59, 115, 118, 17795, 17797, 17802, 1, 952, 121, 109, 59, 1, 977, 59, 1, 977, 4, 2, 99, 110, 17811, 17831, 107, 4, 2, 97, 115, 17818, 17826, 112, 112, 114, 111, 120, 59, 1, 8776, 105, 109, 59, 1, 8764, 115, 112, 59, 1, 8201, 4, 2, 97, 115, 17842, 17846, 112, 59, 1, 8776, 105, 109, 59, 1, 8764, 114, 110, 5, 254, 1, 59, 17858, 1, 254, 4, 3, 108, 109, 110, 17868, 17873, 17901, 100, 101, 59, 1, 732, 101, 115, 5, 215, 3, 59, 98, 100, 17884, 17886, 17898, 1, 215, 4, 2, 59, 97, 17892, 17894, 1, 8864, 114, 59, 1, 10801, 59, 1, 10800, 116, 59, 1, 8749, 4, 3, 101, 112, 115, 17913, 17917, 17953, 97, 59, 1, 10536, 4, 4, 59, 98, 99, 102, 17927, 17929, 17934, 17939, 1, 8868, 111, 116, 59, 1, 9014, 105, 114, 59, 1, 10993, 4, 2, 59, 111, 17945, 17948, 3, 55349, 56677, 114, 107, 59, 1, 10970, 97, 59, 1, 10537, 114, 105, 109, 101, 59, 1, 8244, 4, 3, 97, 105, 112, 17972, 17977, 18082, 100, 101, 59, 1, 8482, 4, 7, 97, 100, 101, 109, 112, 115, 116, 17993, 18051, 18056, 18059, 18066, 18072, 18076, 110, 103, 108, 101, 4, 5, 59, 100, 108, 113, 114, 18009, 18011, 18017, 18032, 18035, 1, 9653, 111, 119, 110, 59, 1, 9663, 101, 102, 116, 4, 2, 59, 101, 18026, 18028, 1, 9667, 113, 59, 1, 8884, 59, 1, 8796, 105, 103, 104, 116, 4, 2, 59, 101, 18045, 18047, 1, 9657, 113, 59, 1, 8885, 111, 116, 59, 1, 9708, 59, 1, 8796, 105, 110, 117, 115, 59, 1, 10810, 108, 117, 115, 59, 1, 10809, 98, 59, 1, 10701, 105, 109, 101, 59, 1, 10811, 101, 122, 105, 117, 109, 59, 1, 9186, 4, 3, 99, 104, 116, 18098, 18111, 18116, 4, 2, 114, 121, 18104, 18108, 59, 3, 55349, 56521, 59, 1, 1094, 99, 121, 59, 1, 1115, 114, 111, 107, 59, 1, 359, 4, 2, 105, 111, 18128, 18133, 120, 116, 59, 1, 8812, 104, 101, 97, 100, 4, 2, 108, 114, 18143, 18154, 101, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8606, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8608, 4, 18, 65, 72, 97, 98, 99, 100, 102, 103, 104, 108, 109, 111, 112, 114, 115, 116, 117, 119, 18204, 18209, 18214, 18234, 18250, 18268, 18292, 18308, 18319, 18343, 18379, 18397, 18413, 18504, 18547, 18553, 18584, 18603, 114, 114, 59, 1, 8657, 97, 114, 59, 1, 10595, 4, 2, 99, 114, 18220, 18230, 117, 116, 101, 5, 250, 1, 59, 18228, 1, 250, 114, 59, 1, 8593, 114, 4, 2, 99, 101, 18241, 18245, 121, 59, 1, 1118, 118, 101, 59, 1, 365, 4, 2, 105, 121, 18256, 18265, 114, 99, 5, 251, 1, 59, 18263, 1, 251, 59, 1, 1091, 4, 3, 97, 98, 104, 18276, 18281, 18287, 114, 114, 59, 1, 8645, 108, 97, 99, 59, 1, 369, 97, 114, 59, 1, 10606, 4, 2, 105, 114, 18298, 18304, 115, 104, 116, 59, 1, 10622, 59, 3, 55349, 56626, 114, 97, 118, 101, 5, 249, 1, 59, 18317, 1, 249, 4, 2, 97, 98, 18325, 18338, 114, 4, 2, 108, 114, 18332, 18335, 59, 1, 8639, 59, 1, 8638, 108, 107, 59, 1, 9600, 4, 2, 99, 116, 18349, 18374, 4, 2, 111, 114, 18355, 18369, 114, 110, 4, 2, 59, 101, 18363, 18365, 1, 8988, 114, 59, 1, 8988, 111, 112, 59, 1, 8975, 114, 105, 59, 1, 9720, 4, 2, 97, 108, 18385, 18390, 99, 114, 59, 1, 363, 5, 168, 1, 59, 18395, 1, 168, 4, 2, 103, 112, 18403, 18408, 111, 110, 59, 1, 371, 102, 59, 3, 55349, 56678, 4, 6, 97, 100, 104, 108, 115, 117, 18427, 18434, 18445, 18470, 18475, 18494, 114, 114, 111, 119, 59, 1, 8593, 111, 119, 110, 97, 114, 114, 111, 119, 59, 1, 8597, 97, 114, 112, 111, 111, 110, 4, 2, 108, 114, 18457, 18463, 101, 102, 116, 59, 1, 8639, 105, 103, 104, 116, 59, 1, 8638, 117, 115, 59, 1, 8846, 105, 4, 3, 59, 104, 108, 18484, 18486, 18489, 1, 965, 59, 1, 978, 111, 110, 59, 1, 965, 112, 97, 114, 114, 111, 119, 115, 59, 1, 8648, 4, 3, 99, 105, 116, 18512, 18537, 18542, 4, 2, 111, 114, 18518, 18532, 114, 110, 4, 2, 59, 101, 18526, 18528, 1, 8989, 114, 59, 1, 8989, 111, 112, 59, 1, 8974, 110, 103, 59, 1, 367, 114, 105, 59, 1, 9721, 99, 114, 59, 3, 55349, 56522, 4, 3, 100, 105, 114, 18561, 18566, 18572, 111, 116, 59, 1, 8944, 108, 100, 101, 59, 1, 361, 105, 4, 2, 59, 102, 18579, 18581, 1, 9653, 59, 1, 9652, 4, 2, 97, 109, 18590, 18595, 114, 114, 59, 1, 8648, 108, 5, 252, 1, 59, 18601, 1, 252, 97, 110, 103, 108, 101, 59, 1, 10663, 4, 15, 65, 66, 68, 97, 99, 100, 101, 102, 108, 110, 111, 112, 114, 115, 122, 18643, 18648, 18661, 18667, 18847, 18851, 18857, 18904, 18909, 18915, 18931, 18937, 18943, 18949, 18996, 114, 114, 59, 1, 8661, 97, 114, 4, 2, 59, 118, 18656, 18658, 1, 10984, 59, 1, 10985, 97, 115, 104, 59, 1, 8872, 4, 2, 110, 114, 18673, 18679, 103, 114, 116, 59, 1, 10652, 4, 7, 101, 107, 110, 112, 114, 115, 116, 18695, 18704, 18711, 18720, 18742, 18754, 18810, 112, 115, 105, 108, 111, 110, 59, 1, 1013, 97, 112, 112, 97, 59, 1, 1008, 111, 116, 104, 105, 110, 103, 59, 1, 8709, 4, 3, 104, 105, 114, 18728, 18732, 18735, 105, 59, 1, 981, 59, 1, 982, 111, 112, 116, 111, 59, 1, 8733, 4, 2, 59, 104, 18748, 18750, 1, 8597, 111, 59, 1, 1009, 4, 2, 105, 117, 18760, 18766, 103, 109, 97, 59, 1, 962, 4, 2, 98, 112, 18772, 18791, 115, 101, 116, 110, 101, 113, 4, 2, 59, 113, 18784, 18787, 3, 8842, 65024, 59, 3, 10955, 65024, 115, 101, 116, 110, 101, 113, 4, 2, 59, 113, 18803, 18806, 3, 8843, 65024, 59, 3, 10956, 65024, 4, 2, 104, 114, 18816, 18822, 101, 116, 97, 59, 1, 977, 105, 97, 110, 103, 108, 101, 4, 2, 108, 114, 18834, 18840, 101, 102, 116, 59, 1, 8882, 105, 103, 104, 116, 59, 1, 8883, 121, 59, 1, 1074, 97, 115, 104, 59, 1, 8866, 4, 3, 101, 108, 114, 18865, 18884, 18890, 4, 3, 59, 98, 101, 18873, 18875, 18880, 1, 8744, 97, 114, 59, 1, 8891, 113, 59, 1, 8794, 108, 105, 112, 59, 1, 8942, 4, 2, 98, 116, 18896, 18901, 97, 114, 59, 1, 124, 59, 1, 124, 114, 59, 3, 55349, 56627, 116, 114, 105, 59, 1, 8882, 115, 117, 4, 2, 98, 112, 18923, 18927, 59, 3, 8834, 8402, 59, 3, 8835, 8402, 112, 102, 59, 3, 55349, 56679, 114, 111, 112, 59, 1, 8733, 116, 114, 105, 59, 1, 8883, 4, 2, 99, 117, 18955, 18960, 114, 59, 3, 55349, 56523, 4, 2, 98, 112, 18966, 18981, 110, 4, 2, 69, 101, 18973, 18977, 59, 3, 10955, 65024, 59, 3, 8842, 65024, 110, 4, 2, 69, 101, 18988, 18992, 59, 3, 10956, 65024, 59, 3, 8843, 65024, 105, 103, 122, 97, 103, 59, 1, 10650, 4, 7, 99, 101, 102, 111, 112, 114, 115, 19020, 19026, 19061, 19066, 19072, 19075, 19089, 105, 114, 99, 59, 1, 373, 4, 2, 100, 105, 19032, 19055, 4, 2, 98, 103, 19038, 19043, 97, 114, 59, 1, 10847, 101, 4, 2, 59, 113, 19050, 19052, 1, 8743, 59, 1, 8793, 101, 114, 112, 59, 1, 8472, 114, 59, 3, 55349, 56628, 112, 102, 59, 3, 55349, 56680, 59, 1, 8472, 4, 2, 59, 101, 19081, 19083, 1, 8768, 97, 116, 104, 59, 1, 8768, 99, 114, 59, 3, 55349, 56524, 4, 14, 99, 100, 102, 104, 105, 108, 109, 110, 111, 114, 115, 117, 118, 119, 19125, 19146, 19152, 19157, 19173, 19176, 19192, 19197, 19202, 19236, 19252, 19269, 19286, 19291, 4, 3, 97, 105, 117, 19133, 19137, 19142, 112, 59, 1, 8898, 114, 99, 59, 1, 9711, 112, 59, 1, 8899, 116, 114, 105, 59, 1, 9661, 114, 59, 3, 55349, 56629, 4, 2, 65, 97, 19163, 19168, 114, 114, 59, 1, 10234, 114, 114, 59, 1, 10231, 59, 1, 958, 4, 2, 65, 97, 19182, 19187, 114, 114, 59, 1, 10232, 114, 114, 59, 1, 10229, 97, 112, 59, 1, 10236, 105, 115, 59, 1, 8955, 4, 3, 100, 112, 116, 19210, 19215, 19230, 111, 116, 59, 1, 10752, 4, 2, 102, 108, 19221, 19225, 59, 3, 55349, 56681, 117, 115, 59, 1, 10753, 105, 109, 101, 59, 1, 10754, 4, 2, 65, 97, 19242, 19247, 114, 114, 59, 1, 10233, 114, 114, 59, 1, 10230, 4, 2, 99, 113, 19258, 19263, 114, 59, 3, 55349, 56525, 99, 117, 112, 59, 1, 10758, 4, 2, 112, 116, 19275, 19281, 108, 117, 115, 59, 1, 10756, 114, 105, 59, 1, 9651, 101, 101, 59, 1, 8897, 101, 100, 103, 101, 59, 1, 8896, 4, 8, 97, 99, 101, 102, 105, 111, 115, 117, 19316, 19335, 19349, 19357, 19362, 19367, 19373, 19379, 99, 4, 2, 117, 121, 19323, 19332, 116, 101, 5, 253, 1, 59, 19330, 1, 253, 59, 1, 1103, 4, 2, 105, 121, 19341, 19346, 114, 99, 59, 1, 375, 59, 1, 1099, 110, 5, 165, 1, 59, 19355, 1, 165, 114, 59, 3, 55349, 56630, 99, 121, 59, 1, 1111, 112, 102, 59, 3, 55349, 56682, 99, 114, 59, 3, 55349, 56526, 4, 2, 99, 109, 19385, 19389, 121, 59, 1, 1102, 108, 5, 255, 1, 59, 19395, 1, 255, 4, 10, 97, 99, 100, 101, 102, 104, 105, 111, 115, 119, 19419, 19426, 19441, 19446, 19462, 19467, 19472, 19480, 19486, 19492, 99, 117, 116, 101, 59, 1, 378, 4, 2, 97, 121, 19432, 19438, 114, 111, 110, 59, 1, 382, 59, 1, 1079, 111, 116, 59, 1, 380, 4, 2, 101, 116, 19452, 19458, 116, 114, 102, 59, 1, 8488, 97, 59, 1, 950, 114, 59, 3, 55349, 56631, 99, 121, 59, 1, 1078, 103, 114, 97, 114, 114, 59, 1, 8669, 112, 102, 59, 3, 55349, 56683, 99, 114, 59, 3, 55349, 56527, 4, 2, 106, 110, 19498, 19501, 59, 1, 8205, 106, 59, 1, 8204]);

/***/ }),

/***/ 9446:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var unicode = __webpack_require__(676);

var ERR = __webpack_require__(7983); //Aliases


var $ = unicode.CODE_POINTS; //Const

var DEFAULT_BUFFER_WATERLINE = 1 << 16; //Preprocessor
//NOTE: HTML input preprocessing
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)

var Preprocessor = /*#__PURE__*/function () {
  function Preprocessor() {
    _classCallCheck(this, Preprocessor);

    this.html = null;
    this.pos = -1;
    this.lastGapPos = -1;
    this.lastCharPos = -1;
    this.gapStack = [];
    this.skipNextNewLine = false;
    this.lastChunkWritten = false;
    this.endOfChunkHit = false;
    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
  }

  _createClass(Preprocessor, [{
    key: "_err",
    value: function _err() {// NOTE: err reporting is noop by default. Enabled by mixin.
    }
  }, {
    key: "_addGap",
    value: function _addGap() {
      this.gapStack.push(this.lastGapPos);
      this.lastGapPos = this.pos;
    }
  }, {
    key: "_processSurrogate",
    value: function _processSurrogate(cp) {
      //NOTE: try to peek a surrogate pair
      if (this.pos !== this.lastCharPos) {
        var nextCp = this.html.charCodeAt(this.pos + 1);

        if (unicode.isSurrogatePair(nextCp)) {
          //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.
          this.pos++; //NOTE: add gap that should be avoided during retreat

          this._addGap();

          return unicode.getSurrogatePairCodePoint(cp, nextCp);
        }
      } //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.
      else if (!this.lastChunkWritten) {
        this.endOfChunkHit = true;
        return $.EOF;
      } //NOTE: isolated surrogate


      this._err(ERR.surrogateInInputStream);

      return cp;
    }
  }, {
    key: "dropParsedChunk",
    value: function dropParsedChunk() {
      if (this.pos > this.bufferWaterline) {
        this.lastCharPos -= this.pos;
        this.html = this.html.substring(this.pos);
        this.pos = 0;
        this.lastGapPos = -1;
        this.gapStack = [];
      }
    }
  }, {
    key: "write",
    value: function write(chunk, isLastChunk) {
      if (this.html) {
        this.html += chunk;
      } else {
        this.html = chunk;
      }

      this.lastCharPos = this.html.length - 1;
      this.endOfChunkHit = false;
      this.lastChunkWritten = isLastChunk;
    }
  }, {
    key: "insertHtmlAtCurrentPos",
    value: function insertHtmlAtCurrentPos(chunk) {
      this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);
      this.lastCharPos = this.html.length - 1;
      this.endOfChunkHit = false;
    }
  }, {
    key: "advance",
    value: function advance() {
      this.pos++;

      if (this.pos > this.lastCharPos) {
        this.endOfChunkHit = !this.lastChunkWritten;
        return $.EOF;
      }

      var cp = this.html.charCodeAt(this.pos); //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character
      //must be ignored.

      if (this.skipNextNewLine && cp === $.LINE_FEED) {
        this.skipNextNewLine = false;

        this._addGap();

        return this.advance();
      } //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters


      if (cp === $.CARRIAGE_RETURN) {
        this.skipNextNewLine = true;
        return $.LINE_FEED;
      }

      this.skipNextNewLine = false;

      if (unicode.isSurrogate(cp)) {
        cp = this._processSurrogate(cp);
      } //OPTIMIZATION: first check if code point is in the common allowed
      //range (ASCII alphanumeric, whitespaces, big chunk of BMP)
      //before going into detailed performance cost validation.


      var isCommonValidRange = cp > 0x1f && cp < 0x7f || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || cp > 0x9f && cp < 0xfdd0;

      if (!isCommonValidRange) {
        this._checkForProblematicCharacters(cp);
      }

      return cp;
    }
  }, {
    key: "_checkForProblematicCharacters",
    value: function _checkForProblematicCharacters(cp) {
      if (unicode.isControlCodePoint(cp)) {
        this._err(ERR.controlCharacterInInputStream);
      } else if (unicode.isUndefinedCodePoint(cp)) {
        this._err(ERR.noncharacterInInputStream);
      }
    }
  }, {
    key: "retreat",
    value: function retreat() {
      if (this.pos === this.lastGapPos) {
        this.lastGapPos = this.gapStack.pop();
        this.pos--;
      }

      this.pos--;
    }
  }]);

  return Preprocessor;
}();

module.exports = Preprocessor;

/***/ }),

/***/ 4251:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _require = __webpack_require__(7682),
    DOCUMENT_MODE = _require.DOCUMENT_MODE; //Node construction


exports.createDocument = function () {
  return {
    nodeName: '#document',
    mode: DOCUMENT_MODE.NO_QUIRKS,
    childNodes: []
  };
};

exports.createDocumentFragment = function () {
  return {
    nodeName: '#document-fragment',
    childNodes: []
  };
};

exports.createElement = function (tagName, namespaceURI, attrs) {
  return {
    nodeName: tagName,
    tagName: tagName,
    attrs: attrs,
    namespaceURI: namespaceURI,
    childNodes: [],
    parentNode: null
  };
};

exports.createCommentNode = function (data) {
  return {
    nodeName: '#comment',
    data: data,
    parentNode: null
  };
};

var createTextNode = function createTextNode(value) {
  return {
    nodeName: '#text',
    value: value,
    parentNode: null
  };
}; //Tree mutation


var appendChild = exports.appendChild = function (parentNode, newNode) {
  parentNode.childNodes.push(newNode);
  newNode.parentNode = parentNode;
};

var insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {
  var insertionIdx = parentNode.childNodes.indexOf(referenceNode);
  parentNode.childNodes.splice(insertionIdx, 0, newNode);
  newNode.parentNode = parentNode;
};

exports.setTemplateContent = function (templateElement, contentElement) {
  templateElement.content = contentElement;
};

exports.getTemplateContent = function (templateElement) {
  return templateElement.content;
};

exports.setDocumentType = function (document, name, publicId, systemId) {
  var doctypeNode = null;

  for (var i = 0; i < document.childNodes.length; i++) {
    if (document.childNodes[i].nodeName === '#documentType') {
      doctypeNode = document.childNodes[i];
      break;
    }
  }

  if (doctypeNode) {
    doctypeNode.name = name;
    doctypeNode.publicId = publicId;
    doctypeNode.systemId = systemId;
  } else {
    appendChild(document, {
      nodeName: '#documentType',
      name: name,
      publicId: publicId,
      systemId: systemId
    });
  }
};

exports.setDocumentMode = function (document, mode) {
  document.mode = mode;
};

exports.getDocumentMode = function (document) {
  return document.mode;
};

exports.detachNode = function (node) {
  if (node.parentNode) {
    var idx = node.parentNode.childNodes.indexOf(node);
    node.parentNode.childNodes.splice(idx, 1);
    node.parentNode = null;
  }
};

exports.insertText = function (parentNode, text) {
  if (parentNode.childNodes.length) {
    var prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];

    if (prevNode.nodeName === '#text') {
      prevNode.value += text;
      return;
    }
  }

  appendChild(parentNode, createTextNode(text));
};

exports.insertTextBefore = function (parentNode, text, referenceNode) {
  var prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];

  if (prevNode && prevNode.nodeName === '#text') {
    prevNode.value += text;
  } else {
    insertBefore(parentNode, createTextNode(text), referenceNode);
  }
};

exports.adoptAttributes = function (recipient, attrs) {
  var recipientAttrsMap = [];

  for (var i = 0; i < recipient.attrs.length; i++) {
    recipientAttrsMap.push(recipient.attrs[i].name);
  }

  for (var j = 0; j < attrs.length; j++) {
    if (recipientAttrsMap.indexOf(attrs[j].name) === -1) {
      recipient.attrs.push(attrs[j]);
    }
  }
}; //Tree traversing


exports.getFirstChild = function (node) {
  return node.childNodes[0];
};

exports.getChildNodes = function (node) {
  return node.childNodes;
};

exports.getParentNode = function (node) {
  return node.parentNode;
};

exports.getAttrList = function (element) {
  return element.attrs;
}; //Node data


exports.getTagName = function (element) {
  return element.tagName;
};

exports.getNamespaceURI = function (element) {
  return element.namespaceURI;
};

exports.getTextNodeContent = function (textNode) {
  return textNode.value;
};

exports.getCommentNodeContent = function (commentNode) {
  return commentNode.data;
};

exports.getDocumentTypeNodeName = function (doctypeNode) {
  return doctypeNode.name;
};

exports.getDocumentTypeNodePublicId = function (doctypeNode) {
  return doctypeNode.publicId;
};

exports.getDocumentTypeNodeSystemId = function (doctypeNode) {
  return doctypeNode.systemId;
}; //Node types


exports.isTextNode = function (node) {
  return node.nodeName === '#text';
};

exports.isCommentNode = function (node) {
  return node.nodeName === '#comment';
};

exports.isDocumentTypeNode = function (node) {
  return node.nodeName === '#documentType';
};

exports.isElementNode = function (node) {
  return !!node.tagName;
}; // Source code location


exports.setNodeSourceCodeLocation = function (node, location) {
  node.sourceCodeLocation = location;
};

exports.getNodeSourceCodeLocation = function (node) {
  return node.sourceCodeLocation;
};

exports.updateNodeSourceCodeLocation = function (node, endLocation) {
  node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);
};

/***/ }),

/***/ 1886:
/***/ ((module) => {



module.exports = function mergeOptions(defaults, options) {
  options = options || Object.create(null);
  return [defaults, options].reduce(function (merged, optObj) {
    Object.keys(optObj).forEach(function (key) {
      merged[key] = optObj[key];
    });
    return merged;
  }, Object.create(null));
};

/***/ }),

/***/ 362:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var _classCallCheck = (__webpack_require__(4575)["default"]);

var _createClass = (__webpack_require__(3913)["default"]);

var Mixin = /*#__PURE__*/function () {
  function Mixin(host) {
    _classCallCheck(this, Mixin);

    var originalMethods = {};

    var overriddenMethods = this._getOverriddenMethods(this, originalMethods);

    for (var _i = 0, _Object$keys = Object.keys(overriddenMethods); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];

      if (typeof overriddenMethods[key] === 'function') {
        originalMethods[key] = host[key];
        host[key] = overriddenMethods[key];
      }
    }
  }

  _createClass(Mixin, [{
    key: "_getOverriddenMethods",
    value: function _getOverriddenMethods() {
      throw new Error('Not implemented');
    }
  }]);

  return Mixin;
}();

Mixin.install = function (host, Ctor, opts) {
  if (!host.__mixins) {
    host.__mixins = [];
  }

  for (var i = 0; i < host.__mixins.length; i++) {
    if (host.__mixins[i].constructor === Ctor) {
      return host.__mixins[i];
    }
  }

  var mixin = new Ctor(host, opts);

  host.__mixins.push(mixin);

  return mixin;
};

module.exports = Mixin;

/***/ }),

/***/ 4463:
/***/ ((module) => {

/// <reference lib="WebWorker"/>
var _self = typeof window !== 'undefined' ? window // if in browser
: typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self // if in worker
: {} // if in node js
;
/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 *
 * @license MIT <https://opensource.org/licenses/MIT>
 * @author Lea Verou <https://lea.verou.me>
 * @namespace
 * @public
 */


var Prism = function (_self) {
  // Private helper vars
  var lang = /\blang(?:uage)?-([\w-]+)\b/i;
  var uniqueId = 0; // The grammar object for plaintext

  var plainTextGrammar = {};
  var _ = {
    /**
     * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
     * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
     * additional languages or plugins yourself.
     *
     * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
     *
     * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
     * empty Prism object into the global scope before loading the Prism script like this:
     *
     * ```js
     * window.Prism = window.Prism || {};
     * Prism.manual = true;
     * // add a new <script> to load Prism's script
     * ```
     *
     * @default false
     * @type {boolean}
     * @memberof Prism
     * @public
     */
    manual: _self.Prism && _self.Prism.manual,
    disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,

    /**
     * A namespace for utility methods.
     *
     * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
     * change or disappear at any time.
     *
     * @namespace
     * @memberof Prism
     */
    util: {
      encode: function encode(tokens) {
        if (tokens instanceof Token) {
          return new Token(tokens.type, encode(tokens.content), tokens.alias);
        } else if (Array.isArray(tokens)) {
          return tokens.map(encode);
        } else {
          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
        }
      },

      /**
       * Returns the name of the type of the given value.
       *
       * @param {any} o
       * @returns {string}
       * @example
       * type(null)      === 'Null'
       * type(undefined) === 'Undefined'
       * type(123)       === 'Number'
       * type('foo')     === 'String'
       * type(true)      === 'Boolean'
       * type([1, 2])    === 'Array'
       * type({})        === 'Object'
       * type(String)    === 'Function'
       * type(/abc+/)    === 'RegExp'
       */
      type: function type(o) {
        return Object.prototype.toString.call(o).slice(8, -1);
      },

      /**
       * Returns a unique number for the given object. Later calls will still return the same number.
       *
       * @param {Object} obj
       * @returns {number}
       */
      objId: function objId(obj) {
        if (!obj['__id']) {
          Object.defineProperty(obj, '__id', {
            value: ++uniqueId
          });
        }

        return obj['__id'];
      },

      /**
       * Creates a deep clone of the given object.
       *
       * The main intended use of this function is to clone language definitions.
       *
       * @param {T} o
       * @param {Record<number, any>} [visited]
       * @returns {T}
       * @template T
       */
      clone: function deepClone(o, visited) {
        visited = visited || {};
        var clone;
        var id;

        switch (_.util.type(o)) {
          case 'Object':
            id = _.util.objId(o);

            if (visited[id]) {
              return visited[id];
            }

            clone =
            /** @type {Record<string, any>} */
            {};
            visited[id] = clone;

            for (var key in o) {
              if (o.hasOwnProperty(key)) {
                clone[key] = deepClone(o[key], visited);
              }
            }

            return (
              /** @type {any} */
              clone
            );

          case 'Array':
            id = _.util.objId(o);

            if (visited[id]) {
              return visited[id];
            }

            clone = [];
            visited[id] = clone;

            /** @type {Array} */

            /** @type {any} */
            o.forEach(function (v, i) {
              clone[i] = deepClone(v, visited);
            });
            return (
              /** @type {any} */
              clone
            );

          default:
            return o;
        }
      },

      /**
       * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
       *
       * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
       *
       * @param {Element} element
       * @returns {string}
       */
      getLanguage: function getLanguage(element) {
        while (element && !lang.test(element.className)) {
          element = element.parentElement;
        }

        if (element) {
          return (element.className.match(lang) || [, 'none'])[1].toLowerCase();
        }

        return 'none';
      },

      /**
       * Returns the script element that is currently executing.
       *
       * This does __not__ work for line script element.
       *
       * @returns {HTMLScriptElement | null}
       */
      currentScript: function currentScript() {
        if (typeof document === 'undefined') {
          return null;
        }

        if ('currentScript' in document && 1 < 2
        /* hack to trip TS' flow analysis */
        ) {
          return (
            /** @type {any} */
            document.currentScript
          );
        } // IE11 workaround
        // we'll get the src of the current script by parsing IE11's error stack trace
        // this will not work for inline scripts


        try {
          throw new Error();
        } catch (err) {
          // Get file src url from stack. Specifically works with the format of stack traces in IE.
          // A stack will look like this:
          //
          // Error
          //    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)
          //    at Global code (http://localhost/components/prism-core.js:606:1)
          var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];

          if (src) {
            var scripts = document.getElementsByTagName('script');

            for (var i in scripts) {
              if (scripts[i].src == src) {
                return scripts[i];
              }
            }
          }

          return null;
        }
      },

      /**
       * Returns whether a given class is active for `element`.
       *
       * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
       * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
       * given class is just the given class with a `no-` prefix.
       *
       * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
       * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
       * ancestors have the given class or the negated version of it, then the default activation will be returned.
       *
       * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
       * version of it, the class is considered active.
       *
       * @param {Element} element
       * @param {string} className
       * @param {boolean} [defaultActivation=false]
       * @returns {boolean}
       */
      isActive: function isActive(element, className, defaultActivation) {
        var no = 'no-' + className;

        while (element) {
          var classList = element.classList;

          if (classList.contains(className)) {
            return true;
          }

          if (classList.contains(no)) {
            return false;
          }

          element = element.parentElement;
        }

        return !!defaultActivation;
      }
    },

    /**
     * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
     *
     * @namespace
     * @memberof Prism
     * @public
     */
    languages: {
      /**
       * The grammar for plain, unformatted text.
       */
      plain: plainTextGrammar,
      plaintext: plainTextGrammar,
      text: plainTextGrammar,
      txt: plainTextGrammar,

      /**
       * Creates a deep copy of the language with the given id and appends the given tokens.
       *
       * If a token in `redef` also appears in the copied language, then the existing token in the copied language
       * will be overwritten at its original position.
       *
       * ## Best practices
       *
       * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
       * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
       * understand the language definition because, normally, the order of tokens matters in Prism grammars.
       *
       * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
       * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
       *
       * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
       * @param {Grammar} redef The new tokens to append.
       * @returns {Grammar} The new language created.
       * @public
       * @example
       * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
       *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
       *     // at its original position
       *     'comment': { ... },
       *     // CSS doesn't have a 'color' token, so this token will be appended
       *     'color': /\b(?:red|green|blue)\b/
       * });
       */
      extend: function extend(id, redef) {
        var lang = _.util.clone(_.languages[id]);

        for (var key in redef) {
          lang[key] = redef[key];
        }

        return lang;
      },

      /**
       * Inserts tokens _before_ another token in a language definition or any other grammar.
       *
       * ## Usage
       *
       * This helper method makes it easy to modify existing languages. For example, the CSS language definition
       * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
       * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
       * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
       * this:
       *
       * ```js
       * Prism.languages.markup.style = {
       *     // token
       * };
       * ```
       *
       * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
       * before existing tokens. For the CSS example above, you would use it like this:
       *
       * ```js
       * Prism.languages.insertBefore('markup', 'cdata', {
       *     'style': {
       *         // token
       *     }
       * });
       * ```
       *
       * ## Special cases
       *
       * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
       * will be ignored.
       *
       * This behavior can be used to insert tokens after `before`:
       *
       * ```js
       * Prism.languages.insertBefore('markup', 'comment', {
       *     'comment': Prism.languages.markup.comment,
       *     // tokens after 'comment'
       * });
       * ```
       *
       * ## Limitations
       *
       * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
       * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
       * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
       * deleting properties which is necessary to insert at arbitrary positions.
       *
       * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
       * Instead, it will create a new object and replace all references to the target object with the new one. This
       * can be done without temporarily deleting properties, so the iteration order is well-defined.
       *
       * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
       * you hold the target object in a variable, then the value of the variable will not change.
       *
       * ```js
       * var oldMarkup = Prism.languages.markup;
       * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
       *
       * assert(oldMarkup !== Prism.languages.markup);
       * assert(newMarkup === Prism.languages.markup);
       * ```
       *
       * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
       * object to be modified.
       * @param {string} before The key to insert before.
       * @param {Grammar} insert An object containing the key-value pairs to be inserted.
       * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
       * object to be modified.
       *
       * Defaults to `Prism.languages`.
       * @returns {Grammar} The new grammar object.
       * @public
       */
      insertBefore: function insertBefore(inside, before, insert, root) {
        root = root ||
        /** @type {any} */
        _.languages;
        var grammar = root[inside];
        /** @type {Grammar} */

        var ret = {};

        for (var token in grammar) {
          if (grammar.hasOwnProperty(token)) {
            if (token == before) {
              for (var newToken in insert) {
                if (insert.hasOwnProperty(newToken)) {
                  ret[newToken] = insert[newToken];
                }
              }
            } // Do not insert token which also occur in insert. See #1525


            if (!insert.hasOwnProperty(token)) {
              ret[token] = grammar[token];
            }
          }
        }

        var old = root[inside];
        root[inside] = ret; // Update references in other language definitions

        _.languages.DFS(_.languages, function (key, value) {
          if (value === old && key != inside) {
            this[key] = ret;
          }
        });

        return ret;
      },
      // Traverse a language definition with Depth First Search
      DFS: function DFS(o, callback, type, visited) {
        visited = visited || {};
        var objId = _.util.objId;

        for (var i in o) {
          if (o.hasOwnProperty(i)) {
            callback.call(o, i, o[i], type || i);
            var property = o[i];

            var propertyType = _.util.type(property);

            if (propertyType === 'Object' && !visited[objId(property)]) {
              visited[objId(property)] = true;
              DFS(property, callback, null, visited);
            } else if (propertyType === 'Array' && !visited[objId(property)]) {
              visited[objId(property)] = true;
              DFS(property, callback, i, visited);
            }
          }
        }
      }
    },
    plugins: {},

    /**
     * This is the most high-level function in Prism’s API.
     * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
     * each one of them.
     *
     * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
     *
     * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
     * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
     * @memberof Prism
     * @public
     */
    highlightAll: function highlightAll(async, callback) {
      _.highlightAllUnder(document, async, callback);
    },

    /**
     * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
     * {@link Prism.highlightElement} on each one of them.
     *
     * The following hooks will be run:
     * 1. `before-highlightall`
     * 2. `before-all-elements-highlight`
     * 3. All hooks of {@link Prism.highlightElement} for each element.
     *
     * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
     * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
     * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
     * @memberof Prism
     * @public
     */
    highlightAllUnder: function highlightAllUnder(container, async, callback) {
      var env = {
        callback: callback,
        container: container,
        selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
      };

      _.hooks.run('before-highlightall', env);

      env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));

      _.hooks.run('before-all-elements-highlight', env);

      for (var i = 0, element; element = env.elements[i++];) {
        _.highlightElement(element, async === true, env.callback);
      }
    },

    /**
     * Highlights the code inside a single element.
     *
     * The following hooks will be run:
     * 1. `before-sanity-check`
     * 2. `before-highlight`
     * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
     * 4. `before-insert`
     * 5. `after-highlight`
     * 6. `complete`
     *
     * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
     * the element's language.
     *
     * @param {Element} element The element containing the code.
     * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
     * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
     * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
     * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
     *
     * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
     * asynchronous highlighting to work. You can build your own bundle on the
     * [Download page](https://prismjs.com/download.html).
     * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
     * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
     * @memberof Prism
     * @public
     */
    highlightElement: function highlightElement(element, async, callback) {
      // Find language
      var language = _.util.getLanguage(element);

      var grammar = _.languages[language]; // Set language on the element, if not present

      element.className = element.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language; // Set language on the parent, for styling

      var parent = element.parentElement;

      if (parent && parent.nodeName.toLowerCase() === 'pre') {
        parent.className = parent.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;
      }

      var code = element.textContent;
      var env = {
        element: element,
        language: language,
        grammar: grammar,
        code: code
      };

      function insertHighlightedCode(highlightedCode) {
        env.highlightedCode = highlightedCode;

        _.hooks.run('before-insert', env);

        env.element.innerHTML = env.highlightedCode;

        _.hooks.run('after-highlight', env);

        _.hooks.run('complete', env);

        callback && callback.call(env.element);
      }

      _.hooks.run('before-sanity-check', env); // plugins may change/add the parent/element


      parent = env.element.parentElement;

      if (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {
        parent.setAttribute('tabindex', '0');
      }

      if (!env.code) {
        _.hooks.run('complete', env);

        callback && callback.call(env.element);
        return;
      }

      _.hooks.run('before-highlight', env);

      if (!env.grammar) {
        insertHighlightedCode(_.util.encode(env.code));
        return;
      }

      if (async && _self.Worker) {
        var worker = new Worker(_.filename);

        worker.onmessage = function (evt) {
          insertHighlightedCode(evt.data);
        };

        worker.postMessage(JSON.stringify({
          language: env.language,
          code: env.code,
          immediateClose: true
        }));
      } else {
        insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));
      }
    },

    /**
     * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
     * and the language definitions to use, and returns a string with the HTML produced.
     *
     * The following hooks will be run:
     * 1. `before-tokenize`
     * 2. `after-tokenize`
     * 3. `wrap`: On each {@link Token}.
     *
     * @param {string} text A string with the code to be highlighted.
     * @param {Grammar} grammar An object containing the tokens to use.
     *
     * Usually a language definition like `Prism.languages.markup`.
     * @param {string} language The name of the language definition passed to `grammar`.
     * @returns {string} The highlighted HTML.
     * @memberof Prism
     * @public
     * @example
     * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
     */
    highlight: function highlight(text, grammar, language) {
      var env = {
        code: text,
        grammar: grammar,
        language: language
      };

      _.hooks.run('before-tokenize', env);

      env.tokens = _.tokenize(env.code, env.grammar);

      _.hooks.run('after-tokenize', env);

      return Token.stringify(_.util.encode(env.tokens), env.language);
    },

    /**
     * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
     * and the language definitions to use, and returns an array with the tokenized code.
     *
     * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
     *
     * This method could be useful in other contexts as well, as a very crude parser.
     *
     * @param {string} text A string with the code to be highlighted.
     * @param {Grammar} grammar An object containing the tokens to use.
     *
     * Usually a language definition like `Prism.languages.markup`.
     * @returns {TokenStream} An array of strings and tokens, a token stream.
     * @memberof Prism
     * @public
     * @example
     * let code = `var foo = 0;`;
     * let tokens = Prism.tokenize(code, Prism.languages.javascript);
     * tokens.forEach(token => {
     *     if (token instanceof Prism.Token && token.type === 'number') {
     *         console.log(`Found numeric literal: ${token.content}`);
     *     }
     * });
     */
    tokenize: function tokenize(text, grammar) {
      var rest = grammar.rest;

      if (rest) {
        for (var token in rest) {
          grammar[token] = rest[token];
        }

        delete grammar.rest;
      }

      var tokenList = new LinkedList();
      addAfter(tokenList, tokenList.head, text);
      matchGrammar(text, tokenList, grammar, tokenList.head, 0);
      return toArray(tokenList);
    },

    /**
     * @namespace
     * @memberof Prism
     * @public
     */
    hooks: {
      all: {},

      /**
       * Adds the given callback to the list of callbacks for the given hook.
       *
       * The callback will be invoked when the hook it is registered for is run.
       * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
       *
       * One callback function can be registered to multiple hooks and the same hook multiple times.
       *
       * @param {string} name The name of the hook.
       * @param {HookCallback} callback The callback function which is given environment variables.
       * @public
       */
      add: function add(name, callback) {
        var hooks = _.hooks.all;
        hooks[name] = hooks[name] || [];
        hooks[name].push(callback);
      },

      /**
       * Runs a hook invoking all registered callbacks with the given environment variables.
       *
       * Callbacks will be invoked synchronously and in the order in which they were registered.
       *
       * @param {string} name The name of the hook.
       * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
       * @public
       */
      run: function run(name, env) {
        var callbacks = _.hooks.all[name];

        if (!callbacks || !callbacks.length) {
          return;
        }

        for (var i = 0, callback; callback = callbacks[i++];) {
          callback(env);
        }
      }
    },
    Token: Token
  };
  _self.Prism = _; // Typescript note:
  // The following can be used to import the Token type in JSDoc:
  //
  //   @typedef {InstanceType<import("./prism-core")["Token"]>} Token

  /**
   * Creates a new token.
   *
   * @param {string} type See {@link Token#type type}
   * @param {string | TokenStream} content See {@link Token#content content}
   * @param {string|string[]} [alias] The alias(es) of the token.
   * @param {string} [matchedStr=""] A copy of the full string this token was created from.
   * @class
   * @global
   * @public
   */

  function Token(type, content, alias, matchedStr) {
    /**
     * The type of the token.
     *
     * This is usually the key of a pattern in a {@link Grammar}.
     *
     * @type {string}
     * @see GrammarToken
     * @public
     */
    this.type = type;
    /**
     * The strings or tokens contained by this token.
     *
     * This will be a token stream if the pattern matched also defined an `inside` grammar.
     *
     * @type {string | TokenStream}
     * @public
     */

    this.content = content;
    /**
     * The alias(es) of the token.
     *
     * @type {string|string[]}
     * @see GrammarToken
     * @public
     */

    this.alias = alias; // Copy of the full string this token was created from

    this.length = (matchedStr || '').length | 0;
  }
  /**
   * A token stream is an array of strings and {@link Token Token} objects.
   *
   * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process
   * them.
   *
   * 1. No adjacent strings.
   * 2. No empty strings.
   *
   *    The only exception here is the token stream that only contains the empty string and nothing else.
   *
   * @typedef {Array<string | Token>} TokenStream
   * @global
   * @public
   */

  /**
   * Converts the given token or token stream to an HTML representation.
   *
   * The following hooks will be run:
   * 1. `wrap`: On each {@link Token}.
   *
   * @param {string | Token | TokenStream} o The token or token stream to be converted.
   * @param {string} language The name of current language.
   * @returns {string} The HTML representation of the token or token stream.
   * @memberof Token
   * @static
   */


  Token.stringify = function stringify(o, language) {
    if (typeof o == 'string') {
      return o;
    }

    if (Array.isArray(o)) {
      var s = '';
      o.forEach(function (e) {
        s += stringify(e, language);
      });
      return s;
    }

    var env = {
      type: o.type,
      content: stringify(o.content, language),
      tag: 'span',
      classes: ['token', o.type],
      attributes: {},
      language: language
    };
    var aliases = o.alias;

    if (aliases) {
      if (Array.isArray(aliases)) {
        Array.prototype.push.apply(env.classes, aliases);
      } else {
        env.classes.push(aliases);
      }
    }

    _.hooks.run('wrap', env);

    var attributes = '';

    for (var name in env.attributes) {
      attributes += ' ' + name + '="' + (env.attributes[name] || '').replace(/"/g, '&quot;') + '"';
    }

    return '<' + env.tag + ' class="' + env.classes.join(' ') + '"' + attributes + '>' + env.content + '</' + env.tag + '>';
  };
  /**
   * @param {RegExp} pattern
   * @param {number} pos
   * @param {string} text
   * @param {boolean} lookbehind
   * @returns {RegExpExecArray | null}
   */


  function matchPattern(pattern, pos, text, lookbehind) {
    pattern.lastIndex = pos;
    var match = pattern.exec(text);

    if (match && lookbehind && match[1]) {
      // change the match to remove the text matched by the Prism lookbehind group
      var lookbehindLength = match[1].length;
      match.index += lookbehindLength;
      match[0] = match[0].slice(lookbehindLength);
    }

    return match;
  }
  /**
   * @param {string} text
   * @param {LinkedList<string | Token>} tokenList
   * @param {any} grammar
   * @param {LinkedListNode<string | Token>} startNode
   * @param {number} startPos
   * @param {RematchOptions} [rematch]
   * @returns {void}
   * @private
   *
   * @typedef RematchOptions
   * @property {string} cause
   * @property {number} reach
   */


  function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
    for (var token in grammar) {
      if (!grammar.hasOwnProperty(token) || !grammar[token]) {
        continue;
      }

      var patterns = grammar[token];
      patterns = Array.isArray(patterns) ? patterns : [patterns];

      for (var j = 0; j < patterns.length; ++j) {
        if (rematch && rematch.cause == token + ',' + j) {
          return;
        }

        var patternObj = patterns[j];
        var inside = patternObj.inside;
        var lookbehind = !!patternObj.lookbehind;
        var greedy = !!patternObj.greedy;
        var alias = patternObj.alias;

        if (greedy && !patternObj.pattern.global) {
          // Without the global flag, lastIndex won't work
          var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
          patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');
        }
        /** @type {RegExp} */


        var pattern = patternObj.pattern || patternObj;

        for ( // iterate the token list and keep track of the current token/string position
        var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {
          if (rematch && pos >= rematch.reach) {
            break;
          }

          var str = currentNode.value;

          if (tokenList.length > text.length) {
            // Something went terribly wrong, ABORT, ABORT!
            return;
          }

          if (str instanceof Token) {
            continue;
          }

          var removeCount = 1; // this is the to parameter of removeBetween

          var match;

          if (greedy) {
            match = matchPattern(pattern, pos, text, lookbehind);

            if (!match) {
              break;
            }

            var from = match.index;
            var to = match.index + match[0].length;
            var p = pos; // find the node that contains the match

            p += currentNode.value.length;

            while (from >= p) {
              currentNode = currentNode.next;
              p += currentNode.value.length;
            } // adjust pos (and p)


            p -= currentNode.value.length;
            pos = p; // the current node is a Token, then the match starts inside another Token, which is invalid

            if (currentNode.value instanceof Token) {
              continue;
            } // find the last node which is affected by this match


            for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string'); k = k.next) {
              removeCount++;
              p += k.value.length;
            }

            removeCount--; // replace with the new match

            str = text.slice(pos, p);
            match.index -= pos;
          } else {
            match = matchPattern(pattern, 0, str, lookbehind);

            if (!match) {
              continue;
            }
          } // eslint-disable-next-line no-redeclare


          var from = match.index;
          var matchStr = match[0];
          var before = str.slice(0, from);
          var after = str.slice(from + matchStr.length);
          var reach = pos + str.length;

          if (rematch && reach > rematch.reach) {
            rematch.reach = reach;
          }

          var removeFrom = currentNode.prev;

          if (before) {
            removeFrom = addAfter(tokenList, removeFrom, before);
            pos += before.length;
          }

          removeRange(tokenList, removeFrom, removeCount);
          var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);
          currentNode = addAfter(tokenList, removeFrom, wrapped);

          if (after) {
            addAfter(tokenList, currentNode, after);
          }

          if (removeCount > 1) {
            // at least one Token object was removed, so we have to do some rematching
            // this can only happen if the current pattern is greedy

            /** @type {RematchOptions} */
            var nestedRematch = {
              cause: token + ',' + j,
              reach: reach
            };
            matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch); // the reach might have been extended because of the rematching

            if (rematch && nestedRematch.reach > rematch.reach) {
              rematch.reach = nestedRematch.reach;
            }
          }
        }
      }
    }
  }
  /**
   * @typedef LinkedListNode
   * @property {T} value
   * @property {LinkedListNode<T> | null} prev The previous node.
   * @property {LinkedListNode<T> | null} next The next node.
   * @template T
   * @private
   */

  /**
   * @template T
   * @private
   */


  function LinkedList() {
    /** @type {LinkedListNode<T>} */
    var head = {
      value: null,
      prev: null,
      next: null
    };
    /** @type {LinkedListNode<T>} */

    var tail = {
      value: null,
      prev: head,
      next: null
    };
    head.next = tail;
    /** @type {LinkedListNode<T>} */

    this.head = head;
    /** @type {LinkedListNode<T>} */

    this.tail = tail;
    this.length = 0;
  }
  /**
   * Adds a new node with the given value to the list.
   *
   * @param {LinkedList<T>} list
   * @param {LinkedListNode<T>} node
   * @param {T} value
   * @returns {LinkedListNode<T>} The added node.
   * @template T
   */


  function addAfter(list, node, value) {
    // assumes that node != list.tail && values.length >= 0
    var next = node.next;
    var newNode = {
      value: value,
      prev: node,
      next: next
    };
    node.next = newNode;
    next.prev = newNode;
    list.length++;
    return newNode;
  }
  /**
   * Removes `count` nodes after the given node. The given node will not be removed.
   *
   * @param {LinkedList<T>} list
   * @param {LinkedListNode<T>} node
   * @param {number} count
   * @template T
   */


  function removeRange(list, node, count) {
    var next = node.next;

    for (var i = 0; i < count && next !== list.tail; i++) {
      next = next.next;
    }

    node.next = next;
    next.prev = node;
    list.length -= i;
  }
  /**
   * @param {LinkedList<T>} list
   * @returns {T[]}
   * @template T
   */


  function toArray(list) {
    var array = [];
    var node = list.head.next;

    while (node !== list.tail) {
      array.push(node.value);
      node = node.next;
    }

    return array;
  }

  if (!_self.document) {
    if (!_self.addEventListener) {
      // in Node.js
      return _;
    }

    if (!_.disableWorkerMessageHandler) {
      // In worker
      _self.addEventListener('message', function (evt) {
        var message = JSON.parse(evt.data);
        var lang = message.language;
        var code = message.code;
        var immediateClose = message.immediateClose;

        _self.postMessage(_.highlight(code, _.languages[lang], lang));

        if (immediateClose) {
          _self.close();
        }
      }, false);
    }

    return _;
  } // Get current script and highlight


  var script = _.util.currentScript();

  if (script) {
    _.filename = script.src;

    if (script.hasAttribute('data-manual')) {
      _.manual = true;
    }
  }

  function highlightAutomaticallyCallback() {
    if (!_.manual) {
      _.highlightAll();
    }
  }

  if (!_.manual) {
    // If the document state is "loading", then we'll use DOMContentLoaded.
    // If the document state is "interactive" and the prism.js script is deferred, then we'll also use the
    // DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they
    // might take longer one animation frame to execute which can create a race condition where only some plugins have
    // been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.
    // See https://github.com/PrismJS/prism/issues/2102
    var readyState = document.readyState;

    if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {
      document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);
    } else {
      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(highlightAutomaticallyCallback);
      } else {
        window.setTimeout(highlightAutomaticallyCallback, 16);
      }
    }
  }

  return _;
}(_self);

if ( true && module.exports) {
  module.exports = Prism;
} // hack for components to work correctly in node.js


if (typeof global !== 'undefined') {
  global.Prism = Prism;
} // some additional documentation/types

/**
 * The expansion of a simple `RegExp` literal to support additional properties.
 *
 * @typedef GrammarToken
 * @property {RegExp} pattern The regular expression of the token.
 * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)
 * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.
 * @property {boolean} [greedy=false] Whether the token is greedy.
 * @property {string|string[]} [alias] An optional alias or list of aliases.
 * @property {Grammar} [inside] The nested grammar of this token.
 *
 * The `inside` grammar will be used to tokenize the text value of each token of this kind.
 *
 * This can be used to make nested and even recursive language definitions.
 *
 * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into
 * each another.
 * @global
 * @public
 */

/**
 * @typedef Grammar
 * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}
 * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.
 * @global
 * @public
 */

/**
 * A function which will invoked after an element was successfully highlighted.
 *
 * @callback HighlightCallback
 * @param {Element} element The element successfully highlighted.
 * @returns {void}
 * @global
 * @public
 */

/**
 * @callback HookCallback
 * @param {Object<string, any>} env The environment variables of the hook.
 * @returns {void}
 * @global
 * @public
 */

/***/ }),

/***/ 2334:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var normalize = __webpack_require__(1273);

var DefinedInfo = __webpack_require__(5592);

var Info = __webpack_require__(7766);

var data = 'data';
module.exports = find;
var valid = /^data[-\w.:]+$/i;
var dash = /-[a-z]/g;
var cap = /[A-Z]/g;

function find(schema, value) {
  var normal = normalize(value);
  var prop = value;
  var Type = Info;

  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }

  if (normal.length > 4 && normal.slice(0, 4) === data && valid.test(value)) {
    // Attribute or property.
    if (value.charAt(4) === '-') {
      prop = datasetToProperty(value);
    } else {
      value = datasetToAttribute(value);
    }

    Type = DefinedInfo;
  }

  return new Type(prop, value);
}

function datasetToProperty(attribute) {
  var value = attribute.slice(5).replace(dash, camelcase);
  return data + value.charAt(0).toUpperCase() + value.slice(1);
}

function datasetToAttribute(property) {
  var value = property.slice(4);

  if (dash.test(value)) {
    return property;
  }

  value = value.replace(cap, kebab);

  if (value.charAt(0) !== '-') {
    value = '-' + value;
  }

  return data + value;
}

function kebab($0) {
  return '-' + $0.toLowerCase();
}

function camelcase($0) {
  return $0.charAt(1).toUpperCase();
}

/***/ }),

/***/ 5073:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var merge = __webpack_require__(1106);

var xlink = __webpack_require__(2770);

var xml = __webpack_require__(3916);

var xmlns = __webpack_require__(3642);

var aria = __webpack_require__(7426);

var html = __webpack_require__(7960);

module.exports = merge([xml, xlink, xmlns, aria, html]);

/***/ }),

/***/ 7426:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var types = __webpack_require__(2379);

var create = __webpack_require__(4334);

var booleanish = types.booleanish;
var number = types.number;
var spaceSeparated = types.spaceSeparated;
module.exports = create({
  transform: ariaTransform,
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: booleanish,
    ariaAutoComplete: null,
    ariaBusy: booleanish,
    ariaChecked: booleanish,
    ariaColCount: number,
    ariaColIndex: number,
    ariaColSpan: number,
    ariaControls: spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: spaceSeparated,
    ariaDetails: null,
    ariaDisabled: booleanish,
    ariaDropEffect: spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: booleanish,
    ariaFlowTo: spaceSeparated,
    ariaGrabbed: booleanish,
    ariaHasPopup: null,
    ariaHidden: booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: spaceSeparated,
    ariaLevel: number,
    ariaLive: null,
    ariaModal: booleanish,
    ariaMultiLine: booleanish,
    ariaMultiSelectable: booleanish,
    ariaOrientation: null,
    ariaOwns: spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: number,
    ariaPressed: booleanish,
    ariaReadOnly: booleanish,
    ariaRelevant: null,
    ariaRequired: booleanish,
    ariaRoleDescription: spaceSeparated,
    ariaRowCount: number,
    ariaRowIndex: number,
    ariaRowSpan: number,
    ariaSelected: booleanish,
    ariaSetSize: number,
    ariaSort: null,
    ariaValueMax: number,
    ariaValueMin: number,
    ariaValueNow: number,
    ariaValueText: null,
    role: null
  }
});

function ariaTransform(_, prop) {
  return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();
}

/***/ }),

/***/ 7960:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var types = __webpack_require__(2379);

var create = __webpack_require__(4334);

var caseInsensitiveTransform = __webpack_require__(3326);

var _boolean = types["boolean"];
var overloadedBoolean = types.overloadedBoolean;
var booleanish = types.booleanish;
var number = types.number;
var spaceSeparated = types.spaceSeparated;
var commaSeparated = types.commaSeparated;
module.exports = create({
  space: 'html',
  attributes: {
    acceptcharset: 'accept-charset',
    classname: 'class',
    htmlfor: 'for',
    httpequiv: 'http-equiv'
  },
  transform: caseInsensitiveTransform,
  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: commaSeparated,
    acceptCharset: spaceSeparated,
    accessKey: spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: _boolean,
    allowPaymentRequest: _boolean,
    allowUserMedia: _boolean,
    alt: null,
    as: null,
    async: _boolean,
    autoCapitalize: null,
    autoComplete: spaceSeparated,
    autoFocus: _boolean,
    autoPlay: _boolean,
    capture: _boolean,
    charSet: null,
    checked: _boolean,
    cite: null,
    className: spaceSeparated,
    cols: number,
    colSpan: null,
    content: null,
    contentEditable: booleanish,
    controls: _boolean,
    controlsList: spaceSeparated,
    coords: number | commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    "default": _boolean,
    defer: _boolean,
    dir: null,
    dirName: null,
    disabled: _boolean,
    download: overloadedBoolean,
    draggable: booleanish,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: _boolean,
    formTarget: null,
    headers: spaceSeparated,
    height: number,
    hidden: _boolean,
    high: number,
    href: null,
    hrefLang: null,
    htmlFor: spaceSeparated,
    httpEquiv: spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: commaSeparated,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: _boolean,
    itemId: null,
    itemProp: spaceSeparated,
    itemRef: spaceSeparated,
    itemScope: _boolean,
    itemType: spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: _boolean,
    low: number,
    manifest: null,
    max: null,
    maxLength: number,
    media: null,
    method: null,
    min: null,
    minLength: number,
    multiple: _boolean,
    muted: _boolean,
    name: null,
    nonce: null,
    noModule: _boolean,
    noValidate: _boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextMenu: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: _boolean,
    optimum: number,
    pattern: null,
    ping: spaceSeparated,
    placeholder: null,
    playsInline: _boolean,
    poster: null,
    preload: null,
    readOnly: _boolean,
    referrerPolicy: null,
    rel: spaceSeparated,
    required: _boolean,
    reversed: _boolean,
    rows: number,
    rowSpan: number,
    sandbox: spaceSeparated,
    scope: null,
    scoped: _boolean,
    seamless: _boolean,
    selected: _boolean,
    shape: null,
    size: number,
    sizes: null,
    slot: null,
    span: number,
    spellCheck: booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: commaSeparated,
    start: number,
    step: null,
    style: null,
    tabIndex: number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: _boolean,
    useMap: null,
    value: booleanish,
    width: number,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    "char": null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: _boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: _boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: number,
    // `<img>` and `<object>`
    leftMargin: number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: number,
    // `<body>`
    marginWidth: number,
    // `<body>`
    noResize: _boolean,
    // `<frame>`
    noHref: _boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: _boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: _boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: number,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: _boolean,
    disableRemotePlayback: _boolean,
    prefix: null,
    property: null,
    results: number,
    security: null,
    unselectable: null
  }
});

/***/ }),

/***/ 775:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var types = __webpack_require__(2379);

var create = __webpack_require__(4334);

var caseSensitiveTransform = __webpack_require__(8700);

var _boolean = types["boolean"];
var number = types.number;
var spaceSeparated = types.spaceSeparated;
var commaSeparated = types.commaSeparated;
var commaOrSpaceSeparated = types.commaOrSpaceSeparated;
module.exports = create({
  space: 'svg',
  attributes: {
    accentHeight: 'accent-height',
    alignmentBaseline: 'alignment-baseline',
    arabicForm: 'arabic-form',
    baselineShift: 'baseline-shift',
    capHeight: 'cap-height',
    className: 'class',
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    crossOrigin: 'crossorigin',
    dataType: 'datatype',
    dominantBaseline: 'dominant-baseline',
    enableBackground: 'enable-background',
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    hrefLang: 'hreflang',
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    horizOriginY: 'horiz-origin-y',
    imageRendering: 'image-rendering',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    navDown: 'nav-down',
    navDownLeft: 'nav-down-left',
    navDownRight: 'nav-down-right',
    navLeft: 'nav-left',
    navNext: 'nav-next',
    navPrev: 'nav-prev',
    navRight: 'nav-right',
    navUp: 'nav-up',
    navUpLeft: 'nav-up-left',
    navUpRight: 'nav-up-right',
    onAbort: 'onabort',
    onActivate: 'onactivate',
    onAfterPrint: 'onafterprint',
    onBeforePrint: 'onbeforeprint',
    onBegin: 'onbegin',
    onCancel: 'oncancel',
    onCanPlay: 'oncanplay',
    onCanPlayThrough: 'oncanplaythrough',
    onChange: 'onchange',
    onClick: 'onclick',
    onClose: 'onclose',
    onCopy: 'oncopy',
    onCueChange: 'oncuechange',
    onCut: 'oncut',
    onDblClick: 'ondblclick',
    onDrag: 'ondrag',
    onDragEnd: 'ondragend',
    onDragEnter: 'ondragenter',
    onDragExit: 'ondragexit',
    onDragLeave: 'ondragleave',
    onDragOver: 'ondragover',
    onDragStart: 'ondragstart',
    onDrop: 'ondrop',
    onDurationChange: 'ondurationchange',
    onEmptied: 'onemptied',
    onEnd: 'onend',
    onEnded: 'onended',
    onError: 'onerror',
    onFocus: 'onfocus',
    onFocusIn: 'onfocusin',
    onFocusOut: 'onfocusout',
    onHashChange: 'onhashchange',
    onInput: 'oninput',
    onInvalid: 'oninvalid',
    onKeyDown: 'onkeydown',
    onKeyPress: 'onkeypress',
    onKeyUp: 'onkeyup',
    onLoad: 'onload',
    onLoadedData: 'onloadeddata',
    onLoadedMetadata: 'onloadedmetadata',
    onLoadStart: 'onloadstart',
    onMessage: 'onmessage',
    onMouseDown: 'onmousedown',
    onMouseEnter: 'onmouseenter',
    onMouseLeave: 'onmouseleave',
    onMouseMove: 'onmousemove',
    onMouseOut: 'onmouseout',
    onMouseOver: 'onmouseover',
    onMouseUp: 'onmouseup',
    onMouseWheel: 'onmousewheel',
    onOffline: 'onoffline',
    onOnline: 'ononline',
    onPageHide: 'onpagehide',
    onPageShow: 'onpageshow',
    onPaste: 'onpaste',
    onPause: 'onpause',
    onPlay: 'onplay',
    onPlaying: 'onplaying',
    onPopState: 'onpopstate',
    onProgress: 'onprogress',
    onRateChange: 'onratechange',
    onRepeat: 'onrepeat',
    onReset: 'onreset',
    onResize: 'onresize',
    onScroll: 'onscroll',
    onSeeked: 'onseeked',
    onSeeking: 'onseeking',
    onSelect: 'onselect',
    onShow: 'onshow',
    onStalled: 'onstalled',
    onStorage: 'onstorage',
    onSubmit: 'onsubmit',
    onSuspend: 'onsuspend',
    onTimeUpdate: 'ontimeupdate',
    onToggle: 'ontoggle',
    onUnload: 'onunload',
    onVolumeChange: 'onvolumechange',
    onWaiting: 'onwaiting',
    onZoom: 'onzoom',
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pointerEvents: 'pointer-events',
    referrerPolicy: 'referrerpolicy',
    renderingIntent: 'rendering-intent',
    shapeRendering: 'shape-rendering',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    strokeDashArray: 'stroke-dasharray',
    strokeDashOffset: 'stroke-dashoffset',
    strokeLineCap: 'stroke-linecap',
    strokeLineJoin: 'stroke-linejoin',
    strokeMiterLimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    tabIndex: 'tabindex',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    typeOf: 'typeof',
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    vectorEffect: 'vector-effect',
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    xHeight: 'x-height',
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: 'playbackorder',
    timelineBegin: 'timelinebegin'
  },
  transform: caseSensitiveTransform,
  properties: {
    about: commaOrSpaceSeparated,
    accentHeight: number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: number,
    amplitude: number,
    arabicForm: null,
    ascent: number,
    attributeName: null,
    attributeType: null,
    azimuth: number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: number,
    by: null,
    calcMode: null,
    capHeight: number,
    className: spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: number,
    diffuseConstant: number,
    direction: null,
    display: null,
    dur: null,
    divisor: number,
    dominantBaseline: null,
    download: _boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: commaSeparated,
    g2: commaSeparated,
    glyphName: commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: number,
    horizOriginX: number,
    horizOriginY: number,
    id: null,
    ideographic: number,
    imageRendering: null,
    initialVisibility: null,
    "in": null,
    in2: null,
    intercept: number,
    k: number,
    k1: number,
    k2: number,
    k3: number,
    k4: number,
    kernelMatrix: commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: number,
    overlineThickness: number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: number,
    pointsAtY: number,
    pointsAtZ: number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: commaOrSpaceSeparated,
    rev: commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: commaOrSpaceSeparated,
    requiredFeatures: commaOrSpaceSeparated,
    requiredFonts: commaOrSpaceSeparated,
    requiredFormats: commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: number,
    specularExponent: number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: number,
    strikethroughThickness: number,
    string: null,
    stroke: null,
    strokeDashArray: commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: number,
    strokeOpacity: number,
    strokeWidth: null,
    style: null,
    surfaceScale: number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: commaOrSpaceSeparated,
    tabIndex: number,
    tableValues: null,
    target: null,
    targetX: number,
    targetY: number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: commaOrSpaceSeparated,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: number,
    underlineThickness: number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: number,
    values: null,
    vAlphabetic: number,
    vMathematical: number,
    vectorEffect: null,
    vHanging: number,
    vIdeographic: number,
    version: null,
    vertAdvY: number,
    vertOriginX: number,
    vertOriginY: number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});

/***/ }),

/***/ 3326:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var caseSensitiveTransform = __webpack_require__(8700);

module.exports = caseInsensitiveTransform;

function caseInsensitiveTransform(attributes, property) {
  return caseSensitiveTransform(attributes, property.toLowerCase());
}

/***/ }),

/***/ 8700:
/***/ ((module) => {



module.exports = caseSensitiveTransform;

function caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}

/***/ }),

/***/ 4334:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var normalize = __webpack_require__(1273);

var Schema = __webpack_require__(8796);

var DefinedInfo = __webpack_require__(5592);

module.exports = create;

function create(definition) {
  var space = definition.space;
  var mustUseProperty = definition.mustUseProperty || [];
  var attributes = definition.attributes || {};
  var props = definition.properties;
  var transform = definition.transform;
  var property = {};
  var normal = {};
  var prop;
  var info;

  for (prop in props) {
    info = new DefinedInfo(prop, transform(attributes, prop), props[prop], space);

    if (mustUseProperty.indexOf(prop) !== -1) {
      info.mustUseProperty = true;
    }

    property[prop] = info;
    normal[normalize(prop)] = prop;
    normal[normalize(info.attribute)] = prop;
  }

  return new Schema(property, normal, space);
}

/***/ }),

/***/ 5592:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var Info = __webpack_require__(7766);

var types = __webpack_require__(2379);

module.exports = DefinedInfo;
DefinedInfo.prototype = new Info();
DefinedInfo.prototype.defined = true;
var checks = ['boolean', 'booleanish', 'overloadedBoolean', 'number', 'commaSeparated', 'spaceSeparated', 'commaOrSpaceSeparated'];
var checksLength = checks.length;

function DefinedInfo(property, attribute, mask, space) {
  var index = -1;
  var check;
  mark(this, 'space', space);
  Info.call(this, property, attribute);

  while (++index < checksLength) {
    check = checks[index];
    mark(this, check, (mask & types[check]) === types[check]);
  }
}

function mark(values, key, value) {
  if (value) {
    values[key] = value;
  }
}

/***/ }),

/***/ 7766:
/***/ ((module) => {



module.exports = Info;
var proto = Info.prototype;
proto.space = null;
proto.attribute = null;
proto.property = null;
proto["boolean"] = false;
proto.booleanish = false;
proto.overloadedBoolean = false;
proto.number = false;
proto.commaSeparated = false;
proto.spaceSeparated = false;
proto.commaOrSpaceSeparated = false;
proto.mustUseProperty = false;
proto.defined = false;

function Info(property, attribute) {
  this.property = property;
  this.attribute = attribute;
}

/***/ }),

/***/ 1106:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var xtend = __webpack_require__(3450);

var Schema = __webpack_require__(8796);

module.exports = merge;

function merge(definitions) {
  var length = definitions.length;
  var property = [];
  var normal = [];
  var index = -1;
  var info;
  var space;

  while (++index < length) {
    info = definitions[index];
    property.push(info.property);
    normal.push(info.normal);
    space = info.space;
  }

  return new Schema(xtend.apply(null, property), xtend.apply(null, normal), space);
}

/***/ }),

/***/ 8796:
/***/ ((module) => {



module.exports = Schema;
var proto = Schema.prototype;
proto.space = null;
proto.normal = {};
proto.property = {};

function Schema(property, normal, space) {
  this.property = property;
  this.normal = normal;

  if (space) {
    this.space = space;
  }
}

/***/ }),

/***/ 2379:
/***/ ((__unused_webpack_module, exports) => {



var powers = 0;
exports.boolean = increment();
exports.booleanish = increment();
exports.overloadedBoolean = increment();
exports.number = increment();
exports.spaceSeparated = increment();
exports.commaSeparated = increment();
exports.commaOrSpaceSeparated = increment();

function increment() {
  return Math.pow(2, ++powers);
}

/***/ }),

/***/ 2770:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var create = __webpack_require__(4334);

module.exports = create({
  space: 'xlink',
  transform: xlinkTransform,
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});

function xlinkTransform(_, prop) {
  return 'xlink:' + prop.slice(5).toLowerCase();
}

/***/ }),

/***/ 3916:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var create = __webpack_require__(4334);

module.exports = create({
  space: 'xml',
  transform: xmlTransform,
  properties: {
    xmlLang: null,
    xmlBase: null,
    xmlSpace: null
  }
});

function xmlTransform(_, prop) {
  return 'xml:' + prop.slice(3).toLowerCase();
}

/***/ }),

/***/ 3642:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var create = __webpack_require__(4334);

var caseInsensitiveTransform = __webpack_require__(3326);

module.exports = create({
  space: 'xmlns',
  attributes: {
    xmlnsxlink: 'xmlns:xlink'
  },
  transform: caseInsensitiveTransform,
  properties: {
    xmlns: null,
    xmlnsXLink: null
  }
});

/***/ }),

/***/ 1273:
/***/ ((module) => {



module.exports = normalize;

function normalize(value) {
  return value.toLowerCase();
}

/***/ }),

/***/ 9484:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var merge = __webpack_require__(1106);

var xlink = __webpack_require__(2770);

var xml = __webpack_require__(3916);

var xmlns = __webpack_require__(3642);

var aria = __webpack_require__(7426);

var svg = __webpack_require__(775);

module.exports = merge([xml, xlink, xmlns, aria, svg]);

/***/ }),

/***/ 1263:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/* global window, self */
// istanbul ignore next - Don't allow Prism to run on page load in browser or
// to start messaging from workers.

var ctx = typeof globalThis === 'object' ? globalThis : typeof self === 'object' ? self : typeof window === 'object' ? window : typeof global === 'object' ? global : {};
var restore = capture();
ctx.Prism = {
  manual: true,
  disableWorkerMessageHandler: true
}; // Load all stuff in `prism.js` itself, except for `prism-file-highlight.js`.
// The wrapped non-leaky grammars are loaded instead of Prism’s originals.

var h = __webpack_require__(2834);

var decode = __webpack_require__(3832);

var Prism = __webpack_require__(4463);

var markup = __webpack_require__(4876);

var css = __webpack_require__(8696);

var clike = __webpack_require__(3169);

var js = __webpack_require__(4872);

restore();
var own = {}.hasOwnProperty; // Inherit.

function Refractor() {}

Refractor.prototype = Prism; // Construct.

var refract = new Refractor(); // Expose.

module.exports = refract; // Create.

refract.highlight = highlight;
refract.register = register;
refract.alias = alias;
refract.registered = registered;
refract.listLanguages = listLanguages; // Register bundled grammars.

register(markup);
register(css);
register(clike);
register(js);
refract.util.encode = encode;
refract.Token.stringify = stringify;

function register(grammar) {
  if (typeof grammar !== 'function' || !grammar.displayName) {
    throw new Error('Expected `function` for `grammar`, got `' + grammar + '`');
  } // Do not duplicate registrations.


  if (refract.languages[grammar.displayName] === undefined) {
    grammar(refract);
  }
}

function alias(name, alias) {
  var languages = refract.languages;
  var map = name;
  var key;
  var list;
  var length;
  var index;

  if (alias) {
    map = {};
    map[name] = alias;
  }

  for (key in map) {
    list = map[key];
    list = typeof list === 'string' ? [list] : list;
    length = list.length;
    index = -1;

    while (++index < length) {
      languages[list[index]] = languages[key];
    }
  }
}

function highlight(value, name) {
  var sup = Prism.highlight;
  var grammar;

  if (typeof value !== 'string') {
    throw new Error('Expected `string` for `value`, got `' + value + '`');
  } // `name` is a grammar object.


  if (refract.util.type(name) === 'Object') {
    grammar = name;
    name = null;
  } else {
    if (typeof name !== 'string') {
      throw new Error('Expected `string` for `name`, got `' + name + '`');
    }

    if (own.call(refract.languages, name)) {
      grammar = refract.languages[name];
    } else {
      throw new Error('Unknown language: `' + name + '` is not registered');
    }
  }

  return sup.call(this, value, grammar, name);
}

function registered(language) {
  if (typeof language !== 'string') {
    throw new Error('Expected `string` for `language`, got `' + language + '`');
  }

  return own.call(refract.languages, language);
}

function listLanguages() {
  var languages = refract.languages;
  var list = [];
  var language;

  for (language in languages) {
    if (own.call(languages, language) && typeof languages[language] === 'object') {
      list.push(language);
    }
  }

  return list;
}

function stringify(value, language, parent) {
  var env;

  if (typeof value === 'string') {
    return {
      type: 'text',
      value: value
    };
  }

  if (refract.util.type(value) === 'Array') {
    return stringifyAll(value, language);
  }

  env = {
    type: value.type,
    content: refract.Token.stringify(value.content, language, parent),
    tag: 'span',
    classes: ['token', value.type],
    attributes: {},
    language: language,
    parent: parent
  };

  if (value.alias) {
    env.classes = env.classes.concat(value.alias);
  }

  refract.hooks.run('wrap', env);
  return h(env.tag + '.' + env.classes.join('.'), attributes(env.attributes), env.content);
}

function stringifyAll(values, language) {
  var result = [];
  var length = values.length;
  var index = -1;
  var value;

  while (++index < length) {
    value = values[index];

    if (value !== '' && value !== null && value !== undefined) {
      result.push(value);
    }
  }

  index = -1;
  length = result.length;

  while (++index < length) {
    value = result[index];
    result[index] = refract.Token.stringify(value, language, result);
  }

  return result;
}

function encode(tokens) {
  return tokens;
}

function attributes(attrs) {
  var key;

  for (key in attrs) {
    attrs[key] = decode(attrs[key]);
  }

  return attrs;
}

function capture() {
  var defined = ('Prism' in ctx);
  /* istanbul ignore next */

  var current = defined ? ctx.Prism : undefined;
  return restore;

  function restore() {
    /* istanbul ignore else - Clean leaks after Prism. */
    if (defined) {
      ctx.Prism = current;
    } else {
      delete ctx.Prism;
    }

    defined = undefined;
    current = undefined;
  }
}

/***/ }),

/***/ 4338:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractor = __webpack_require__(1263);

module.exports = refractor;
refractor.register(__webpack_require__(4723));
refractor.register(__webpack_require__(7845));
refractor.register(__webpack_require__(294));
refractor.register(__webpack_require__(3748));
refractor.register(__webpack_require__(209));
refractor.register(__webpack_require__(1140));
refractor.register(__webpack_require__(5691));
refractor.register(__webpack_require__(8278));
refractor.register(__webpack_require__(9341));
refractor.register(__webpack_require__(8783));
refractor.register(__webpack_require__(2977));
refractor.register(__webpack_require__(1366));
refractor.register(__webpack_require__(1153));
refractor.register(__webpack_require__(3344));
refractor.register(__webpack_require__(7954));
refractor.register(__webpack_require__(8100));
refractor.register(__webpack_require__(2889));
refractor.register(__webpack_require__(627));
refractor.register(__webpack_require__(6046));
refractor.register(__webpack_require__(4399));
refractor.register(__webpack_require__(859));
refractor.register(__webpack_require__(4491));
refractor.register(__webpack_require__(7573));
refractor.register(__webpack_require__(9047));
refractor.register(__webpack_require__(6406));
refractor.register(__webpack_require__(4566));
refractor.register(__webpack_require__(5656));
refractor.register(__webpack_require__(1054));
refractor.register(__webpack_require__(279));
refractor.register(__webpack_require__(1358));
refractor.register(__webpack_require__(2171));
refractor.register(__webpack_require__(2231));
refractor.register(__webpack_require__(2957));
refractor.register(__webpack_require__(3530));
refractor.register(__webpack_require__(2208));
refractor.register(__webpack_require__(7463));
refractor.register(__webpack_require__(4882));
refractor.register(__webpack_require__(2084));
refractor.register(__webpack_require__(1165));
refractor.register(__webpack_require__(955));
refractor.register(__webpack_require__(453));
refractor.register(__webpack_require__(827));
refractor.register(__webpack_require__(1389));
refractor.register(__webpack_require__(8746));
refractor.register(__webpack_require__(1549));
refractor.register(__webpack_require__(6854));
refractor.register(__webpack_require__(5423));
refractor.register(__webpack_require__(5389));
refractor.register(__webpack_require__(3591));
refractor.register(__webpack_require__(4603));
refractor.register(__webpack_require__(9698));
refractor.register(__webpack_require__(3420));
refractor.register(__webpack_require__(4166));
refractor.register(__webpack_require__(3014));
refractor.register(__webpack_require__(6388));
refractor.register(__webpack_require__(5966));
refractor.register(__webpack_require__(591));
refractor.register(__webpack_require__(4363));
refractor.register(__webpack_require__(3617));
refractor.register(__webpack_require__(1489));
refractor.register(__webpack_require__(6587));
refractor.register(__webpack_require__(9891));
refractor.register(__webpack_require__(8319));
refractor.register(__webpack_require__(4196));
refractor.register(__webpack_require__(4857));
refractor.register(__webpack_require__(2243));
refractor.register(__webpack_require__(5002));
refractor.register(__webpack_require__(1943));
refractor.register(__webpack_require__(5488));
refractor.register(__webpack_require__(9764));
refractor.register(__webpack_require__(522));
refractor.register(__webpack_require__(2027));
refractor.register(__webpack_require__(6264));
refractor.register(__webpack_require__(6209));
refractor.register(__webpack_require__(558));
refractor.register(__webpack_require__(7202));
refractor.register(__webpack_require__(9690));
refractor.register(__webpack_require__(9201));
refractor.register(__webpack_require__(281));
refractor.register(__webpack_require__(5343));
refractor.register(__webpack_require__(3827));
refractor.register(__webpack_require__(9874));
refractor.register(__webpack_require__(3228));
refractor.register(__webpack_require__(6416));
refractor.register(__webpack_require__(2111));
refractor.register(__webpack_require__(8882));
refractor.register(__webpack_require__(1730));
refractor.register(__webpack_require__(6153));
refractor.register(__webpack_require__(1615));
refractor.register(__webpack_require__(5420));
refractor.register(__webpack_require__(1758));
refractor.register(__webpack_require__(7561));
refractor.register(__webpack_require__(3830));
refractor.register(__webpack_require__(1458));
refractor.register(__webpack_require__(4642));
refractor.register(__webpack_require__(3621));
refractor.register(__webpack_require__(5760));
refractor.register(__webpack_require__(1386));
refractor.register(__webpack_require__(9904));
refractor.register(__webpack_require__(4026));
refractor.register(__webpack_require__(3879));
refractor.register(__webpack_require__(533));
refractor.register(__webpack_require__(3689));
refractor.register(__webpack_require__(5317));
refractor.register(__webpack_require__(2549));
refractor.register(__webpack_require__(6410));
refractor.register(__webpack_require__(1088));
refractor.register(__webpack_require__(4674));
refractor.register(__webpack_require__(6512));
refractor.register(__webpack_require__(4842));
refractor.register(__webpack_require__(2266));
refractor.register(__webpack_require__(74));
refractor.register(__webpack_require__(8829));
refractor.register(__webpack_require__(523));
refractor.register(__webpack_require__(1465));
refractor.register(__webpack_require__(1159));
refractor.register(__webpack_require__(7926));
refractor.register(__webpack_require__(5050));
refractor.register(__webpack_require__(1775));
refractor.register(__webpack_require__(7436));
refractor.register(__webpack_require__(9677));
refractor.register(__webpack_require__(6257));
refractor.register(__webpack_require__(8731));
refractor.register(__webpack_require__(8678));
refractor.register(__webpack_require__(4369));
refractor.register(__webpack_require__(3511));
refractor.register(__webpack_require__(5608));
refractor.register(__webpack_require__(3414));
refractor.register(__webpack_require__(1750));
refractor.register(__webpack_require__(6132));
refractor.register(__webpack_require__(4232));
refractor.register(__webpack_require__(4018));
refractor.register(__webpack_require__(5861));
refractor.register(__webpack_require__(849));
refractor.register(__webpack_require__(3696));
refractor.register(__webpack_require__(7342));
refractor.register(__webpack_require__(9374));
refractor.register(__webpack_require__(1934));
refractor.register(__webpack_require__(2));
refractor.register(__webpack_require__(3764));
refractor.register(__webpack_require__(8281));
refractor.register(__webpack_require__(2541));
refractor.register(__webpack_require__(9550));
refractor.register(__webpack_require__(6545));
refractor.register(__webpack_require__(8083));
refractor.register(__webpack_require__(5394));
refractor.register(__webpack_require__(4543));
refractor.register(__webpack_require__(8812));
refractor.register(__webpack_require__(2621));
refractor.register(__webpack_require__(7581));
refractor.register(__webpack_require__(5011));
refractor.register(__webpack_require__(5981));
refractor.register(__webpack_require__(7109));
refractor.register(__webpack_require__(6114));
refractor.register(__webpack_require__(1880));
refractor.register(__webpack_require__(6013));
refractor.register(__webpack_require__(7506));
refractor.register(__webpack_require__(3429));
refractor.register(__webpack_require__(458));
refractor.register(__webpack_require__(2232));
refractor.register(__webpack_require__(1247));
refractor.register(__webpack_require__(1572));
refractor.register(__webpack_require__(7855));
refractor.register(__webpack_require__(5885));
refractor.register(__webpack_require__(6055));
refractor.register(__webpack_require__(4445));
refractor.register(__webpack_require__(185));
refractor.register(__webpack_require__(2845));
refractor.register(__webpack_require__(1575));
refractor.register(__webpack_require__(4714));
refractor.register(__webpack_require__(6149));
refractor.register(__webpack_require__(6501));
refractor.register(__webpack_require__(5356));
refractor.register(__webpack_require__(4154));
refractor.register(__webpack_require__(1697));
refractor.register(__webpack_require__(8670));
refractor.register(__webpack_require__(760));
refractor.register(__webpack_require__(391));
refractor.register(__webpack_require__(7721));
refractor.register(__webpack_require__(6376));
refractor.register(__webpack_require__(500));
refractor.register(__webpack_require__(160));
refractor.register(__webpack_require__(9207));
refractor.register(__webpack_require__(5107));
refractor.register(__webpack_require__(1696));
refractor.register(__webpack_require__(786));
refractor.register(__webpack_require__(4834));
refractor.register(__webpack_require__(2921));
refractor.register(__webpack_require__(8153));
refractor.register(__webpack_require__(3514));
refractor.register(__webpack_require__(4017));
refractor.register(__webpack_require__(5018));
refractor.register(__webpack_require__(575));
refractor.register(__webpack_require__(3918));
refractor.register(__webpack_require__(4557));
refractor.register(__webpack_require__(4172));
refractor.register(__webpack_require__(5876));
refractor.register(__webpack_require__(4162));
refractor.register(__webpack_require__(9459));
refractor.register(__webpack_require__(3128));
refractor.register(__webpack_require__(3539));
refractor.register(__webpack_require__(8588));
refractor.register(__webpack_require__(7386));
refractor.register(__webpack_require__(5994));
refractor.register(__webpack_require__(5233));
refractor.register(__webpack_require__(2664));
refractor.register(__webpack_require__(3046));
refractor.register(__webpack_require__(4774));
refractor.register(__webpack_require__(9636));
refractor.register(__webpack_require__(2018));
refractor.register(__webpack_require__(492));
refractor.register(__webpack_require__(3415));
refractor.register(__webpack_require__(8142));
refractor.register(__webpack_require__(2359));
refractor.register(__webpack_require__(136));
refractor.register(__webpack_require__(385));
refractor.register(__webpack_require__(2207));
refractor.register(__webpack_require__(9820));
refractor.register(__webpack_require__(8442));
refractor.register(__webpack_require__(4526));
refractor.register(__webpack_require__(9428));
refractor.register(__webpack_require__(4179));
refractor.register(__webpack_require__(8254));
refractor.register(__webpack_require__(6637));
refractor.register(__webpack_require__(189));
refractor.register(__webpack_require__(7295));
refractor.register(__webpack_require__(8707));
refractor.register(__webpack_require__(5443));
refractor.register(__webpack_require__(1891));
refractor.register(__webpack_require__(9982));
refractor.register(__webpack_require__(610));
refractor.register(__webpack_require__(7731));
refractor.register(__webpack_require__(6156));
refractor.register(__webpack_require__(6008));
refractor.register(__webpack_require__(8757));
refractor.register(__webpack_require__(3208));
refractor.register(__webpack_require__(6420));
refractor.register(__webpack_require__(1392));
refractor.register(__webpack_require__(6958));
refractor.register(__webpack_require__(6744));
refractor.register(__webpack_require__(215));
refractor.register(__webpack_require__(8330));
refractor.register(__webpack_require__(7053));
refractor.register(__webpack_require__(2747));
refractor.register(__webpack_require__(9051));
refractor.register(__webpack_require__(8287));
refractor.register(__webpack_require__(4046));
refractor.register(__webpack_require__(7460));
refractor.register(__webpack_require__(5906));
refractor.register(__webpack_require__(6921));
refractor.register(__webpack_require__(7036));
refractor.register(__webpack_require__(3897));
refractor.register(__webpack_require__(687));
refractor.register(__webpack_require__(526));
refractor.register(__webpack_require__(2654));
refractor.register(__webpack_require__(6629));
refractor.register(__webpack_require__(6595));
refractor.register(__webpack_require__(5902));
refractor.register(__webpack_require__(2702));
refractor.register(__webpack_require__(6372));
refractor.register(__webpack_require__(9925));
refractor.register(__webpack_require__(9288));
refractor.register(__webpack_require__(3136));
refractor.register(__webpack_require__(3216));
refractor.register(__webpack_require__(8464));
refractor.register(__webpack_require__(9145));
refractor.register(__webpack_require__(3955));

/***/ }),

/***/ 4723:
/***/ ((module) => {



module.exports = abap;
abap.displayName = 'abap';
abap.aliases = [];

function abap(Prism) {
  Prism.languages.abap = {
    comment: /^\*.*/m,
    string: /(`|')(?:\\.|(?!\1)[^\\\r\n])*\1/m,
    'string-template': {
      pattern: /([|}])(?:\\.|[^\\|{\r\n])*(?=[|{])/,
      lookbehind: true,
      alias: 'string'
    },

    /* End Of Line comments should not interfere with strings when the
    quote character occurs within them. We assume a string being highlighted
    inside an EOL comment is more acceptable than the opposite.
    */
    'eol-comment': {
      pattern: /(^|\s)".*/m,
      lookbehind: true,
      alias: 'comment'
    },
    keyword: {
      pattern: /(\s|\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\/MM\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\/DD\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\/MM\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\/DD\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\b/i,
      lookbehind: true
    },

    /* Numbers can be only integers. Decimal or Hex appear only as strings */
    number: /\b\d+\b/,

    /* Operators must always be surrounded by whitespace, they cannot be put
    adjacent to operands.
    */
    operator: {
      pattern: /(\s)(?:\*\*?|<[=>]?|>=?|\?=|[-+\/=])(?=\s)/,
      lookbehind: true
    },
    'string-operator': {
      pattern: /(\s)&&?(?=\s)/,
      lookbehind: true,

      /* The official editor highlights */
      alias: 'keyword'
    },
    'token-operator': [{
      /* Special operators used to access structure components, class methods/attributes, etc. */
      pattern: /(\w)(?:->?|=>|[~|{}])(?=\w)/,
      lookbehind: true,
      alias: 'punctuation'
    }, {
      /* Special tokens used do delimit string templates */
      pattern: /[|{}]/,
      alias: 'punctuation'
    }],
    punctuation: /[,.:()]/
  };
}

/***/ }),

/***/ 7845:
/***/ ((module) => {



module.exports = abnf;
abnf.displayName = 'abnf';
abnf.aliases = [];

function abnf(Prism) {
  ;

  (function (Prism) {
    var coreRules = '(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)';
    Prism.languages.abnf = {
      comment: /;.*/,
      string: {
        pattern: /(?:%[is])?"[^"\n\r]*"/,
        greedy: true,
        inside: {
          punctuation: /^%[is]/
        }
      },
      range: {
        pattern: /%(?:b[01]+-[01]+|d\d+-\d+|x[A-F\d]+-[A-F\d]+)/i,
        alias: 'number'
      },
      terminal: {
        pattern: /%(?:b[01]+(?:\.[01]+)*|d\d+(?:\.\d+)*|x[A-F\d]+(?:\.[A-F\d]+)*)/i,
        alias: 'number'
      },
      repetition: {
        pattern: /(^|[^\w-])(?:\d*\*\d*|\d+)/,
        lookbehind: true,
        alias: 'operator'
      },
      definition: {
        pattern: /(^[ \t]*)(?:[a-z][\w-]*|<[^<>\r\n]*>)(?=\s*=)/m,
        lookbehind: true,
        alias: 'keyword',
        inside: {
          punctuation: /<|>/
        }
      },
      'core-rule': {
        pattern: RegExp('(?:(^|[^<\\w-])' + coreRules + '|<' + coreRules + '>)(?![\\w-])', 'i'),
        lookbehind: true,
        alias: ['rule', 'constant'],
        inside: {
          punctuation: /<|>/
        }
      },
      rule: {
        pattern: /(^|[^<\w-])[a-z][\w-]*|<[^<>\r\n]*>/i,
        lookbehind: true,
        inside: {
          punctuation: /<|>/
        }
      },
      operator: /=\/?|\//,
      punctuation: /[()\[\]]/
    };
  })(Prism);
}

/***/ }),

/***/ 294:
/***/ ((module) => {



module.exports = actionscript;
actionscript.displayName = 'actionscript';
actionscript.aliases = [];

function actionscript(Prism) {
  Prism.languages.actionscript = Prism.languages.extend('javascript', {
    keyword: /\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|override|set|static)\b/,
    operator: /\+\+|--|(?:[+\-*\/%^]|&&?|\|\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/
  });
  Prism.languages.actionscript['class-name'].alias = 'function';

  if (Prism.languages.markup) {
    Prism.languages.insertBefore('actionscript', 'string', {
      xml: {
        pattern: /(^|[^.])<\/?\w+(?:\s+[^\s>\/=]+=("|')(?:\\[\s\S]|(?!\2)[^\\])*\2)*\s*\/?>/,
        lookbehind: true,
        inside: Prism.languages.markup
      }
    });
  }
}

/***/ }),

/***/ 3748:
/***/ ((module) => {



module.exports = ada;
ada.displayName = 'ada';
ada.aliases = [];

function ada(Prism) {
  Prism.languages.ada = {
    comment: /--.*/,
    string: /"(?:""|[^"\r\f\n])*"/i,
    number: [{
      pattern: /\b\d(?:_?\d)*#[\dA-F](?:_?[\dA-F])*(?:\.[\dA-F](?:_?[\dA-F])*)?#(?:E[+-]?\d(?:_?\d)*)?/i
    }, {
      pattern: /\b\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:E[+-]?\d(?:_?\d)*)?\b/i
    }],
    'attr-name': /\b'\w+/i,
    keyword: /\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|new|return|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\b/i,
    "boolean": /\b(?:true|false)\b/i,
    operator: /<[=>]?|>=?|=>?|:=|\/=?|\*\*?|[&+-]/,
    punctuation: /\.\.?|[,;():]/,
    "char": /'.'/,
    variable: /\b[a-z](?:\w)*\b/i
  };
}

/***/ }),

/***/ 209:
/***/ ((module) => {



module.exports = agda;
agda.displayName = 'agda';
agda.aliases = [];

function agda(Prism) {
  ;

  (function (Prism) {
    Prism.languages.agda = {
      comment: /\{-[\s\S]*?(?:-\}|$)|--.*/,
      string: {
        pattern: /"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,
        greedy: true
      },
      punctuation: /[(){}⦃⦄.;@]/,
      'class-name': {
        pattern: /((?:data|record) +)\S+/,
        lookbehind: true
      },
      "function": {
        pattern: /(^[ \t]*)(?!\s)[^:\r\n]+(?=:)/m,
        lookbehind: true
      },
      operator: {
        pattern: /(^\s*|\s)(?:[=|:∀→λ\\?_]|->)(?=\s)/,
        lookbehind: true
      },
      keyword: /\b(?:Set|abstract|constructor|data|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\b/
    };
  })(Prism);
}

/***/ }),

/***/ 1140:
/***/ ((module) => {



module.exports = al;
al.displayName = 'al';
al.aliases = [];

function al(Prism) {
  // based on https://github.com/microsoft/AL/blob/master/grammar/alsyntax.tmlanguage
  Prism.languages.al = {
    comment: /\/\/.*|\/\*[\s\S]*?\*\//,
    string: {
      pattern: /'(?:''|[^'\r\n])*'(?!')|"(?:""|[^"\r\n])*"(?!")/,
      greedy: true
    },
    "function": {
      pattern: /(\b(?:event|procedure|trigger)\s+|(?:^|[^.])\.\s*)[a-z_]\w*(?=\s*\()/i,
      lookbehind: true
    },
    keyword: [// keywords
    /\b(?:array|asserterror|begin|break|case|do|downto|else|end|event|exit|for|foreach|function|if|implements|in|indataset|interface|internal|local|of|procedure|program|protected|repeat|runonclient|securityfiltering|suppressdispose|temporary|then|to|trigger|until|var|while|with|withevents)\b/i, // objects and metadata that are used like keywords
    /\b(?:action|actions|addafter|addbefore|addfirst|addlast|area|assembly|chartpart|codeunit|column|controladdin|cuegroup|customizes|dataitem|dataset|dotnet|elements|enum|enumextension|extends|field|fieldattribute|fieldelement|fieldgroup|fieldgroups|fields|filter|fixed|grid|group|key|keys|label|labels|layout|modify|moveafter|movebefore|movefirst|movelast|page|pagecustomization|pageextension|part|profile|query|repeater|report|requestpage|schema|separator|systempart|table|tableelement|tableextension|textattribute|textelement|type|usercontrol|value|xmlport)\b/i],
    number: /\b(?:0x[\da-f]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?)(?:F|U(?:LL?)?|LL?)?\b/i,
    "boolean": /\b(?:false|true)\b/i,
    variable: /\b(?:Curr(?:FieldNo|Page|Report)|RequestOptionsPage|x?Rec)\b/,
    'class-name': /\b(?:automation|biginteger|bigtext|blob|boolean|byte|char|clienttype|code|completiontriggererrorlevel|connectiontype|database|dataclassification|datascope|date|dateformula|datetime|decimal|defaultlayout|dialog|dictionary|dotnetassembly|dotnettypedeclaration|duration|errorinfo|errortype|executioncontext|executionmode|fieldclass|fieldref|fieldtype|file|filterpagebuilder|guid|httpclient|httpcontent|httpheaders|httprequestmessage|httpresponsemessage|instream|integer|joker|jsonarray|jsonobject|jsontoken|jsonvalue|keyref|list|moduledependencyinfo|moduleinfo|none|notification|notificationscope|objecttype|option|outstream|pageresult|record|recordid|recordref|reportformat|securityfilter|sessionsettings|tableconnectiontype|tablefilter|testaction|testfield|testfilterfield|testpage|testpermissions|testrequestpage|text|textbuilder|textconst|textencoding|time|transactionmodel|transactiontype|variant|verbosity|version|view|views|webserviceactioncontext|webserviceactionresultcode|xmlattribute|xmlattributecollection|xmlcdata|xmlcomment|xmldeclaration|xmldocument|xmldocumenttype|xmlelement|xmlnamespacemanager|xmlnametable|xmlnode|xmlnodelist|xmlprocessinginstruction|xmlreadoptions|xmltext|xmlwriteoptions)\b/i,
    operator: /\.\.|:[=:]|[-+*/]=?|<>|[<>]=?|=|\b(?:and|div|mod|not|or|xor)\b/i,
    punctuation: /[()\[\]{}:.;,]/
  };
}

/***/ }),

/***/ 5691:
/***/ ((module) => {



module.exports = antlr4;
antlr4.displayName = 'antlr4';
antlr4.aliases = ['g4'];

function antlr4(Prism) {
  Prism.languages.antlr4 = {
    comment: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
    string: {
      pattern: /'(?:\\.|[^\\'\r\n])*'/,
      greedy: true
    },
    'character-class': {
      pattern: /\[(?:\\.|[^\\\]\r\n])*\]/,
      greedy: true,
      alias: 'regex',
      inside: {
        range: {
          pattern: /([^[]|(?:^|[^\\])(?:\\\\)*\\\[)-(?!\])/,
          lookbehind: true,
          alias: 'punctuation'
        },
        escape: /\\(?:u(?:[a-fA-F\d]{4}|\{[a-fA-F\d]+\})|[pP]\{[=\w-]+\}|[^\r\nupP])/,
        punctuation: /[\[\]]/
      }
    },
    action: {
      pattern: /\{(?:[^{}]|\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})*\}/,
      greedy: true,
      inside: {
        content: {
          // this might be C, C++, Python, Java, C#, or any other language ANTLR4 compiles to
          pattern: /(\{)[\s\S]+(?=\})/,
          lookbehind: true
        },
        punctuation: /[{}]/
      }
    },
    command: {
      pattern: /(->\s*(?!\s))(?:\s*(?:,\s*)?\b[a-z]\w*(?:\s*\([^()\r\n]*\))?)+(?=\s*;)/i,
      lookbehind: true,
      inside: {
        "function": /\b\w+(?=\s*(?:[,(]|$))/,
        punctuation: /[,()]/
      }
    },
    annotation: {
      pattern: /@\w+(?:::\w+)*/,
      alias: 'keyword'
    },
    label: {
      pattern: /#[ \t]*\w+/,
      alias: 'punctuation'
    },
    keyword: /\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\b/,
    definition: [{
      pattern: /\b[a-z]\w*(?=\s*:)/,
      alias: ['rule', 'class-name']
    }, {
      pattern: /\b[A-Z]\w*(?=\s*:)/,
      alias: ['token', 'constant']
    }],
    constant: /\b[A-Z][A-Z_]*\b/,
    operator: /\.\.|->|[|~]|[*+?]\??/,
    punctuation: /[;:()=]/
  };
  Prism.languages.g4 = Prism.languages.antlr4;
}

/***/ }),

/***/ 8278:
/***/ ((module) => {



module.exports = apacheconf;
apacheconf.displayName = 'apacheconf';
apacheconf.aliases = [];

function apacheconf(Prism) {
  Prism.languages.apacheconf = {
    comment: /#.*/,
    'directive-inline': {
      pattern: /(^[\t ]*)\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|Add(?:Alt|AltByEncoding|AltByType|Charset|DefaultCharset|Description|Encoding|Handler|Icon|IconByEncoding|IconByType|InputFilter|Language|ModuleInfo|OutputFilter|OutputFilterByType|Type)|Alias|AliasMatch|Allow(?:CONNECT|EncodedSlashes|Methods|Override|OverrideList)?|Anonymous(?:_LogEmail|_MustGiveEmail|_NoUserID|_VerifyEmail)?|AsyncRequestWorkerFactor|Auth(?:BasicAuthoritative|BasicFake|BasicProvider|BasicUseDigestAlgorithm|DBDUserPWQuery|DBDUserRealmQuery|DBMGroupFile|DBMType|DBMUserFile|Digest(?:Algorithm|Domain|NonceLifetime|Provider|Qop|ShmemSize)|Form(?:Authoritative|Body|DisableNoStore|FakeBasicAuth|Location|LoginRequiredLocation|LoginSuccessLocation|LogoutLocation|Method|Mimetype|Password|Provider|SitePassphrase|Size|Username)|GroupFile|LDAP(?:AuthorizePrefix|BindAuthoritative|BindDN|BindPassword|CharsetConfig|CompareAsUser|CompareDNOnServer|DereferenceAliases|GroupAttribute|GroupAttributeIsDN|InitialBindAsUser|InitialBindPattern|MaxSubGroupDepth|RemoteUserAttribute|RemoteUserIsDN|SearchAsUser|SubGroupAttribute|SubGroupClass|Url)|Merging|Name|Type|UserFile|nCache(?:Context|Enable|ProvideFor|SOCache|Timeout)|nzFcgiCheckAuthnProvider|nzFcgiDefineProvider|zDBDLoginToReferer|zDBDQuery|zDBDRedirectQuery|zDBMType|zSendForbiddenOnFailure)|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferSize|BufferedLogs|CGIDScriptTimeout|CGIMapExtension|Cache(?:DefaultExpire|DetailHeader|DirLength|DirLevels|Disable|Enable|File|Header|IgnoreCacheControl|IgnoreHeaders|IgnoreNoLastMod|IgnoreQueryString|IgnoreURLSessionIdentifiers|KeyBaseURL|LastModifiedFactor|Lock|LockMaxAge|LockPath|MaxExpire|MaxFileSize|MinExpire|MinFileSize|NegotiatedDocs|QuickHandler|ReadSize|ReadTime|Root|Socache(?:MaxSize|MaxTime|MinTime|ReadSize|ReadTime)?|StaleOnError|StoreExpired|StoreNoStore|StorePrivate)|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DTracePrivileges|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|Deflate(?:BufferSize|CompressionLevel|FilterNote|InflateLimitRequestBody|InflateRatio(?:Burst|Limit)|MemLevel|WindowSize)|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtFilterDefine|ExtFilterOptions|ExtendedStatus|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|Heartbeat(?:Address|Listen|MaxServers|Storage)|HostnameLookups|ISAPI(?:AppendLogToErrors|AppendLogToQuery|CacheFile|FakeAsync|LogNotSupported|ReadAheadBuffer)|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|Index(?:HeadInsert|Ignore|IgnoreReset|Options|OrderDefault|StyleSheet)|InputSed|KeepAlive|KeepAliveTimeout|KeptBodySize|LDAP(?:CacheEntries|CacheTTL|ConnectionPoolTTL|ConnectionTimeout|LibraryDebug|OpCacheEntries|OpCacheTTL|ReferralHopLimit|Referrals|Retries|RetryDelay|SharedCacheFile|SharedCacheSize|Timeout|TrustedClientCert|TrustedGlobalCert|TrustedMode|VerifyServerCert)|LanguagePriority|Limit(?:InternalRecursion|Request(?:Body|FieldSize|Fields|Line)|XMLRequestBody)|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|Lua(?:Hook(?:AccessChecker|AuthChecker|CheckUserID|Fixups|InsertFilter|Log|MapToStorage|TranslateName|TypeChecker)|Inherit|InputFilter|MapHandler|OutputFilter|PackageCPath|PackagePath|QuickHandler|Root|Scope)|MMapFile|Max(?:ConnectionsPerChild|KeepAliveRequests|MemFree|RangeOverlaps|RangeReversals|Ranges|RequestWorkers|SpareServers|SpareThreads|Threads)|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|ModMimeUsePathInfo|ModemStandard|MultiviewsMatch|Mutex|NWSSLTrustedCerts|NWSSLUpgradeable|NameVirtualHost|NoProxy|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|Proxy(?:AddHeaders|BadHeader|Block|Domain|ErrorOverride|ExpressDBMFile|ExpressDBMType|ExpressEnable|FtpDirCharset|FtpEscapeWildcards|FtpListOnWildcard|HTML(?:BufSize|CharsetOut|DocType|Enable|Events|Extended|Fixups|Interp|Links|Meta|StripComments|URLMap)|IOBufferSize|MaxForwards|Pass(?:Inherit|InterpolateEnv|Match|Reverse|ReverseCookieDomain|ReverseCookiePath)?|PreserveHost|ReceiveBufferSize|Remote|RemoteMatch|Requests|SCGIInternalRedirect|SCGISendfile|Set|SourceAddress|Status|Timeout|Via)|RLimitCPU|RLimitMEM|RLimitNPROC|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIP(?:Header|InternalProxy|InternalProxyList|ProxiesHeader|TrustedProxy|TrustedProxyList)|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|Rewrite(?:Base|Cond|Engine|Map|Options|Rule)|SSIETag|SSIEndTag|SSIErrorMsg|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSL(?:CACertificateFile|CACertificatePath|CADNRequestFile|CADNRequestPath|CARevocationCheck|CARevocationFile|CARevocationPath|CertificateChainFile|CertificateFile|CertificateKeyFile|CipherSuite|Compression|CryptoDevice|Engine|FIPS|HonorCipherOrder|InsecureRenegotiation|OCSP(?:DefaultResponder|Enable|OverrideResponder|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|UseRequestNonce)|OpenSSLConfCmd|Options|PassPhraseDialog|Protocol|Proxy(?:CACertificateFile|CACertificatePath|CARevocation(?:Check|File|Path)|CheckPeer(?:CN|Expire|Name)|CipherSuite|Engine|MachineCertificate(?:ChainFile|File|Path)|Protocol|Verify|VerifyDepth)|RandomSeed|RenegBufferSize|Require|RequireSSL|SRPUnknownUserSeed|SRPVerifierFile|Session(?:Cache|CacheTimeout|TicketKeyFile|Tickets)|Stapling(?:Cache|ErrorCacheTimeout|FakeTryLater|ForceURL|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|ReturnResponderErrors|StandardCacheTimeout)|StrictSNIVHostCheck|UseStapling|UserName|VerifyClient|VerifyDepth)|Satisfy|ScoreBoardFile|Script(?:Alias|AliasMatch|InterpreterSource|Log|LogBuffer|LogLength|Sock)?|SecureListen|SeeRequestTail|SendBufferSize|Server(?:Admin|Alias|Limit|Name|Path|Root|Signature|Tokens)|Session(?:Cookie(?:Name|Name2|Remove)|Crypto(?:Cipher|Driver|Passphrase|PassphraseFile)|DBD(?:CookieName|CookieName2|CookieRemove|DeleteLabel|InsertLabel|PerUser|SelectLabel|UpdateLabel)|Env|Exclude|Header|Include|MaxAge)?|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadStackSize|ThreadsPerChild|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|Virtual(?:DocumentRoot|ScriptAlias)(?:IP)?|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\b/im,
      lookbehind: true,
      alias: 'property'
    },
    'directive-block': {
      pattern: /<\/?\b(?:Auth[nz]ProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|Require(?:All|Any|None)|VirtualHost)\b.*>/i,
      inside: {
        'directive-block': {
          pattern: /^<\/?\w+/,
          inside: {
            punctuation: /^<\/?/
          },
          alias: 'tag'
        },
        'directive-block-parameter': {
          pattern: /.*[^>]/,
          inside: {
            punctuation: /:/,
            string: {
              pattern: /("|').*\1/,
              inside: {
                variable: /[$%]\{?(?:\w\.?[-+:]?)+\}?/
              }
            }
          },
          alias: 'attr-value'
        },
        punctuation: />/
      },
      alias: 'tag'
    },
    'directive-flags': {
      pattern: /\[(?:[\w=],?)+\]/,
      alias: 'keyword'
    },
    string: {
      pattern: /("|').*\1/,
      inside: {
        variable: /[$%]\{?(?:\w\.?[-+:]?)+\}?/
      }
    },
    variable: /[$%]\{?(?:\w\.?[-+:]?)+\}?/,
    regex: /\^?.*\$|\^.*\$?/
  };
}

/***/ }),

/***/ 9341:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorSql = __webpack_require__(8707);

module.exports = apex;
apex.displayName = 'apex';
apex.aliases = [];

function apex(Prism) {
  Prism.register(refractorSql);

  (function (Prism) {
    var keywords = /\b(?:abstract|activate|and|any|array|as|asc|autonomous|begin|bigdecimal|blob|boolean|break|bulk|by|byte|case|cast|catch|char|class|collect|commit|const|continue|currency|date|datetime|decimal|default|delete|desc|do|double|else|end|enum|exception|exit|export|extends|final|finally|float|for|from|global|goto|group|having|hint|if|implements|import|in|inner|insert|instanceof|int|integer|interface|into|join|like|limit|list|long|loop|map|merge|new|not|null|nulls|number|object|of|on|or|outer|override|package|parallel|pragma|private|protected|public|retrieve|return|rollback|select|set|short|sObject|sort|static|string|super|switch|synchronized|system|testmethod|then|this|throw|time|transaction|transient|trigger|try|undelete|update|upsert|using|virtual|void|webservice|when|where|while|get(?=\s*[{};])|(?:after|before)(?=\s+[a-z])|(?:inherited|with|without)\s+sharing)\b/i;
    var className = /\b(?:(?=[a-z_]\w*\s*[<\[])|(?!<keyword>))[A-Z_]\w*(?:\s*\.\s*[A-Z_]\w*)*\b(?:\s*(?:\[\s*\]|<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>))*/.source.replace(/<keyword>/g, function () {
      return keywords.source;
    });
    /** @param {string} pattern */

    function insertClassName(pattern) {
      return RegExp(pattern.replace(/<CLASS-NAME>/g, function () {
        return className;
      }), 'i');
    }

    var classNameInside = {
      keyword: keywords,
      punctuation: /[()\[\]{};,:.<>]/
    };
    Prism.languages.apex = {
      comment: Prism.languages.clike.comment,
      string: Prism.languages.clike.string,
      sql: {
        pattern: /((?:[=,({:]|\breturn)\s*)\[[^\[\]]*\]/i,
        lookbehind: true,
        greedy: true,
        alias: 'language-sql',
        inside: Prism.languages.sql
      },
      annotation: {
        pattern: /@\w+\b/,
        alias: 'punctuation'
      },
      'class-name': [{
        pattern: insertClassName(/(\b(?:class|enum|extends|implements|instanceof|interface|new|trigger\s+\w+\s+on)\s+)<CLASS-NAME>/.source),
        lookbehind: true,
        inside: classNameInside
      }, {
        // cast
        pattern: insertClassName(/(\(\s*)<CLASS-NAME>(?=\s*\)\s*[\w(])/.source),
        lookbehind: true,
        inside: classNameInside
      }, {
        // variable/parameter declaration and return types
        pattern: insertClassName(/<CLASS-NAME>(?=\s*\w+\s*[;=,(){:])/.source),
        inside: classNameInside
      }],
      trigger: {
        pattern: /(\btrigger\s+)\w+\b/i,
        lookbehind: true,
        alias: 'class-name'
      },
      keyword: keywords,
      "function": /\b[a-z_]\w*(?=\s*\()/i,
      "boolean": /\b(?:false|true)\b/i,
      number: /(?:\B\.\d+|\b\d+(?:\.\d+|L)?)\b/i,
      operator: /[!=](?:==?)?|\?\.?|&&|\|\||--|\+\+|[-+*/^&|]=?|:|<<?=?|>{1,3}=?/,
      punctuation: /[()\[\]{};,.]/
    };
  })(Prism);
}

/***/ }),

/***/ 8783:
/***/ ((module) => {



module.exports = apl;
apl.displayName = 'apl';
apl.aliases = [];

function apl(Prism) {
  Prism.languages.apl = {
    comment: /(?:⍝|#[! ]).*$/m,
    string: {
      pattern: /'(?:[^'\r\n]|'')*'/,
      greedy: true
    },
    number: /¯?(?:\d*\.?\b\d+(?:e[+¯]?\d+)?|¯|∞)(?:j¯?(?:(?:\d+(?:\.\d+)?|\.\d+)(?:e[+¯]?\d+)?|¯|∞))?/i,
    statement: /:[A-Z][a-z][A-Za-z]*\b/,
    'system-function': {
      pattern: /⎕[A-Z]+/i,
      alias: 'function'
    },
    constant: /[⍬⌾#⎕⍞]/,
    "function": /[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,
    'monadic-operator': {
      pattern: /[\\\/⌿⍀¨⍨⌶&∥]/,
      alias: 'operator'
    },
    'dyadic-operator': {
      pattern: /[.⍣⍠⍤∘⌸@⌺⍥]/,
      alias: 'operator'
    },
    assignment: {
      pattern: /←/,
      alias: 'keyword'
    },
    punctuation: /[\[;\]()◇⋄]/,
    dfn: {
      pattern: /[{}⍺⍵⍶⍹∇⍫:]/,
      alias: 'builtin'
    }
  };
}

/***/ }),

/***/ 2977:
/***/ ((module) => {



module.exports = applescript;
applescript.displayName = 'applescript';
applescript.aliases = [];

function applescript(Prism) {
  Prism.languages.applescript = {
    comment: [// Allow one level of nesting
    /\(\*(?:\(\*(?:[^*]|\*(?!\)))*\*\)|(?!\(\*)[\s\S])*?\*\)/, /--.+/, /#.+/],
    string: /"(?:\\.|[^"\\\r\n])*"/,
    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e-?\d+)?\b/i,
    operator: [/[&=≠≤≥*+\-\/÷^]|[<>]=?/, /\b(?:(?:start|begin|end)s? with|(?:(?:does not|doesn't) contain|contains?)|(?:is|isn't|is not) (?:in|contained by)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:(?:does not|doesn't) come|comes) (?:before|after)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equals|equal to|isn't|is not)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|or|div|mod|as|not))\b/],
    keyword: /\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\b/,
    "class": {
      pattern: /\b(?:alias|application|boolean|class|constant|date|file|integer|list|number|POSIX file|real|record|reference|RGB color|script|text|centimetres|centimeters|feet|inches|kilometres|kilometers|metres|meters|miles|yards|square feet|square kilometres|square kilometers|square metres|square meters|square miles|square yards|cubic centimetres|cubic centimeters|cubic feet|cubic inches|cubic metres|cubic meters|cubic yards|gallons|litres|liters|quarts|grams|kilograms|ounces|pounds|degrees Celsius|degrees Fahrenheit|degrees Kelvin)\b/,
      alias: 'builtin'
    },
    punctuation: /[{}():,¬«»《》]/
  };
}

/***/ }),

/***/ 1366:
/***/ ((module) => {



module.exports = aql;
aql.displayName = 'aql';
aql.aliases = [];

function aql(Prism) {
  Prism.languages.aql = {
    comment: /\/\/.*|\/\*[\s\S]*?\*\//,
    property: {
      pattern: /([{,]\s*)(?:(?!\d)\w+|(["'´`])(?:(?!\2)[^\\\r\n]|\\.)*\2)(?=\s*:)/,
      lookbehind: true,
      greedy: true
    },
    string: {
      pattern: /(["'´`])(?:(?!\1)[^\\\r\n]|\\.)*\1/,
      greedy: true
    },
    variable: /@@?\w+/,
    keyword: [{
      pattern: /(\bWITH\s+)COUNT(?=\s+INTO\b)/i,
      lookbehind: true
    }, /\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_PATHS|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WINDOW|WITH)\b/i, // pseudo keywords get a lookbehind to avoid false positives
    {
      pattern: /(^|[^\w.[])(?:KEEP|PRUNE|SEARCH|TO)\b/i,
      lookbehind: true
    }, {
      pattern: /(^|[^\w.[])(?:CURRENT|NEW|OLD)\b/,
      lookbehind: true
    }, {
      pattern: /\bOPTIONS(?=\s*\{)/i
    }],
    "function": /\b(?!\d)\w+(?=\s*\()/,
    "boolean": /\b(?:true|false)\b/i,
    range: {
      pattern: /\.\./,
      alias: 'operator'
    },
    number: [/\b0b[01]+/i, /\b0x[0-9a-f]+/i, /(?:\B\.\d+|\b(?:0|[1-9]\d*)(?:\.\d+)?)(?:e[+-]?\d+)?/i],
    operator: /\*{2,}|[=!]~|[!=<>]=?|&&|\|\||[-+*/%]/,
    punctuation: /::|[?.:,;()[\]{}]/
  };
}

/***/ }),

/***/ 1153:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorCpp = __webpack_require__(8746);

module.exports = arduino;
arduino.displayName = 'arduino';
arduino.aliases = [];

function arduino(Prism) {
  Prism.register(refractorCpp);
  Prism.languages.arduino = Prism.languages.extend('cpp', {
    constant: /\b(?:DIGITAL_MESSAGE|FIRMATA_STRING|ANALOG_MESSAGE|REPORT_DIGITAL|REPORT_ANALOG|INPUT_PULLUP|SET_PIN_MODE|INTERNAL2V56|SYSTEM_RESET|LED_BUILTIN|INTERNAL1V1|SYSEX_START|INTERNAL|EXTERNAL|DEFAULT|OUTPUT|INPUT|HIGH|LOW)\b/,
    keyword: /\b(?:setup|if|else|while|do|for|return|in|instanceof|default|function|loop|goto|switch|case|new|try|throw|catch|finally|null|break|continue|boolean|bool|void|byte|word|string|String|array|int|long|integer|double)\b/,
    builtin: /\b(?:KeyboardController|MouseController|SoftwareSerial|EthernetServer|EthernetClient|LiquidCrystal|LiquidCrystal_I2C|RobotControl|GSMVoiceCall|EthernetUDP|EsploraTFT|HttpClient|RobotMotor|WiFiClient|GSMScanner|FileSystem|Scheduler|GSMServer|YunClient|YunServer|IPAddress|GSMClient|GSMModem|Keyboard|Ethernet|Console|GSMBand|Esplora|Stepper|Process|WiFiUDP|GSM_SMS|Mailbox|USBHost|Firmata|PImage|Client|Server|GSMPIN|FileIO|Bridge|Serial|EEPROM|Stream|Mouse|Audio|Servo|File|Task|GPRS|WiFi|Wire|TFT|GSM|SPI|SD|runShellCommandAsynchronously|analogWriteResolution|retrieveCallingNumber|printFirmwareVersion|analogReadResolution|sendDigitalPortPair|noListenOnLocalhost|readJoystickButton|setFirmwareVersion|readJoystickSwitch|scrollDisplayRight|getVoiceCallStatus|scrollDisplayLeft|writeMicroseconds|delayMicroseconds|beginTransmission|getSignalStrength|runAsynchronously|getAsynchronously|listenOnLocalhost|getCurrentCarrier|readAccelerometer|messageAvailable|sendDigitalPorts|lineFollowConfig|countryNameWrite|runShellCommand|readStringUntil|rewindDirectory|readTemperature|setClockDivider|readLightSensor|endTransmission|analogReference|detachInterrupt|countryNameRead|attachInterrupt|encryptionType|readBytesUntil|robotNameWrite|readMicrophone|robotNameRead|cityNameWrite|userNameWrite|readJoystickY|readJoystickX|mouseReleased|openNextFile|scanNetworks|noInterrupts|digitalWrite|beginSpeaker|mousePressed|isActionDone|mouseDragged|displayLogos|noAutoscroll|addParameter|remoteNumber|getModifiers|keyboardRead|userNameRead|waitContinue|processInput|parseCommand|printVersion|readNetworks|writeMessage|blinkVersion|cityNameRead|readMessage|setDataMode|parsePacket|isListening|setBitOrder|beginPacket|isDirectory|motorsWrite|drawCompass|digitalRead|clearScreen|serialEvent|rightToLeft|setTextSize|leftToRight|requestFrom|keyReleased|compassRead|analogWrite|interrupts|WiFiServer|disconnect|playMelody|parseFloat|autoscroll|getPINUsed|setPINUsed|setTimeout|sendAnalog|readSlider|analogRead|beginWrite|createChar|motorsStop|keyPressed|tempoWrite|readButton|subnetMask|debugPrint|macAddress|writeGreen|randomSeed|attachGPRS|readString|sendString|remotePort|releaseAll|mouseMoved|background|getXChange|getYChange|answerCall|getResult|voiceCall|endPacket|constrain|getSocket|writeJSON|getButton|available|connected|findUntil|readBytes|exitValue|readGreen|writeBlue|startLoop|isPressed|sendSysex|pauseMode|gatewayIP|setCursor|getOemKey|tuneWrite|noDisplay|loadImage|switchPIN|onRequest|onReceive|changePIN|playFile|noBuffer|parseInt|overflow|checkPIN|knobRead|beginTFT|bitClear|updateIR|bitWrite|position|writeRGB|highByte|writeRed|setSpeed|readBlue|noStroke|remoteIP|transfer|shutdown|hangCall|beginSMS|endWrite|attached|maintain|noCursor|checkReg|checkPUK|shiftOut|isValid|shiftIn|pulseIn|connect|println|localIP|pinMode|getIMEI|display|noBlink|process|getBand|running|beginSD|drawBMP|lowByte|setBand|release|bitRead|prepare|pointTo|readRed|setMode|noFill|remove|listen|stroke|detach|attach|noTone|exists|buffer|height|bitSet|circle|config|cursor|random|IRread|setDNS|endSMS|getKey|micros|millis|begin|print|write|ready|flush|width|isPIN|blink|clear|press|mkdir|rmdir|close|point|yield|image|BSSID|click|delay|read|text|move|peek|beep|rect|line|open|seek|fill|size|turn|stop|home|find|step|tone|sqrt|RSSI|SSID|end|bit|tan|cos|sin|pow|map|abs|max|min|get|run|put)\b/
  });
}

/***/ }),

/***/ 3344:
/***/ ((module) => {



module.exports = arff;
arff.displayName = 'arff';
arff.aliases = [];

function arff(Prism) {
  Prism.languages.arff = {
    comment: /%.*/,
    string: {
      pattern: /(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    keyword: /@(?:attribute|data|end|relation)\b/i,
    number: /\b\d+(?:\.\d+)?\b/,
    punctuation: /[{},]/
  };
}

/***/ }),

/***/ 7954:
/***/ ((module) => {



module.exports = asciidoc;
asciidoc.displayName = 'asciidoc';
asciidoc.aliases = ['adoc'];

function asciidoc(Prism) {
  ;

  (function (Prism) {
    var attributes = {
      pattern: /(^[ \t]*)\[(?!\[)(?:(["'$`])(?:(?!\2)[^\\]|\\.)*\2|\[(?:[^\[\]\\]|\\.)*\]|[^\[\]\\"'$`]|\\.)*\]/m,
      lookbehind: true,
      inside: {
        quoted: {
          pattern: /([$`])(?:(?!\1)[^\\]|\\.)*\1/,
          inside: {
            punctuation: /^[$`]|[$`]$/
          }
        },
        interpreted: {
          pattern: /'(?:[^'\\]|\\.)*'/,
          inside: {
            punctuation: /^'|'$/ // See rest below

          }
        },
        string: /"(?:[^"\\]|\\.)*"/,
        variable: /\w+(?==)/,
        punctuation: /^\[|\]$|,/,
        operator: /=/,
        // The negative look-ahead prevents blank matches
        'attr-value': /(?!^\s+$).+/
      }
    };
    var asciidoc = Prism.languages.asciidoc = {
      'comment-block': {
        pattern: /^(\/{4,})(?:\r?\n|\r)(?:[\s\S]*(?:\r?\n|\r))??\1/m,
        alias: 'comment'
      },
      table: {
        pattern: /^\|={3,}(?:(?:\r?\n|\r(?!\n)).*)*?(?:\r?\n|\r)\|={3,}$/m,
        inside: {
          specifiers: {
            pattern: /(?:(?:(?:\d+(?:\.\d+)?|\.\d+)[+*](?:[<^>](?:\.[<^>])?|\.[<^>])?|[<^>](?:\.[<^>])?|\.[<^>])[a-z]*|[a-z]+)(?=\|)/,
            alias: 'attr-value'
          },
          punctuation: {
            pattern: /(^|[^\\])[|!]=*/,
            lookbehind: true
          } // See rest below

        }
      },
      'passthrough-block': {
        pattern: /^(\+{4,})(?:\r?\n|\r)(?:[\s\S]*(?:\r?\n|\r))??\1$/m,
        inside: {
          punctuation: /^\++|\++$/ // See rest below

        }
      },
      // Literal blocks and listing blocks
      'literal-block': {
        pattern: /^(-{4,}|\.{4,})(?:\r?\n|\r)(?:[\s\S]*(?:\r?\n|\r))??\1$/m,
        inside: {
          punctuation: /^(?:-+|\.+)|(?:-+|\.+)$/ // See rest below

        }
      },
      // Sidebar blocks, quote blocks, example blocks and open blocks
      'other-block': {
        pattern: /^(--|\*{4,}|_{4,}|={4,})(?:\r?\n|\r)(?:[\s\S]*(?:\r?\n|\r))??\1$/m,
        inside: {
          punctuation: /^(?:-+|\*+|_+|=+)|(?:-+|\*+|_+|=+)$/ // See rest below

        }
      },
      // list-punctuation and list-label must appear before indented-block
      'list-punctuation': {
        pattern: /(^[ \t]*)(?:-|\*{1,5}|\.{1,5}|(?:[a-z]|\d+)\.|[xvi]+\))(?= )/im,
        lookbehind: true,
        alias: 'punctuation'
      },
      'list-label': {
        pattern: /(^[ \t]*)[a-z\d].+(?::{2,4}|;;)(?=\s)/im,
        lookbehind: true,
        alias: 'symbol'
      },
      'indented-block': {
        pattern: /((\r?\n|\r)\2)([ \t]+)\S.*(?:(?:\r?\n|\r)\3.+)*(?=\2{2}|$)/,
        lookbehind: true
      },
      comment: /^\/\/.*/m,
      title: {
        pattern: /^.+(?:\r?\n|\r)(?:={3,}|-{3,}|~{3,}|\^{3,}|\+{3,})$|^={1,5} .+|^\.(?![\s.]).*/m,
        alias: 'important',
        inside: {
          punctuation: /^(?:\.|=+)|(?:=+|-+|~+|\^+|\++)$/ // See rest below

        }
      },
      'attribute-entry': {
        pattern: /^:[^:\r\n]+:(?: .*?(?: \+(?:\r?\n|\r).*?)*)?$/m,
        alias: 'tag'
      },
      attributes: attributes,
      hr: {
        pattern: /^'{3,}$/m,
        alias: 'punctuation'
      },
      'page-break': {
        pattern: /^<{3,}$/m,
        alias: 'punctuation'
      },
      admonition: {
        pattern: /^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,
        alias: 'keyword'
      },
      callout: [{
        pattern: /(^[ \t]*)<?\d*>/m,
        lookbehind: true,
        alias: 'symbol'
      }, {
        pattern: /<\d+>/,
        alias: 'symbol'
      }],
      macro: {
        pattern: /\b[a-z\d][a-z\d-]*::?(?:[^\s\[\]]*\[(?:[^\]\\"']|(["'])(?:(?!\1)[^\\]|\\.)*\1|\\.)*\])/,
        inside: {
          "function": /^[a-z\d-]+(?=:)/,
          punctuation: /^::?/,
          attributes: {
            pattern: /(?:\[(?:[^\]\\"']|(["'])(?:(?!\1)[^\\]|\\.)*\1|\\.)*\])/,
            inside: attributes.inside
          }
        }
      },
      inline: {
        /*
        The initial look-behind prevents the highlighting of escaped quoted text.
        Quoted text can be multi-line but cannot span an empty line.
        All quoted text can have attributes before [foobar, 'foobar', baz="bar"].
        First, we handle the constrained quotes.
        Those must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.
        They are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#
        Then we handle the unconstrained quotes.
        Those do not have the restrictions of the constrained quotes.
        They are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))
        */
        pattern: /(^|[^\\])(?:(?:\B\[(?:[^\]\\"']|(["'])(?:(?!\2)[^\\]|\\.)*\2|\\.)*\])?(?:\b_(?!\s)(?: _|[^_\\\r\n]|\\.)+(?:(?:\r?\n|\r)(?: _|[^_\\\r\n]|\\.)+)*_\b|\B``(?!\s).+?(?:(?:\r?\n|\r).+?)*''\B|\B`(?!\s)(?:[^`'\s]|\s+\S)+['`]\B|\B(['*+#])(?!\s)(?: \3|(?!\3)[^\\\r\n]|\\.)+(?:(?:\r?\n|\r)(?: \3|(?!\3)[^\\\r\n]|\\.)+)*\3\B)|(?:\[(?:[^\]\\"']|(["'])(?:(?!\4)[^\\]|\\.)*\4|\\.)*\])?(?:(__|\*\*|\+\+\+?|##|\$\$|[~^]).+?(?:(?:\r?\n|\r).+?)*\5|\{[^}\r\n]+\}|\[\[\[?.+?(?:(?:\r?\n|\r).+?)*\]?\]\]|<<.+?(?:(?:\r?\n|\r).+?)*>>|\(\(\(?.+?(?:(?:\r?\n|\r).+?)*\)?\)\)))/m,
        lookbehind: true,
        inside: {
          attributes: attributes,
          url: {
            pattern: /^(?:\[\[\[?.+?\]?\]\]|<<.+?>>)$/,
            inside: {
              punctuation: /^(?:\[\[\[?|<<)|(?:\]\]\]?|>>)$/
            }
          },
          'attribute-ref': {
            pattern: /^\{.+\}$/,
            inside: {
              variable: {
                pattern: /(^\{)[a-z\d,+_-]+/,
                lookbehind: true
              },
              operator: /^[=?!#%@$]|!(?=[:}])/,
              punctuation: /^\{|\}$|::?/
            }
          },
          italic: {
            pattern: /^(['_])[\s\S]+\1$/,
            inside: {
              punctuation: /^(?:''?|__?)|(?:''?|__?)$/
            }
          },
          bold: {
            pattern: /^\*[\s\S]+\*$/,
            inside: {
              punctuation: /^\*\*?|\*\*?$/
            }
          },
          punctuation: /^(?:``?|\+{1,3}|##?|\$\$|[~^]|\(\(\(?)|(?:''?|\+{1,3}|##?|\$\$|[~^`]|\)?\)\))$/
        }
      },
      replacement: {
        pattern: /\((?:C|TM|R)\)/,
        alias: 'builtin'
      },
      entity: /&#?[\da-z]{1,8};/i,
      'line-continuation': {
        pattern: /(^| )\+$/m,
        lookbehind: true,
        alias: 'punctuation'
      }
    }; // Allow some nesting. There is no recursion though, so cloning should not be needed.

    function copyFromAsciiDoc(keys) {
      keys = keys.split(' ');
      var o = {};

      for (var i = 0, l = keys.length; i < l; i++) {
        o[keys[i]] = asciidoc[keys[i]];
      }

      return o;
    }

    attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc('macro inline replacement entity');
    asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro');
    asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout');
    asciidoc['table'].inside.rest = copyFromAsciiDoc('comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation');
    asciidoc['other-block'].inside.rest = copyFromAsciiDoc('table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation');
    asciidoc['title'].inside.rest = copyFromAsciiDoc('macro inline replacement entity'); // Plugin to make entity title show the real entity, idea by Roman Komarov

    Prism.hooks.add('wrap', function (env) {
      if (env.type === 'entity') {
        env.attributes['title'] = env.content.value.replace(/&amp;/, '&');
      }
    });
    Prism.languages.adoc = Prism.languages.asciidoc;
  })(Prism);
}

/***/ }),

/***/ 8100:
/***/ ((module) => {



module.exports = asm6502;
asm6502.displayName = 'asm6502';
asm6502.aliases = [];

function asm6502(Prism) {
  Prism.languages.asm6502 = {
    comment: /;.*/,
    directive: {
      pattern: /\.\w+(?= )/,
      alias: 'keyword'
    },
    string: /(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,
    opcode: {
      pattern: /\b(?:adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya|ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA)\b/,
      alias: 'property'
    },
    hexnumber: {
      pattern: /#?\$[\da-f]{2,4}\b/i,
      alias: 'string'
    },
    binarynumber: {
      pattern: /#?%[01]+\b/,
      alias: 'string'
    },
    decimalnumber: {
      pattern: /#?\b\d+\b/,
      alias: 'string'
    },
    register: {
      pattern: /\b[xya]\b/i,
      alias: 'variable'
    }
  };
}

/***/ }),

/***/ 2889:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorCsharp = __webpack_require__(6854);

module.exports = aspnet;
aspnet.displayName = 'aspnet';
aspnet.aliases = [];

function aspnet(Prism) {
  Prism.register(refractorCsharp);
  Prism.languages.aspnet = Prism.languages.extend('markup', {
    'page-directive': {
      pattern: /<%\s*@.*%>/i,
      alias: 'tag',
      inside: {
        'page-directive': {
          pattern: /<%\s*@\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,
          alias: 'tag'
        },
        rest: Prism.languages.markup.tag.inside
      }
    },
    directive: {
      pattern: /<%.*%>/i,
      alias: 'tag',
      inside: {
        directive: {
          pattern: /<%\s*?[$=%#:]{0,2}|%>/i,
          alias: 'tag'
        },
        rest: Prism.languages.csharp
      }
    }
  }); // Regexp copied from prism-markup, with a negative look-ahead added

  Prism.languages.aspnet.tag.pattern = /<(?!%)\/?[^\s>\/]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i; // match directives of attribute value foo="<% Bar %>"

  Prism.languages.insertBefore('inside', 'punctuation', {
    directive: Prism.languages.aspnet['directive']
  }, Prism.languages.aspnet.tag.inside['attr-value']);
  Prism.languages.insertBefore('aspnet', 'comment', {
    'asp-comment': {
      pattern: /<%--[\s\S]*?--%>/,
      alias: ['asp', 'comment']
    }
  }); // script runat="server" contains csharp, not javascript

  Prism.languages.insertBefore('aspnet', Prism.languages.javascript ? 'script' : 'tag', {
    'asp-script': {
      pattern: /(<script(?=.*runat=['"]?server\b)[^>]*>)[\s\S]*?(?=<\/script>)/i,
      lookbehind: true,
      alias: ['asp', 'script'],
      inside: Prism.languages.csharp || {}
    }
  });
}

/***/ }),

/***/ 627:
/***/ ((module) => {



module.exports = autohotkey;
autohotkey.displayName = 'autohotkey';
autohotkey.aliases = [];

function autohotkey(Prism) {
  // NOTES - follows first-first highlight method, block is locked after highlight, different from SyntaxHl
  Prism.languages.autohotkey = {
    comment: [{
      pattern: /(^|\s);.*/,
      lookbehind: true
    }, {
      pattern: /(^[\t ]*)\/\*(?:[\r\n](?![ \t]*\*\/)|[^\r\n])*(?:[\r\n][ \t]*\*\/)?/m,
      lookbehind: true,
      greedy: true
    }],
    tag: {
      // labels
      pattern: /^([ \t]*)[^\s,`":]+(?=:[ \t]*$)/m,
      lookbehind: true
    },
    string: /"(?:[^"\n\r]|"")*"/m,
    variable: /%\w+%/,
    number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
    operator: /\?|\/\/?=?|:=|\|[=|]?|&[=&]?|\+[=+]?|-[=-]?|\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\b(?:AND|NOT|OR)\b/,
    "boolean": /\b(?:true|false)\b/,
    selector: /\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetRegView|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\b/i,
    constant: /\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_fileencoding|a_formatfloat|a_formatinteger|a_gui|a_guievent|a_guicontrol|a_guicontrolevent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_is64bitos|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|a_priorkey|programfiles|a_programfiles|a_programs|a_programscommon|a_ptrsize|a_regview|a_screendpi|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scripthwnd|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel)\b/i,
    builtin: /\b(?:abs|acos|asc|asin|atan|ceil|chr|class|comobjactive|comobjarray|comobjconnect|comobjcreate|comobjerror|comobjflags|comobjget|comobjquery|comobjtype|comobjvalue|cos|dllcall|exp|fileexist|Fileopen|floor|format|il_add|il_create|il_destroy|instr|substr|isfunc|islabel|IsObject|ln|log|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|ltrim|rtrim|mod|onmessage|numget|numput|registercallback|regexmatch|regexreplace|round|sin|tan|sqrt|strlen|strreplace|sb_seticon|sb_setparts|sb_settext|strsplit|tv_add|tv_delete|tv_getchild|tv_getcount|tv_getnext|tv_get|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__New|__Call|__Get|__Set)\b/i,
    symbol: /\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\b/i,
    important: /#\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|DerefChar|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|If|IfTimeout|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InputLevel|InstallKeybdHook|InstallMouseHook|KeyHistory|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|MenuMaskKey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|Warn|WinActivateForce)\b/i,
    keyword: /\b(?:Abort|AboveNormal|Add|ahk_class|ahk_exe|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Region|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|TryAgain|Throw|Try|Catch|Finally|Type|UnCheck|underline|Unicode|Unlock|Until|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\b/i,
    "function": /[^(); \t,\n+*\-=?>:\\\/<&%\[\]]+(?=\()/m,
    punctuation: /[{}[\]():,]/
  };
}

/***/ }),

/***/ 6046:
/***/ ((module) => {



module.exports = autoit;
autoit.displayName = 'autoit';
autoit.aliases = [];

function autoit(Prism) {
  Prism.languages.autoit = {
    comment: [/;.*/, {
      // The multi-line comments delimiters can actually be commented out with ";"
      pattern: /(^[\t ]*)#(?:comments-start|cs)[\s\S]*?^[ \t]*#(?:comments-end|ce)/m,
      lookbehind: true
    }],
    url: {
      pattern: /(^[\t ]*#include\s+)(?:<[^\r\n>]+>|"[^\r\n"]+")/m,
      lookbehind: true
    },
    string: {
      pattern: /(["'])(?:\1\1|(?!\1)[^\r\n])*\1/,
      greedy: true,
      inside: {
        variable: /([%$@])\w+\1/
      }
    },
    directive: {
      pattern: /(^[\t ]*)#\w+/m,
      lookbehind: true,
      alias: 'keyword'
    },
    "function": /\b\w+(?=\()/,
    // Variables and macros
    variable: /[$@]\w+/,
    keyword: /\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\b/i,
    number: /\b(?:0x[\da-f]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/i,
    "boolean": /\b(?:True|False)\b/i,
    operator: /<[=>]?|[-+*\/=&>]=?|[?^]|\b(?:And|Or|Not)\b/i,
    punctuation: /[\[\]().,:]/
  };
}

/***/ }),

/***/ 4399:
/***/ ((module) => {



module.exports = avisynth;
avisynth.displayName = 'avisynth';
avisynth.aliases = ['avs'];

function avisynth(Prism) {
  // http://avisynth.nl/index.php/The_full_AviSynth_grammar
  ;

  (function (Prism) {
    function replace(pattern, replacements) {
      return pattern.replace(/<<(\d+)>>/g, function (m, index) {
        return replacements[+index];
      });
    }

    function re(pattern, replacements, flags) {
      return RegExp(replace(pattern, replacements), flags || '');
    }

    var types = /clip|int|float|string|bool|val/.source;
    var internals = [// bools
    /is(?:bool|clip|float|int|string)|defined|(?:var|(?:internal)?function)?exists?/.source, // control
    /apply|assert|default|eval|import|select|nop|undefined/.source, // global
    /set(?:memorymax|cachemode|maxcpu|workingdir|planarlegacyalignment)|opt_(?:allowfloataudio|usewaveextensible|dwchannelmask|avipadscanlines|vdubplanarhack|enable_(?:v210|y3_10_10|y3_10_16|b64a|planartopackedrgb))/.source, // conv
    /hex(?:value)?|value/.source, // numeric
    /max|min|muldiv|floor|ceil|round|fmod|pi|exp|log(?:10)?|pow|sqrt|abs|sign|frac|rand|spline|continued(?:numerator|denominator)?/.source, // trig
    /a?sinh?|a?cosh?|a?tan[2h]?/.source, // bit
    /(?:bit(?:and|not|x?or|[lr]?shift[aslu]?|sh[lr]|sa[lr]|[lr]rotatel?|ro[rl]|te?st|set(?:count)?|cl(?:ea)?r|ch(?:an)?ge?))/.source, // runtime
    /average(?:luma|chroma[uv]|[bgr])|(?:luma|chroma[uv]|rgb|[rgb]|[yuv](?=difference(?:fromprevious|tonext)))difference(?:fromprevious|tonext)?|[yuvrgb]plane(?:median|min|max|minmaxdifference)/.source, // script
    /script(?:name(?:utf8)?|file(?:utf8)?|dir(?:utf8)?)|setlogparams|logmsg|getprocessinfo/.source, // string
    /[lu]case|str(?:toutf8|fromutf8|len|cmpi?)|(?:rev|left|right|mid|find|replace|fill)str|format|trim(?:left|right|all)|chr|ord|time/.source, // version
    /version(?:number|string)|isversionorgreater/.source, // helper
    /buildpixeltype|colorspacenametopixeltype/.source, // avsplus
    /setfiltermtmode|prefetch|addautoloaddir|on(?:cpu|cuda)/.source].join('|');
    var properties = [// content
    /has(?:audio|video)/.source, // resolution
    /width|height/.source, // framerate
    /frame(?:count|rate)|framerate(?:numerator|denominator)/.source, // interlacing
    /is(?:field|frame)based|getparity/.source, // color format
    /pixeltype|is(?:planar(?:rgba?)?|interleaved|rgb(?:24|32|48|64)?|y(?:8|u(?:y2|va?))?|yv(?:12|16|24|411)|420|422|444|packedrgb)|hasalpha|componentsize|numcomponents|bitspercomponent/.source, // audio
    /audio(?:rate|duration|length(?:[fs]|lo|hi)?|channels|bits)|isaudio(?:float|int)/.source].join('|');
    var filters = [// source
    /avi(?:file)?source|opendmlsource|directshowsource|image(?:reader|source|sourceanim)|segmented(?:avisource|directshowsource)|wavsource/.source, // color
    /coloryuv|convertto(?:RGB(?:24|32|48|64)|(?:planar)?RGBA?|Y8?|YV(?:12|16|24|411)|YUVA?(?:444|422|420|411)|YUY2)|convertbacktoyuy2|fixluminance|gr[ae]yscale|invert|levels|limiter|mergea?rgb|merge(?:luma|chroma)|rgbadjust|show(?:red|green|blue|alpha)|swapuv|tweak|[uv]toy8?|ytouv/.source, // overlay
    /(?:colorkey|reset)mask|mask(?:hs)?|layer|merge|overlay|subtract/.source, // geometry
    /addborders|crop(?:bottom)?|flip(?:horizontal|vertical)|letterbox|(?:horizontal|vertical)?reduceby2|(?:bicubic|bilinear|blackman|gauss|lanczos|lanczos4|point|sinc|spline(?:16|36|64))resize|skewrows|turn(?:left|right|180)/.source, // pixel
    /blur|sharpen|generalconvolution|(?:spatial|temporal)soften|fixbrokenchromaupsampling/.source, // timeline
    /trim|(?:un)?alignedsplice|(?:assume|assumescaled|change|convert)FPS|(?:delete|duplicate)frame|dissolve|fade(?:in|out|io)[02]?|freezeframe|interleave|loop|reverse|select(?:even|odd|(?:range)?every)/.source, // interlace
    /assume(?:frame|field)based|assume[bt]ff|bob|complementparity|doubleweave|peculiarblend|pulldown|separate(?:columns|rows|fields)|swapfields|weave(?:columns|rows)?/.source, // audio
    /amplify(?:db)?|assumesamplerate|audiodub(?:ex)?|audiotrim|convertaudioto(?:(?:8|16|24|32)bit|float)|converttomono|delayaudio|ensurevbrmp3sync|get(?:left|right)?channel|kill(?:audio|video)|mergechannels|mixaudio|monotostereo|normalize|resampleaudio|supereq|ssrc|timestretch/.source, // conditional
    /conditional(?:filter|select|reader)|frameevaluate|scriptclip|writefile(?:if|start|end)?|animate|applyrange|tcp(?:server|source)/.source, // export
    /imagewriter/.source, // debug
    /subtitle|blankclip|blackness|colorbars(?:hd)?|compare|dumpfiltergraph|setgraphanalysis|echo|histogram|info|messageclip|preroll|showfiveversions|show(?:framenumber|smpte|time)|stack(?:horizontal|vertical)|tone|version/.source].join('|');
    var allinternals = [internals, properties, filters].join('|');
    Prism.languages.avisynth = {
      comment: [{
        // Matches [* *] nestable block comments, but only supports 1 level of nested comments
        // /\[\*(?:[^\[*]|\[(?!\*)|\*(?!\])|<self>)*\*\]/
        pattern: /(^|[^\\])\[\*(?:[^\[*]|\[(?!\*)|\*(?!\])|\[\*(?:[^\[*]|\[(?!\*)|\*(?!\]))*\*\])*\*\]/,
        lookbehind: true,
        greedy: true
      }, {
        // Matches /* */ block comments
        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
        lookbehind: true,
        greedy: true
      }, {
        // Matches # comments
        pattern: /(^|[^\\$])#.*/,
        lookbehind: true,
        greedy: true
      }],
      // Handle before strings because optional arguments are surrounded by double quotes
      argument: {
        pattern: re(/\b(?:<<0>>)\s+("?)\w+\1/.source, [types], 'i'),
        inside: {
          keyword: /^\w+/
        }
      },
      // Optional argument assignment
      'argument-label': {
        pattern: /([,(][\s\\]*)\w+\s*=(?!=)/,
        lookbehind: true,
        inside: {
          'argument-name': {
            pattern: /^\w+/,
            alias: 'punctuation'
          },
          punctuation: /=$/
        }
      },
      string: [{
        // triple double-quoted
        pattern: /"""[\s\S]*?"""/,
        greedy: true
      }, {
        // single double-quoted
        pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
        greedy: true,
        inside: {
          constant: {
            // These *are* case-sensitive!
            pattern: /\b(?:DEFAULT_MT_MODE|(?:SCRIPT|MAINSCRIPT|PROGRAM)DIR|(?:USER|MACHINE)_(?:PLUS|CLASSIC)_PLUGINS)\b/
          }
        }
      }],
      // The special "last" variable that takes the value of the last implicitly returned clip
      variable: /\b(?:last)\b/i,
      "boolean": /\b(?:true|false|yes|no)\b/i,
      keyword: /\b(?:function|global|return|try|catch|if|else|while|for|__END__)\b/i,
      constant: /\bMT_(?:NICE_FILTER|MULTI_INSTANCE|SERIALIZED|SPECIAL_MT)\b/,
      // AviSynth's internal functions, filters, and properties
      'builtin-function': {
        pattern: re(/\b(?:<<0>>)\b/.source, [allinternals], 'i'),
        alias: 'function'
      },
      'type-cast': {
        pattern: re(/\b(?:<<0>>)(?=\s*\()/.source, [types], 'i'),
        alias: 'keyword'
      },
      // External/user-defined filters
      "function": {
        pattern: /\b[a-z_]\w*(?=\s*\()|(\.)[a-z_]\w*\b/i,
        lookbehind: true
      },
      // Matches a \ as the first or last character on a line
      'line-continuation': {
        pattern: /(^[ \t]*)\\|\\(?=[ \t]*$)/m,
        lookbehind: true,
        alias: 'punctuation'
      },
      number: /\B\$(?:[\da-f]{6}|[\da-f]{8})\b|(?:(?:\b|\B-)\d+(?:\.\d*)?\b|\B\.\d+\b)/i,
      operator: /\+\+?|[!=<>]=?|&&|\|\||[?:*/%-]/,
      punctuation: /[{}\[\]();,.]/
    };
    Prism.languages.avs = Prism.languages.avisynth;
  })(Prism);
}

/***/ }),

/***/ 859:
/***/ ((module) => {



module.exports = avroIdl;
avroIdl.displayName = 'avroIdl';
avroIdl.aliases = [];

function avroIdl(Prism) {
  // GitHub: https://github.com/apache/avro
  // Docs: https://avro.apache.org/docs/current/idl.html
  Prism.languages['avro-idl'] = {
    comment: {
      pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
      greedy: true
    },
    string: [{
      pattern: /(^|[^\\])"(?:[^\r\n"\\]|\\.)*"/,
      lookbehind: true,
      greedy: true
    }, {
      pattern: /(^|[^\\])'(?:[^\r\n'\\]|\\(?:[\s\S]|\d{1,3}))'/,
      lookbehind: true,
      greedy: true
    }],
    annotation: {
      pattern: /@(?:[$\w.-]|`[^\r\n`]+`)+/,
      greedy: true,
      alias: 'function'
    },
    'function-identifier': {
      pattern: /`[^\r\n`]+`(?=\s*\()/,
      greedy: true,
      alias: 'function'
    },
    identifier: {
      pattern: /`[^\r\n`]+`/,
      greedy: true
    },
    'class-name': {
      pattern: /(\b(?:enum|error|protocol|record|throws)\b\s+)[$\w]+/,
      lookbehind: true,
      greedy: true
    },
    keyword: /\b(?:array|boolean|bytes|date|decimal|double|enum|error|false|fixed|float|idl|import|int|local_timestamp_ms|long|map|null|oneway|protocol|record|schema|string|throws|time_ms|timestamp_ms|true|union|uuid|void)\b/,
    "function": /\b[a-z_]\w*(?=\s*\()/i,
    number: [{
      pattern: /(^|[^\w.])-?(?:(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|0x(?:[a-f0-9]+(?:\.[a-f0-9]*)?|\.[a-f0-9]+)(?:p[+-]?\d+)?)[dfl]?(?![\w.])/i,
      lookbehind: true
    }, /-?\b(?:NaN|Infinity)\b/],
    operator: /=/,
    punctuation: /[()\[\]{}<>.:,;-]/
  };
  Prism.languages.avdl = Prism.languages['avro-idl'];
}

/***/ }),

/***/ 4491:
/***/ ((module) => {



module.exports = bash;
bash.displayName = 'bash';
bash.aliases = ['shell'];

function bash(Prism) {
  ;

  (function (Prism) {
    // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\n' '|'
    // + LC_ALL, RANDOM, REPLY, SECONDS.
    // + make sure PS1..4 are here as they are not always set,
    // - some useless things.
    var envVars = '\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b';
    var commandAfterHeredoc = {
      pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
      lookbehind: true,
      alias: 'punctuation',
      // this looks reasonably well in all themes
      inside: null // see below

    };
    var insideString = {
      bash: commandAfterHeredoc,
      environment: {
        pattern: RegExp('\\$' + envVars),
        alias: 'constant'
      },
      variable: [// [0]: Arithmetic Environment
      {
        pattern: /\$?\(\([\s\S]+?\)\)/,
        greedy: true,
        inside: {
          // If there is a $ sign at the beginning highlight $(( and )) as variable
          variable: [{
            pattern: /(^\$\(\([\s\S]+)\)\)/,
            lookbehind: true
          }, /^\$\(\(/],
          number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
          // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic
          operator: /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
          // If there is no $ sign at the beginning highlight (( and )) as punctuation
          punctuation: /\(\(?|\)\)?|,|;/
        }
      }, // [1]: Command Substitution
      {
        pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
        greedy: true,
        inside: {
          variable: /^\$\(|^`|\)$|`$/
        }
      }, // [2]: Brace expansion
      {
        pattern: /\$\{[^}]+\}/,
        greedy: true,
        inside: {
          operator: /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
          punctuation: /[\[\]]/,
          environment: {
            pattern: RegExp('(\\{)' + envVars),
            lookbehind: true,
            alias: 'constant'
          }
        }
      }, /\$(?:\w+|[#?*!@$])/],
      // Escape sequences from echo and printf's manuals, and escaped quotes.
      entity: /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/
    };
    Prism.languages.bash = {
      shebang: {
        pattern: /^#!\s*\/.*/,
        alias: 'important'
      },
      comment: {
        pattern: /(^|[^"{\\$])#.*/,
        lookbehind: true
      },
      'function-name': [// a) function foo {
      // b) foo() {
      // c) function foo() {
      // but not “foo {”
      {
        // a) and c)
        pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
        lookbehind: true,
        alias: 'function'
      }, {
        // b)
        pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
        alias: 'function'
      }],
      // Highlight variable names as variables in for and select beginnings.
      'for-or-select': {
        pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
        alias: 'variable',
        lookbehind: true
      },
      // Highlight variable names as variables in the left-hand part
      // of assignments (“=” and “+=”).
      'assign-left': {
        pattern: /(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,
        inside: {
          environment: {
            pattern: RegExp('(^|[\\s;|&]|[<>]\\()' + envVars),
            lookbehind: true,
            alias: 'constant'
          }
        },
        alias: 'variable',
        lookbehind: true
      },
      string: [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document
      {
        pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
        lookbehind: true,
        greedy: true,
        inside: insideString
      }, // Here-document with quotes around the tag
      // → No expansion (so no “inside”).
      {
        pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
        lookbehind: true,
        greedy: true,
        inside: {
          bash: commandAfterHeredoc
        }
      }, // “Normal” string
      {
        // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html
        pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
        lookbehind: true,
        greedy: true,
        inside: insideString
      }, {
        // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html
        pattern: /(^|[^$\\])'[^']*'/,
        lookbehind: true,
        greedy: true
      }, {
        // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html
        pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
        greedy: true,
        inside: {
          entity: insideString.entity
        }
      }],
      environment: {
        pattern: RegExp('\\$?' + envVars),
        alias: 'constant'
      },
      variable: insideString.variable,
      "function": {
        pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
        lookbehind: true
      },
      keyword: {
        pattern: /(^|[\s;|&]|[<>]\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\s;|&])/,
        lookbehind: true
      },
      // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
      builtin: {
        pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\s;|&])/,
        lookbehind: true,
        // Alias added to make those easier to distinguish from strings.
        alias: 'class-name'
      },
      "boolean": {
        pattern: /(^|[\s;|&]|[<>]\()(?:true|false)(?=$|[)\s;|&])/,
        lookbehind: true
      },
      'file-descriptor': {
        pattern: /\B&\d\b/,
        alias: 'important'
      },
      operator: {
        // Lots of redirections here, but not just that.
        pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
        inside: {
          'file-descriptor': {
            pattern: /^\d/,
            alias: 'important'
          }
        }
      },
      punctuation: /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
      number: {
        pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
        lookbehind: true
      }
    };
    commandAfterHeredoc.inside = Prism.languages.bash;
    /* Patterns in command substitution. */

    var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];
    var inside = insideString.variable[1].inside;

    for (var i = 0; i < toBeCopied.length; i++) {
      inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];
    }

    Prism.languages.shell = Prism.languages.bash;
  })(Prism);
}

/***/ }),

/***/ 7573:
/***/ ((module) => {



module.exports = basic;
basic.displayName = 'basic';
basic.aliases = [];

function basic(Prism) {
  Prism.languages.basic = {
    comment: {
      pattern: /(?:!|REM\b).+/i,
      inside: {
        keyword: /^REM/i
      }
    },
    string: {
      pattern: /"(?:""|[!#$%&'()*,\/:;<=>?^\w +\-.])*"/i,
      greedy: true
    },
    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i,
    keyword: /\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SHARED|SINGLE|SELECT CASE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\$|\b)/i,
    "function": /\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\$|\b)/i,
    operator: /<[=>]?|>=?|[+\-*\/^=&]|\b(?:AND|EQV|IMP|NOT|OR|XOR)\b/i,
    punctuation: /[,;:()]/
  };
}

/***/ }),

/***/ 9047:
/***/ ((module) => {



module.exports = batch;
batch.displayName = 'batch';
batch.aliases = [];

function batch(Prism) {
  ;

  (function (Prism) {
    var variable = /%%?[~:\w]+%?|!\S+!/;
    var parameter = {
      pattern: /\/[a-z?]+(?=[ :]|$):?|-[a-z]\b|--[a-z-]+\b/im,
      alias: 'attr-name',
      inside: {
        punctuation: /:/
      }
    };
    var string = /"(?:[\\"]"|[^"])*"(?!")/;
    var number = /(?:\b|-)\d+\b/;
    Prism.languages.batch = {
      comment: [/^::.*/m, {
        pattern: /((?:^|[&(])[ \t]*)rem\b(?:[^^&)\r\n]|\^(?:\r\n|[\s\S]))*/im,
        lookbehind: true
      }],
      label: {
        pattern: /^:.*/m,
        alias: 'property'
      },
      command: [{
        // FOR command
        pattern: /((?:^|[&(])[ \t]*)for(?: \/[a-z?](?:[ :](?:"[^"]*"|[^\s"/]\S*))?)* \S+ in \([^)]+\) do/im,
        lookbehind: true,
        inside: {
          keyword: /^for\b|\b(?:in|do)\b/i,
          string: string,
          parameter: parameter,
          variable: variable,
          number: number,
          punctuation: /[()',]/
        }
      }, {
        // IF command
        pattern: /((?:^|[&(])[ \t]*)if(?: \/[a-z?](?:[ :](?:"[^"]*"|[^\s"/]\S*))?)* (?:not )?(?:cmdextversion \d+|defined \w+|errorlevel \d+|exist \S+|(?:"[^"]*"|(?!")(?:(?!==)\S)+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:"[^"]*"|[^\s"]\S*))/im,
        lookbehind: true,
        inside: {
          keyword: /^if\b|\b(?:not|cmdextversion|defined|errorlevel|exist)\b/i,
          string: string,
          parameter: parameter,
          variable: variable,
          number: number,
          operator: /\^|==|\b(?:equ|neq|lss|leq|gtr|geq)\b/i
        }
      }, {
        // ELSE command
        pattern: /((?:^|[&()])[ \t]*)else\b/im,
        lookbehind: true,
        inside: {
          keyword: /^else\b/i
        }
      }, {
        // SET command
        pattern: /((?:^|[&(])[ \t]*)set(?: \/[a-z](?:[ :](?:"[^"]*"|[^\s"/]\S*))?)* (?:[^^&)\r\n]|\^(?:\r\n|[\s\S]))*/im,
        lookbehind: true,
        inside: {
          keyword: /^set\b/i,
          string: string,
          parameter: parameter,
          variable: [variable, /\w+(?=(?:[*\/%+\-&^|]|<<|>>)?=)/],
          number: number,
          operator: /[*\/%+\-&^|]=?|<<=?|>>=?|[!~_=]/,
          punctuation: /[()',]/
        }
      }, {
        // Other commands
        pattern: /((?:^|[&(])[ \t]*@?)\w+\b(?:"(?:[\\"]"|[^"])*"(?!")|[^"^&)\r\n]|\^(?:\r\n|[\s\S]))*/im,
        lookbehind: true,
        inside: {
          keyword: /^\w+\b/i,
          string: string,
          parameter: parameter,
          label: {
            pattern: /(^\s*):\S+/m,
            lookbehind: true,
            alias: 'property'
          },
          variable: variable,
          number: number,
          operator: /\^/
        }
      }],
      operator: /[&@]/,
      punctuation: /[()']/
    };
  })(Prism);
}

/***/ }),

/***/ 6406:
/***/ ((module) => {



module.exports = bbcode;
bbcode.displayName = 'bbcode';
bbcode.aliases = ['shortcode'];

function bbcode(Prism) {
  Prism.languages.bbcode = {
    tag: {
      pattern: /\[\/?[^\s=\]]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'"\]=]+))?(?:\s+[^\s=\]]+\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'"\]=]+))*\s*\]/,
      inside: {
        tag: {
          pattern: /^\[\/?[^\s=\]]+/,
          inside: {
            punctuation: /^\[\/?/
          }
        },
        'attr-value': {
          pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'"\]=]+)/i,
          inside: {
            punctuation: [/^=/, {
              pattern: /^(\s*)["']|["']$/,
              lookbehind: true
            }]
          }
        },
        punctuation: /\]/,
        'attr-name': /[^\s=\]]+/
      }
    }
  };
  Prism.languages.shortcode = Prism.languages.bbcode;
}

/***/ }),

/***/ 4566:
/***/ ((module) => {



module.exports = bicep;
bicep.displayName = 'bicep';
bicep.aliases = [];

function bicep(Prism) {
  // based loosely upon: https://github.com/Azure/bicep/blob/main/src/textmate/bicep.tmlanguage
  Prism.languages.bicep = {
    comment: [{
      // multiline comments eg /* ASDF */
      pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
      lookbehind: true,
      greedy: true
    }, {
      // singleline comments eg // ASDF
      pattern: /(^|[^\\:])\/\/.*/,
      lookbehind: true,
      greedy: true
    }],
    property: [{
      pattern: /([\r\n][ \t]*)[a-z_]\w*(?=[ \t]*:)/i,
      lookbehind: true
    }, {
      pattern: /([\r\n][ \t]*)'(?:\\.|\$(?!\{)|[^'\\\r\n$])*'(?=[ \t]*:)/,
      lookbehind: true,
      greedy: true
    }],
    string: [{
      pattern: /'''[^'][\s\S]*?'''/,
      greedy: true
    }, {
      pattern: /(^|[^\\'])'(?:\\.|\$(?!\{)|[^'\\\r\n$])*'/,
      lookbehind: true,
      greedy: true
    }],
    'interpolated-string': {
      pattern: /(^|[^\\'])'(?:\\.|\$(?:(?!\{)|\{[^{}\r\n]*\})|[^'\\\r\n$])*'/,
      lookbehind: true,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /\$\{[^{}\r\n]*\}/,
          inside: {
            expression: {
              pattern: /(^\$\{)[\s\S]+(?=\}$)/,
              lookbehind: true
            },
            punctuation: /^\$\{|\}$/
          }
        },
        string: /[\s\S]+/
      }
    },
    datatype: {
      pattern: /(\b(?:output|param)\b[ \t]+\w+[ \t]+)\w+\b/,
      lookbehind: true,
      alias: 'class-name'
    },
    "boolean": /\b(?:true|false)\b/,
    // https://github.com/Azure/bicep/blob/114a3251b4e6e30082a58729f19a8cc4e374ffa6/src/textmate/bicep.tmlanguage#L184
    keyword: /\b(?:targetScope|resource|module|param|var|output|for|in|if|existing|null)\b/,
    decorator: /@\w+\b/,
    "function": /\b[a-z_]\w*(?=[ \t]*\()/i,
    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i,
    operator: /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/,
    punctuation: /[{}[\];(),.:]/
  };
  Prism.languages.bicep['interpolated-string'].inside['interpolation'].inside['expression'].inside = Prism.languages.bicep;
}

/***/ }),

/***/ 5656:
/***/ ((module) => {



module.exports = birb;
birb.displayName = 'birb';
birb.aliases = [];

function birb(Prism) {
  Prism.languages.birb = Prism.languages.extend('clike', {
    string: {
      pattern: /r?("|')(?:\\.|(?!\1)[^\\])*\1/,
      greedy: true
    },
    'class-name': [/\b[A-Z](?:[\d_]*[a-zA-Z]\w*)?\b/, // matches variable and function return types (parameters as well).
    /\b[A-Z]\w*(?=\s+\w+\s*[;,=()])/],
    keyword: /\b(?:assert|break|case|class|const|default|else|enum|final|follows|for|grab|if|nest|next|new|noSeeb|return|static|switch|throw|var|void|while)\b/,
    operator: /\+\+|--|&&|\|\||<<=?|>>=?|~(?:\/=?)?|[+\-*\/%&^|=!<>]=?|\?|:/,
    variable: /\b[a-z_]\w*\b/
  });
  Prism.languages.insertBefore('birb', 'function', {
    metadata: {
      pattern: /<\w+>/,
      greedy: true,
      alias: 'symbol'
    }
  });
}

/***/ }),

/***/ 1054:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorC = __webpack_require__(3530);

module.exports = bison;
bison.displayName = 'bison';
bison.aliases = [];

function bison(Prism) {
  Prism.register(refractorC);
  Prism.languages.bison = Prism.languages.extend('c', {});
  Prism.languages.insertBefore('bison', 'comment', {
    bison: {
      // This should match all the beginning of the file
      // including the prologue(s), the bison declarations and
      // the grammar rules.
      pattern: /^(?:[^%]|%(?!%))*%%[\s\S]*?%%/,
      inside: {
        c: {
          // Allow for one level of nested braces
          pattern: /%\{[\s\S]*?%\}|\{(?:\{[^}]*\}|[^{}])*\}/,
          inside: {
            delimiter: {
              pattern: /^%?\{|%?\}$/,
              alias: 'punctuation'
            },
            'bison-variable': {
              pattern: /[$@](?:<[^\s>]+>)?[\w$]+/,
              alias: 'variable',
              inside: {
                punctuation: /<|>/
              }
            },
            rest: Prism.languages.c
          }
        },
        comment: Prism.languages.c.comment,
        string: Prism.languages.c.string,
        property: /\S+(?=:)/,
        keyword: /%\w+/,
        number: {
          pattern: /(^|[^@])\b(?:0x[\da-f]+|\d+)/i,
          lookbehind: true
        },
        punctuation: /%[%?]|[|:;\[\]<>]/
      }
    }
  });
}

/***/ }),

/***/ 279:
/***/ ((module) => {



module.exports = bnf;
bnf.displayName = 'bnf';
bnf.aliases = ['rbnf'];

function bnf(Prism) {
  Prism.languages.bnf = {
    string: {
      pattern: /"[^\r\n"]*"|'[^\r\n']*'/
    },
    definition: {
      pattern: /<[^<>\r\n\t]+>(?=\s*::=)/,
      alias: ['rule', 'keyword'],
      inside: {
        punctuation: /^<|>$/
      }
    },
    rule: {
      pattern: /<[^<>\r\n\t]+>/,
      inside: {
        punctuation: /^<|>$/
      }
    },
    operator: /::=|[|()[\]{}*+?]|\.{3}/
  };
  Prism.languages.rbnf = Prism.languages.bnf;
}

/***/ }),

/***/ 1358:
/***/ ((module) => {



module.exports = brainfuck;
brainfuck.displayName = 'brainfuck';
brainfuck.aliases = [];

function brainfuck(Prism) {
  Prism.languages.brainfuck = {
    pointer: {
      pattern: /<|>/,
      alias: 'keyword'
    },
    increment: {
      pattern: /\+/,
      alias: 'inserted'
    },
    decrement: {
      pattern: /-/,
      alias: 'deleted'
    },
    branching: {
      pattern: /\[|\]/,
      alias: 'important'
    },
    operator: /[.,]/,
    comment: /\S+/
  };
}

/***/ }),

/***/ 2171:
/***/ ((module) => {



module.exports = brightscript;
brightscript.displayName = 'brightscript';
brightscript.aliases = [];

function brightscript(Prism) {
  Prism.languages.brightscript = {
    comment: /(?:\brem|').*/i,
    'directive-statement': {
      pattern: /(^[\t ]*)#(?:const|else(?:[\t ]+if)?|end[\t ]+if|error|if).*/im,
      lookbehind: true,
      alias: 'property',
      inside: {
        'error-message': {
          pattern: /(^#error).+/,
          lookbehind: true
        },
        directive: {
          pattern: /^#(?:const|else(?:[\t ]+if)?|end[\t ]+if|error|if)/,
          alias: 'keyword'
        },
        expression: {
          pattern: /[\s\S]+/,
          inside: null // see below

        }
      }
    },
    property: {
      pattern: /([\r\n{,][\t ]*)(?:(?!\d)\w+|"(?:[^"\r\n]|"")*"(?!"))(?=[ \t]*:)/,
      lookbehind: true,
      greedy: true
    },
    string: {
      pattern: /"(?:[^"\r\n]|"")*"(?!")/,
      greedy: true
    },
    'class-name': {
      pattern: /(\bAs[\t ]+)\w+/i,
      lookbehind: true
    },
    keyword: /\b(?:As|Dim|Each|Else|Elseif|End|Exit|For|Function|Goto|If|In|Print|Return|Step|Stop|Sub|Then|To|While)\b/i,
    "boolean": /\b(?:true|false)\b/i,
    "function": /\b(?!\d)\w+(?=[\t ]*\()/i,
    number: /(?:\b\d+(?:\.\d+)?(?:[ed][+-]\d+)?|&h[a-f\d]+)\b[%&!#]?/i,
    operator: /--|\+\+|>>=?|<<=?|<>|[-+*/\\<>]=?|[:^=?]|\b(?:and|mod|not|or)\b/i,
    punctuation: /[.,;()[\]{}]/,
    constant: /\b(?:LINE_NUM)\b/i
  };
  Prism.languages.brightscript['directive-statement'].inside.expression.inside = Prism.languages.brightscript;
}

/***/ }),

/***/ 2231:
/***/ ((module) => {



module.exports = bro;
bro.displayName = 'bro';
bro.aliases = [];

function bro(Prism) {
  Prism.languages.bro = {
    comment: {
      pattern: /(^|[^\\$])#.*/,
      lookbehind: true,
      inside: {
        italic: /\b(?:TODO|FIXME|XXX)\b/
      }
    },
    string: {
      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    "boolean": /\b[TF]\b/,
    "function": {
      pattern: /(?:function|hook|event) \w+(?:::\w+)?/,
      inside: {
        keyword: /^(?:function|hook|event)/
      }
    },
    variable: {
      pattern: /(?:global|local) \w+/i,
      inside: {
        keyword: /(?:global|local)/
      }
    },
    builtin: /(?:@(?:load(?:-(?:sigs|plugin))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|group|error_handler|type_column))/,
    constant: {
      pattern: /const \w+/i,
      inside: {
        keyword: /const/
      }
    },
    keyword: /\b(?:break|next|continue|alarm|using|of|add|delete|export|print|return|schedule|when|timeout|addr|any|bool|count|double|enum|file|int|interval|pattern|opaque|port|record|set|string|subnet|table|time|vector|for|if|else|in|module|function)\b/,
    operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&|\|\|?|\?|\*|\/|~|\^|%/,
    number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
    punctuation: /[{}[\];(),.:]/
  };
}

/***/ }),

/***/ 2957:
/***/ ((module) => {



module.exports = bsl;
bsl.displayName = 'bsl';
bsl.aliases = [];

function bsl(Prism) {
  /* eslint-disable no-misleading-character-class */
  // 1C:Enterprise
  // https://github.com/Diversus23/
  //
  Prism.languages.bsl = {
    comment: /\/\/.*/,
    string: [// Строки
    // Strings
    {
      pattern: /"(?:[^"]|"")*"(?!")/,
      greedy: true
    }, // Дата и время
    // Date & time
    {
      pattern: /'(?:[^'\r\n\\]|\\.)*'/
    }],
    keyword: [{
      // RU
      pattern: /(^|[^\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])(?:пока|для|новый|прервать|попытка|исключение|вызватьисключение|иначе|конецпопытки|неопределено|функция|перем|возврат|конецфункции|если|иначеесли|процедура|конецпроцедуры|тогда|знач|экспорт|конецесли|из|каждого|истина|ложь|по|цикл|конеццикла|выполнить)(?![\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])/i,
      lookbehind: true
    }, {
      // EN
      pattern: /\b(?:while|for|new|break|try|except|raise|else|endtry|undefined|function|var|return|endfunction|null|if|elseif|procedure|endprocedure|then|val|export|endif|in|each|true|false|to|do|enddo|execute)\b/i
    }],
    number: {
      pattern: /(^(?=\d)|[^\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])(?:\d+(?:\.\d*)?|\.\d+)(?:E[+-]?\d+)?/i,
      lookbehind: true
    },
    operator: [/[<>+\-*/]=?|[%=]/, // RU
    {
      pattern: /(^|[^\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])(?:и|или|не)(?![\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])/i,
      lookbehind: true
    }, // EN
    {
      pattern: /\b(?:and|or|not)\b/i
    }],
    punctuation: /\(\.|\.\)|[()\[\]:;,.]/,
    directive: [// Теги препроцессора вида &Клиент, &Сервер, ...
    // Preprocessor tags of the type &Client, &Server, ...
    {
      pattern: /^(\s*)&.*/m,
      lookbehind: true,
      alias: 'important'
    }, // Инструкции препроцессора вида:
    // #Если Сервер Тогда
    // ...
    // #КонецЕсли
    // Preprocessor instructions of the form:
    // #If Server Then
    // ...
    // #EndIf
    {
      pattern: /^\s*#.*/gm,
      alias: 'important'
    }]
  };
  Prism.languages.oscript = Prism.languages['bsl'];
}

/***/ }),

/***/ 3530:
/***/ ((module) => {



module.exports = c;
c.displayName = 'c';
c.aliases = [];

function c(Prism) {
  Prism.languages.c = Prism.languages.extend('clike', {
    comment: {
      pattern: /\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,
      greedy: true
    },
    'class-name': {
      pattern: /(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,
      lookbehind: true
    },
    keyword: /\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\b/,
    "function": /\b[a-z_]\w*(?=\s*\()/i,
    number: /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,
    operator: />>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/
  });
  Prism.languages.insertBefore('c', 'string', {
    macro: {
      // allow for multiline macro definitions
      // spaces after the # character compile fine with gcc
      pattern: /(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,
      lookbehind: true,
      greedy: true,
      alias: 'property',
      inside: {
        string: [{
          // highlight the path of the include statement as a string
          pattern: /^(#\s*include\s*)<[^>]+>/,
          lookbehind: true
        }, Prism.languages.c['string']],
        comment: Prism.languages.c['comment'],
        'macro-name': [{
          pattern: /(^#\s*define\s+)\w+\b(?!\()/i,
          lookbehind: true
        }, {
          pattern: /(^#\s*define\s+)\w+\b(?=\()/i,
          lookbehind: true,
          alias: 'function'
        }],
        // highlight macro directives as keywords
        directive: {
          pattern: /^(#\s*)[a-z]+/,
          lookbehind: true,
          alias: 'keyword'
        },
        'directive-hash': /^#/,
        punctuation: /##|\\(?=[\r\n])/,
        expression: {
          pattern: /\S[\s\S]*/,
          inside: Prism.languages.c
        }
      }
    },
    // highlight predefined macros as constants
    constant: /\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\b/
  });
  delete Prism.languages.c['boolean'];
}

/***/ }),

/***/ 2208:
/***/ ((module) => {



module.exports = cfscript;
cfscript.displayName = 'cfscript';
cfscript.aliases = [];

function cfscript(Prism) {
  // https://cfdocs.org/script
  Prism.languages.cfscript = Prism.languages.extend('clike', {
    comment: [{
      pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
      lookbehind: true,
      inside: {
        annotation: {
          pattern: /(?:^|[^.])@[\w\.]+/,
          alias: 'punctuation'
        }
      }
    }, {
      pattern: /(^|[^\\:])\/\/.*/,
      lookbehind: true,
      greedy: true
    }],
    keyword: /\b(?:abstract|break|catch|component|continue|default|do|else|extends|final|finally|for|function|if|in|include|package|private|property|public|remote|required|rethrow|return|static|switch|throw|try|var|while|xml)\b(?!\s*=)/,
    operator: [/\+\+|--|&&|\|\||::|=>|[!=]==|<=?|>=?|[-+*/%&|^!=<>]=?|\?(?:\.|:)?|[?:]/, /\b(?:and|contains|eq|equal|eqv|gt|gte|imp|is|lt|lte|mod|not|or|xor)\b/],
    scope: {
      pattern: /\b(?:application|arguments|cgi|client|cookie|local|session|super|this|variables)\b/,
      alias: 'global'
    },
    type: {
      pattern: /\b(?:any|array|binary|boolean|date|guid|numeric|query|string|struct|uuid|void|xml)\b/,
      alias: 'builtin'
    }
  });
  Prism.languages.insertBefore('cfscript', 'keyword', {
    // This must be declared before keyword because we use "function" inside the lookahead
    'function-variable': {
      pattern: /[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
      alias: 'function'
    }
  });
  delete Prism.languages.cfscript['class-name'];
  Prism.languages.cfc = Prism.languages['cfscript'];
}

/***/ }),

/***/ 7463:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorCpp = __webpack_require__(8746);

module.exports = chaiscript;
chaiscript.displayName = 'chaiscript';
chaiscript.aliases = [];

function chaiscript(Prism) {
  Prism.register(refractorCpp);
  Prism.languages.chaiscript = Prism.languages.extend('clike', {
    string: {
      pattern: /(^|[^\\])'(?:[^'\\]|\\[\s\S])*'/,
      lookbehind: true,
      greedy: true
    },
    'class-name': [{
      // e.g. class Rectangle { ... }
      pattern: /(\bclass\s+)\w+/,
      lookbehind: true
    }, {
      // e.g. attr Rectangle::height, def Rectangle::area() { ... }
      pattern: /(\b(?:attr|def)\s+)\w+(?=\s*::)/,
      lookbehind: true
    }],
    keyword: /\b(?:attr|auto|break|case|catch|class|continue|def|default|else|finally|for|fun|global|if|return|switch|this|try|var|while)\b/,
    number: [Prism.languages.cpp.number, /\b(?:Infinity|NaN)\b/],
    operator: />>=?|<<=?|\|\||&&|:[:=]?|--|\+\+|[=!<>+\-*/%|&^]=?|[?~]|`[^`\r\n]{1,4}`/
  });
  Prism.languages.insertBefore('chaiscript', 'operator', {
    'parameter-type': {
      // e.g. def foo(int x, Vector y) {...}
      pattern: /([,(]\s*)\w+(?=\s+\w)/,
      lookbehind: true,
      alias: 'class-name'
    }
  });
  Prism.languages.insertBefore('chaiscript', 'string', {
    'string-interpolation': {
      pattern: /(^|[^\\])"(?:[^"$\\]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})*"/,
      lookbehind: true,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\}/,
          lookbehind: true,
          inside: {
            'interpolation-expression': {
              pattern: /(^\$\{)[\s\S]+(?=\}$)/,
              lookbehind: true,
              inside: Prism.languages.chaiscript
            },
            'interpolation-punctuation': {
              pattern: /^\$\{|\}$/,
              alias: 'punctuation'
            }
          }
        },
        string: /[\s\S]+/
      }
    }
  });
}

/***/ }),

/***/ 4882:
/***/ ((module) => {



module.exports = cil;
cil.displayName = 'cil';
cil.aliases = [];

function cil(Prism) {
  Prism.languages.cil = {
    comment: /\/\/.*/,
    string: {
      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    directive: {
      pattern: /(^|\W)\.[a-z]+(?=\s)/,
      lookbehind: true,
      alias: 'class-name'
    },
    // Actually an assembly reference
    variable: /\[[\w\.]+\]/,
    keyword: /\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|iant|idispatch|implements|import|initonly|instance|u?int(?:8|16|32|64)?|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\b/,
    "function": /\b(?:(?:constrained|unaligned|volatile|readonly|tail|no)\.)?(?:conv\.(?:[iu][1248]?|ovf\.[iu][1248]?(?:\.un)?|r\.un|r4|r8)|ldc\.(?:i4(?:\.[0-9]+|\.[mM]1|\.s)?|i8|r4|r8)|ldelem(?:\.[iu][1248]?|\.r[48]|\.ref|a)?|ldind\.(?:[iu][1248]?|r[48]|ref)|stelem\.?(?:i[1248]?|r[48]|ref)?|stind\.(?:i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\.[0-3s]|a(?:\.s)?)?|ldloc(?:\.[0-9]+|\.s)?|sub(?:\.ovf(?:\.un)?)?|mul(?:\.ovf(?:\.un)?)?|add(?:\.ovf(?:\.un)?)?|stloc(?:\.[0-3s])?|refany(?:type|val)|blt(?:\.un)?(?:\.s)?|ble(?:\.un)?(?:\.s)?|bgt(?:\.un)?(?:\.s)?|bge(?:\.un)?(?:\.s)?|unbox(?:\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\.s)?|bne\.un(?:\.s)?|ldloca(?:\.s)?|brzero(?:\.s)?|brtrue(?:\.s)?|brnull(?:\.s)?|brinst(?:\.s)?|starg(?:\.s)?|leave(?:\.s)?|shr(?:\.un)?|rem(?:\.un)?|div(?:\.un)?|clt(?:\.un)?|alignment|ldvirtftn|castclass|beq(?:\.s)?|mkrefany|localloc|ckfinite|rethrow|ldtoken|ldsflda|cgt\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|cgt|ceq|box|and|or|br)\b/,
    "boolean": /\b(?:true|false)\b/,
    number: /\b-?(?:0x[0-9a-f]+|[0-9]+)(?:\.[0-9a-f]+)?\b/i,
    punctuation: /[{}[\];(),:=]|IL_[0-9A-Za-z]+/
  };
}

/***/ }),

/***/ 3169:
/***/ ((module) => {



module.exports = clike;
clike.displayName = 'clike';
clike.aliases = [];

function clike(Prism) {
  Prism.languages.clike = {
    comment: [{
      pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
      lookbehind: true,
      greedy: true
    }, {
      pattern: /(^|[^\\:])\/\/.*/,
      lookbehind: true,
      greedy: true
    }],
    string: {
      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    'class-name': {
      pattern: /(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,
      lookbehind: true,
      inside: {
        punctuation: /[.\\]/
      }
    },
    keyword: /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
    "boolean": /\b(?:true|false)\b/,
    "function": /\b\w+(?=\()/,
    number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
    operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
    punctuation: /[{}[\];(),.:]/
  };
}

/***/ }),

/***/ 2084:
/***/ ((module) => {



module.exports = clojure;
clojure.displayName = 'clojure';
clojure.aliases = [];

function clojure(Prism) {
  // Copied from https://github.com/jeluard/prism-clojure
  Prism.languages.clojure = {
    comment: {
      pattern: /;.*/,
      greedy: true
    },
    string: [{
      pattern: /"(?:[^"\\]|\\.)*"/,
      greedy: true
    }, // characters
    /\\\w+/],
    symbol: {
      pattern: /(^|[\s()\[\]{},])::?[\w*+!?'<>=/.-]+/,
      lookbehind: true
    },
    keyword: {
      pattern: /(\()(?:-|->|->>|\.|\.\.|\*|\/|\+|<|<=|=|==|>|>=|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|cond|conj|cons|constantly|construct-proxy|contains\?|count|create-ns|create-struct|cycle|dec|declare|def|def-|definline|definterface|defmacro|defmethod|defmulti|defn|defn-|defonce|defproject|defprotocol|defrecord|defstruct|deftype|deref|difference|disj|dissoc|distinct|do|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\?|ensure|eval|every\?|false\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|fn|fnseq|for|frest|gensym|get|get-proxy-class|hash-map|hash-set|identical\?|identity|if|if-let|if-not|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\?|last|lazy-cat|lazy-cons|left|lefts|let|line-seq|list|list\*|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|monitor-enter|name|namespace|neg\?|new|newline|next|nil\?|node|not|not-any\?|not-every\?|not=|ns|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|quote|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|recur|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\?|set|set!|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\?|split-at|split-with|str|string\?|struct|struct-map|subs|subvec|symbol|symbol\?|sync|take|take-nth|take-while|test|throw|time|to-array|to-array-2d|tree-seq|true\?|try|union|up|update-proxy|val|vals|var|var-get|var-set|var\?|vector|vector-zip|vector\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\?|zipmap|zipper)(?=[\s)]|$)/,
      lookbehind: true
    },
    "boolean": /\b(?:true|false|nil)\b/,
    number: {
      pattern: /(^|[^\w$@])(?:\d+(?:[/.]\d+)?(?:e[+-]?\d+)?|0x[a-f0-9]+|[1-9]\d?r[a-z0-9]+)[lmn]?(?![\w$@])/i,
      lookbehind: true
    },
    "function": {
      pattern: /((?:^|[^'])\()[\w*+!?'<>=/.-]+(?=[\s)]|$)/,
      lookbehind: true
    },
    operator: /[#@^`~]/,
    punctuation: /[{}\[\](),]/
  };
}

/***/ }),

/***/ 1165:
/***/ ((module) => {



module.exports = cmake;
cmake.displayName = 'cmake';
cmake.aliases = [];

function cmake(Prism) {
  Prism.languages.cmake = {
    comment: /#.*/,
    string: {
      pattern: /"(?:[^\\"]|\\.)*"/,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /\$\{(?:[^{}$]|\$\{[^{}$]*\})*\}/,
          inside: {
            punctuation: /\$\{|\}/,
            variable: /\w+/
          }
        }
      }
    },
    variable: /\b(?:CMAKE_\w+|\w+_(?:VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?|(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT)|(?:ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_(?:BINARY_DIR|DESCRIPTION|HOMEPAGE_URL|NAME|SOURCE_DIR|VERSION|VERSION_(?:MAJOR|MINOR|PATCH|TWEAK))|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE|XCODE_VERSION))\b/,
    property: /\b(?:cxx_\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\w+|\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|GLOBAL_KEYWORD|GLOBAL_PROJECT_TYPES|GLOBAL_ROOTNAMESPACE|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\b/,
    keyword: /\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\s*\()\b/,
    "boolean": /\b(?:ON|OFF|TRUE|FALSE)\b/,
    namespace: /\b(?:PROPERTIES|SHARED|PRIVATE|STATIC|PUBLIC|INTERFACE|TARGET_OBJECTS)\b/,
    operator: /\b(?:NOT|AND|OR|MATCHES|LESS|GREATER|EQUAL|STRLESS|STRGREATER|STREQUAL|VERSION_LESS|VERSION_EQUAL|VERSION_GREATER|DEFINED)\b/,
    inserted: {
      pattern: /\b\w+::\w+\b/,
      alias: 'class-name'
    },
    number: /\b\d+(?:\.\d+)*\b/,
    "function": /\b[a-z_]\w*(?=\s*\()\b/i,
    punctuation: /[()>}]|\$[<{]/
  };
}

/***/ }),

/***/ 955:
/***/ ((module) => {



module.exports = cobol;
cobol.displayName = 'cobol';
cobol.aliases = [];

function cobol(Prism) {
  Prism.languages.cobol = {
    comment: {
      pattern: /\*>.*|(^[ \t]*)\*.*/m,
      lookbehind: true,
      greedy: true
    },
    string: {
      pattern: /[xzgn]?(?:"(?:[^\r\n"]|"")*"(?!")|'(?:[^\r\n']|'')*'(?!'))/i,
      greedy: true
    },
    level: {
      pattern: /(^[ \t]*)\d+\b/m,
      lookbehind: true,
      greedy: true,
      alias: 'number'
    },
    'class-name': {
      // https://github.com/antlr/grammars-v4/blob/42edd5b687d183b5fa679e858a82297bd27141e7/cobol85/Cobol85.g4#L1015
      pattern: /(\bpic(?:ture)?\s+)(?:(?:[-\w$/,:*+<>]|\.(?!\s|$))(?:\(\d+\))?)+/i,
      lookbehind: true,
      inside: {
        number: {
          pattern: /(\()\d+/,
          lookbehind: true
        },
        punctuation: /[()]/
      }
    },
    keyword: {
      pattern: /(^|[^\w-])(?:ABORT|ACCEPT|ACCESS|ADD|ADDRESS|ADVANCING|AFTER|ALIGNED|ALL|ALPHABET|ALPHABETIC|ALPHABETIC-LOWER|ALPHABETIC-UPPER|ALPHANUMERIC|ALPHANUMERIC-EDITED|ALSO|ALTER|ALTERNATE|ANY|ARE|AREA|AREAS|AS|ASCENDING|ASCII|ASSIGN|ASSOCIATED-DATA|ASSOCIATED-DATA-LENGTH|AT|ATTRIBUTE|AUTHOR|AUTO|AUTO-SKIP|BACKGROUND-COLOR|BACKGROUND-COLOUR|BASIS|BEEP|BEFORE|BEGINNING|BELL|BINARY|BIT|BLANK|BLINK|BLOCK|BOUNDS|BOTTOM|BY|BYFUNCTION|BYTITLE|CALL|CANCEL|CAPABLE|CCSVERSION|CD|CF|CH|CHAINING|CHANGED|CHANNEL|CHARACTER|CHARACTERS|CLASS|CLASS-ID|CLOCK-UNITS|CLOSE|CLOSE-DISPOSITION|COBOL|CODE|CODE-SET|COLLATING|COL|COLUMN|COM-REG|COMMA|COMMITMENT|COMMON|COMMUNICATION|COMP|COMP-1|COMP-2|COMP-3|COMP-4|COMP-5|COMPUTATIONAL|COMPUTATIONAL-1|COMPUTATIONAL-2|COMPUTATIONAL-3|COMPUTATIONAL-4|COMPUTATIONAL-5|COMPUTE|CONFIGURATION|CONTAINS|CONTENT|CONTINUE|CONTROL|CONTROL-POINT|CONTROLS|CONVENTION|CONVERTING|COPY|CORR|CORRESPONDING|COUNT|CRUNCH|CURRENCY|CURSOR|DATA|DATA-BASE|DATE|DATE-COMPILED|DATE-WRITTEN|DAY|DAY-OF-WEEK|DBCS|DE|DEBUG-CONTENTS|DEBUG-ITEM|DEBUG-LINE|DEBUG-NAME|DEBUG-SUB-1|DEBUG-SUB-2|DEBUG-SUB-3|DEBUGGING|DECIMAL-POINT|DECLARATIVES|DEFAULT|DEFAULT-DISPLAY|DEFINITION|DELETE|DELIMITED|DELIMITER|DEPENDING|DESCENDING|DESTINATION|DETAIL|DFHRESP|DFHVALUE|DISABLE|DISK|DISPLAY|DISPLAY-1|DIVIDE|DIVISION|DONTCARE|DOUBLE|DOWN|DUPLICATES|DYNAMIC|EBCDIC|EGCS|EGI|ELSE|EMI|EMPTY-CHECK|ENABLE|END|END-ACCEPT|END-ADD|END-CALL|END-COMPUTE|END-DELETE|END-DIVIDE|END-EVALUATE|END-IF|END-MULTIPLY|END-OF-PAGE|END-PERFORM|END-READ|END-RECEIVE|END-RETURN|END-REWRITE|END-SEARCH|END-START|END-STRING|END-SUBTRACT|END-UNSTRING|END-WRITE|ENDING|ENTER|ENTRY|ENTRY-PROCEDURE|ENVIRONMENT|EOP|ERASE|ERROR|EOL|EOS|ESCAPE|ESI|EVALUATE|EVENT|EVERY|EXCEPTION|EXCLUSIVE|EXHIBIT|EXIT|EXPORT|EXTEND|EXTENDED|EXTERNAL|FD|FILE|FILE-CONTROL|FILLER|FINAL|FIRST|FOOTING|FOR|FOREGROUND-COLOR|FOREGROUND-COLOUR|FROM|FULL|FUNCTION|FUNCTIONNAME|FUNCTION-POINTER|GENERATE|GOBACK|GIVING|GLOBAL|GO|GRID|GROUP|HEADING|HIGHLIGHT|HIGH-VALUE|HIGH-VALUES|I-O|I-O-CONTROL|ID|IDENTIFICATION|IF|IMPLICIT|IMPORT|IN|INDEX|INDEXED|INDICATE|INITIAL|INITIALIZE|INITIATE|INPUT|INPUT-OUTPUT|INSPECT|INSTALLATION|INTEGER|INTO|INVALID|INVOKE|IS|JUST|JUSTIFIED|KANJI|KEPT|KEY|KEYBOARD|LABEL|LANGUAGE|LAST|LB|LD|LEADING|LEFT|LEFTLINE|LENGTH|LENGTH-CHECK|LIBACCESS|LIBPARAMETER|LIBRARY|LIMIT|LIMITS|LINAGE|LINAGE-COUNTER|LINE|LINES|LINE-COUNTER|LINKAGE|LIST|LOCAL|LOCAL-STORAGE|LOCK|LONG-DATE|LONG-TIME|LOWER|LOWLIGHT|LOW-VALUE|LOW-VALUES|MEMORY|MERGE|MESSAGE|MMDDYYYY|MODE|MODULES|MORE-LABELS|MOVE|MULTIPLE|MULTIPLY|NAMED|NATIONAL|NATIONAL-EDITED|NATIVE|NEGATIVE|NETWORK|NEXT|NO|NO-ECHO|NULL|NULLS|NUMBER|NUMERIC|NUMERIC-DATE|NUMERIC-EDITED|NUMERIC-TIME|OBJECT-COMPUTER|OCCURS|ODT|OF|OFF|OMITTED|ON|OPEN|OPTIONAL|ORDER|ORDERLY|ORGANIZATION|OTHER|OUTPUT|OVERFLOW|OVERLINE|OWN|PACKED-DECIMAL|PADDING|PAGE|PAGE-COUNTER|PASSWORD|PERFORM|PF|PH|PIC|PICTURE|PLUS|POINTER|POSITION|POSITIVE|PORT|PRINTER|PRINTING|PRIVATE|PROCEDURE|PROCEDURE-POINTER|PROCEDURES|PROCEED|PROCESS|PROGRAM|PROGRAM-ID|PROGRAM-LIBRARY|PROMPT|PURGE|QUEUE|QUOTE|QUOTES|RANDOM|READER|REMOTE|RD|REAL|READ|RECEIVE|RECEIVED|RECORD|RECORDING|RECORDS|RECURSIVE|REDEFINES|REEL|REF|REFERENCE|REFERENCES|RELATIVE|RELEASE|REMAINDER|REMARKS|REMOVAL|REMOVE|RENAMES|REPLACE|REPLACING|REPORT|REPORTING|REPORTS|REQUIRED|RERUN|RESERVE|REVERSE-VIDEO|RESET|RETURN|RETURN-CODE|RETURNING|REVERSED|REWIND|REWRITE|RF|RH|RIGHT|ROUNDED|RUN|SAME|SAVE|SCREEN|SD|SEARCH|SECTION|SECURE|SECURITY|SEGMENT|SEGMENT-LIMIT|SELECT|SEND|SENTENCE|SEPARATE|SEQUENCE|SEQUENTIAL|SET|SHARED|SHAREDBYALL|SHAREDBYRUNUNIT|SHARING|SHIFT-IN|SHIFT-OUT|SHORT-DATE|SIGN|SIZE|SORT|SORT-CONTROL|SORT-CORE-SIZE|SORT-FILE-SIZE|SORT-MERGE|SORT-MESSAGE|SORT-MODE-SIZE|SORT-RETURN|SOURCE|SOURCE-COMPUTER|SPACE|SPACES|SPECIAL-NAMES|STANDARD|STANDARD-1|STANDARD-2|START|STATUS|STOP|STRING|SUB-QUEUE-1|SUB-QUEUE-2|SUB-QUEUE-3|SUBTRACT|SUM|SUPPRESS|SYMBOL|SYMBOLIC|SYNC|SYNCHRONIZED|TABLE|TALLY|TALLYING|TASK|TAPE|TERMINAL|TERMINATE|TEST|TEXT|THEN|THREAD|THREAD-LOCAL|THROUGH|THRU|TIME|TIMER|TIMES|TITLE|TO|TODAYS-DATE|TODAYS-NAME|TOP|TRAILING|TRUNCATED|TYPE|TYPEDEF|UNDERLINE|UNIT|UNSTRING|UNTIL|UP|UPON|USAGE|USE|USING|VALUE|VALUES|VARYING|VIRTUAL|WAIT|WHEN|WHEN-COMPILED|WITH|WORDS|WORKING-STORAGE|WRITE|YEAR|YYYYMMDD|YYYYDDD|ZERO-FILL|ZEROS|ZEROES)(?![\w-])/i,
      lookbehind: true
    },
    "boolean": {
      pattern: /(^|[^\w-])(?:false|true)(?![\w-])/i,
      lookbehind: true
    },
    number: {
      pattern: /(^|[^\w-])(?:[+-]?(?:(?:\d+(?:[.,]\d+)?|[.,]\d+)(?:e[+-]?\d+)?|zero))(?![\w-])/i,
      lookbehind: true
    },
    operator: [/<>|[<>]=?|[=+*/&]/, {
      pattern: /(^|[^\w-])(?:-|and|equal|greater|less|not|or|than)(?![\w-])/i,
      lookbehind: true
    }],
    punctuation: /[.:,()]/
  };
}

/***/ }),

/***/ 453:
/***/ ((module) => {



module.exports = coffeescript;
coffeescript.displayName = 'coffeescript';
coffeescript.aliases = ['coffee'];

function coffeescript(Prism) {
  ;

  (function (Prism) {
    // Ignore comments starting with { to privilege string interpolation highlighting
    var comment = /#(?!\{).+/;
    var interpolation = {
      pattern: /#\{[^}]+\}/,
      alias: 'variable'
    };
    Prism.languages.coffeescript = Prism.languages.extend('javascript', {
      comment: comment,
      string: [// Strings are multiline
      {
        pattern: /'(?:\\[\s\S]|[^\\'])*'/,
        greedy: true
      }, {
        // Strings are multiline
        pattern: /"(?:\\[\s\S]|[^\\"])*"/,
        greedy: true,
        inside: {
          interpolation: interpolation
        }
      }],
      keyword: /\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\b/,
      'class-member': {
        pattern: /@(?!\d)\w+/,
        alias: 'variable'
      }
    });
    Prism.languages.insertBefore('coffeescript', 'comment', {
      'multiline-comment': {
        pattern: /###[\s\S]+?###/,
        alias: 'comment'
      },
      // Block regexp can contain comments and interpolation
      'block-regex': {
        pattern: /\/{3}[\s\S]*?\/{3}/,
        alias: 'regex',
        inside: {
          comment: comment,
          interpolation: interpolation
        }
      }
    });
    Prism.languages.insertBefore('coffeescript', 'string', {
      'inline-javascript': {
        pattern: /`(?:\\[\s\S]|[^\\`])*`/,
        inside: {
          delimiter: {
            pattern: /^`|`$/,
            alias: 'punctuation'
          },
          script: {
            pattern: /[\s\S]+/,
            alias: 'language-javascript',
            inside: Prism.languages.javascript
          }
        }
      },
      // Block strings
      'multiline-string': [{
        pattern: /'''[\s\S]*?'''/,
        greedy: true,
        alias: 'string'
      }, {
        pattern: /"""[\s\S]*?"""/,
        greedy: true,
        alias: 'string',
        inside: {
          interpolation: interpolation
        }
      }]
    });
    Prism.languages.insertBefore('coffeescript', 'keyword', {
      // Object property
      property: /(?!\d)\w+(?=\s*:(?!:))/
    });
    delete Prism.languages.coffeescript['template-string'];
    Prism.languages.coffee = Prism.languages.coffeescript;
  })(Prism);
}

/***/ }),

/***/ 827:
/***/ ((module) => {



module.exports = concurnas;
concurnas.displayName = 'concurnas';
concurnas.aliases = ['conc'];

function concurnas(Prism) {
  Prism.languages.concurnas = {
    comment: [{
      pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
      lookbehind: true
    }, {
      pattern: /(^|[^\\:])\/\/.*/,
      lookbehind: true,
      greedy: true
    }],
    langext: {
      pattern: /\b\w+\s*\|\|[\s\S]+?\|\|/,
      greedy: true,
      alias: 'string'
    },
    "function": {
      pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/,
      lookbehind: true
    },
    keyword: /\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\b/,
    "boolean": /\b(?:false|true)\b/,
    number: /\b0b[01][01_]*L?\b|\b0x(?:[\da-f_]*\.)?[\da-f_p+-]+\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfls]?/i,
    punctuation: /[{}[\];(),.:]/,
    operator: /<==|>==|=>|->|<-|<>|\^|&==|&<>|!|\?:?|\.\?|\+\+|--|[-+*/=<>]=?|\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\b=?/,
    annotation: {
      pattern: /@(?:\w+:)?(?:\w+|\[[^\]]+\])?/,
      alias: 'builtin'
    }
  };
  Prism.languages.insertBefore('concurnas', 'langext', {
    string: {
      pattern: /[rs]?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /((?:^|[^\\])(?:\\{2})*)\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
          lookbehind: true,
          inside: Prism.languages.concurnas
        },
        string: /[\s\S]+/
      }
    }
  });
  Prism.languages.conc = Prism.languages.concurnas;
}

/***/ }),

/***/ 1389:
/***/ ((module) => {



module.exports = coq;
coq.displayName = 'coq';
coq.aliases = [];

function coq(Prism) {
  ;

  (function (Prism) {
    // https://github.com/coq/coq
    var commentSource = /\(\*(?:[^(*]|\((?!\*)|\*(?!\))|<self>)*\*\)/.source;

    for (var i = 0; i < 2; i++) {
      commentSource = commentSource.replace(/<self>/g, function () {
        return commentSource;
      });
    }

    commentSource = commentSource.replace(/<self>/g, '[]');
    Prism.languages.coq = {
      comment: RegExp(commentSource),
      string: {
        pattern: /"(?:[^"]|"")*"(?!")/,
        greedy: true
      },
      attribute: [{
        pattern: RegExp(/#\[(?:[^\]("]|"(?:[^"]|"")*"(?!")|\((?!\*)|<comment>)*\]/.source.replace(/<comment>/g, function () {
          return commentSource;
        })),
        greedy: true,
        alias: 'attr-name',
        inside: {
          comment: RegExp(commentSource),
          string: {
            pattern: /"(?:[^"]|"")*"(?!")/,
            greedy: true
          },
          operator: /=/,
          punctuation: /^#\[|\]$|[,()]/
        }
      }, {
        pattern: /\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\b/,
        alias: 'attr-name'
      }],
      keyword: /\b(?:_|Abort|About|Add|Admit|Admitted|All|apply|Arguments|as|As|Assumptions|at|Axiom|Axioms|Back|BackTo|Backtrace|Bind|BinOp|BinOpSpec|BinRel|Blacklist|by|Canonical|Case|Cd|Check|Class|Classes|Close|Coercion|Coercions|cofix|CoFixpoint|CoInductive|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|else|end|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|exists|exists2|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|fix|Fixpoint|Flags|Focus|for|forall|From|fun|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|Identity|if|IF|Immediate|Implicit|Implicits|Import|in|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|let|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|match|Match|measure|Method|Minimality|ML|Module|Modules|Morphism|move|Next|NoInline|Notation|Number|Obligation|Obligations|OCaml|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|Property|PropOp|Proposition|PropUOp|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|removed|Require|Reserved|Reset|Resolve|Restart|return|Rewrite|Right|Ring|Rings|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|SProp|Step|Strategies|Strategy|String|struct|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|then|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|UnOp|UnOpSpec|Unshelve|using|Variable|Variables|Variant|Verbose|View|Visibility|wf|where|with|Zify)\b/,
      number: /\b(?:0x[a-f0-9][a-f0-9_]*(?:\.[a-f0-9_]+)?(?:p[+-]?\d[\d_]*)?|\d[\d_]*(?:\.[\d_]+)?(?:e[+-]?\d[\d_]*)?)\b/i,
      punct: {
        pattern: /@\{|\{\||\[=|:>/,
        alias: 'punctuation'
      },
      operator: /\/\\|\\\/|\.{2,3}|:{1,2}=|\*\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\|[-|]?|[-!%&*+/<=>?@^~']/,
      punctuation: /\.\(|`\(|@\{|`\{|\{\||\[=|:>|[:.,;(){}\[\]]/
    };
  })(Prism);
}

/***/ }),

/***/ 8746:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorC = __webpack_require__(3530);

module.exports = cpp;
cpp.displayName = 'cpp';
cpp.aliases = [];

function cpp(Prism) {
  Prism.register(refractorC);

  (function (Prism) {
    var keyword = /\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/;
    var modName = /\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g, function () {
      return keyword.source;
    });
    Prism.languages.cpp = Prism.languages.extend('c', {
      'class-name': [{
        pattern: RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(/<keyword>/g, function () {
          return keyword.source;
        })),
        lookbehind: true
      }, // This is intended to capture the class name of method implementations like:
      //   void foo::bar() const {}
      // However! The `foo` in the above example could also be a namespace, so we only capture the class name if
      // it starts with an uppercase letter. This approximation should give decent results.
      /\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/, // This will capture the class name before destructors like:
      //   Foo::~Foo() {}
      /\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i, // This also intends to capture the class name of method implementations but here the class has template
      // parameters, so it can't be a namespace (until C++ adds generic namespaces).
      /\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/],
      keyword: keyword,
      number: {
        pattern: /(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,
        greedy: true
      },
      operator: />>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,
      "boolean": /\b(?:true|false)\b/
    });
    Prism.languages.insertBefore('cpp', 'string', {
      module: {
        // https://en.cppreference.com/w/cpp/language/modules
        pattern: RegExp(/(\b(?:module|import)\s+)/.source + '(?:' + // header-name
        /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source + '|' + // module name or partition or both
        /<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g, function () {
          return modName;
        }) + ')'),
        lookbehind: true,
        greedy: true,
        inside: {
          string: /^[<"][\s\S]+/,
          operator: /:/,
          punctuation: /\./
        }
      },
      'raw-string': {
        pattern: /R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,
        alias: 'string',
        greedy: true
      }
    });
    Prism.languages.insertBefore('cpp', 'keyword', {
      'generic-function': {
        pattern: /\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,
        inside: {
          "function": /^\w+/,
          generic: {
            pattern: /<[\s\S]+/,
            alias: 'class-name',
            inside: Prism.languages.cpp
          }
        }
      }
    });
    Prism.languages.insertBefore('cpp', 'operator', {
      'double-colon': {
        pattern: /::/,
        alias: 'punctuation'
      }
    });
    Prism.languages.insertBefore('cpp', 'class-name', {
      // the base clause is an optional list of parent classes
      // https://en.cppreference.com/w/cpp/language/class
      'base-clause': {
        pattern: /(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,
        lookbehind: true,
        greedy: true,
        inside: Prism.languages.extend('cpp', {})
      }
    });
    Prism.languages.insertBefore('inside', 'double-colon', {
      // All untokenized words that are not namespaces should be class names
      'class-name': /\b[a-z_]\w*\b(?!\s*::)/i
    }, Prism.languages.cpp['base-clause']);
  })(Prism);
}

/***/ }),

/***/ 1549:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorRuby = __webpack_require__(9636);

module.exports = crystal;
crystal.displayName = 'crystal';
crystal.aliases = [];

function crystal(Prism) {
  Prism.register(refractorRuby);

  (function (Prism) {
    Prism.languages.crystal = Prism.languages.extend('ruby', {
      keyword: [/\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\b/, {
        pattern: /(\.\s*)(?:is_a|responds_to)\?/,
        lookbehind: true
      }],
      number: /\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\da-fA-F_]*[\da-fA-F]|(?:\d(?:[\d_]*\d)?)(?:\.[\d_]*\d)?(?:[eE][+-]?[\d_]*\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\b/
    });
    Prism.languages.insertBefore('crystal', 'string', {
      attribute: {
        pattern: /@\[.+?\]/,
        alias: 'attr-name',
        inside: {
          delimiter: {
            pattern: /^@\[|\]$/,
            alias: 'tag'
          },
          rest: Prism.languages.crystal
        }
      },
      expansion: [{
        pattern: /\{\{.+?\}\}/,
        inside: {
          delimiter: {
            pattern: /^\{\{|\}\}$/,
            alias: 'tag'
          },
          rest: Prism.languages.crystal
        }
      }, {
        pattern: /\{%.+?%\}/,
        inside: {
          delimiter: {
            pattern: /^\{%|%\}$/,
            alias: 'tag'
          },
          rest: Prism.languages.crystal
        }
      }]
    });
  })(Prism);
}

/***/ }),

/***/ 6854:
/***/ ((module) => {



module.exports = csharp;
csharp.displayName = 'csharp';
csharp.aliases = ['dotnet', 'cs'];

function csharp(Prism) {
  ;

  (function (Prism) {
    /**
     * Replaces all placeholders "<<n>>" of given pattern with the n-th replacement (zero based).
     *
     * Note: This is a simple text based replacement. Be careful when using backreferences!
     *
     * @param {string} pattern the given pattern.
     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.
     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.
     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source
     */
    function replace(pattern, replacements) {
      return pattern.replace(/<<(\d+)>>/g, function (m, index) {
        return '(?:' + replacements[+index] + ')';
      });
    }
    /**
     * @param {string} pattern
     * @param {string[]} replacements
     * @param {string} [flags]
     * @returns {RegExp}
     */


    function re(pattern, replacements, flags) {
      return RegExp(replace(pattern, replacements), flags || '');
    }
    /**
     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.
     *
     * @param {string} pattern
     * @param {number} depthLog2
     * @returns {string}
     */


    function nested(pattern, depthLog2) {
      for (var i = 0; i < depthLog2; i++) {
        pattern = pattern.replace(/<<self>>/g, function () {
          return '(?:' + pattern + ')';
        });
      }

      return pattern.replace(/<<self>>/g, '[^\\s\\S]');
    } // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/


    var keywordKinds = {
      // keywords which represent a return or variable type
      type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',
      // keywords which are used to declare a type
      typeDeclaration: 'class enum interface record struct',
      // contextual keywords
      // ("var" and "dynamic" are missing because they are used like types)
      contextual: 'add alias and ascending async await by descending from(?=\\s*(?:\\w|$)) get global group into init(?=\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\s*{)',
      // all other keywords
      other: 'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'
    }; // keywords

    function keywordsToPattern(words) {
      return '\\b(?:' + words.trim().replace(/ /g, '|') + ')\\b';
    }

    var typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);
    var keywords = RegExp(keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other));
    var nonTypeKeywords = keywordsToPattern(keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other);
    var nonContextualKeywords = keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.other); // types

    var generic = nested(/<(?:[^<>;=+\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.

    var nestedRound = nested(/\((?:[^()]|<<self>>)*\)/.source, 2);
    var name = /@?\b[A-Za-z_]\w*\b/.source;
    var genericName = replace(/<<0>>(?:\s*<<1>>)?/.source, [name, generic]);
    var identifier = replace(/(?!<<0>>)<<1>>(?:\s*\.\s*<<1>>)*/.source, [nonTypeKeywords, genericName]);
    var array = /\[\s*(?:,\s*)*\]/.source;
    var typeExpressionWithoutTuple = replace(/<<0>>(?:\s*(?:\?\s*)?<<1>>)*(?:\s*\?)?/.source, [identifier, array]);
    var tupleElement = replace(/[^,()<>[\];=+\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [generic, nestedRound, array]);
    var tuple = replace(/\(<<0>>+(?:,<<0>>+)+\)/.source, [tupleElement]);
    var typeExpression = replace(/(?:<<0>>|<<1>>)(?:\s*(?:\?\s*)?<<2>>)*(?:\s*\?)?/.source, [tuple, identifier, array]);
    var typeInside = {
      keyword: keywords,
      punctuation: /[<>()?,.:[\]]/
    }; // strings & characters
    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals
    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals

    var character = /'(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'/.source; // simplified pattern

    var regularString = /"(?:\\.|[^\\"\r\n])*"/.source;
    var verbatimString = /@"(?:""|\\[\s\S]|[^\\"])*"(?!")/.source;
    Prism.languages.csharp = Prism.languages.extend('clike', {
      string: [{
        pattern: re(/(^|[^$\\])<<0>>/.source, [verbatimString]),
        lookbehind: true,
        greedy: true
      }, {
        pattern: re(/(^|[^@$\\])<<0>>/.source, [regularString]),
        lookbehind: true,
        greedy: true
      }, {
        pattern: RegExp(character),
        greedy: true,
        alias: 'character'
      }],
      'class-name': [{
        // Using static
        // using static System.Math;
        pattern: re(/(\busing\s+static\s+)<<0>>(?=\s*;)/.source, [identifier]),
        lookbehind: true,
        inside: typeInside
      }, {
        // Using alias (type)
        // using Project = PC.MyCompany.Project;
        pattern: re(/(\busing\s+<<0>>\s*=\s*)<<1>>(?=\s*;)/.source, [name, typeExpression]),
        lookbehind: true,
        inside: typeInside
      }, {
        // Using alias (alias)
        // using Project = PC.MyCompany.Project;
        pattern: re(/(\busing\s+)<<0>>(?=\s*=)/.source, [name]),
        lookbehind: true
      }, {
        // Type declarations
        // class Foo<A, B>
        // interface Foo<out A, B>
        pattern: re(/(\b<<0>>\s+)<<1>>/.source, [typeDeclarationKeywords, genericName]),
        lookbehind: true,
        inside: typeInside
      }, {
        // Single catch exception declaration
        // catch(Foo)
        // (things like catch(Foo e) is covered by variable declaration)
        pattern: re(/(\bcatch\s*\(\s*)<<0>>/.source, [identifier]),
        lookbehind: true,
        inside: typeInside
      }, {
        // Name of the type parameter of generic constraints
        // where Foo : class
        pattern: re(/(\bwhere\s+)<<0>>/.source, [name]),
        lookbehind: true
      }, {
        // Casts and checks via as and is.
        // as Foo<A>, is Bar<B>
        // (things like if(a is Foo b) is covered by variable declaration)
        pattern: re(/(\b(?:is(?:\s+not)?|as)\s+)<<0>>/.source, [typeExpressionWithoutTuple]),
        lookbehind: true,
        inside: typeInside
      }, {
        // Variable, field and parameter declaration
        // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)
        pattern: re(/\b<<0>>(?=\s+(?!<<1>>|with\s*\{)<<2>>(?:\s*[=,;:{)\]]|\s+(?:in|when)\b))/.source, [typeExpression, nonContextualKeywords, name]),
        inside: typeInside
      }],
      keyword: keywords,
      // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals
      number: /(?:\b0(?:x[\da-f_]*[\da-f]|b[01_]*[01])|(?:\B\.\d+(?:_+\d+)*|\b\d+(?:_+\d+)*(?:\.\d+(?:_+\d+)*)?)(?:e[-+]?\d+(?:_+\d+)*)?)(?:ul|lu|[dflmu])?\b/i,
      operator: />>=?|<<=?|[-=]>|([-+&|])\1|~|\?\?=?|[-+*/%&|^!=<>]=?/,
      punctuation: /\?\.?|::|[{}[\];(),.:]/
    });
    Prism.languages.insertBefore('csharp', 'number', {
      range: {
        pattern: /\.\./,
        alias: 'operator'
      }
    });
    Prism.languages.insertBefore('csharp', 'punctuation', {
      'named-parameter': {
        pattern: re(/([(,]\s*)<<0>>(?=\s*:)/.source, [name]),
        lookbehind: true,
        alias: 'punctuation'
      }
    });
    Prism.languages.insertBefore('csharp', 'class-name', {
      namespace: {
        // namespace Foo.Bar {}
        // using Foo.Bar;
        pattern: re(/(\b(?:namespace|using)\s+)<<0>>(?:\s*\.\s*<<0>>)*(?=\s*[;{])/.source, [name]),
        lookbehind: true,
        inside: {
          punctuation: /\./
        }
      },
      'type-expression': {
        // default(Foo), typeof(Foo<Bar>), sizeof(int)
        pattern: re(/(\b(?:default|typeof|sizeof)\s*\(\s*(?!\s))(?:[^()\s]|\s(?!\s)|<<0>>)*(?=\s*\))/.source, [nestedRound]),
        lookbehind: true,
        alias: 'class-name',
        inside: typeInside
      },
      'return-type': {
        // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0
        // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];
        // int Foo => 0; int Foo { get; set } = 0;
        pattern: re(/<<0>>(?=\s+(?:<<1>>\s*(?:=>|[({]|\.\s*this\s*\[)|this\s*\[))/.source, [typeExpression, identifier]),
        inside: typeInside,
        alias: 'class-name'
      },
      'constructor-invocation': {
        // new List<Foo<Bar[]>> { }
        pattern: re(/(\bnew\s+)<<0>>(?=\s*[[({])/.source, [typeExpression]),
        lookbehind: true,
        inside: typeInside,
        alias: 'class-name'
      },

      /*'explicit-implementation': {
      // int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();
      pattern: replace(/\b<<0>>(?=\.<<1>>)/, className, methodOrPropertyDeclaration),
      inside: classNameInside,
      alias: 'class-name'
      },*/
      'generic-method': {
        // foo<Bar>()
        pattern: re(/<<0>>\s*<<1>>(?=\s*\()/.source, [name, generic]),
        inside: {
          "function": re(/^<<0>>/.source, [name]),
          generic: {
            pattern: RegExp(generic),
            alias: 'class-name',
            inside: typeInside
          }
        }
      },
      'type-list': {
        // The list of types inherited or of generic constraints
        // class Foo<F> : Bar, IList<FooBar>
        // where F : Bar, IList<int>
        pattern: re(/\b((?:<<0>>\s+<<1>>|record\s+<<1>>\s*<<5>>|where\s+<<2>>)\s*:\s*)(?:<<3>>|<<4>>|<<1>>\s*<<5>>|<<6>>)(?:\s*,\s*(?:<<3>>|<<4>>|<<6>>))*(?=\s*(?:where|[{;]|=>|$))/.source, [typeDeclarationKeywords, genericName, name, typeExpression, keywords.source, nestedRound, /\bnew\s*\(\s*\)/.source]),
        lookbehind: true,
        inside: {
          'record-arguments': {
            pattern: re(/(^(?!new\s*\()<<0>>\s*)<<1>>/.source, [genericName, nestedRound]),
            lookbehind: true,
            greedy: true,
            inside: Prism.languages.csharp
          },
          keyword: keywords,
          'class-name': {
            pattern: RegExp(typeExpression),
            greedy: true,
            inside: typeInside
          },
          punctuation: /[,()]/
        }
      },
      preprocessor: {
        pattern: /(^[\t ]*)#.*/m,
        lookbehind: true,
        alias: 'property',
        inside: {
          // highlight preprocessor directives as keywords
          directive: {
            pattern: /(#)\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\b/,
            lookbehind: true,
            alias: 'keyword'
          }
        }
      }
    }); // attributes

    var regularStringOrCharacter = regularString + '|' + character;
    var regularStringCharacterOrComment = replace(/\/(?![*/])|\/\/[^\r\n]*[\r\n]|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>/.source, [regularStringOrCharacter]);
    var roundExpression = nested(replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [regularStringCharacterOrComment]), 2); // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets

    var attrTarget = /\b(?:assembly|event|field|method|module|param|property|return|type)\b/.source;
    var attr = replace(/<<0>>(?:\s*\(<<1>>*\))?/.source, [identifier, roundExpression]);
    Prism.languages.insertBefore('csharp', 'class-name', {
      attribute: {
        // Attributes
        // [Foo], [Foo(1), Bar(2, Prop = "foo")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]
        pattern: re(/((?:^|[^\s\w>)?])\s*\[\s*)(?:<<0>>\s*:\s*)?<<1>>(?:\s*,\s*<<1>>)*(?=\s*\])/.source, [attrTarget, attr]),
        lookbehind: true,
        greedy: true,
        inside: {
          target: {
            pattern: re(/^<<0>>(?=\s*:)/.source, [attrTarget]),
            alias: 'keyword'
          },
          'attribute-arguments': {
            pattern: re(/\(<<0>>*\)/.source, [roundExpression]),
            inside: Prism.languages.csharp
          },
          'class-name': {
            pattern: RegExp(identifier),
            inside: {
              punctuation: /\./
            }
          },
          punctuation: /[:,]/
        }
      }
    }); // string interpolation

    var formatString = /:[^}\r\n]+/.source; // multi line

    var mInterpolationRound = nested(replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [regularStringCharacterOrComment]), 2);
    var mInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [mInterpolationRound, formatString]); // single line

    var sInterpolationRound = nested(replace(/[^"'/()]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>|\(<<self>>*\)/.source, [regularStringOrCharacter]), 2);
    var sInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [sInterpolationRound, formatString]);

    function createInterpolationInside(interpolation, interpolationRound) {
      return {
        interpolation: {
          pattern: re(/((?:^|[^{])(?:\{\{)*)<<0>>/.source, [interpolation]),
          lookbehind: true,
          inside: {
            'format-string': {
              pattern: re(/(^\{(?:(?![}:])<<0>>)*)<<1>>(?=\}$)/.source, [interpolationRound, formatString]),
              lookbehind: true,
              inside: {
                punctuation: /^:/
              }
            },
            punctuation: /^\{|\}$/,
            expression: {
              pattern: /[\s\S]+/,
              alias: 'language-csharp',
              inside: Prism.languages.csharp
            }
          }
        },
        string: /[\s\S]+/
      };
    }

    Prism.languages.insertBefore('csharp', 'string', {
      'interpolation-string': [{
        pattern: re(/(^|[^\\])(?:\$@|@\$)"(?:""|\\[\s\S]|\{\{|<<0>>|[^\\{"])*"/.source, [mInterpolation]),
        lookbehind: true,
        greedy: true,
        inside: createInterpolationInside(mInterpolation, mInterpolationRound)
      }, {
        pattern: re(/(^|[^@\\])\$"(?:\\.|\{\{|<<0>>|[^\\"{])*"/.source, [sInterpolation]),
        lookbehind: true,
        greedy: true,
        inside: createInterpolationInside(sInterpolation, sInterpolationRound)
      }]
    });
  })(Prism);

  Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;
}

/***/ }),

/***/ 5423:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorCsharp = __webpack_require__(6854);

module.exports = cshtml;
cshtml.displayName = 'cshtml';
cshtml.aliases = ['razor'];

function cshtml(Prism) {
  Prism.register(refractorCsharp) // Docs:
  // https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-5.0&tabs=visual-studio
  // https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0
  ;

  (function (Prism) {
    var commentLike = /\/(?![/*])|\/\/.*[\r\n]|\/\*[^*]*(?:\*(?!\/)[^*]*)*\*\//.source;
    var stringLike = /@(?!")|"(?:[^\r\n\\"]|\\.)*"|@"(?:[^\\"]|""|\\[\s\S])*"(?!")/.source + '|' + /'(?:(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'|(?=[^\\](?!')))/.source;
    /**
     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.
     *
     * @param {string} pattern
     * @param {number} depthLog2
     * @returns {string}
     */

    function nested(pattern, depthLog2) {
      for (var i = 0; i < depthLog2; i++) {
        pattern = pattern.replace(/<self>/g, function () {
          return '(?:' + pattern + ')';
        });
      }

      return pattern.replace(/<self>/g, '[^\\s\\S]').replace(/<str>/g, '(?:' + stringLike + ')').replace(/<comment>/g, '(?:' + commentLike + ')');
    }

    var round = nested(/\((?:[^()'"@/]|<str>|<comment>|<self>)*\)/.source, 2);
    var square = nested(/\[(?:[^\[\]'"@/]|<str>|<comment>|<self>)*\]/.source, 2);
    var curly = nested(/\{(?:[^{}'"@/]|<str>|<comment>|<self>)*\}/.source, 2);
    var angle = nested(/<(?:[^<>'"@/]|<str>|<comment>|<self>)*>/.source, 2); // Note about the above bracket patterns:
    // They all ignore HTML expressions that might be in the C# code. This is a problem because HTML (like strings and
    // comments) is parsed differently. This is a huge problem because HTML might contain brackets and quotes which
    // messes up the bracket and string counting implemented by the above patterns.
    //
    // This problem is not fixable because 1) HTML expression are highly context sensitive and very difficult to detect
    // and 2) they require one capturing group at every nested level. See the `tagRegion` pattern to admire the
    // complexity of an HTML expression.
    //
    // To somewhat alleviate the problem a bit, the patterns for characters (e.g. 'a') is very permissive, it also
    // allows invalid characters to support HTML expressions like this: <p>That's it!</p>.

    var tagAttrs = /(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?/.source;
    var tagContent = /(?!\d)[^\s>\/=$<%]+/.source + tagAttrs + /\s*\/?>/.source;
    var tagRegion = /\B@?/.source + '(?:' + /<([a-zA-Z][\w:]*)/.source + tagAttrs + /\s*>/.source + '(?:' + (/[^<]/.source + '|' + // all tags that are not the start tag
    // eslint-disable-next-line regexp/strict
    /<\/?(?!\1\b)/.source + tagContent + '|' + // nested start tag
    nested( // eslint-disable-next-line regexp/strict
    /<\1/.source + tagAttrs + /\s*>/.source + '(?:' + (/[^<]/.source + '|' + // all tags that are not the start tag
    // eslint-disable-next-line regexp/strict
    /<\/?(?!\1\b)/.source + tagContent + '|' + '<self>') + ')*' + // eslint-disable-next-line regexp/strict
    /<\/\1\s*>/.source, 2)) + ')*' + // eslint-disable-next-line regexp/strict
    /<\/\1\s*>/.source + '|' + /</.source + tagContent + ')'; // Now for the actual language definition(s):
    //
    // Razor as a language has 2 parts:
    //  1) CSHTML: A markup-like language that has been extended with inline C# code expressions and blocks.
    //  2) C#+HTML: A variant of C# that can contain CSHTML tags as expressions.
    //
    // In the below code, both CSHTML and C#+HTML will be create as separate language definitions that reference each
    // other. However, only CSHTML will be exported via `Prism.languages`.

    Prism.languages.cshtml = Prism.languages.extend('markup', {});
    var csharpWithHtml = Prism.languages.insertBefore('csharp', 'string', {
      html: {
        pattern: RegExp(tagRegion),
        greedy: true,
        inside: Prism.languages.cshtml
      }
    }, {
      csharp: Prism.languages.extend('csharp', {})
    });
    var cs = {
      pattern: /\S[\s\S]*/,
      alias: 'language-csharp',
      inside: csharpWithHtml
    };
    Prism.languages.insertBefore('cshtml', 'prolog', {
      'razor-comment': {
        pattern: /@\*[\s\S]*?\*@/,
        greedy: true,
        alias: 'comment'
      },
      block: {
        pattern: RegExp(/(^|[^@])@/.source + '(?:' + [// @{ ... }
        curly, // @code{ ... }
        /(?:code|functions)\s*/.source + curly, // @for (...) { ... }
        /(?:for|foreach|lock|switch|using|while)\s*/.source + round + /\s*/.source + curly, // @do { ... } while (...);
        /do\s*/.source + curly + /\s*while\s*/.source + round + /(?:\s*;)?/.source, // @try { ... } catch (...) { ... } finally { ... }
        /try\s*/.source + curly + /\s*catch\s*/.source + round + /\s*/.source + curly + /\s*finally\s*/.source + curly, // @if (...) {...} else if (...) {...} else {...}
        /if\s*/.source + round + /\s*/.source + curly + '(?:' + /\s*else/.source + '(?:' + /\s+if\s*/.source + round + ')?' + /\s*/.source + curly + ')*'].join('|') + ')'),
        lookbehind: true,
        greedy: true,
        inside: {
          keyword: /^@\w*/,
          csharp: cs
        }
      },
      directive: {
        pattern: /^([ \t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\s).*/m,
        lookbehind: true,
        greedy: true,
        inside: {
          keyword: /^@\w+/,
          csharp: cs
        }
      },
      value: {
        pattern: RegExp(/(^|[^@])@/.source + /(?:await\b\s*)?/.source + '(?:' + /\w+\b/.source + '|' + round + ')' + '(?:' + /[?!]?\.\w+\b/.source + '|' + round + '|' + square + '|' + angle + round + ')*'),
        lookbehind: true,
        greedy: true,
        alias: 'variable',
        inside: {
          keyword: /^@/,
          csharp: cs
        }
      },
      'delegate-operator': {
        pattern: /(^|[^@])@(?=<)/,
        lookbehind: true,
        alias: 'operator'
      }
    });
    Prism.languages.razor = Prism.languages.cshtml;
  })(Prism);
}

/***/ }),

/***/ 5389:
/***/ ((module) => {



module.exports = csp;
csp.displayName = 'csp';
csp.aliases = [];

function csp(Prism) {
  /**
   * Original by Scott Helme.
   *
   * Reference: https://scotthelme.co.uk/csp-cheat-sheet/
   *
   * Supports the following:
   *  - CSP Level 1
   *  - CSP Level 2
   *  - CSP Level 3
   */
  Prism.languages.csp = {
    directive: {
      pattern: /(^|[^-\da-z])(?:base-uri|block-all-mixed-content|(?:child|connect|default|font|frame|img|manifest|media|object|prefetch|script|style|worker)-src|disown-opener|form-action|frame-(?:ancestors|options)|input-protection(?:-(?:clip|selectors))?|navigate-to|plugin-types|policy-uri|referrer|reflected-xss|report-(?:to|uri)|require-sri-for|sandbox|(?:script|style)-src-(?:attr|elem)|upgrade-insecure-requests)(?=[^-\da-z]|$)/i,
      lookbehind: true,
      alias: 'keyword'
    },
    safe: {
      // CSP2 hashes and nonces are base64 values. CSP3 accepts both base64 and base64url values.
      // See https://tools.ietf.org/html/rfc4648#section-4
      // See https://tools.ietf.org/html/rfc4648#section-5
      pattern: /'(?:deny|none|report-sample|self|strict-dynamic|top-only|(?:nonce|sha(?:256|384|512))-[-+/\w=]+)'/i,
      alias: 'selector'
    },
    unsafe: {
      pattern: /(?:'unsafe-(?:allow-redirects|dynamic|eval|hash-attributes|hashed-attributes|hashes|inline)'|\*)/i,
      alias: 'function'
    }
  };
}

/***/ }),

/***/ 3591:
/***/ ((module) => {



module.exports = cssExtras;
cssExtras.displayName = 'cssExtras';
cssExtras.aliases = [];

function cssExtras(Prism) {
  ;

  (function (Prism) {
    var string = /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
    var selectorInside;
    Prism.languages.css.selector = {
      pattern: Prism.languages.css.selector.pattern,
      lookbehind: true,
      inside: selectorInside = {
        'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\w]+/,
        'pseudo-class': /:[-\w]+/,
        "class": /\.[-\w]+/,
        id: /#[-\w]+/,
        attribute: {
          pattern: RegExp('\\[(?:[^[\\]"\']|' + string.source + ')*\\]'),
          greedy: true,
          inside: {
            punctuation: /^\[|\]$/,
            'case-sensitivity': {
              pattern: /(\s)[si]$/i,
              lookbehind: true,
              alias: 'keyword'
            },
            namespace: {
              pattern: /^(\s*)(?:(?!\s)[-*\w\xA0-\uFFFF])*\|(?!=)/,
              lookbehind: true,
              inside: {
                punctuation: /\|$/
              }
            },
            'attr-name': {
              pattern: /^(\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+/,
              lookbehind: true
            },
            'attr-value': [string, {
              pattern: /(=\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+(?=\s*$)/,
              lookbehind: true
            }],
            operator: /[|~*^$]?=/
          }
        },
        'n-th': [{
          pattern: /(\(\s*)[+-]?\d*[\dn](?:\s*[+-]\s*\d+)?(?=\s*\))/,
          lookbehind: true,
          inside: {
            number: /[\dn]+/,
            operator: /[+-]/
          }
        }, {
          pattern: /(\(\s*)(?:even|odd)(?=\s*\))/i,
          lookbehind: true
        }],
        combinator: />|\+|~|\|\|/,
        // the `tag` token has been existed and removed.
        // because we can't find a perfect tokenize to match it.
        // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.
        punctuation: /[(),]/
      }
    };
    Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;
    Prism.languages.insertBefore('css', 'property', {
      variable: {
        pattern: /(^|[^-\w\xA0-\uFFFF])--(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*/i,
        lookbehind: true
      }
    });
    var unit = {
      pattern: /(\b\d+)(?:%|[a-z]+(?![\w-]))/,
      lookbehind: true
    }; // 123 -123 .123 -.123 12.3 -12.3

    var number = {
      pattern: /(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,
      lookbehind: true
    };
    Prism.languages.insertBefore('css', 'function', {
      operator: {
        pattern: /(\s)[+\-*\/](?=\s)/,
        lookbehind: true
      },
      // CAREFUL!
      // Previewers and Inline color use hexcode and color.
      hexcode: {
        pattern: /\B#[\da-f]{3,8}\b/i,
        alias: 'color'
      },
      color: [{
        pattern: /(^|[^\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\w-])/i,
        lookbehind: true
      }, {
        pattern: /\b(?:rgb|hsl)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:rgb|hsl)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,
        inside: {
          unit: unit,
          number: number,
          "function": /[\w-]+(?=\()/,
          punctuation: /[(),]/
        }
      }],
      // it's important that there is no boundary assertion after the hex digits
      entity: /\\[\da-f]{1,8}/i,
      unit: unit,
      number: number
    });
  })(Prism);
}

/***/ }),

/***/ 8696:
/***/ ((module) => {



module.exports = css;
css.displayName = 'css';
css.aliases = [];

function css(Prism) {
  ;

  (function (Prism) {
    var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
    Prism.languages.css = {
      comment: /\/\*[\s\S]*?\*\//,
      atrule: {
        pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,
        inside: {
          rule: /^@[\w-]+/,
          'selector-function-argument': {
            pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
            lookbehind: true,
            alias: 'selector'
          },
          keyword: {
            pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
            lookbehind: true
          } // See rest below

        }
      },
      url: {
        // https://drafts.csswg.org/css-values-3/#urls
        pattern: RegExp('\\burl\\((?:' + string.source + '|' + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ')\\)', 'i'),
        greedy: true,
        inside: {
          "function": /^url/i,
          punctuation: /^\(|\)$/,
          string: {
            pattern: RegExp('^' + string.source + '$'),
            alias: 'url'
          }
        }
      },
      selector: {
        pattern: RegExp('(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' + string.source + ')*(?=\\s*\\{)'),
        lookbehind: true
      },
      string: {
        pattern: string,
        greedy: true
      },
      property: {
        pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
        lookbehind: true
      },
      important: /!important\b/i,
      "function": {
        pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
        lookbehind: true
      },
      punctuation: /[(){};:,]/
    };
    Prism.languages.css['atrule'].inside.rest = Prism.languages.css;
    var markup = Prism.languages.markup;

    if (markup) {
      markup.tag.addInlined('style', 'css');
      markup.tag.addAttribute('style', 'css');
    }
  })(Prism);
}

/***/ }),

/***/ 4603:
/***/ ((module) => {



module.exports = csv;
csv.displayName = 'csv';
csv.aliases = [];

function csv(Prism) {
  // https://tools.ietf.org/html/rfc4180
  Prism.languages.csv = {
    value: /[^\r\n,"]+|"(?:[^"]|"")*"(?!")/,
    punctuation: /,/
  };
}

/***/ }),

/***/ 9698:
/***/ ((module) => {



module.exports = cypher;
cypher.displayName = 'cypher';
cypher.aliases = [];

function cypher(Prism) {
  Prism.languages.cypher = {
    // https://neo4j.com/docs/cypher-manual/current/syntax/comments/
    comment: /\/\/.*/,
    string: {
      pattern: /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/,
      greedy: true
    },
    'class-name': {
      pattern: /(:\s*)(?:\w+|`(?:[^`\\\r\n])*`)(?=\s*[{):])/,
      lookbehind: true,
      greedy: true
    },
    relationship: {
      pattern: /(-\[\s*(?:\w+\s*|`(?:[^`\\\r\n])*`\s*)?:\s*|\|\s*:\s*)(?:\w+|`(?:[^`\\\r\n])*`)/,
      lookbehind: true,
      greedy: true,
      alias: 'property'
    },
    identifier: {
      pattern: /`(?:[^`\\\r\n])*`/,
      greedy: true,
      alias: 'symbol'
    },
    variable: /\$\w+/,
    // https://neo4j.com/docs/cypher-manual/current/syntax/reserved/
    keyword: /\b(?:ADD|ALL|AND|AS|ASC|ASCENDING|ASSERT|BY|CALL|CASE|COMMIT|CONSTRAINT|CONTAINS|CREATE|CSV|DELETE|DESC|DESCENDING|DETACH|DISTINCT|DO|DROP|ELSE|END|ENDS|EXISTS|FOR|FOREACH|IN|INDEX|IS|JOIN|KEY|LIMIT|LOAD|MANDATORY|MATCH|MERGE|NODE|NOT|OF|ON|OPTIONAL|OR|ORDER(?=\s+BY)|PERIODIC|REMOVE|REQUIRE|RETURN|SCALAR|SCAN|SET|SKIP|START|STARTS|THEN|UNION|UNIQUE|UNWIND|USING|WHEN|WHERE|WITH|XOR|YIELD)\b/i,
    "function": /\b\w+\b(?=\s*\()/,
    "boolean": /\b(?:true|false|null)\b/i,
    number: /\b(?:0x[\da-fA-F]+|\d+(?:\.\d+)?(?:[eE][+-]?\d+)?)\b/,
    // https://neo4j.com/docs/cypher-manual/current/syntax/operators/
    operator: /:|<--?|--?>?|<>|=~?|[<>]=?|[+*/%^|]|\.\.\.?/,
    punctuation: /[()[\]{},;.]/
  };
}

/***/ }),

/***/ 3420:
/***/ ((module) => {



module.exports = d;
d.displayName = 'd';
d.aliases = [];

function d(Prism) {
  Prism.languages.d = Prism.languages.extend('clike', {
    comment: [{
      // Shebang
      pattern: /^\s*#!.+/,
      greedy: true
    }, {
      pattern: RegExp(/(^|[^\\])/.source + '(?:' + [// /+ comment +/
      // Allow one level of nesting
      /\/\+(?:\/\+(?:[^+]|\+(?!\/))*\+\/|(?!\/\+)[\s\S])*?\+\//.source, // // comment
      /\/\/.*/.source, // /* comment */
      /\/\*[\s\S]*?\*\//.source].join('|') + ')'),
      lookbehind: true,
      greedy: true
    }],
    string: [{
      pattern: RegExp([// r"", x""
      /\b[rx]"(?:\\[\s\S]|[^\\"])*"[cwd]?/.source, // q"[]", q"()", q"<>", q"{}"
      /\bq"(?:\[[\s\S]*?\]|\([\s\S]*?\)|<[\s\S]*?>|\{[\s\S]*?\})"/.source, // q"IDENT
      // ...
      // IDENT"
      /\bq"((?!\d)\w+)$[\s\S]*?^\1"/.source, // q"//", q"||", etc.
      // eslint-disable-next-line regexp/strict
      /\bq"(.)[\s\S]*?\2"/.source, // Characters
      // 'a', '\\', '\n', '\xFF', '\377', '\uFFFF', '\U0010FFFF', '\quot'
      /'(?:\\(?:\W|\w+)|[^\\])'/.source, // eslint-disable-next-line regexp/strict
      /(["`])(?:\\[\s\S]|(?!\3)[^\\])*\3[cwd]?/.source].join('|'), 'm'),
      greedy: true
    }, {
      pattern: /\bq\{(?:\{[^{}]*\}|[^{}])*\}/,
      greedy: true,
      alias: 'token-string'
    }],
    // In order: $, keywords and special tokens, globally defined symbols
    keyword: /\$|\b(?:abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|public|pure|real|ref|return|scope|shared|short|static|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|__(?:(?:FILE|MODULE|LINE|FUNCTION|PRETTY_FUNCTION|DATE|EOF|TIME|TIMESTAMP|VENDOR|VERSION)__|gshared|traits|vector|parameters)|string|wstring|dstring|size_t|ptrdiff_t)\b/,
    number: [// The lookbehind and the negative look-ahead try to prevent bad highlighting of the .. operator
    // Hexadecimal numbers must be handled separately to avoid problems with exponent "e"
    /\b0x\.?[a-f\d_]+(?:(?!\.\.)\.[a-f\d_]*)?(?:p[+-]?[a-f\d_]+)?[ulfi]{0,4}/i, {
      pattern: /((?:\.\.)?)(?:\b0b\.?|\b|\.)\d[\d_]*(?:(?!\.\.)\.[\d_]*)?(?:e[+-]?\d[\d_]*)?[ulfi]{0,4}/i,
      lookbehind: true
    }],
    operator: /\|[|=]?|&[&=]?|\+[+=]?|-[-=]?|\.?\.\.|=[>=]?|!(?:i[ns]\b|<>?=?|>=?|=)?|\bi[ns]\b|(?:<[<>]?|>>?>?|\^\^|[*\/%^~])=?/
  });
  Prism.languages.insertBefore('d', 'keyword', {
    property: /\B@\w*/
  });
  Prism.languages.insertBefore('d', 'function', {
    register: {
      // Iasm registers
      pattern: /\b(?:[ABCD][LHX]|E[ABCD]X|E?(?:BP|SP|DI|SI)|[ECSDGF]S|CR[0234]|DR[012367]|TR[3-7]|X?MM[0-7]|R[ABCD]X|[BS]PL|R[BS]P|[DS]IL|R[DS]I|R(?:[89]|1[0-5])[BWD]?|XMM(?:[89]|1[0-5])|YMM(?:1[0-5]|\d))\b|\bST(?:\([0-7]\)|\b)/,
      alias: 'variable'
    }
  });
}

/***/ }),

/***/ 4166:
/***/ ((module) => {



module.exports = dart;
dart.displayName = 'dart';
dart.aliases = [];

function dart(Prism) {
  ;

  (function (Prism) {
    var keywords = [/\b(?:async|sync|yield)\*/, /\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extension|external|extends|factory|final|finally|for|get|hide|if|implements|interface|import|in|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\b/]; // Handles named imports, such as http.Client

    var packagePrefix = /(^|[^\w.])(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source; // based on the dart naming conventions

    var className = {
      pattern: RegExp(packagePrefix + /[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),
      lookbehind: true,
      inside: {
        namespace: {
          pattern: /^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,
          inside: {
            punctuation: /\./
          }
        }
      }
    };
    Prism.languages.dart = Prism.languages.extend('clike', {
      string: [{
        pattern: /r?("""|''')[\s\S]*?\1/,
        greedy: true
      }, {
        pattern: /r?(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,
        greedy: true
      }],
      'class-name': [className, {
        // variables and parameters
        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
        pattern: RegExp(packagePrefix + /[A-Z]\w*(?=\s+\w+\s*[;,=()])/.source),
        lookbehind: true,
        inside: className.inside
      }],
      keyword: keywords,
      operator: /\bis!|\b(?:as|is)\b|\+\+|--|&&|\|\||<<=?|>>=?|~(?:\/=?)?|[+\-*\/%&^|=!<>]=?|\?/
    });
    Prism.languages.insertBefore('dart', 'function', {
      metadata: {
        pattern: /@\w+/,
        alias: 'symbol'
      }
    });
    Prism.languages.insertBefore('dart', 'class-name', {
      generics: {
        pattern: /<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<[\w\s,.&?]*>)*>)*>)*>/,
        inside: {
          'class-name': className,
          keyword: keywords,
          punctuation: /[<>(),.:]/,
          operator: /[?&|]/
        }
      }
    });
  })(Prism);
}

/***/ }),

/***/ 3014:
/***/ ((module) => {



module.exports = dataweave;
dataweave.displayName = 'dataweave';
dataweave.aliases = [];

function dataweave(Prism) {
  ;

  (function (Prism) {
    Prism.languages.dataweave = {
      url: /\b[A-Za-z]+:\/\/[\w/:.?=&-]+|\burn:[\w:.?=&-]+/,
      property: {
        pattern: /(?:\b\w+#)?(?:"(?:\\.|[^\\"\r\n])*"|\b\w+)(?=\s*[:@])/,
        greedy: true
      },
      string: {
        pattern: /(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1/,
        greedy: true
      },
      'mime-type': /\b(?:text|audio|video|application|multipart|image)\/[\w+-]+/,
      date: {
        pattern: /\|[\w:+-]+\|/,
        greedy: true
      },
      comment: [{
        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
        lookbehind: true,
        greedy: true
      }, {
        pattern: /(^|[^\\:])\/\/.*/,
        lookbehind: true,
        greedy: true
      }],
      regex: {
        pattern: /\/(?:[^\\\/\r\n]|\\[^\r\n])+\//,
        greedy: true
      },
      "function": /\b[A-Z_]\w*(?=\s*\()/i,
      number: /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
      punctuation: /[{}[\];(),.:@]/,
      operator: /<<|>>|->|[<>~=]=?|!=|--?-?|\+\+?|!|\?/,
      "boolean": /\b(?:true|false)\b/,
      keyword: /\b(?:match|input|output|ns|type|update|null|if|else|using|unless|at|is|as|case|do|fun|var|not|and|or)\b/
    };
  })(Prism);
}

/***/ }),

/***/ 6388:
/***/ ((module) => {



module.exports = dax;
dax.displayName = 'dax';
dax.aliases = [];

function dax(Prism) {
  Prism.languages.dax = {
    comment: {
      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/).*)/,
      lookbehind: true
    },
    'data-field': {
      pattern: /'(?:[^']|'')*'(?!')(?:\[[ \w\xA0-\uFFFF]+\])?|\w+\[[ \w\xA0-\uFFFF]+\]/,
      alias: 'symbol'
    },
    measure: {
      pattern: /\[[ \w\xA0-\uFFFF]+\]/,
      alias: 'constant'
    },
    string: {
      pattern: /"(?:[^"]|"")*"(?!")/,
      greedy: true
    },
    "function": /\b(?:ABS|ACOS|ACOSH|ACOT|ACOTH|ADDCOLUMNS|ADDMISSINGITEMS|ALL|ALLCROSSFILTERED|ALLEXCEPT|ALLNOBLANKROW|ALLSELECTED|AND|APPROXIMATEDISTINCTCOUNT|ASIN|ASINH|ATAN|ATANH|AVERAGE|AVERAGEA|AVERAGEX|BETA\.DIST|BETA\.INV|BLANK|CALCULATE|CALCULATETABLE|CALENDAR|CALENDARAUTO|CEILING|CHISQ\.DIST|CHISQ\.DIST\.RT|CHISQ\.INV|CHISQ\.INV\.RT|CLOSINGBALANCEMONTH|CLOSINGBALANCEQUARTER|CLOSINGBALANCEYEAR|COALESCE|COMBIN|COMBINA|COMBINEVALUES|CONCATENATE|CONCATENATEX|CONFIDENCE\.NORM|CONFIDENCE\.T|CONTAINS|CONTAINSROW|CONTAINSSTRING|CONTAINSSTRINGEXACT|CONVERT|COS|COSH|COT|COTH|COUNT|COUNTA|COUNTAX|COUNTBLANK|COUNTROWS|COUNTX|CROSSFILTER|CROSSJOIN|CURRENCY|CURRENTGROUP|CUSTOMDATA|DATATABLE|DATE|DATEADD|DATEDIFF|DATESBETWEEN|DATESINPERIOD|DATESMTD|DATESQTD|DATESYTD|DATEVALUE|DAY|DEGREES|DETAILROWS|DISTINCT|DISTINCTCOUNT|DISTINCTCOUNTNOBLANK|DIVIDE|EARLIER|EARLIEST|EDATE|ENDOFMONTH|ENDOFQUARTER|ENDOFYEAR|EOMONTH|ERROR|EVEN|EXACT|EXCEPT|EXP|EXPON\.DIST|FACT|FALSE|FILTER|FILTERS|FIND|FIRSTDATE|FIRSTNONBLANK|FIRSTNONBLANKVALUE|FIXED|FLOOR|FORMAT|GCD|GENERATE|GENERATEALL|GENERATESERIES|GEOMEAN|GEOMEANX|GROUPBY|HASONEFILTER|HASONEVALUE|HOUR|IF|IF\.EAGER|IFERROR|IGNORE|INT|INTERSECT|ISBLANK|ISCROSSFILTERED|ISEMPTY|ISERROR|ISEVEN|ISFILTERED|ISINSCOPE|ISLOGICAL|ISNONTEXT|ISNUMBER|ISO\.CEILING|ISODD|ISONORAFTER|ISSELECTEDMEASURE|ISSUBTOTAL|ISTEXT|KEEPFILTERS|KEYWORDMATCH|LASTDATE|LASTNONBLANK|LASTNONBLANKVALUE|LCM|LEFT|LEN|LN|LOG|LOG10|LOOKUPVALUE|LOWER|MAX|MAXA|MAXX|MEDIAN|MEDIANX|MID|MIN|MINA|MINUTE|MINX|MOD|MONTH|MROUND|NATURALINNERJOIN|NATURALLEFTOUTERJOIN|NEXTDAY|NEXTMONTH|NEXTQUARTER|NEXTYEAR|NONVISUAL|NORM\.DIST|NORM\.INV|NORM\.S\.DIST|NORM\.S\.INV|NOT|NOW|ODD|OPENINGBALANCEMONTH|OPENINGBALANCEQUARTER|OPENINGBALANCEYEAR|OR|PARALLELPERIOD|PATH|PATHCONTAINS|PATHITEM|PATHITEMREVERSE|PATHLENGTH|PERCENTILE\.EXC|PERCENTILE\.INC|PERCENTILEX\.EXC|PERCENTILEX\.INC|PERMUT|PI|POISSON\.DIST|POWER|PREVIOUSDAY|PREVIOUSMONTH|PREVIOUSQUARTER|PREVIOUSYEAR|PRODUCT|PRODUCTX|QUARTER|QUOTIENT|RADIANS|RAND|RANDBETWEEN|RANK\.EQ|RANKX|RELATED|RELATEDTABLE|REMOVEFILTERS|REPLACE|REPT|RIGHT|ROLLUP|ROLLUPADDISSUBTOTAL|ROLLUPGROUP|ROLLUPISSUBTOTAL|ROUND|ROUNDDOWN|ROUNDUP|ROW|SAMEPERIODLASTYEAR|SAMPLE|SEARCH|SECOND|SELECTCOLUMNS|SELECTEDMEASURE|SELECTEDMEASUREFORMATSTRING|SELECTEDMEASURENAME|SELECTEDVALUE|SIGN|SIN|SINH|SQRT|SQRTPI|STARTOFMONTH|STARTOFQUARTER|STARTOFYEAR|STDEV\.P|STDEV\.S|STDEVX\.P|STDEVX\.S|SUBSTITUTE|SUBSTITUTEWITHINDEX|SUM|SUMMARIZE|SUMMARIZECOLUMNS|SUMX|SWITCH|T\.DIST|T\.DIST\.2T|T\.DIST\.RT|T\.INV|T\.INV\.2T|TAN|TANH|TIME|TIMEVALUE|TODAY|TOPN|TOPNPERLEVEL|TOPNSKIP|TOTALMTD|TOTALQTD|TOTALYTD|TREATAS|TRIM|TRUE|TRUNC|UNICHAR|UNICODE|UNION|UPPER|USERELATIONSHIP|USERNAME|USEROBJECTID|USERPRINCIPALNAME|UTCNOW|UTCTODAY|VALUE|VALUES|VAR\.P|VAR\.S|VARX\.P|VARX\.S|WEEKDAY|WEEKNUM|XIRR|XNPV|YEAR|YEARFRAC)(?=\s*\()/i,
    keyword: /\b(?:DEFINE|MEASURE|EVALUATE|ORDER\s+BY|RETURN|VAR|START\s+AT|ASC|DESC)\b/i,
    "boolean": {
      pattern: /\b(?:TRUE|FALSE|NULL)\b/i,
      alias: 'constant'
    },
    number: /\b\d+(?:\.\d*)?|\B\.\d+\b/i,
    operator: /:=|[-+*\/=^]|&&?|\|\||<(?:=>?|<|>)?|>[>=]?|\b(?:IN|NOT)\b/i,
    punctuation: /[;\[\](){}`,.]/
  };
}

/***/ }),

/***/ 5966:
/***/ ((module) => {



module.exports = dhall;
dhall.displayName = 'dhall';
dhall.aliases = [];

function dhall(Prism) {
  // ABNF grammar:
  // https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf
  Prism.languages.dhall = {
    // Multi-line comments can be nested. E.g. {- foo {- bar -} -}
    // The multi-line pattern is essentially this:
    //   \{-(?:[^-{]|-(?!\})|\{(?!-)|<SELF>)*-\}
    comment: /--.*|\{-(?:[^-{]|-(?!\})|\{(?!-)|\{-(?:[^-{]|-(?!\})|\{(?!-))*-\})*-\}/,
    string: {
      pattern: /"(?:[^"\\]|\\.)*"|''(?:[^']|'(?!')|'''|''\$\{)*''(?!'|\$)/,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /\$\{[^{}]*\}/,
          inside: {
            expression: {
              pattern: /(^\$\{)[\s\S]+(?=\}$)/,
              lookbehind: true,
              alias: 'language-dhall',
              inside: null // see blow

            },
            punctuation: /\$\{|\}/
          }
        }
      }
    },
    label: {
      pattern: /`[^`]*`/,
      greedy: true
    },
    url: {
      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596
      pattern: /\bhttps?:\/\/[\w.:%!$&'*+;=@~-]+(?:\/[\w.:%!$&'*+;=@~-]*)*(?:\?[/?\w.:%!$&'*+;=@~-]*)?/,
      greedy: true
    },
    env: {
      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661
      pattern: /\benv:(?:(?!\d)\w+|"(?:[^"\\=]|\\.)*")/,
      greedy: true,
      inside: {
        "function": /^env/,
        operator: /^:/,
        variable: /[\s\S]+/
      }
    },
    hash: {
      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725
      pattern: /\bsha256:[\da-fA-F]{64}\b/,
      inside: {
        "function": /sha256/,
        operator: /:/,
        number: /[\da-fA-F]{64}/
      }
    },
    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359
    keyword: /\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\b|\u2200/,
    builtin: /\b(?:Some|None)\b/,
    "boolean": /\b(?:False|True)\b/,
    number: /\bNaN\b|-?\bInfinity\b|[+-]?\b(?:0x[\da-fA-F]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/,
    operator: /\/\\|\/\/\\\\|&&|\|\||===|[!=]=|\/\/|->|\+\+|::|[+*#@=:?<>|\\\u2227\u2a53\u2261\u2afd\u03bb\u2192]/,
    punctuation: /\.\.|[{}\[\](),./]/,
    // we'll just assume that every capital word left is a type name
    'class-name': /\b[A-Z]\w*\b/
  };
  Prism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;
}

/***/ }),

/***/ 591:
/***/ ((module) => {



module.exports = diff;
diff.displayName = 'diff';
diff.aliases = [];

function diff(Prism) {
  ;

  (function (Prism) {
    Prism.languages.diff = {
      coord: [// Match all kinds of coord lines (prefixed by "+++", "---" or "***").
      /^(?:\*{3}|-{3}|\+{3}).*$/m, // Match "@@ ... @@" coord lines in unified diff.
      /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).
      /^\d.*$/m] // deleted, inserted, unchanged, diff

    };
    /**
     * A map from the name of a block to its line prefix.
     *
     * @type {Object<string, string>}
     */

    var PREFIXES = {
      'deleted-sign': '-',
      'deleted-arrow': '<',
      'inserted-sign': '+',
      'inserted-arrow': '>',
      unchanged: ' ',
      diff: '!'
    }; // add a token for each prefix

    Object.keys(PREFIXES).forEach(function (name) {
      var prefix = PREFIXES[name];
      var alias = [];

      if (!/^\w+$/.test(name)) {
        // "deleted-sign" -> "deleted"
        alias.push(/\w+/.exec(name)[0]);
      }

      if (name === 'diff') {
        alias.push('bold');
      }

      Prism.languages.diff[name] = {
        pattern: RegExp('^(?:[' + prefix + '].*(?:\r\n?|\n|(?![\\s\\S])))+', 'm'),
        alias: alias,
        inside: {
          line: {
            pattern: /(.)(?=[\s\S]).*(?:\r\n?|\n)?/,
            lookbehind: true
          },
          prefix: {
            pattern: /[\s\S]/,
            alias: /\w+/.exec(name)[0]
          }
        }
      };
    }); // make prefixes available to Diff plugin

    Object.defineProperty(Prism.languages.diff, 'PREFIXES', {
      value: PREFIXES
    });
  })(Prism);
}

/***/ }),

/***/ 4363:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorMarkupTemplating = __webpack_require__(8083);

module.exports = django;
django.displayName = 'django';
django.aliases = ['jinja2'];

function django(Prism) {
  Prism.register(refractorMarkupTemplating) // Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.
  // Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.
  ;

  (function (Prism) {
    Prism.languages.django = {
      comment: /^\{#[\s\S]*?#\}$/,
      tag: {
        pattern: /(^\{%[+-]?\s*)\w+/,
        lookbehind: true,
        alias: 'keyword'
      },
      delimiter: {
        pattern: /^\{[{%][+-]?|[+-]?[}%]\}$/,
        alias: 'punctuation'
      },
      string: {
        pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
        greedy: true
      },
      filter: {
        pattern: /(\|)\w+/,
        lookbehind: true,
        alias: 'function'
      },
      test: {
        pattern: /(\bis\s+(?:not\s+)?)(?!not\b)\w+/,
        lookbehind: true,
        alias: 'function'
      },
      "function": /\b[a-z_]\w+(?=\s*\()/i,
      keyword: /\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\b/,
      operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
      number: /\b\d+(?:\.\d+)?\b/,
      "boolean": /[Tt]rue|[Ff]alse|[Nn]one/,
      variable: /\b\w+?\b/,
      punctuation: /[{}[\](),.:;]/
    };
    var pattern = /\{\{[\s\S]*?\}\}|\{%[\s\S]*?%\}|\{#[\s\S]*?#\}/g;
    var markupTemplating = Prism.languages['markup-templating'];
    Prism.hooks.add('before-tokenize', function (env) {
      markupTemplating.buildPlaceholders(env, 'django', pattern);
    });
    Prism.hooks.add('after-tokenize', function (env) {
      markupTemplating.tokenizePlaceholders(env, 'django');
    }); // Add an Jinja2 alias

    Prism.languages.jinja2 = Prism.languages.django;
    Prism.hooks.add('before-tokenize', function (env) {
      markupTemplating.buildPlaceholders(env, 'jinja2', pattern);
    });
    Prism.hooks.add('after-tokenize', function (env) {
      markupTemplating.tokenizePlaceholders(env, 'jinja2');
    });
  })(Prism);
}

/***/ }),

/***/ 3617:
/***/ ((module) => {



module.exports = dnsZoneFile;
dnsZoneFile.displayName = 'dnsZoneFile';
dnsZoneFile.aliases = [];

function dnsZoneFile(Prism) {
  Prism.languages['dns-zone-file'] = {
    comment: /;.*/,
    string: {
      pattern: /"(?:\\.|[^"\\\r\n])*"/,
      greedy: true
    },
    variable: [{
      pattern: /(^\$ORIGIN[ \t]+)\S+/m,
      lookbehind: true
    }, {
      pattern: /(^|\s)@(?=\s|$)/,
      lookbehind: true
    }],
    keyword: /^\$(?:ORIGIN|INCLUDE|TTL)(?=\s|$)/m,
    "class": {
      // https://tools.ietf.org/html/rfc1035#page-13
      pattern: /(^|\s)(?:IN|CH|CS|HS)(?=\s|$)/,
      lookbehind: true,
      alias: 'keyword'
    },
    type: {
      // https://en.wikipedia.org/wiki/List_of_DNS_record_types
      pattern: /(^|\s)(?:A|A6|AAAA|AFSDB|APL|ATMA|CAA|CDNSKEY|CDS|CERT|CNAME|DHCID|DLV|DNAME|DNSKEY|DS|EID|GID|GPOS|HINFO|HIP|IPSECKEY|ISDN|KEY|KX|LOC|MAILA|MAILB|MB|MD|MF|MG|MINFO|MR|MX|NAPTR|NB|NBSTAT|NIMLOC|NINFO|NS|NSAP|NSAP-PTR|NSEC|NSEC3|NSEC3PARAM|NULL|NXT|OPENPGPKEY|PTR|PX|RKEY|RP|RRSIG|RT|SIG|SINK|SMIMEA|SOA|SPF|SRV|SSHFP|TA|TKEY|TLSA|TSIG|TXT|UID|UINFO|UNSPEC|URI|WKS|X25)(?=\s|$)/,
      lookbehind: true,
      alias: 'keyword'
    },
    punctuation: /[()]/
  };
  Prism.languages['dns-zone'] = Prism.languages['dns-zone-file'];
}

/***/ }),

/***/ 1489:
/***/ ((module) => {



module.exports = docker;
docker.displayName = 'docker';
docker.aliases = ['dockerfile'];

function docker(Prism) {
  ;

  (function (Prism) {
    // Many of the following regexes will contain negated lookaheads like `[ \t]+(?![ \t])`. This is a trick to ensure
    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.
    var spaceAfterBackSlash = /\\[\r\n](?:\s|\\[\r\n]|#.*(?!.))*(?![\s#]|\\[\r\n])/.source; // At least one space, comment, or line break

    var space = /(?:[ \t]+(?![ \t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(/<SP_BS>/g, function () {
      return spaceAfterBackSlash;
    });
    var string = /"(?:[^"\\\r\n]|\\(?:\r\n|[\s\S]))*"|'(?:[^'\\\r\n]|\\(?:\r\n|[\s\S]))*'/.source;
    var option = /--[\w-]+=(?:<STR>|(?!["'])(?:[^\s\\]|\\.)+)/.source.replace(/<STR>/g, function () {
      return string;
    });
    var stringRule = {
      pattern: RegExp(string),
      greedy: true
    };
    var commentRule = {
      pattern: /(^[ \t]*)#.*/m,
      lookbehind: true,
      greedy: true
    };
    /**
     * @param {string} source
     * @param {string} flags
     * @returns {RegExp}
     */

    function re(source, flags) {
      source = source.replace(/<OPT>/g, function () {
        return option;
      }).replace(/<SP>/g, function () {
        return space;
      });
      return RegExp(source, flags);
    }

    Prism.languages.docker = {
      instruction: {
        pattern: /(^[ \t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\s)(?:\\.|[^\r\n\\])*(?:\\$(?:\s|#.*$)*(?![\s#])(?:\\.|[^\r\n\\])*)*/im,
        lookbehind: true,
        greedy: true,
        inside: {
          options: {
            pattern: re(/(^(?:ONBUILD<SP>)?\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),
            lookbehind: true,
            greedy: true,
            inside: {
              property: {
                pattern: /(^|\s)--[\w-]+/,
                lookbehind: true
              },
              string: [stringRule, {
                pattern: /(=)(?!["'])(?:[^\s\\]|\\.)+/,
                lookbehind: true
              }],
              operator: /\\$/m,
              punctuation: /=/
            }
          },
          keyword: [{
            // https://docs.docker.com/engine/reference/builder/#healthcheck
            pattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\b/.source, 'i'),
            lookbehind: true,
            greedy: true
          }, {
            // https://docs.docker.com/engine/reference/builder/#from
            pattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \t\\]+<SP>)AS/.source, 'i'),
            lookbehind: true,
            greedy: true
          }, {
            // https://docs.docker.com/engine/reference/builder/#onbuild
            pattern: re(/(^ONBUILD<SP>)\w+/.source, 'i'),
            lookbehind: true,
            greedy: true
          }, {
            pattern: /^\w+/,
            greedy: true
          }],
          comment: commentRule,
          string: stringRule,
          variable: /\$(?:\w+|\{[^{}"'\\]*\})/,
          operator: /\\$/m
        }
      },
      comment: commentRule
    };
    Prism.languages.dockerfile = Prism.languages.docker;
  })(Prism);
}

/***/ }),

/***/ 6587:
/***/ ((module) => {



module.exports = dot;
dot.displayName = 'dot';
dot.aliases = ['gv'];

function dot(Prism) {
  // https://www.graphviz.org/doc/info/lang.html
  ;

  (function (Prism) {
    var ID = '(?:' + [// an identifier
    /[a-zA-Z_\x80-\uFFFF][\w\x80-\uFFFF]*/.source, // a number
    /-?(?:\.\d+|\d+(?:\.\d*)?)/.source, // a double-quoted string
    /"[^"\\]*(?:\\[\s\S][^"\\]*)*"/.source, // HTML-like string
    /<(?:[^<>]|(?!<!--)<(?:[^<>"']|"[^"]*"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>/.source].join('|') + ')';
    var IDInside = {
      markup: {
        pattern: /(^<)[\s\S]+(?=>$)/,
        lookbehind: true,
        alias: ['language-markup', 'language-html', 'language-xml'],
        inside: Prism.languages.markup
      }
    };
    /**
     * @param {string} source
     * @param {string} flags
     * @returns {RegExp}
     */

    function withID(source, flags) {
      return RegExp(source.replace(/<ID>/g, function () {
        return ID;
      }), flags);
    }

    Prism.languages.dot = {
      comment: {
        pattern: /\/\/.*|\/\*[\s\S]*?\*\/|^#.*/m,
        greedy: true
      },
      'graph-name': {
        pattern: withID(/(\b(?:digraph|graph|subgraph)[ \t\r\n]+)<ID>/.source, 'i'),
        lookbehind: true,
        greedy: true,
        alias: 'class-name',
        inside: IDInside
      },
      'attr-value': {
        pattern: withID(/(=[ \t\r\n]*)<ID>/.source),
        lookbehind: true,
        greedy: true,
        inside: IDInside
      },
      'attr-name': {
        pattern: withID(/([\[;, \t\r\n])<ID>(?=[ \t\r\n]*=)/.source),
        lookbehind: true,
        greedy: true,
        inside: IDInside
      },
      keyword: /\b(?:digraph|edge|graph|node|strict|subgraph)\b/i,
      'compass-point': {
        pattern: /(:[ \t\r\n]*)(?:[ns][ew]?|[ewc_])(?![\w\x80-\uFFFF])/,
        lookbehind: true,
        alias: 'builtin'
      },
      node: {
        pattern: withID(/(^|[^-.\w\x80-\uFFFF\\])<ID>/.source),
        lookbehind: true,
        greedy: true,
        inside: IDInside
      },
      operator: /[=:]|-[->]/,
      punctuation: /[\[\]{};,]/
    };
    Prism.languages.gv = Prism.languages.dot;
  })(Prism);
}

/***/ }),

/***/ 9891:
/***/ ((module) => {



module.exports = ebnf;
ebnf.displayName = 'ebnf';
ebnf.aliases = [];

function ebnf(Prism) {
  Prism.languages.ebnf = {
    comment: /\(\*[\s\S]*?\*\)/,
    string: {
      pattern: /"[^"\r\n]*"|'[^'\r\n]*'/,
      greedy: true
    },
    special: {
      pattern: /\?[^?\r\n]*\?/,
      greedy: true,
      alias: 'class-name'
    },
    definition: {
      pattern: /^([\t ]*)[a-z]\w*(?:[ \t]+[a-z]\w*)*(?=\s*=)/im,
      lookbehind: true,
      alias: ['rule', 'keyword']
    },
    rule: /\b[a-z]\w*(?:[ \t]+[a-z]\w*)*\b/i,
    punctuation: /\([:/]|[:/]\)|[.,;()[\]{}]/,
    operator: /[-=|*/!]/
  };
}

/***/ }),

/***/ 8319:
/***/ ((module) => {



module.exports = editorconfig;
editorconfig.displayName = 'editorconfig';
editorconfig.aliases = [];

function editorconfig(Prism) {
  Prism.languages.editorconfig = {
    // https://editorconfig-specification.readthedocs.io/en/latest/
    comment: /[;#].*/,
    section: {
      pattern: /(^[ \t]*)\[.+\]/m,
      lookbehind: true,
      alias: 'keyword',
      inside: {
        regex: /\\\\[\[\]{},!?.*]/,
        // Escape special characters with '\\'
        operator: /[!?]|\.\.|\*{1,2}/,
        punctuation: /[\[\]{},]/
      }
    },
    property: {
      pattern: /(^[ \t]*)[^\s=]+(?=[ \t]*=)/m,
      lookbehind: true
    },
    value: {
      pattern: /=.*/,
      alias: 'string',
      inside: {
        punctuation: /^=/
      }
    }
  };
}

/***/ }),

/***/ 4196:
/***/ ((module) => {



module.exports = eiffel;
eiffel.displayName = 'eiffel';
eiffel.aliases = [];

function eiffel(Prism) {
  Prism.languages.eiffel = {
    comment: /--.*/,
    string: [// Aligned-verbatim-strings
    {
      pattern: /"([^[]*)\[[\s\S]*?\]\1"/,
      greedy: true
    }, // Non-aligned-verbatim-strings
    {
      pattern: /"([^{]*)\{[\s\S]*?\}\1"/,
      greedy: true
    }, // Single-line string
    {
      pattern: /"(?:%(?:(?!\n)\s)*\n\s*%|%\S|[^%"\r\n])*"/,
      greedy: true
    }],
    // normal char | special char | char code
    "char": /'(?:%.|[^%'\r\n])+'/,
    keyword: /\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\b/i,
    "boolean": /\b(?:True|False)\b/i,
    // Convention: class-names are always all upper-case characters
    'class-name': {
      pattern: /\b[A-Z][\dA-Z_]*\b/,
      alias: 'builtin'
    },
    number: [// hexa | octal | bin
    /\b0[xcb][\da-f](?:_*[\da-f])*\b/i, // Decimal
    /(?:\b\d(?:_*\d)*)?\.(?:(?:\d(?:_*\d)*)?e[+-]?)?\d(?:_*\d)*\b|\b\d(?:_*\d)*\b\.?/i],
    punctuation: /:=|<<|>>|\(\||\|\)|->|\.(?=\w)|[{}[\];(),:?]/,
    operator: /\\\\|\|\.\.\||\.\.|\/[~\/=]?|[><]=?|[-+*^=~]/
  };
}

/***/ }),

/***/ 4857:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorMarkupTemplating = __webpack_require__(8083);

module.exports = ejs;
ejs.displayName = 'ejs';
ejs.aliases = ['eta'];

function ejs(Prism) {
  Prism.register(refractorMarkupTemplating);

  (function (Prism) {
    Prism.languages.ejs = {
      delimiter: {
        pattern: /^<%[-_=]?|[-_]?%>$/,
        alias: 'punctuation'
      },
      comment: /^#[\s\S]*/,
      'language-javascript': {
        pattern: /[\s\S]+/,
        inside: Prism.languages.javascript
      }
    };
    Prism.hooks.add('before-tokenize', function (env) {
      var ejsPattern = /<%(?!%)[\s\S]+?%>/g;
      Prism.languages['markup-templating'].buildPlaceholders(env, 'ejs', ejsPattern);
    });
    Prism.hooks.add('after-tokenize', function (env) {
      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ejs');
    });
    Prism.languages.eta = Prism.languages.ejs;
  })(Prism);
}

/***/ }),

/***/ 2243:
/***/ ((module) => {



module.exports = elixir;
elixir.displayName = 'elixir';
elixir.aliases = [];

function elixir(Prism) {
  Prism.languages.elixir = {
    doc: {
      pattern: /@(?:doc|moduledoc)\s+(?:("""|''')[\s\S]*?\1|("|')(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2)/,
      inside: {
        attribute: /^@\w+/,
        string: /['"][\s\S]+/
      }
    },
    comment: {
      pattern: /#.*/m,
      greedy: true
    },
    // ~r"""foo""" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r"foo", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>
    regex: {
      pattern: /~[rR](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|[^\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[uismxfr]*/,
      greedy: true
    },
    string: [{
      // ~s"""foo""" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s"foo", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>
      pattern: /~[cCsSwW](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|#\{[^}]+\}|#(?!\{)|[^#\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[csa]?/,
      greedy: true,
      inside: {// See interpolation below
      }
    }, {
      pattern: /("""|''')[\s\S]*?\1/,
      greedy: true,
      inside: {// See interpolation below
      }
    }, {
      // Multi-line strings are allowed
      pattern: /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: true,
      inside: {// See interpolation below
      }
    }],
    atom: {
      // Look-behind prevents bad highlighting of the :: operator
      pattern: /(^|[^:]):\w+/,
      lookbehind: true,
      alias: 'symbol'
    },
    module: {
      pattern: /\b[A-Z]\w*\b/,
      alias: 'class-name'
    },
    // Look-ahead prevents bad highlighting of the :: operator
    'attr-name': /\b\w+\??:(?!:)/,
    argument: {
      // Look-behind prevents bad highlighting of the && operator
      pattern: /(^|[^&])&\d+/,
      lookbehind: true,
      alias: 'variable'
    },
    attribute: {
      pattern: /@\w+/,
      alias: 'variable'
    },
    "function": /\b[_a-zA-Z]\w*[?!]?(?:(?=\s*(?:\.\s*)?\()|(?=\/\d))/,
    number: /\b(?:0[box][a-f\d_]+|\d[\d_]*)(?:\.[\d_]+)?(?:e[+-]?[\d_]+)?\b/i,
    keyword: /\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\b/,
    "boolean": /\b(?:true|false|nil)\b/,
    operator: [/\bin\b|&&?|\|[|>]?|\\\\|::|\.\.\.?|\+\+?|-[->]?|<[-=>]|>=|!==?|\B!|=(?:==?|[>~])?|[*\/^]/, {
      // We don't want to match <<
      pattern: /([^<])<(?!<)/,
      lookbehind: true
    }, {
      // We don't want to match >>
      pattern: /([^>])>(?!>)/,
      lookbehind: true
    }],
    punctuation: /<<|>>|[.,%\[\]{}()]/
  };
  Prism.languages.elixir.string.forEach(function (o) {
    o.inside = {
      interpolation: {
        pattern: /#\{[^}]+\}/,
        inside: {
          delimiter: {
            pattern: /^#\{|\}$/,
            alias: 'punctuation'
          },
          rest: Prism.languages.elixir
        }
      }
    };
  });
}

/***/ }),

/***/ 5002:
/***/ ((module) => {



module.exports = elm;
elm.displayName = 'elm';
elm.aliases = [];

function elm(Prism) {
  Prism.languages.elm = {
    comment: /--.*|\{-[\s\S]*?-\}/,
    "char": {
      pattern: /'(?:[^\\'\r\n]|\\(?:[abfnrtv\\']|\d+|x[0-9a-fA-F]+))'/,
      greedy: true
    },
    string: [{
      // Multiline strings are wrapped in triple ". Quotes may appear unescaped.
      pattern: /"""[\s\S]*?"""/,
      greedy: true
    }, {
      pattern: /"(?:[^\\"\r\n]|\\.)*"/,
      greedy: true
    }],
    'import-statement': {
      // The imported or hidden names are not included in this import
      // statement. This is because we want to highlight those exactly like
      // we do for the names in the program.
      pattern: /(^[\t ]*)import\s+[A-Z]\w*(?:\.[A-Z]\w*)*(?:\s+as\s+(?:[A-Z]\w*)(?:\.[A-Z]\w*)*)?(?:\s+exposing\s+)?/m,
      lookbehind: true,
      inside: {
        keyword: /\b(?:import|as|exposing)\b/
      }
    },
    keyword: /\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\b/,
    // These are builtin variables only. Constructors are highlighted later as a constant.
    builtin: /\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\b/,
    // decimal integers and floating point numbers | hexadecimal integers
    number: /\b(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?|0x[0-9a-f]+)\b/i,
    // Most of this is needed because of the meaning of a single '.'.
    // If it stands alone freely, it is the function composition.
    // It may also be a separator between a module name and an identifier => no
    // operator. If it comes together with other special characters it is an
    // operator too.
    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!
    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ
    operator: /\s\.\s|[+\-/*=.$<>:&|^?%#@~!]{2,}|[+\-/*=$<>:&|^?%#@~!]/,
    // In Elm, nearly everything is a variable, do not highlight these.
    hvariable: /\b(?:[A-Z]\w*\.)*[a-z]\w*\b/,
    constant: /\b(?:[A-Z]\w*\.)*[A-Z]\w*\b/,
    punctuation: /[{}[\]|(),.:]/
  };
}

/***/ }),

/***/ 1943:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorRuby = __webpack_require__(9636);

var refractorMarkupTemplating = __webpack_require__(8083);

module.exports = erb;
erb.displayName = 'erb';
erb.aliases = [];

function erb(Prism) {
  Prism.register(refractorRuby);
  Prism.register(refractorMarkupTemplating);

  (function (Prism) {
    Prism.languages.erb = Prism.languages.extend('ruby', {});
    Prism.languages.insertBefore('erb', 'comment', {
      delimiter: {
        pattern: /^<%=?|%>$/,
        alias: 'punctuation'
      }
    });
    Prism.hooks.add('before-tokenize', function (env) {
      var erbPattern = /<%=?(?:[^\r\n]|[\r\n](?!=begin)|[\r\n]=begin\s(?:[^\r\n]|[\r\n](?!=end))*[\r\n]=end)+?%>/gm;
      Prism.languages['markup-templating'].buildPlaceholders(env, 'erb', erbPattern);
    });
    Prism.hooks.add('after-tokenize', function (env) {
      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb');
    });
  })(Prism);
}

/***/ }),

/***/ 5488:
/***/ ((module) => {



module.exports = erlang;
erlang.displayName = 'erlang';
erlang.aliases = [];

function erlang(Prism) {
  Prism.languages.erlang = {
    comment: /%.+/,
    string: {
      pattern: /"(?:\\.|[^\\"\r\n])*"/,
      greedy: true
    },
    'quoted-function': {
      pattern: /'(?:\\.|[^\\'\r\n])+'(?=\()/,
      alias: 'function'
    },
    'quoted-atom': {
      pattern: /'(?:\\.|[^\\'\r\n])+'/,
      alias: 'atom'
    },
    "boolean": /\b(?:true|false)\b/,
    keyword: /\b(?:fun|when|case|of|end|if|receive|after|try|catch)\b/,
    number: [/\$\\?./, /\b\d+#[a-z0-9]+/i, /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i],
    "function": /\b[a-z][\w@]*(?=\()/,
    variable: {
      // Look-behind is used to prevent wrong highlighting of atoms containing "@"
      pattern: /(^|[^@])(?:\b|\?)[A-Z_][\w@]*/,
      lookbehind: true
    },
    operator: [/[=\/<>:]=|=[:\/]=|\+\+?|--?|[=*\/!]|\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\b/, {
      // We don't want to match <<
      pattern: /(^|[^<])<(?!<)/,
      lookbehind: true
    }, {
      // We don't want to match >>
      pattern: /(^|[^>])>(?!>)/,
      lookbehind: true
    }],
    atom: /\b[a-z][\w@]*/,
    punctuation: /[()[\]{}:;,.#|]|<<|>>/
  };
}

/***/ }),

/***/ 9764:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorLua = __webpack_require__(8281);

var refractorMarkupTemplating = __webpack_require__(8083);

module.exports = etlua;
etlua.displayName = 'etlua';
etlua.aliases = [];

function etlua(Prism) {
  Prism.register(refractorLua);
  Prism.register(refractorMarkupTemplating);

  (function (Prism) {
    Prism.languages.etlua = {
      delimiter: {
        pattern: /^<%[-=]?|-?%>$/,
        alias: 'punctuation'
      },
      'language-lua': {
        pattern: /[\s\S]+/,
        inside: Prism.languages.lua
      }
    };
    Prism.hooks.add('before-tokenize', function (env) {
      var pattern = /<%[\s\S]+?%>/g;
      Prism.languages['markup-templating'].buildPlaceholders(env, 'etlua', pattern);
    });
    Prism.hooks.add('after-tokenize', function (env) {
      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'etlua');
    });
  })(Prism);
}

/***/ }),

/***/ 522:
/***/ ((module) => {



module.exports = excelFormula;
excelFormula.displayName = 'excelFormula';
excelFormula.aliases = [];

function excelFormula(Prism) {
  Prism.languages['excel-formula'] = {
    comment: {
      pattern: /(\bN\(\s*)"(?:[^"]|"")*"(?=\s*\))/i,
      lookbehind: true,
      greedy: true
    },
    string: {
      pattern: /"(?:[^"]|"")*"(?!")/,
      greedy: true
    },
    reference: {
      // https://www.ablebits.com/office-addins-blog/2015/12/08/excel-reference-another-sheet-workbook/
      // Sales!B2
      // 'Winter sales'!B2
      // [Sales.xlsx]Jan!B2:B5
      // D:\Reports\[Sales.xlsx]Jan!B2:B5
      // '[Sales.xlsx]Jan sales'!B2:B5
      // 'D:\Reports\[Sales.xlsx]Jan sales'!B2:B5
      pattern: /(?:'[^']*'|(?:[^\s()[\]{}<>*?"';,$&]*\[[^^\s()[\]{}<>*?"']+\])?\w+)!/,
      greedy: true,
      alias: 'string',
      inside: {
        operator: /!$/,
        punctuation: /'/,
        sheet: {
          pattern: /[^[\]]+$/,
          alias: 'function'
        },
        file: {
          pattern: /\[[^[\]]+\]$/,
          inside: {
            punctuation: /[[\]]/
          }
        },
        path: /[\s\S]+/
      }
    },
    'function-name': {
      pattern: /\b[A-Z]\w*(?=\()/i,
      alias: 'keyword'
    },
    range: {
      pattern: /\$?\b(?:[A-Z]+\$?\d+:\$?[A-Z]+\$?\d+|[A-Z]+:\$?[A-Z]+|\d+:\$?\d+)\b/i,
      alias: 'property',
      inside: {
        operator: /:/,
        cell: /\$?[A-Z]+\$?\d+/i,
        column: /\$?[A-Z]+/i,
        row: /\$?\d+/
      }
    },
    cell: {
      // Excel is case insensitive, so the string "foo1" could be either a variable or a cell.
      // To combat this, we match cells case insensitive, if the contain at least one "$", and case sensitive otherwise.
      pattern: /\b[A-Z]+\d+\b|\$[A-Za-z]+\$?\d+\b|\b[A-Za-z]+\$\d+\b/,
      alias: 'property'
    },
    number: /(?:\b\d+(?:\.\d+)?|\B\.\d+)(?:e[+-]?\d+)?\b/i,
    "boolean": /\b(?:TRUE|FALSE)\b/i,
    operator: /[-+*/^%=&,]|<[=>]?|>=?/,
    punctuation: /[[\]();{}|]/
  };
  Prism.languages['xlsx'] = Prism.languages['xls'] = Prism.languages['excel-formula'];
}

/***/ }),

/***/ 2027:
/***/ ((module) => {



module.exports = factor;
factor.displayName = 'factor';
factor.aliases = [];

function factor(Prism) {
  ;

  (function (Prism) {
    var comment_inside = {
      "function": /\b(?:TODOS?|FIX(?:MES?)?|NOTES?|BUGS?|XX+|HACKS?|WARN(?:ING)?|\?{2,}|!{2,})\b/
    };
    var string_inside = {
      number: /\\[^\s']|%\w/
    };
    var factor = {
      comment: [{
        // ! single-line exclamation point comments with whitespace after/around the !
        pattern: /(^|\s)(?:! .*|!$)/,
        lookbehind: true,
        inside: comment_inside
      },
      /* from basis/multiline: */
      {
        // /* comment */, /* comment*/
        pattern: /(^|\s)\/\*\s[\s\S]*?\*\/(?=\s|$)/,
        lookbehind: true,
        greedy: true,
        inside: comment_inside
      }, {
        // ![[ comment ]] , ![===[ comment]===]
        pattern: /(^|\s)!\[(={0,6})\[\s[\s\S]*?\]\2\](?=\s|$)/,
        lookbehind: true,
        greedy: true,
        inside: comment_inside
      }],
      number: [{
        // basic base 10 integers 9, -9
        pattern: /(^|\s)[+-]?\d+(?=\s|$)/,
        lookbehind: true
      }, {
        // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9
        pattern: /(^|\s)[+-]?0(?:b[01]+|o[0-7]+|d\d+|x[\dA-F]+)(?=\s|$)/i,
        lookbehind: true
      }, {
        // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.
        pattern: /(^|\s)[+-]?\d+\/\d+\.?(?=\s|$)/,
        lookbehind: true
      }, {
        // positive mixed numbers 23+1/5 +23+1/5
        pattern: /(^|\s)\+?\d+\+\d+\/\d+(?=\s|$)/,
        lookbehind: true
      }, {
        // negative mixed numbers -23-1/5
        pattern: /(^|\s)-\d+-\d+\/\d+(?=\s|$)/,
        lookbehind: true
      }, {
        // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13
        // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4
        pattern: /(^|\s)[+-]?(?:\d*\.\d+|\d+\.\d*|\d+)(?:e[+-]?\d+)?(?=\s|$)/i,
        lookbehind: true
      }, {
        // NAN literal syntax NAN: 80000deadbeef, NAN: a
        pattern: /(^|\s)NAN:\s+[\da-fA-F]+(?=\s|$)/,
        lookbehind: true
      }, {
        /*
        base prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...
        "The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.
        The values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation."
        <https://docs.factorcode.org/content/article-syntax-floats.html>
        */
        pattern: /(^|\s)[+-]?0(?:b1\.[01]*|o1\.[0-7]*|d1\.\d*|x1\.[\dA-F]*)p\d+(?=\s|$)/i,
        lookbehind: true
      }],
      // R/ regexp?\/\\/
      regexp: {
        pattern: /(^|\s)R\/\s(?:\\\S|[^\\/])*\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\s|$)/,
        lookbehind: true,
        alias: 'number',
        inside: {
          variable: /\\\S/,
          keyword: /[+?*\[\]^$(){}.|]/,
          operator: {
            pattern: /(\/)[idmsr]+(?:-[idmsr]+)?/,
            lookbehind: true
          }
        }
      },
      "boolean": {
        pattern: /(^|\s)[tf](?=\s|$)/,
        lookbehind: true
      },
      // SBUF" asd", URL" ://...", P" /etc/"
      'custom-string': {
        pattern: /(^|\s)[A-Z0-9\-]+"\s(?:\\\S|[^"\\])*"/,
        lookbehind: true,
        greedy: true,
        alias: 'string',
        inside: {
          number: /\\\S|%\w|\//
        }
      },
      'multiline-string': [{
        // STRING: name \n content \n ; -> CONSTANT: name "content" (symbol)
        pattern: /(^|\s)STRING:\s+\S+(?:\n|\r\n).*(?:\n|\r\n)\s*;(?=\s|$)/,
        lookbehind: true,
        greedy: true,
        alias: 'string',
        inside: {
          number: string_inside.number,
          // trailing semicolon on its own line
          'semicolon-or-setlocal': {
            pattern: /([\r\n][ \t]*);(?=\s|$)/,
            lookbehind: true,
            alias: 'function'
          }
        }
      }, {
        // HEREDOC: marker \n content \n marker ; -> "content" (immediate)
        pattern: /(^|\s)HEREDOC:\s+\S+(?:\n|\r\n).*(?:\n|\r\n)\s*\S+(?=\s|$)/,
        lookbehind: true,
        greedy: true,
        alias: 'string',
        inside: string_inside
      }, {
        // [[ string ]], [==[ string]==]
        pattern: /(^|\s)\[(={0,6})\[\s[\s\S]*?\]\2\](?=\s|$)/,
        lookbehind: true,
        greedy: true,
        alias: 'string',
        inside: string_inside
      }],
      'special-using': {
        pattern: /(^|\s)USING:(?:\s\S+)*(?=\s+;(?:\s|$))/,
        lookbehind: true,
        alias: 'function',
        inside: {
          // this is essentially a regex for vocab names, which i don't want to specify
          // but the USING: gets picked up as a vocab name
          string: {
            pattern: /(\s)[^:\s]+/,
            lookbehind: true
          }
        }
      },

      /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible
      trying to do better is more work and regex-computation-time than it's worth though.
      - we'd like to have the "delimiter" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents
      - we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)
      - we'd like if the following variable name conventions were recognised specifically:
      special row variables = ..a b..
      type and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )
      word throws unconditional error = *
      any other word-like variable name = a ? q' etc
      https://docs.factorcode.org/content/article-effects.html
      these are pretty complicated to highlight properly without a real parser, and therefore out of scope
      the old pattern, which may be later useful, was: (^|\s)(?:call|execute|eval)?\((?:\s+[^"\r\n\t ]\S*)*?\s+--(?:\s+[^"\n\t ]\S*)*?\s+\)(?=\s|$)
      */
      // current solution is not great
      'stack-effect-delimiter': [{
        // opening parenthesis
        pattern: /(^|\s)(?:call|execute|eval)?\((?=\s)/,
        lookbehind: true,
        alias: 'operator'
      }, {
        // middle --
        pattern: /(\s)--(?=\s)/,
        lookbehind: true,
        alias: 'operator'
      }, {
        // closing parenthesis
        pattern: /(\s)\)(?=\s|$)/,
        lookbehind: true,
        alias: 'operator'
      }],
      combinators: {
        pattern: null,
        lookbehind: true,
        alias: 'keyword'
      },
      'kernel-builtin': {
        pattern: null,
        lookbehind: true,
        alias: 'variable'
      },
      'sequences-builtin': {
        pattern: null,
        lookbehind: true,
        alias: 'variable'
      },
      'math-builtin': {
        pattern: null,
        lookbehind: true,
        alias: 'variable'
      },
      'constructor-word': {
        // <array> but not <=>
        pattern: /(^|\s)<(?!=+>|-+>)\S+>(?=\s|$)/,
        lookbehind: true,
        alias: 'keyword'
      },
      'other-builtin-syntax': {
        pattern: null,
        lookbehind: true,
        alias: 'operator'
      },

      /*
      full list of supported word naming conventions: (the convention appears outside of the [brackets])
      set-[x]
      change-[x]
      with-[x]
      new-[x]
      >[string]
      [base]>
      [string]>[number]
      +[symbol]+
      [boolean-word]?
      ?[of]
      [slot-reader]>>
      >>[slot-setter]
      [slot-writer]<<
      ([implementation-detail])
      [mutater]!
      [variant]*
      [prettyprint].
      $[help-markup]
      <constructors>, SYNTAX:, etc are supported by their own patterns.
      `with` and `new` from `kernel` are their own builtins.
      see <https://docs.factorcode.org/content/article-conventions.html>
      */
      'conventionally-named-word': {
        pattern: /(^|\s)(?!")(?:(?:set|change|with|new)-\S+|\$\S+|>[^>\s]+|[^:>\s]+>|[^>\s]+>[^>\s]+|\+[^+\s]+\+|[^?\s]+\?|\?[^?\s]+|[^>\s]+>>|>>[^>\s]+|[^<\s]+<<|\([^()\s]+\)|[^!\s]+!|[^*\s]\S*\*|[^.\s]\S*\.)(?=\s|$)/,
        lookbehind: true,
        alias: 'keyword'
      },
      'colon-syntax': {
        pattern: /(^|\s)(?:[A-Z0-9\-]+#?)?:{1,2}\s+(?:;\S+|(?!;)\S+)(?=\s|$)/,
        lookbehind: true,
        greedy: true,
        alias: 'function'
      },
      'semicolon-or-setlocal': {
        pattern: /(\s)(?:;|:>)(?=\s|$)/,
        lookbehind: true,
        alias: 'function'
      },
      // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax
      'curly-brace-literal-delimiter': [{
        // opening
        pattern: /(^|\s)[a-z]*\{(?=\s)/i,
        lookbehind: true,
        alias: 'operator'
      }, {
        // closing
        pattern: /(\s)\}(?=\s|$)/,
        lookbehind: true,
        alias: 'operator'
      }],
      // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax
      'quotation-delimiter': [{
        // opening
        pattern: /(^|\s)\[(?=\s)/,
        lookbehind: true,
        alias: 'operator'
      }, {
        // closing
        pattern: /(\s)\](?=\s|$)/,
        lookbehind: true,
        alias: 'operator'
      }],
      'normal-word': {
        pattern: /(^|\s)[^"\s]\S*(?=\s|$)/,
        lookbehind: true
      },

      /*
      basic first-class string "a"
      with escaped double-quote "a\""
      escaped backslash "\\"
      and general escapes since Factor has so many "\N"
      syntax that works in the reference implementation that isn't fully
      supported because it's an implementation detail:
      "string 1""string 2" -> 2 strings (works anyway)
      "string"5 -> string, 5
      "string"[ ] -> string, quotation
      { "a"} -> array<string>
      the rest of those examples all properly recognise the string, but not
      the other object (number, quotation, etc)
      this is fine for a regex-only implementation.
      */
      string: {
        pattern: /"(?:\\\S|[^"\\])*"/,
        greedy: true,
        inside: string_inside
      }
    };

    var escape = function escape(str) {
      return (str + '').replace(/([.?*+\^$\[\]\\(){}|\-])/g, '\\$1');
    };

    var arrToWordsRegExp = function arrToWordsRegExp(arr) {
      return new RegExp('(^|\\s)(?:' + arr.map(escape).join('|') + ')(?=\\s|$)');
    };

    var builtins = {
      'kernel-builtin': ['or', '2nipd', '4drop', 'tuck', 'wrapper', 'nip', 'wrapper?', 'callstack>array', 'die', 'dupd', 'callstack', 'callstack?', '3dup', 'hashcode', 'pick', '4nip', 'build', '>boolean', 'nipd', 'clone', '5nip', 'eq?', '?', '=', 'swapd', '2over', 'clear', '2dup', 'get-retainstack', 'not', 'tuple?', 'dup', '3nipd', 'call', '-rotd', 'object', 'drop', 'assert=', 'assert?', '-rot', 'execute', 'boa', 'get-callstack', 'curried?', '3drop', 'pickd', 'overd', 'over', 'roll', '3nip', 'swap', 'and', '2nip', 'rotd', 'throw', '(clone)', 'hashcode*', 'spin', 'reach', '4dup', 'equal?', 'get-datastack', 'assert', '2drop', '<wrapper>', 'boolean?', 'identity-hashcode', 'identity-tuple?', 'null', 'composed?', 'new', '5drop', 'rot', '-roll', 'xor', 'identity-tuple', 'boolean'],
      'other-builtin-syntax': [// syntax
      '=======', 'recursive', 'flushable', '>>', '<<<<<<', 'M\\', 'B', 'PRIVATE>', '\\', '======', 'final', 'inline', 'delimiter', 'deprecated', '<PRIVATE', '>>>>>>', '<<<<<<<', 'parse-complex', 'malformed-complex', 'read-only', '>>>>>>>', 'call-next-method', '<<', 'foldable', // literals
      '$', '$[', '${'],
      'sequences-builtin': ['member-eq?', 'mismatch', 'append', 'assert-sequence=', 'longer', 'repetition', 'clone-like', '3sequence', 'assert-sequence?', 'last-index-from', 'reversed', 'index-from', 'cut*', 'pad-tail', 'join-as', 'remove-eq!', 'concat-as', 'but-last', 'snip', 'nths', 'nth', 'sequence', 'longest', 'slice?', '<slice>', 'remove-nth', 'tail-slice', 'empty?', 'tail*', 'member?', 'virtual-sequence?', 'set-length', 'drop-prefix', 'iota', 'unclip', 'bounds-error?', 'unclip-last-slice', 'non-negative-integer-expected', 'non-negative-integer-expected?', 'midpoint@', 'longer?', '?set-nth', '?first', 'rest-slice', 'prepend-as', 'prepend', 'fourth', 'sift', 'subseq-start', 'new-sequence', '?last', 'like', 'first4', '1sequence', 'reverse', 'slice', 'virtual@', 'repetition?', 'set-last', 'index', '4sequence', 'max-length', 'set-second', 'immutable-sequence', 'first2', 'first3', 'supremum', 'unclip-slice', 'suffix!', 'insert-nth', 'tail', '3append', 'short', 'suffix', 'concat', 'flip', 'immutable?', 'reverse!', '2sequence', 'sum', 'delete-all', 'indices', 'snip-slice', '<iota>', 'check-slice', 'sequence?', 'head', 'append-as', 'halves', 'sequence=', 'collapse-slice', '?second', 'slice-error?', 'product', 'bounds-check?', 'bounds-check', 'immutable', 'virtual-exemplar', 'harvest', 'remove', 'pad-head', 'last', 'set-fourth', 'cartesian-product', 'remove-eq', 'shorten', 'shorter', 'reversed?', 'shorter?', 'shortest', 'head-slice', 'pop*', 'tail-slice*', 'but-last-slice', 'iota?', 'append!', 'cut-slice', 'new-resizable', 'head-slice*', 'sequence-hashcode', 'pop', 'set-nth', '?nth', 'second', 'join', 'immutable-sequence?', '<reversed>', '3append-as', 'virtual-sequence', 'subseq?', 'remove-nth!', 'length', 'last-index', 'lengthen', 'assert-sequence', 'copy', 'move', 'third', 'first', 'tail?', 'set-first', 'prefix', 'bounds-error', '<repetition>', 'exchange', 'surround', 'cut', 'min-length', 'set-third', 'push-all', 'head?', 'subseq-start-from', 'delete-slice', 'rest', 'sum-lengths', 'head*', 'infimum', 'remove!', 'glue', 'slice-error', 'subseq', 'push', 'replace-slice', 'subseq-as', 'unclip-last'],
      'math-builtin': ['number=', 'next-power-of-2', '?1+', 'fp-special?', 'imaginary-part', 'float>bits', 'number?', 'fp-infinity?', 'bignum?', 'fp-snan?', 'denominator', 'gcd', '*', '+', 'fp-bitwise=', '-', 'u>=', '/', '>=', 'bitand', 'power-of-2?', 'log2-expects-positive', 'neg?', '<', 'log2', '>', 'integer?', 'number', 'bits>double', '2/', 'zero?', 'bits>float', 'float?', 'shift', 'ratio?', 'rect>', 'even?', 'ratio', 'fp-sign', 'bitnot', '>fixnum', 'complex?', '/i', 'integer>fixnum', '/f', 'sgn', '>bignum', 'next-float', 'u<', 'u>', 'mod', 'recip', 'rational', '>float', '2^', 'integer', 'fixnum?', 'neg', 'fixnum', 'sq', 'bignum', '>rect', 'bit?', 'fp-qnan?', 'simple-gcd', 'complex', '<fp-nan>', 'real', '>fraction', 'double>bits', 'bitor', 'rem', 'fp-nan-payload', 'real-part', 'log2-expects-positive?', 'prev-float', 'align', 'unordered?', 'float', 'fp-nan?', 'abs', 'bitxor', 'integer>fixnum-strict', 'u<=', 'odd?', '<=', '/mod', '>integer', 'real?', 'rational?', 'numerator'] // that's all for now

    };
    Object.keys(builtins).forEach(function (k) {
      factor[k].pattern = arrToWordsRegExp(builtins[k]);
    });
    var combinators = [// kernel
    '2bi', 'while', '2tri', 'bi*', '4dip', 'both?', 'same?', 'tri@', 'curry', 'prepose', '3bi', '?if', 'tri*', '2keep', '3keep', 'curried', '2keepd', 'when', '2bi*', '2tri*', '4keep', 'bi@', 'keepdd', 'do', 'unless*', 'tri-curry', 'if*', 'loop', 'bi-curry*', 'when*', '2bi@', '2tri@', 'with', '2with', 'either?', 'bi', 'until', '3dip', '3curry', 'tri-curry*', 'tri-curry@', 'bi-curry', 'keepd', 'compose', '2dip', 'if', '3tri', 'unless', 'tuple', 'keep', '2curry', 'tri', 'most', 'while*', 'dip', 'composed', 'bi-curry@', // sequences
    'find-last-from', 'trim-head-slice', 'map-as', 'each-from', 'none?', 'trim-tail', 'partition', 'if-empty', 'accumulate*', 'reject!', 'find-from', 'accumulate-as', 'collector-for-as', 'reject', 'map', 'map-sum', 'accumulate!', '2each-from', 'follow', 'supremum-by', 'map!', 'unless-empty', 'collector', 'padding', 'reduce-index', 'replicate-as', 'infimum-by', 'trim-tail-slice', 'count', 'find-index', 'filter', 'accumulate*!', 'reject-as', 'map-integers', 'map-find', 'reduce', 'selector', 'interleave', '2map', 'filter-as', 'binary-reduce', 'map-index-as', 'find', 'produce', 'filter!', 'replicate', 'cartesian-map', 'cartesian-each', 'find-index-from', 'map-find-last', '3map-as', '3map', 'find-last', 'selector-as', '2map-as', '2map-reduce', 'accumulate', 'each', 'each-index', 'accumulate*-as', 'when-empty', 'all?', 'collector-as', 'push-either', 'new-like', 'collector-for', '2selector', 'push-if', '2all?', 'map-reduce', '3each', 'any?', 'trim-slice', '2reduce', 'change-nth', 'produce-as', '2each', 'trim', 'trim-head', 'cartesian-find', 'map-index', // math
    'if-zero', 'each-integer', 'unless-zero', '(find-integer)', 'when-zero', 'find-last-integer', '(all-integers?)', 'times', '(each-integer)', 'find-integer', 'all-integers?', // math.combinators
    'unless-negative', 'if-positive', 'when-positive', 'when-negative', 'unless-positive', 'if-negative', // combinators
    'case', '2cleave', 'cond>quot', 'case>quot', '3cleave', 'wrong-values', 'to-fixed-point', 'alist>quot', 'cond', 'cleave', 'call-effect', 'recursive-hashcode', 'spread', 'deep-spread>quot', // combinators.short-circuit
    '2||', '0||', 'n||', '0&&', '2&&', '3||', '1||', '1&&', 'n&&', '3&&', // combinators.smart
    'smart-unless*', 'keep-inputs', 'reduce-outputs', 'smart-when*', 'cleave>array', 'smart-with', 'smart-apply', 'smart-if', 'inputs/outputs', 'output>sequence-n', 'map-outputs', 'map-reduce-outputs', 'dropping', 'output>array', 'smart-map-reduce', 'smart-2map-reduce', 'output>array-n', 'nullary', 'input<sequence', 'append-outputs', 'drop-inputs', 'inputs', 'smart-2reduce', 'drop-outputs', 'smart-reduce', 'preserving', 'smart-when', 'outputs', 'append-outputs-as', 'smart-unless', 'smart-if*', 'sum-outputs', 'input<sequence-unsafe', 'output>sequence' // tafn
    ];
    factor.combinators.pattern = arrToWordsRegExp(combinators);
    Prism.languages.factor = factor;
  })(Prism);
}

/***/ }),

/***/ 6264:
/***/ ((module) => {



module.exports = $false;
$false.displayName = '$false';
$false.aliases = [];

function $false(Prism) {
  ;

  (function (Prism) {
    /**
     * Based on the manual by Wouter van Oortmerssen.
     *
     * @see {@link https://github.com/PrismJS/prism/issues/2801#issue-829717504}
     */
    Prism.languages['false'] = {
      comment: {
        pattern: /\{[^}]*\}/
      },
      string: {
        pattern: /"[^"]*"/,
        greedy: true
      },
      'character-code': {
        pattern: /'(?:[^\r]|\r\n?)/,
        alias: 'number'
      },
      'assembler-code': {
        pattern: /\d+`/,
        alias: 'important'
      },
      number: /\d+/,
      operator: /[-!#$%&'*+,./:;=>?@\\^_`|~ßø]/,
      punctuation: /\[|\]/,
      variable: /[a-z]/,
      'non-standard': {
        pattern: /[()<BDO®]/,
        alias: 'bold'
      }
    };
  })(Prism);
}

/***/ }),

/***/ 6209:
/***/ ((module) => {



module.exports = firestoreSecurityRules;
firestoreSecurityRules.displayName = 'firestoreSecurityRules';
firestoreSecurityRules.aliases = [];

function firestoreSecurityRules(Prism) {
  Prism.languages['firestore-security-rules'] = Prism.languages.extend('clike', {
    comment: /\/\/.*/,
    keyword: /\b(?:allow|function|if|match|null|return|rules_version|service)\b/,
    operator: /&&|\|\||[<>!=]=?|[-+*/%]|\b(?:in|is)\b/
  });
  delete Prism.languages['firestore-security-rules']['class-name'];
  Prism.languages.insertBefore('firestore-security-rules', 'keyword', {
    path: {
      pattern: /(^|[\s(),])(?:\/(?:[\w\xA0-\uFFFF]+|\{[\w\xA0-\uFFFF]+(?:=\*\*)?\}|\$\([\w\xA0-\uFFFF.]+\)))+/,
      lookbehind: true,
      greedy: true,
      inside: {
        variable: {
          pattern: /\{[\w\xA0-\uFFFF]+(?:=\*\*)?\}|\$\([\w\xA0-\uFFFF.]+\)/,
          inside: {
            operator: /=/,
            keyword: /\*\*/,
            punctuation: /[.$(){}]/
          }
        },
        punctuation: /\//
      }
    },
    method: {
      // to make the pattern shorter, the actual method names are omitted
      pattern: /(\ballow\s+)[a-z]+(?:\s*,\s*[a-z]+)*(?=\s*[:;])/,
      lookbehind: true,
      alias: 'builtin',
      inside: {
        punctuation: /,/
      }
    }
  });
}

/***/ }),

/***/ 558:
/***/ ((module) => {



module.exports = flow;
flow.displayName = 'flow';
flow.aliases = [];

function flow(Prism) {
  ;

  (function (Prism) {
    Prism.languages.flow = Prism.languages.extend('javascript', {});
    Prism.languages.insertBefore('flow', 'keyword', {
      type: [{
        pattern: /\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\b/,
        alias: 'tag'
      }]
    });
    Prism.languages.flow['function-variable'].pattern = /(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=\s*(?:function\b|(?:\([^()]*\)(?:\s*:\s*\w+)?|(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/i;
    delete Prism.languages.flow['parameter'];
    Prism.languages.insertBefore('flow', 'operator', {
      'flow-punctuation': {
        pattern: /\{\||\|\}/,
        alias: 'punctuation'
      }
    });

    if (!Array.isArray(Prism.languages.flow.keyword)) {
      Prism.languages.flow.keyword = [Prism.languages.flow.keyword];
    }

    Prism.languages.flow.keyword.unshift({
      pattern: /(^|[^$]\b)(?:type|opaque|declare|Class)\b(?!\$)/,
      lookbehind: true
    }, {
      pattern: /(^|[^$]\B)\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\b(?!\$)/,
      lookbehind: true
    });
  })(Prism);
}

/***/ }),

/***/ 7202:
/***/ ((module) => {



module.exports = fortran;
fortran.displayName = 'fortran';
fortran.aliases = [];

function fortran(Prism) {
  Prism.languages.fortran = {
    'quoted-number': {
      pattern: /[BOZ](['"])[A-F0-9]+\1/i,
      alias: 'number'
    },
    string: {
      pattern: /(?:\b\w+_)?(['"])(?:\1\1|&(?:\r\n?|\n)(?:[ \t]*!.*(?:\r\n?|\n)|(?![ \t]*!))|(?!\1).)*(?:\1|&)/,
      inside: {
        comment: {
          pattern: /(&(?:\r\n?|\n)\s*)!.*/,
          lookbehind: true
        }
      }
    },
    comment: {
      pattern: /!.*/,
      greedy: true
    },
    "boolean": /\.(?:TRUE|FALSE)\.(?:_\w+)?/i,
    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[ED][+-]?\d+)?(?:_\w+)?/i,
    keyword: [// Types
    /\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\b/i, // END statements
    /\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\b/i, // Statements
    /\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\b/i, // Others
    /\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\b/i],
    operator: [/\*\*|\/\/|=>|[=\/]=|[<>]=?|::|[+\-*=%]|\.[A-Z]+\./i, {
      // Use lookbehind to prevent confusion with (/ /)
      pattern: /(^|(?!\().)\/(?!\))/,
      lookbehind: true
    }],
    punctuation: /\(\/|\/\)|[(),;:&]/
  };
}

/***/ }),

/***/ 9690:
/***/ ((module) => {



module.exports = fsharp;
fsharp.displayName = 'fsharp';
fsharp.aliases = [];

function fsharp(Prism) {
  Prism.languages.fsharp = Prism.languages.extend('clike', {
    comment: [{
      pattern: /(^|[^\\])\(\*(?!\))[\s\S]*?\*\)/,
      lookbehind: true
    }, {
      pattern: /(^|[^\\:])\/\/.*/,
      lookbehind: true
    }],
    string: {
      pattern: /(?:"""[\s\S]*?"""|@"(?:""|[^"])*"|"(?:\\[\s\S]|[^\\"])*")B?|'(?:[^\\']|\\(?:.|\d{3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}|U[a-fA-F\d]{8}))'B?/,
      greedy: true
    },
    'class-name': {
      pattern: /(\b(?:exception|inherit|interface|new|of|type)\s+|\w\s*:\s*|\s:\??>\s*)[.\w]+\b(?:\s*(?:->|\*)\s*[.\w]+\b)*(?!\s*[:.])/,
      lookbehind: true,
      inside: {
        operator: /->|\*/,
        punctuation: /\./
      }
    },
    keyword: /\b(?:let|return|use|yield)(?:!\B|\b)|\b(?:abstract|and|as|assert|base|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|global|if|in|inherit|inline|interface|internal|lazy|match|member|module|mutable|namespace|new|not|null|of|open|or|override|private|public|rec|select|static|struct|then|to|true|try|type|upcast|val|void|when|while|with|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|include|method|mixin|object|parallel|process|protected|pure|sealed|tailcall|trait|virtual|volatile)\b/,
    number: [/\b0x[\da-fA-F]+(?:un|lf|LF)?\b/, /\b0b[01]+(?:y|uy)?\b/, /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[fm]|e[+-]?\d+)?\b/i, /\b\d+(?:[IlLsy]|u[lsy]?|UL)?\b/],
    operator: /([<>~&^])\1\1|([*.:<>&])\2|<-|->|[!=:]=|<?\|{1,3}>?|\??(?:<=|>=|<>|[-+*/%=<>])\??|[!?^&]|~[+~-]|:>|:\?>?/
  });
  Prism.languages.insertBefore('fsharp', 'keyword', {
    preprocessor: {
      pattern: /(^[\t ]*)#.*/m,
      lookbehind: true,
      alias: 'property',
      inside: {
        directive: {
          pattern: /(^#)\b(?:else|endif|if|light|line|nowarn)\b/,
          lookbehind: true,
          alias: 'keyword'
        }
      }
    }
  });
  Prism.languages.insertBefore('fsharp', 'punctuation', {
    'computation-expression': {
      pattern: /\b[_a-z]\w*(?=\s*\{)/i,
      alias: 'keyword'
    }
  });
  Prism.languages.insertBefore('fsharp', 'string', {
    annotation: {
      pattern: /\[<.+?>\]/,
      inside: {
        punctuation: /^\[<|>\]$/,
        'class-name': {
          pattern: /^\w+$|(^|;\s*)[A-Z]\w*(?=\()/,
          lookbehind: true
        },
        'annotation-content': {
          pattern: /[\s\S]+/,
          inside: Prism.languages.fsharp
        }
      }
    }
  });
}

/***/ }),

/***/ 9201:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorMarkupTemplating = __webpack_require__(8083);

module.exports = ftl;
ftl.displayName = 'ftl';
ftl.aliases = [];

function ftl(Prism) {
  Prism.register(refractorMarkupTemplating);

  (function (Prism) {
    // https://freemarker.apache.org/docs/dgui_template_exp.html
    // FTL expression with 4 levels of nesting supported
    var FTL_EXPR = /[^<()"']|\((?:<expr>)*\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|"(?:[^\\"]|\\.)*"|'(?:[^\\']|\\.)*'/.source;

    for (var i = 0; i < 2; i++) {
      FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {
        return FTL_EXPR;
      });
    }

    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\s\S]/.source);
    var ftl = {
      comment: /<#--[\s\S]*?-->/,
      string: [{
        // raw string
        pattern: /\br("|')(?:(?!\1)[^\\]|\\.)*\1/,
        greedy: true
      }, {
        pattern: RegExp(/("|')(?:(?!\1|\$\{)[^\\]|\\.|\$\{(?:(?!\})(?:<expr>))*\})*\1/.source.replace(/<expr>/g, function () {
          return FTL_EXPR;
        })),
        greedy: true,
        inside: {
          interpolation: {
            pattern: RegExp(/((?:^|[^\\])(?:\\\\)*)\$\{(?:(?!\})(?:<expr>))*\}/.source.replace(/<expr>/g, function () {
              return FTL_EXPR;
            })),
            lookbehind: true,
            inside: {
              'interpolation-punctuation': {
                pattern: /^\$\{|\}$/,
                alias: 'punctuation'
              },
              rest: null
            }
          }
        }
      }],
      keyword: /\b(?:as)\b/,
      "boolean": /\b(?:true|false)\b/,
      'builtin-function': {
        pattern: /((?:^|[^?])\?\s*)\w+/,
        lookbehind: true,
        alias: 'function'
      },
      "function": /\b\w+(?=\s*\()/,
      number: /\b\d+(?:\.\d+)?\b/,
      operator: /\.\.[<*!]?|->|--|\+\+|&&|\|\||\?{1,2}|[-+*/%!=<>]=?|\b(?:gt|gte|lt|lte)\b/,
      punctuation: /[,;.:()[\]{}]/
    };
    ftl.string[1].inside.interpolation.inside.rest = ftl;
    Prism.languages.ftl = {
      'ftl-comment': {
        // the pattern is shortened to be more efficient
        pattern: /^<#--[\s\S]*/,
        alias: 'comment'
      },
      'ftl-directive': {
        pattern: /^<[\s\S]+>$/,
        inside: {
          directive: {
            pattern: /(^<\/?)[#@][a-z]\w*/i,
            lookbehind: true,
            alias: 'keyword'
          },
          punctuation: /^<\/?|\/?>$/,
          content: {
            pattern: /\s*\S[\s\S]*/,
            alias: 'ftl',
            inside: ftl
          }
        }
      },
      'ftl-interpolation': {
        pattern: /^\$\{[\s\S]*\}$/,
        inside: {
          punctuation: /^\$\{|\}$/,
          content: {
            pattern: /\s*\S[\s\S]*/,
            alias: 'ftl',
            inside: ftl
          }
        }
      }
    };
    Prism.hooks.add('before-tokenize', function (env) {
      // eslint-disable-next-line regexp/no-useless-lazy
      var pattern = RegExp(/<#--[\s\S]*?-->|<\/?[#@][a-zA-Z](?:<expr>)*?>|\$\{(?:<expr>)*?\}/.source.replace(/<expr>/g, function () {
        return FTL_EXPR;
      }), 'gi');
      Prism.languages['markup-templating'].buildPlaceholders(env, 'ftl', pattern);
    });
    Prism.hooks.add('after-tokenize', function (env) {
      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl');
    });
  })(Prism);
}

/***/ }),

/***/ 281:
/***/ ((module) => {



module.exports = gap;
gap.displayName = 'gap';
gap.aliases = [];

function gap(Prism) {
  // https://www.gap-system.org/Manuals/doc/ref/chap4.html
  // https://www.gap-system.org/Manuals/doc/ref/chap27.html
  Prism.languages.gap = {
    shell: {
      pattern: /^gap>[\s\S]*?(?=^gap>|$(?![\s\S]))/m,
      greedy: true,
      inside: {
        gap: {
          pattern: /^(gap>).+(?:(?:\r(?:\n|(?!\n))|\n)>.*)*/,
          lookbehind: true,
          inside: null // see below

        },
        punctuation: /^gap>/
      }
    },
    comment: {
      pattern: /#.*/,
      greedy: true
    },
    string: {
      pattern: /(^|[^\\'"])(?:'(?:[^\r\n\\']|\\.){1,10}'|"(?:[^\r\n\\"]|\\.)*"(?!")|"""[\s\S]*?""")/,
      lookbehind: true,
      greedy: true,
      inside: {
        continuation: {
          pattern: /([\r\n])>/,
          lookbehind: true,
          alias: 'punctuation'
        }
      }
    },
    keyword: /\b(?:Assert|Info|IsBound|QUIT|TryNextMethod|Unbind|and|atomic|break|continue|do|elif|else|end|fi|for|function|if|in|local|mod|not|od|or|quit|readonly|readwrite|rec|repeat|return|then|until|while)\b/,
    "boolean": /\b(?:false|true)\b/,
    "function": /\b[a-z_]\w*(?=\s*\()/i,
    number: {
      pattern: /(^|[^\w.]|\.\.)(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?(?:_[a-z]?)?(?=$|[^\w.]|\.\.)/,
      lookbehind: true
    },
    continuation: {
      pattern: /([\r\n])>/,
      lookbehind: true,
      alias: 'punctuation'
    },
    operator: /->|[-+*/^~=!]|<>|[<>]=?|:=|\.\./,
    punctuation: /[()[\]{},;.:]/
  };
  Prism.languages.gap.shell.inside.gap.inside = Prism.languages.gap;
}

/***/ }),

/***/ 5343:
/***/ ((module) => {



module.exports = gcode;
gcode.displayName = 'gcode';
gcode.aliases = [];

function gcode(Prism) {
  Prism.languages.gcode = {
    comment: /;.*|\B\(.*?\)\B/,
    string: {
      pattern: /"(?:""|[^"])*"/,
      greedy: true
    },
    keyword: /\b[GM]\d+(?:\.\d+)?\b/,
    property: /\b[A-Z]/,
    checksum: {
      pattern: /\*\d+/,
      alias: 'punctuation'
    },
    // T0:0:0
    punctuation: /:/
  };
}

/***/ }),

/***/ 3827:
/***/ ((module) => {



module.exports = gdscript;
gdscript.displayName = 'gdscript';
gdscript.aliases = [];

function gdscript(Prism) {
  Prism.languages.gdscript = {
    comment: /#.*/,
    string: {
      pattern: /@?(?:("|')(?:(?!\1)[^\n\\]|\\[\s\S])*\1(?!"|')|"""(?:[^\\]|\\[\s\S])*?""")/,
      greedy: true
    },
    'class-name': {
      // class_name Foo, extends Bar, class InnerClass
      // export(int) var baz, export(int, 0) var i
      // as Node
      // const FOO: int = 9, var bar: bool = true
      // func add(reference: Item, amount: int) -> Item:
      pattern: /(^(?:class_name|class|extends)[ \t]+|^export\([ \t]*|\bas[ \t]+|(?:\b(?:const|var)[ \t]|[,(])[ \t]*\w+[ \t]*:[ \t]*|->[ \t]*)[a-zA-Z_]\w*/m,
      lookbehind: true
    },
    keyword: /\b(?:and|as|assert|break|breakpoint|class|class_name|const|continue|elif|else|enum|export|extends|for|func|if|in|is|master|mastersync|match|not|null|onready|or|pass|preload|puppet|puppetsync|remote|remotesync|return|self|setget|signal|static|tool|var|while|yield)\b/,
    "function": /\b[a-z_]\w*(?=[ \t]*\()/i,
    variable: /\$\w+/,
    number: [/\b0b[01_]+\b|\b0x[\da-fA-F_]+\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.[\d_]+)(?:e[+-]?[\d_]+)?\b/, /\b(?:INF|NAN|PI|TAU)\b/],
    constant: /\b[A-Z][A-Z_\d]*\b/,
    "boolean": /\b(?:false|true)\b/,
    operator: /->|:=|&&|\|\||<<|>>|[-+*/%&|!<>=]=?|[~^]/,
    punctuation: /[.:,;()[\]{}]/
  };
}

/***/ }),

/***/ 9874:
/***/ ((module) => {



module.exports = gedcom;
gedcom.displayName = 'gedcom';
gedcom.aliases = [];

function gedcom(Prism) {
  Prism.languages.gedcom = {
    'line-value': {
      // Preceded by level, optional pointer, and tag
      pattern: /(^[\t ]*\d+ +(?:@\w[\w!"$%&'()*+,\-./:;<=>?[\\\]^`{|}~\x80-\xfe #]*@ +)?\w+ ).+/m,
      lookbehind: true,
      inside: {
        pointer: {
          pattern: /^@\w[\w!"$%&'()*+,\-./:;<=>?[\\\]^`{|}~\x80-\xfe #]*@$/,
          alias: 'variable'
        }
      }
    },
    tag: {
      // Preceded by level and optional pointer
      pattern: /(^[\t ]*\d+ +(?:@\w[\w!"$%&'()*+,\-./:;<=>?[\\\]^`{|}~\x80-\xfe #]*@ +)?)\w+/m,
      lookbehind: true,
      alias: 'string'
    },
    level: {
      pattern: /(^[\t ]*)\d+/m,
      lookbehind: true,
      alias: 'number'
    },
    pointer: {
      pattern: /@\w[\w!"$%&'()*+,\-./:;<=>?[\\\]^`{|}~\x80-\xfe #]*@/,
      alias: 'variable'
    }
  };
}

/***/ }),

/***/ 3228:
/***/ ((module) => {



module.exports = gherkin;
gherkin.displayName = 'gherkin';
gherkin.aliases = [];

function gherkin(Prism) {
  ;

  (function (Prism) {
    var tableRow = /(?:\r?\n|\r)[ \t]*\|.+\|(?:(?!\|).)*/.source;
    Prism.languages.gherkin = {
      pystring: {
        pattern: /("""|''')[\s\S]+?\1/,
        alias: 'string'
      },
      comment: {
        pattern: /(^[ \t]*)#.*/m,
        lookbehind: true
      },
      tag: {
        pattern: /(^[ \t]*)@\S*/m,
        lookbehind: true
      },
      feature: {
        pattern: /((?:^|\r?\n|\r)[ \t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|laH|Lastnost|Mak|Mogucnost|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|perbogh|poQbogh malja'|Potrzeba biznesowa|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:\r\n]+(?:\r?\n|\r|$))*/,
        lookbehind: true,
        inside: {
          important: {
            pattern: /(:)[^\r\n]+/,
            lookbehind: true
          },
          keyword: /[^:\r\n]+:/
        }
      },
      scenario: {
        pattern: /(^[ \t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram senaryo|Dyagram Senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|Examples|EXAMPLZ|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|ghantoH|Grundlage|Hannergrond|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut|lut chovnatlh|lutmey|Lýsing Atburðarásar|Lýsing Dæma|Menggariskan Senario|MISHUN|MISHUN SRSLY|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan senaryo|Plan Senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo|Senaryo deskripsyon|Senaryo Deskripsyon|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie|Situasie Uiteensetting|Skenario|Skenario konsep|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa|Swa hwaer swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo-ho-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\r\n]*/m,
        lookbehind: true,
        inside: {
          important: {
            pattern: /(:)[^\r\n]*/,
            lookbehind: true
          },
          keyword: /[^:\r\n]+:/
        }
      },
      'table-body': {
        // Look-behind is used to skip the table head, which has the same format as any table row
        pattern: RegExp('(' + tableRow + ')(?:' + tableRow + ')+'),
        lookbehind: true,
        inside: {
          outline: {
            pattern: /<[^>]+>/,
            alias: 'variable'
          },
          td: {
            pattern: /\s*[^\s|][^|]*/,
            alias: 'string'
          },
          punctuation: /\|/
        }
      },
      'table-head': {
        pattern: RegExp(tableRow),
        inside: {
          th: {
            pattern: /\s*[^\s|][^|]*/,
            alias: 'variable'
          },
          punctuation: /\|/
        }
      },
      atrule: {
        pattern: /(^[ \t]+)(?:'ach|'a|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cando|Cand|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|Dato|DEN|Den youse gotta|Dengan|De|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|Entonces|En|Epi|E|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kadar|Kada|Kad|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Majd|Maka|Manawa|Mas|Ma|Menawa|Men|Mutta|Nalikaning|Nalika|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Og|Och|Oletetaan|Onda|Ond|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|qaSDI'|Quando|Quand|Quan|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|ugeholl|Und|Un|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadani|Zadano|Zadan|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \t])/m,
        lookbehind: true
      },
      string: {
        pattern: /"(?:\\.|[^"\\\r\n])*"|'(?:\\.|[^'\\\r\n])*'/,
        inside: {
          outline: {
            pattern: /<[^>]+>/,
            alias: 'variable'
          }
        }
      },
      outline: {
        pattern: /<[^>]+>/,
        alias: 'variable'
      }
    };
  })(Prism);
}

/***/ }),

/***/ 6416:
/***/ ((module) => {



module.exports = git;
git.displayName = 'git';
git.aliases = [];

function git(Prism) {
  Prism.languages.git = {
    /*
     * A simple one line comment like in a git status command
     * For instance:
     * $ git status
     * # On branch infinite-scroll
     * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,
     * # and have 1 and 2 different commits each, respectively.
     * nothing to commit (working directory clean)
     */
    comment: /^#.*/m,

    /*
     * Regexp to match the changed lines in a git diff output. Check the example below.
     */
    deleted: /^[-–].*/m,
    inserted: /^\+.*/m,

    /*
     * a string (double and simple quote)
     */
    string: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/m,

    /*
     * a git command. It starts with a random prompt finishing by a $, then "git" then some other parameters
     * For instance:
     * $ git add file.txt
     */
    command: {
      pattern: /^.*\$ git .*$/m,
      inside: {
        /*
         * A git command can contain a parameter starting by a single or a double dash followed by a string
         * For instance:
         * $ git diff --cached
         * $ git log -p
         */
        parameter: /\s--?\w+/m
      }
    },

    /*
     * Coordinates displayed in a git diff command
     * For instance:
     * $ git diff
     * diff --git file.txt file.txt
     * index 6214953..1d54a52 100644
     * --- file.txt
     * +++ file.txt
     * @@ -1 +1,2 @@
     * -Here's my tetx file
     * +Here's my text file
     * +And this is the second line
     */
    coord: /^@@.*@@$/m,

    /*
     * Match a "commit [SHA1]" line in a git log output.
     * For instance:
     * $ git log
     * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09
     * Author: lgiraudel
     * Date:   Mon Feb 17 11:18:34 2014 +0100
     *
     *     Add of a new line
     */
    'commit-sha1': /^commit \w{40}$/m
  };
}

/***/ }),

/***/ 2111:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorC = __webpack_require__(3530);

module.exports = glsl;
glsl.displayName = 'glsl';
glsl.aliases = [];

function glsl(Prism) {
  Prism.register(refractorC);
  Prism.languages.glsl = Prism.languages.extend('c', {
    keyword: /\b(?:attribute|const|uniform|varying|buffer|shared|coherent|volatile|restrict|readonly|writeonly|atomic_uint|layout|centroid|flat|smooth|noperspective|patch|sample|break|continue|do|for|while|switch|case|default|if|else|subroutine|in|out|inout|float|double|int|void|bool|true|false|invariant|precise|discard|return|d?mat[234](?:x[234])?|[ibdu]?vec[234]|uint|lowp|mediump|highp|precision|[iu]?sampler[123]D|[iu]?samplerCube|sampler[12]DShadow|samplerCubeShadow|[iu]?sampler[12]DArray|sampler[12]DArrayShadow|[iu]?sampler2DRect|sampler2DRectShadow|[iu]?samplerBuffer|[iu]?sampler2DMS(?:Array)?|[iu]?samplerCubeArray|samplerCubeArrayShadow|[iu]?image[123]D|[iu]?image2DRect|[iu]?imageCube|[iu]?imageBuffer|[iu]?image[12]DArray|[iu]?imageCubeArray|[iu]?image2DMS(?:Array)?|struct|common|partition|active|asm|class|union|enum|typedef|template|this|resource|goto|inline|noinline|public|static|extern|external|interface|long|short|half|fixed|unsigned|superp|input|output|hvec[234]|fvec[234]|sampler3DRect|filter|sizeof|cast|namespace|using)\b/
  });
}

/***/ }),

/***/ 8882:
/***/ ((module) => {



module.exports = gml;
gml.displayName = 'gml';
gml.aliases = [];

function gml(Prism) {
  Prism.languages.gamemakerlanguage = Prism.languages.gml = Prism.languages.extend('clike', {
    keyword: /\b(?:if|else|switch|case|default|break|for|repeat|while|do|until|continue|exit|return|globalvar|var|enum)\b/,
    number: /(?:\b0x[\da-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ulf]{0,4}/i,
    operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:or|and|not|with|at|xor)\b/,
    constant: /\b(?:self|other|all|noone|global|local|undefined|pointer_(?:invalid|null)|action_(?:stop|restart|continue|reverse)|pi|GM_build_date|GM_version|timezone_(?:local|utc)|gamespeed_(?:fps|microseconds)|ev_(?:create|destroy|step|alarm|keyboard|mouse|collision|other|draw|draw_(?:begin|end|pre|post)|keypress|keyrelease|trigger|(?:left|right|middle|no)_button|(?:left|right|middle)_press|(?:left|right|middle)_release|mouse_(?:enter|leave|wheel_up|wheel_down)|global_(?:left|right|middle)_button|global_(?:left|right|middle)_press|global_(?:left|right|middle)_release|joystick(?:1|2)_(?:left|right|up|down|button1|button2|button3|button4|button5|button6|button7|button8)|outside|boundary|game_start|game_end|room_start|room_end|no_more_lives|animation_end|end_of_path|no_more_health|user\d|step_(?:normal|begin|end)|gui|gui_begin|gui_end)|vk_(?:nokey|anykey|enter|return|shift|control|alt|escape|space|backspace|tab|pause|printscreen|left|right|up|down|home|end|delete|insert|pageup|pagedown|f\d|numpad\d|divide|multiply|subtract|add|decimal|lshift|lcontrol|lalt|rshift|rcontrol|ralt)|mb_(?:any|none|left|right|middle)|c_(?:aqua|black|blue|dkgray|fuchsia|gray|green|lime|ltgray|maroon|navy|olive|purple|red|silver|teal|white|yellow|orange)|fa_(?:left|center|right|top|middle|bottom|readonly|hidden|sysfile|volumeid|directory|archive)|pr_(?:pointlist|linelist|linestrip|trianglelist|trianglestrip|trianglefan)|bm_(?:complex|normal|add|max|subtract|zero|one|src_colour|inv_src_colour|src_color|inv_src_color|src_alpha|inv_src_alpha|dest_alpha|inv_dest_alpha|dest_colour|inv_dest_colour|dest_color|inv_dest_color|src_alpha_sat)|audio_(?:falloff_(?:none|inverse_distance|inverse_distance_clamped|linear_distance|linear_distance_clamped|exponent_distance|exponent_distance_clamped)|old_system|new_system|mono|stereo|3d)|cr_(?:default|none|arrow|cross|beam|size_nesw|size_ns|size_nwse|size_we|uparrow|hourglass|drag|appstart|handpoint|size_all)|asset_(?:object|unknown|sprite|sound|room|path|script|font|timeline|tiles|shader)|ds_type_(?:map|list|stack|queue|grid|priority)|ef_(?:explosion|ring|ellipse|firework|smoke|smokeup|star|spark|flare|cloud|rain|snow)|pt_shape_(?:pixel|disk|square|line|star|circle|ring|sphere|flare|spark|explosion|cloud|smoke|snow)|ps_(?:distr|shape)_(?:linear|gaussian|invgaussian|rectangle|ellipse|diamond|line)|ty_(?:real|string)|dll_(?:cdel|cdecl|stdcall)|matrix_(?:view|projection|world)|os_(?:win32|windows|macosx|ios|android|linux|unknown|winphone|win8native|psvita|ps4|xboxone|ps3|uwp)|browser_(?:not_a_browser|unknown|ie|firefox|chrome|safari|safari_mobile|opera|tizen|windows_store|ie_mobile)|device_ios_(?:unknown|iphone|iphone_retina|ipad|ipad_retina|iphone5|iphone6|iphone6plus)|device_(?:emulator|tablet)|display_(?:landscape|landscape_flipped|portrait|portrait_flipped)|of_challenge_(?:win|lose|tie)|leaderboard_type_(?:number|time_mins_secs)|cmpfunc_(?:never|less|equal|lessequal|greater|notequal|greaterequal|always)|cull_(?:noculling|clockwise|counterclockwise)|lighttype_(?:dir|point)|iap_(?:ev_storeload|ev_product|ev_purchase|ev_consume|ev_restore|storeload_ok|storeload_failed|status_uninitialised|status_unavailable|status_loading|status_available|status_processing|status_restoring|failed|unavailable|available|purchased|canceled|refunded)|fb_login_(?:default|fallback_to_webview|no_fallback_to_webview|forcing_webview|use_system_account|forcing_safari)|phy_joint_(?:anchor_1_x|anchor_1_y|anchor_2_x|anchor_2_y|reaction_force_x|reaction_force_y|reaction_torque|motor_speed|angle|motor_torque|max_motor_torque|translation|speed|motor_force|max_motor_force|length_1|length_2|damping_ratio|frequency|lower_angle_limit|upper_angle_limit|angle_limits|max_length|max_torque|max_force)|phy_debug_render_(?:aabb|collision_pairs|coms|core_shapes|joints|obb|shapes)|phy_particle_flag_(?:water|zombie|wall|spring|elastic|viscous|powder|tensile|colourmixing|colormixing)|phy_particle_group_flag_(?:solid|rigid)|phy_particle_data_flag_(?:typeflags|position|velocity|colour|color|category)|achievement_(?:our_info|friends_info|leaderboard_info|info|filter_(?:all_players|friends_only|favorites_only)|type_challenge|type_score_challenge|pic_loaded|show_(?:ui|profile|leaderboard|achievement|bank|friend_picker|purchase_prompt))|network_(?:socket_(?:tcp|udp|bluetooth)|type_(?:connect|disconnect|data|non_blocking_connect)|config_(?:connect_timeout|use_non_blocking_socket|enable_reliable_udp|disable_reliable_udp))|buffer_(?:fixed|grow|wrap|fast|vbuffer|network|u8|s8|u16|s16|u32|s32|u64|f16|f32|f64|bool|text|string|seek_start|seek_relative|seek_end|generalerror|outofspace|outofbounds|invalidtype)|gp_(?:face\d|shoulderl|shoulderr|shoulderlb|shoulderrb|select|start|stickl|stickr|padu|padd|padl|padr|axislh|axislv|axisrh|axisrv)|ov_(?:friends|community|players|settings|gamegroup|achievements)|lb_sort_(?:none|ascending|descending)|lb_disp_(?:none|numeric|time_sec|time_ms)|ugc_(?:result_success|filetype_(?:community|microtrans)|visibility_(?:public|friends_only|private)|query_RankedBy(?:Vote|PublicationDate|Trend|NumTimesReported|TotalVotesAsc|VotesUp|TextSearch)|query_(?:AcceptedForGameRankedByAcceptanceDate|FavoritedByFriendsRankedByPublicationDate|CreatedByFriendsRankedByPublicationDate|NotYetRated)|sortorder_CreationOrder(?:Desc|Asc)|sortorder_(?:TitleAsc|LastUpdatedDesc|SubscriptionDateDesc|VoteScoreDesc|ForModeration)|list_(?:Published|VotedOn|VotedUp|VotedDown|WillVoteLater|Favorited|Subscribed|UsedOrPlayed|Followed)|match_(?:Items|Items_Mtx|Items_ReadyToUse|Collections|Artwork|Videos|Screenshots|AllGuides|WebGuides|IntegratedGuides|UsableInGame|ControllerBindings))|vertex_usage_(?:position|colour|color|normal|texcoord|textcoord|blendweight|blendindices|psize|tangent|binormal|fog|depth|sample)|vertex_type_(?:float\d|colour|color|ubyte4)|layerelementtype_(?:undefined|background|instance|oldtilemap|sprite|tilemap|particlesystem|tile)|tile_(?:rotate|flip|mirror|index_mask)|input_type|se_(?:chorus|compressor|echo|equalizer|flanger|gargle|none|reverb)|text_type|(?:obj|scr|spr|rm)\w+)\b/,
    variable: /\b(?:x|y|(?:x|y)(?:previous|start)|(?:h|v)speed|direction|speed|friction|gravity|gravity_direction|path_(?:index|position|positionprevious|speed|scale|orientation|endaction)|object_index|id|solid|persistent|mask_index|instance_(?:count|id)|alarm|timeline_(?:index|position|speed|running|loop)|visible|sprite_(?:index|width|height|xoffset|yoffset)|image_(?:number|index|speed|depth|xscale|yscale|angle|alpha|blend)|bbox_(?:left|right|top|bottom)|layer|phy_(?:rotation|(?:position|linear_velocity|speed|com|collision|col_normal)_(?:x|y)|angular_(?:velocity|damping)|position_(?:x|y)previous|speed|linear_damping|bullet|fixed_rotation|active|mass|inertia|dynamic|kinematic|sleeping|collision_points)|working_directory|webgl_enabled|view_(?:(?:y|x|w|h)view|(?:y|x|w|h)port|(?:v|h)(?:speed|border)|visible|surface_id|object|enabled|current|angle)|undefined|transition_(?:steps|kind|color)|temp_directory|show_(?:score|lives|health)|secure_mode|score|room_(?:width|speed|persistent|last|height|first|caption)|room|pointer_(?:null|invalid)|os_(?:version|type|device|browser)|mouse_(?:y|x|lastbutton|button)|lives|keyboard_(?:string|lastkey|lastchar|key)|iap_data|health|gamemaker_(?:version|registered|pro)|game_(?:save|project|display)_(?:id|name)|fps_real|fps|event_(?:type|object|number|action)|error_(?:occurred|last)|display_aa|delta_time|debug_mode|cursor_sprite|current_(?:year|weekday|time|second|month|minute|hour|day)|caption_(?:score|lives|health)|browser_(?:width|height)|background_(?:yscale|y|xscale|x|width|vtiled|vspeed|visible|showcolour|showcolor|index|htiled|hspeed|height|foreground|colour|color|blend|alpha)|async_load|application_surface|argument(?:_relitive|_count|\d)|argument|global|local|self|other)\b/
  });
}

/***/ }),

/***/ 1730:
/***/ ((module) => {



module.exports = gn;
gn.displayName = 'gn';
gn.aliases = ['gni'];

function gn(Prism) {
  // https://gn.googlesource.com/gn/+/refs/heads/main/docs/reference.md#grammar
  Prism.languages.gn = {
    comment: {
      pattern: /#.*/,
      greedy: true
    },
    'string-literal': {
      pattern: /(^|[^\\"])"(?:[^\r\n"\\]|\\.)*"/,
      lookbehind: true,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /((?:^|[^\\])(?:\\{2})*)\$(?:\{[\s\S]*?\}|[a-zA-Z_]\w*|0x[a-fA-F0-9]{2})/,
          lookbehind: true,
          inside: {
            number: /^\$0x[\s\S]{2}$/,
            variable: /^\$\w+$/,
            'interpolation-punctuation': {
              pattern: /^\$\{|\}$/,
              alias: 'punctuation'
            },
            expression: {
              pattern: /[\s\S]+/,
              inside: null // see below

            }
          }
        },
        string: /[\s\S]+/
      }
    },
    keyword: /\b(?:else|if)\b/,
    "boolean": /\b(?:true|false)\b/,
    'builtin-function': {
      // a few functions get special highlighting to improve readability
      pattern: /\b(?:assert|defined|foreach|import|pool|print|template|tool|toolchain)(?=\s*\()/i,
      alias: 'keyword'
    },
    "function": /\b[a-z_]\w*(?=\s*\()/i,
    constant: /\b(?:current_cpu|current_os|current_toolchain|default_toolchain|host_cpu|host_os|root_build_dir|root_gen_dir|root_out_dir|target_cpu|target_gen_dir|target_out_dir|target_os)\b/,
    number: /-?\b\d+\b/,
    operator: /[-+!=<>]=?|&&|\|\|/,
    punctuation: /[(){}[\],.]/
  };
  Prism.languages.gn['string-literal'].inside['interpolation'].inside['expression'].inside = Prism.languages.gn;
  Prism.languages.gni = Prism.languages.gn;
}

/***/ }),

/***/ 6153:
/***/ ((module) => {



module.exports = go;
go.displayName = 'go';
go.aliases = [];

function go(Prism) {
  Prism.languages.go = Prism.languages.extend('clike', {
    string: {
      pattern: /(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1/,
      greedy: true
    },
    keyword: /\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,
    "boolean": /\b(?:_|iota|nil|true|false)\b/,
    number: /(?:\b0x[a-f\d]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[-+]?\d+)?)i?/i,
    operator: /[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,
    builtin: /\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\b/
  });
  delete Prism.languages.go['class-name'];
}

/***/ }),

/***/ 1615:
/***/ ((module) => {



module.exports = graphql;
graphql.displayName = 'graphql';
graphql.aliases = [];

function graphql(Prism) {
  Prism.languages.graphql = {
    comment: /#.*/,
    description: {
      pattern: /(?:"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*")(?=\s*[a-z_])/i,
      greedy: true,
      alias: 'string',
      inside: {
        'language-markdown': {
          pattern: /(^"(?:"")?)(?!\1)[\s\S]+(?=\1$)/,
          lookbehind: true,
          inside: Prism.languages.markdown
        }
      }
    },
    string: {
      pattern: /"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*"/,
      greedy: true
    },
    number: /(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
    "boolean": /\b(?:true|false)\b/,
    variable: /\$[a-z_]\w*/i,
    directive: {
      pattern: /@[a-z_]\w*/i,
      alias: 'function'
    },
    'attr-name': {
      pattern: /[a-z_]\w*(?=\s*(?:\((?:[^()"]|"(?:\\.|[^\\"\r\n])*")*\))?:)/i,
      greedy: true
    },
    'atom-input': {
      pattern: /[A-Z]\w*Input(?=!?.*$)/m,
      alias: 'class-name'
    },
    scalar: /\b(?:Boolean|Float|ID|Int|String)\b/,
    constant: /\b[A-Z][A-Z_\d]*\b/,
    'class-name': {
      pattern: /(\b(?:enum|implements|interface|on|scalar|type|union)\s+|&\s*|:\s*|\[)[A-Z_]\w*/,
      lookbehind: true
    },
    fragment: {
      pattern: /(\bfragment\s+|\.{3}\s*(?!on\b))[a-zA-Z_]\w*/,
      lookbehind: true,
      alias: 'function'
    },
    'definition-mutation': {
      pattern: /(\bmutation\s+)[a-zA-Z_]\w*/,
      lookbehind: true,
      alias: 'function'
    },
    'definition-query': {
      pattern: /(\bquery\s+)[a-zA-Z_]\w*/,
      lookbehind: true,
      alias: 'function'
    },
    keyword: /\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\b/,
    operator: /[!=|&]|\.{3}/,
    'property-query': /\w+(?=\s*\()/,
    object: /\w+(?=\s*\{)/,
    punctuation: /[!(){}\[\]:=,]/,
    property: /\w+/
  };
  Prism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {
    if (env.language !== 'graphql') {
      return;
    }
    /**
     * get the graphql token stream that we want to customize
     *
     * @typedef {InstanceType<import("./prism-core")["Token"]>} Token
     * @type {Token[]}
     */


    var validTokens = env.tokens.filter(function (token) {
      return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';
    });
    var currentIndex = 0;
    /**
     * Returns whether the token relative to the current index has the given type.
     *
     * @param {number} offset
     * @returns {Token | undefined}
     */

    function getToken(offset) {
      return validTokens[currentIndex + offset];
    }
    /**
     * Returns whether the token relative to the current index has the given type.
     *
     * @param {readonly string[]} types
     * @param {number} [offset=0]
     * @returns {boolean}
     */


    function isTokenType(types, offset) {
      offset = offset || 0;

      for (var i = 0; i < types.length; i++) {
        var token = getToken(i + offset);

        if (!token || token.type !== types[i]) {
          return false;
        }
      }

      return true;
    }
    /**
     * Returns the index of the closing bracket to an opening bracket.
     *
     * It is assumed that `token[currentIndex - 1]` is an opening bracket.
     *
     * If no closing bracket could be found, `-1` will be returned.
     *
     * @param {RegExp} open
     * @param {RegExp} close
     * @returns {number}
     */


    function findClosingBracket(open, close) {
      var stackHeight = 1;

      for (var i = currentIndex; i < validTokens.length; i++) {
        var token = validTokens[i];
        var content = token.content;

        if (token.type === 'punctuation' && typeof content === 'string') {
          if (open.test(content)) {
            stackHeight++;
          } else if (close.test(content)) {
            stackHeight--;

            if (stackHeight === 0) {
              return i;
            }
          }
        }
      }

      return -1;
    }
    /**
     * Adds an alias to the given token.
     *
     * @param {Token} token
     * @param {string} alias
     * @returns {void}
     */


    function addAlias(token, alias) {
      var aliases = token.alias;

      if (!aliases) {
        token.alias = aliases = [];
      } else if (!Array.isArray(aliases)) {
        token.alias = aliases = [aliases];
      }

      aliases.push(alias);
    }

    for (; currentIndex < validTokens.length;) {
      var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens

      if (startToken.type === 'keyword' && startToken.content === 'mutation') {
        // any array of the names of all input variables (if any)
        var inputVariables = [];

        if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {
          // definition
          currentIndex += 2; // skip 'definition-mutation' and 'punctuation'

          var definitionEnd = findClosingBracket(/^\($/, /^\)$/);

          if (definitionEnd === -1) {
            continue;
          } // find all input variables


          for (; currentIndex < definitionEnd; currentIndex++) {
            var t = getToken(0);

            if (t.type === 'variable') {
              addAlias(t, 'variable-input');
              inputVariables.push(t.content);
            }
          }

          currentIndex = definitionEnd + 1;
        }

        if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {
          currentIndex++; // skip opening bracket

          addAlias(getToken(0), 'property-mutation');

          if (inputVariables.length > 0) {
            var mutationEnd = findClosingBracket(/^\{$/, /^\}$/);

            if (mutationEnd === -1) {
              continue;
            } // give references to input variables a special alias


            for (var i = currentIndex; i < mutationEnd; i++) {
              var varToken = validTokens[i];

              if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {
                addAlias(varToken, 'variable-input');
              }
            }
          }
        }
      }
    }
  });
}

/***/ }),

/***/ 5420:
/***/ ((module) => {



module.exports = groovy;
groovy.displayName = 'groovy';
groovy.aliases = [];

function groovy(Prism) {
  Prism.languages.groovy = Prism.languages.extend('clike', {
    string: [{
      // https://groovy-lang.org/syntax.html#_dollar_slashy_string
      pattern: /("""|''')(?:[^\\]|\\[\s\S])*?\1|\$\/(?:[^/$]|\$(?:[/$]|(?![/$]))|\/(?!\$))*\/\$/,
      greedy: true
    }, {
      // TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with
      // simple division (see JS regex), so find a fix maybe?
      pattern: /(["'/])(?:\\.|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    }],
    keyword: /\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\b/,
    number: /\b(?:0b[01_]+|0x[\da-f_]+(?:\.[\da-f_p\-]+)?|[\d_]+(?:\.[\d_]+)?(?:e[+-]?\d+)?)[glidf]?\b/i,
    operator: {
      pattern: /(^|[^.])(?:~|==?~?|\?[.:]?|\*(?:[.=]|\*=?)?|\.[@&]|\.\.<|\.\.(?!\.)|-[-=>]?|\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\|[|=]?|\/=?|\^=?|%=?)/,
      lookbehind: true
    },
    punctuation: /\.+|[{}[\];(),:$]/
  });
  Prism.languages.insertBefore('groovy', 'string', {
    shebang: {
      pattern: /#!.+/,
      alias: 'comment'
    }
  });
  Prism.languages.insertBefore('groovy', 'punctuation', {
    'spock-block': /\b(?:setup|given|when|then|and|cleanup|expect|where):/
  });
  Prism.languages.insertBefore('groovy', 'function', {
    annotation: {
      pattern: /(^|[^.])@\w+/,
      lookbehind: true,
      alias: 'punctuation'
    }
  }); // Handle string interpolation

  Prism.hooks.add('wrap', function (env) {
    if (env.language === 'groovy' && env.type === 'string') {
      var delimiter = env.content.value[0];

      if (delimiter != "'") {
        var pattern = /([^\\])(?:\$(?:\{.*?\}|[\w.]+))/;

        if (delimiter === '$') {
          pattern = /([^\$])(?:\$(?:\{.*?\}|[\w.]+))/;
        } // To prevent double HTML-encoding we have to decode env.content first


        env.content.value = env.content.value.replace(/&lt;/g, '<').replace(/&amp;/g, '&');
        env.content = Prism.highlight(env.content.value, {
          expression: {
            pattern: pattern,
            lookbehind: true,
            inside: Prism.languages.groovy
          }
        });
        env.classes.push(delimiter === '/' ? 'regex' : 'gstring');
      }
    }
  });
}

/***/ }),

/***/ 1758:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorRuby = __webpack_require__(9636);

module.exports = haml;
haml.displayName = 'haml';
haml.aliases = [];

function haml(Prism) {
  Prism.register(refractorRuby)
  /* TODO
  Handle multiline code after tag
  %foo= some |
  multiline |
  code |
  */
  ;

  (function (Prism) {
    Prism.languages.haml = {
      // Multiline stuff should appear before the rest
      'multiline-comment': {
        pattern: /((?:^|\r?\n|\r)([\t ]*))(?:\/|-#).*(?:(?:\r?\n|\r)\2[\t ].+)*/,
        lookbehind: true,
        alias: 'comment'
      },
      'multiline-code': [{
        pattern: /((?:^|\r?\n|\r)([\t ]*)(?:[~-]|[&!]?=)).*,[\t ]*(?:(?:\r?\n|\r)\2[\t ].*,[\t ]*)*(?:(?:\r?\n|\r)\2[\t ].+)/,
        lookbehind: true,
        inside: Prism.languages.ruby
      }, {
        pattern: /((?:^|\r?\n|\r)([\t ]*)(?:[~-]|[&!]?=)).*\|[\t ]*(?:(?:\r?\n|\r)\2[\t ].*\|[\t ]*)*/,
        lookbehind: true,
        inside: Prism.languages.ruby
      }],
      // See at the end of the file for known filters
      filter: {
        pattern: /((?:^|\r?\n|\r)([\t ]*)):[\w-]+(?:(?:\r?\n|\r)(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/,
        lookbehind: true,
        inside: {
          'filter-name': {
            pattern: /^:[\w-]+/,
            alias: 'variable'
          }
        }
      },
      markup: {
        pattern: /((?:^|\r?\n|\r)[\t ]*)<.+/,
        lookbehind: true,
        inside: Prism.languages.markup
      },
      doctype: {
        pattern: /((?:^|\r?\n|\r)[\t ]*)!!!(?: .+)?/,
        lookbehind: true
      },
      tag: {
        // Allows for one nested group of braces
        pattern: /((?:^|\r?\n|\r)[\t ]*)[%.#][\w\-#.]*[\w\-](?:\([^)]+\)|\{(?:\{[^}]+\}|[^{}])+\}|\[[^\]]+\])*[\/<>]*/,
        lookbehind: true,
        inside: {
          attributes: [{
            // Lookbehind tries to prevent interpolations from breaking it all
            // Allows for one nested group of braces
            pattern: /(^|[^#])\{(?:\{[^}]+\}|[^{}])+\}/,
            lookbehind: true,
            inside: Prism.languages.ruby
          }, {
            pattern: /\([^)]+\)/,
            inside: {
              'attr-value': {
                pattern: /(=\s*)(?:"(?:\\.|[^\\"\r\n])*"|[^)\s]+)/,
                lookbehind: true
              },
              'attr-name': /[\w:-]+(?=\s*!?=|\s*[,)])/,
              punctuation: /[=(),]/
            }
          }, {
            pattern: /\[[^\]]+\]/,
            inside: Prism.languages.ruby
          }],
          punctuation: /[<>]/
        }
      },
      code: {
        pattern: /((?:^|\r?\n|\r)[\t ]*(?:[~-]|[&!]?=)).+/,
        lookbehind: true,
        inside: Prism.languages.ruby
      },
      // Interpolations in plain text
      interpolation: {
        pattern: /#\{[^}]+\}/,
        inside: {
          delimiter: {
            pattern: /^#\{|\}$/,
            alias: 'punctuation'
          },
          rest: Prism.languages.ruby
        }
      },
      punctuation: {
        pattern: /((?:^|\r?\n|\r)[\t ]*)[~=\-&!]+/,
        lookbehind: true
      }
    };
    var filter_pattern = '((?:^|\\r?\\n|\\r)([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+'; // Non exhaustive list of available filters and associated languages

    var filters = ['css', {
      filter: 'coffee',
      language: 'coffeescript'
    }, 'erb', 'javascript', 'less', 'markdown', 'ruby', 'scss', 'textile'];
    var all_filters = {};

    for (var i = 0, l = filters.length; i < l; i++) {
      var filter = filters[i];
      filter = typeof filter === 'string' ? {
        filter: filter,
        language: filter
      } : filter;

      if (Prism.languages[filter.language]) {
        all_filters['filter-' + filter.filter] = {
          pattern: RegExp(filter_pattern.replace('{{filter_name}}', function () {
            return filter.filter;
          })),
          lookbehind: true,
          inside: {
            'filter-name': {
              pattern: /^:[\w-]+/,
              alias: 'variable'
            },
            rest: Prism.languages[filter.language]
          }
        };
      }
    }

    Prism.languages.insertBefore('haml', 'filter', all_filters);
  })(Prism);
}

/***/ }),

/***/ 7561:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorMarkupTemplating = __webpack_require__(8083);

module.exports = handlebars;
handlebars.displayName = 'handlebars';
handlebars.aliases = ['hbs'];

function handlebars(Prism) {
  Prism.register(refractorMarkupTemplating);

  (function (Prism) {
    Prism.languages.handlebars = {
      comment: /\{\{![\s\S]*?\}\}/,
      delimiter: {
        pattern: /^\{\{\{?|\}\}\}?$/i,
        alias: 'punctuation'
      },
      string: /(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,
      number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][+-]?\d+)?/,
      "boolean": /\b(?:true|false)\b/,
      block: {
        pattern: /^(\s*(?:~\s*)?)[#\/]\S+?(?=\s*(?:~\s*)?$|\s)/i,
        lookbehind: true,
        alias: 'keyword'
      },
      brackets: {
        pattern: /\[[^\]]+\]/,
        inside: {
          punctuation: /\[|\]/,
          variable: /[\s\S]+/
        }
      },
      punctuation: /[!"#%&':()*+,.\/;<=>@\[\\\]^`{|}~]/,
      variable: /[^!"#%&'()*+,\/;<=>@\[\\\]^`{|}~\s]+/
    };
    Prism.hooks.add('before-tokenize', function (env) {
      var handlebarsPattern = /\{\{\{[\s\S]+?\}\}\}|\{\{[\s\S]+?\}\}/g;
      Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);
    });
    Prism.hooks.add('after-tokenize', function (env) {
      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');
    });
    Prism.languages.hbs = Prism.languages.handlebars;
  })(Prism);
}

/***/ }),

/***/ 3830:
/***/ ((module) => {



module.exports = haskell;
haskell.displayName = 'haskell';
haskell.aliases = ['hs'];

function haskell(Prism) {
  Prism.languages.haskell = {
    comment: {
      pattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\/].*|$)|\{-[\s\S]*?-\})/m,
      lookbehind: true
    },
    "char": {
      pattern: /'(?:[^\\']|\\(?:[abfnrtv\\"'&]|\^[A-Z@[\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\d+|o[0-7]+|x[0-9a-fA-F]+))'/,
      alias: 'string'
    },
    string: {
      pattern: /"(?:[^\\"]|\\(?:\S|\s+\\))*"/,
      greedy: true
    },
    keyword: /\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\b/,
    'import-statement': {
      // The imported or hidden names are not included in this import
      // statement. This is because we want to highlight those exactly like
      // we do for the names in the program.
      pattern: /(^[\t ]*)import\s+(?:qualified\s+)?(?:[A-Z][\w']*)(?:\.[A-Z][\w']*)*(?:\s+as\s+(?:[A-Z][\w']*)(?:\.[A-Z][\w']*)*)?(?:\s+hiding\b)?/m,
      lookbehind: true,
      inside: {
        keyword: /\b(?:import|qualified|as|hiding)\b/,
        punctuation: /\./
      }
    },
    // These are builtin variables only. Constructors are highlighted later as a constant.
    builtin: /\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b/,
    // decimal integers and floating point numbers | octal integers | hexadecimal integers
    number: /\b(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?|0o[0-7]+|0x[0-9a-f]+)\b/i,
    operator: [{
      // infix operator
      pattern: /`(?:[A-Z][\w']*\.)*[_a-z][\w']*`/,
      greedy: true
    }, {
      // function composition
      pattern: /(\s)\.(?=\s)/,
      lookbehind: true
    }, // Most of this is needed because of the meaning of a single '.'.
    // If it stands alone freely, it is the function composition.
    // It may also be a separator between a module name and an identifier => no
    // operator. If it comes together with other special characters it is an
    // operator too.
    //
    // This regex means: /[-!#$%*+=?&@|~.:<>^\\\/]+/ without /\./.
    /[-!#$%*+=?&@|~:<>^\\\/][-!#$%*+=?&@|~.:<>^\\\/]*|\.[-!#$%*+=?&@|~.:<>^\\\/]+/],
    // In Haskell, nearly everything is a variable, do not highlight these.
    hvariable: {
      pattern: /\b(?:[A-Z][\w']*\.)*[_a-z][\w']*/,
      inside: {
        punctuation: /\./
      }
    },
    constant: {
      pattern: /\b(?:[A-Z][\w']*\.)*[A-Z][\w']*/,
      inside: {
        punctuation: /\./
      }
    },
    punctuation: /[{}[\];(),.:]/
  };
  Prism.languages.hs = Prism.languages.haskell;
}

/***/ }),

/***/ 1458:
/***/ ((module) => {



module.exports = haxe;
haxe.displayName = 'haxe';
haxe.aliases = [];

function haxe(Prism) {
  Prism.languages.haxe = Prism.languages.extend('clike', {
    // Strings can be multi-line
    string: {
      pattern: /(["'])(?:(?!\1)[^\\]|\\[\s\S])*\1/,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /(^|[^\\])\$(?:\w+|\{[^}]+\})/,
          lookbehind: true,
          inside: {
            interpolation: {
              pattern: /^\$\w*/,
              alias: 'variable'
            } // See rest below

          }
        }
      }
    },
    // The final look-ahead prevents highlighting of keywords if expressions such as "haxe.macro.Expr"
    keyword: /\bthis\b|\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\.)\b/,
    operator: /\.{3}|\+\+?|-[->]?|[=!]=?|&&?|\|\|?|<[<=]?|>[>=]?|[*\/%~^]/
  });
  Prism.languages.insertBefore('haxe', 'class-name', {
    regex: {
      pattern: /~\/(?:[^\/\\\r\n]|\\.)+\/[igmsu]*/,
      greedy: true
    }
  });
  Prism.languages.insertBefore('haxe', 'keyword', {
    preprocessor: {
      pattern: /#\w+/,
      alias: 'builtin'
    },
    metadata: {
      pattern: /@:?\w+/,
      alias: 'symbol'
    },
    reification: {
      pattern: /\$(?:\w+|(?=\{))/,
      alias: 'variable'
    }
  });
  Prism.languages.haxe['string'].inside['interpolation'].inside.rest = Prism.languages.haxe;
  delete Prism.languages.haxe['class-name'];
}

/***/ }),

/***/ 4642:
/***/ ((module) => {



module.exports = hcl;
hcl.displayName = 'hcl';
hcl.aliases = [];

function hcl(Prism) {
  Prism.languages.hcl = {
    comment: /(?:\/\/|#).*|\/\*[\s\S]*?(?:\*\/|$)/,
    heredoc: {
      pattern: /<<-?(\w+\b)[\s\S]*?^[ \t]*\1/m,
      greedy: true,
      alias: 'string'
    },
    keyword: [{
      pattern: /(?:resource|data)\s+(?:"(?:\\[\s\S]|[^\\"])*")(?=\s+"[\w-]+"\s+\{)/i,
      inside: {
        type: {
          pattern: /(resource|data|\s+)(?:"(?:\\[\s\S]|[^\\"])*")/i,
          lookbehind: true,
          alias: 'variable'
        }
      }
    }, {
      pattern: /(?:provider|provisioner|variable|output|module|backend)\s+(?:[\w-]+|"(?:\\[\s\S]|[^\\"])*")\s+(?=\{)/i,
      inside: {
        type: {
          pattern: /(provider|provisioner|variable|output|module|backend)\s+(?:[\w-]+|"(?:\\[\s\S]|[^\\"])*")\s+/i,
          lookbehind: true,
          alias: 'variable'
        }
      }
    }, /[\w-]+(?=\s+\{)/],
    property: [/[-\w\.]+(?=\s*=(?!=))/, /"(?:\\[\s\S]|[^\\"])+"(?=\s*[:=])/],
    string: {
      pattern: /"(?:[^\\$"]|\\[\s\S]|\$(?:(?=")|\$+(?!\$)|[^"${])|\$\{(?:[^{}"]|"(?:[^\\"]|\\[\s\S])*")*\})*"/,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /(^|[^$])\$\{(?:[^{}"]|"(?:[^\\"]|\\[\s\S])*")*\}/,
          lookbehind: true,
          inside: {
            type: {
              pattern: /(\b(?:terraform|var|self|count|module|path|data|local)\b\.)[\w\*]+/i,
              lookbehind: true,
              alias: 'variable'
            },
            keyword: /\b(?:terraform|var|self|count|module|path|data|local)\b/i,
            "function": /\w+(?=\()/,
            string: {
              pattern: /"(?:\\[\s\S]|[^\\"])*"/,
              greedy: true
            },
            number: /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?(?:e[+-]?\d+)?/i,
            punctuation: /[!\$#%&'()*+,.\/;<=>@\[\\\]^`{|}~?:]/
          }
        }
      }
    },
    number: /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?(?:e[+-]?\d+)?/i,
    "boolean": /\b(?:true|false)\b/i,
    punctuation: /[=\[\]{}]/
  };
}

/***/ }),

/***/ 3621:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorC = __webpack_require__(3530);

module.exports = hlsl;
hlsl.displayName = 'hlsl';
hlsl.aliases = [];

function hlsl(Prism) {
  Prism.register(refractorC);
  Prism.languages.hlsl = Prism.languages.extend('c', {
    // Regarding keywords and class names:
    // The list of all keywords was split into 'keyword' and 'class-name' tokens based on whether they are capitalized.
    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-keywords
    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-reserved-words
    'class-name': [Prism.languages.c['class-name'], /\b(?:AppendStructuredBuffer|BlendState|Buffer|ByteAddressBuffer|CompileShader|ComputeShader|ConsumeStructuredBuffer|DepthStencilState|DepthStencilView|DomainShader|GeometryShader|Hullshader|InputPatch|LineStream|OutputPatch|PixelShader|PointStream|RasterizerState|RenderTargetView|RWBuffer|RWByteAddressBuffer|RWStructuredBuffer|RWTexture(?:1D|1DArray|2D|2DArray|3D)|SamplerComparisonState|SamplerState|StructuredBuffer|Texture(?:1D|1DArray|2D|2DArray|2DMS|2DMSArray|3D|Cube|CubeArray)|TriangleStream|VertexShader)\b/],
    keyword: [// HLSL keyword
    /\b(?:asm|asm_fragment|auto|break|case|catch|cbuffer|centroid|char|class|column_major|compile|compile_fragment|const|const_cast|continue|default|delete|discard|do|dynamic_cast|else|enum|explicit|export|extern|for|friend|fxgroup|goto|groupshared|if|in|inline|inout|interface|line|lineadj|linear|long|matrix|mutable|namespace|new|nointerpolation|noperspective|operator|out|packoffset|pass|pixelfragment|point|precise|private|protected|public|register|reinterpret_cast|return|row_major|sample|sampler|shared|short|signed|sizeof|snorm|stateblock|stateblock_state|static|static_cast|string|struct|switch|tbuffer|technique|technique10|technique11|template|texture|this|throw|triangle|triangleadj|try|typedef|typename|uniform|union|unorm|unsigned|using|vector|vertexfragment|virtual|void|volatile|while)\b/, // scalar, vector, and matrix types
    /\b(?:bool|double|dword|float|half|int|min(?:10float|12int|16(?:float|int|uint))|uint)(?:[1-4](?:x[1-4])?)?\b/],
    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-grammar#floating-point-numbers
    number: /(?:(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[eE][+-]?\d+)?|\b0x[\da-fA-F]+)[fFhHlLuU]?\b/,
    "boolean": /\b(?:false|true)\b/
  });
}

/***/ }),

/***/ 5760:
/***/ ((module) => {



module.exports = hoon;
hoon.displayName = 'hoon';
hoon.aliases = [];

function hoon(Prism) {
  Prism.languages.hoon = {
    constant: /%(?:\.[ny]|[\w-]+)/,
    comment: {
      pattern: /::.*/,
      greedy: true
    },
    'class-name': [{
      pattern: /@(?:[A-Za-z0-9-]*[A-Za-z0-9])?/
    }, /\*/],
    "function": /(?:\+[-+] {2})?(?:[a-z](?:[a-z0-9-]*[a-z0-9])?)/,
    string: {
      pattern: /"[^"]*"|'[^']*'/,
      greedy: true
    },
    keyword: /\.[\^\+\*=\?]|![><:\.=\?!]|=[>|:,\.\-\^<+;/~\*\?]|\?[>|:\.\-\^<\+&~=@!]|\|[\$_%:\.\-\^~\*=@\?]|\+[|\$\+\*]|:[_\-\^\+~\*]|%[_:\.\-\^\+~\*=]|\^[|:\.\-\+&~\*=\?]|\$[|_%:<>\-\^&~@=\?]|;[:<\+;\/~\*=]|~[>|\$_%<\+\/&=\?!]|--|==/
  };
}

/***/ }),

/***/ 1386:
/***/ ((module) => {



module.exports = hpkp;
hpkp.displayName = 'hpkp';
hpkp.aliases = [];

function hpkp(Prism) {
  /**
   * Original by Scott Helme.
   *
   * Reference: https://scotthelme.co.uk/hpkp-cheat-sheet/
   */
  Prism.languages.hpkp = {
    directive: {
      pattern: /\b(?:(?:includeSubDomains|preload|strict)(?: |;)|pin-sha256="[a-zA-Z\d+=/]+"|(?:max-age|report-uri)=|report-to )/,
      alias: 'keyword'
    },
    safe: {
      pattern: /\b\d{7,}\b/,
      alias: 'selector'
    },
    unsafe: {
      pattern: /\b\d{1,6}\b/,
      alias: 'function'
    }
  };
}

/***/ }),

/***/ 9904:
/***/ ((module) => {



module.exports = hsts;
hsts.displayName = 'hsts';
hsts.aliases = [];

function hsts(Prism) {
  /**
   * Original by Scott Helme.
   *
   * Reference: https://scotthelme.co.uk/hsts-cheat-sheet/
   */
  Prism.languages.hsts = {
    directive: {
      pattern: /\b(?:max-age=|includeSubDomains|preload)/,
      alias: 'keyword'
    },
    safe: {
      pattern: /\b\d{8,}\b/,
      alias: 'selector'
    },
    unsafe: {
      pattern: /\b\d{1,7}\b/,
      alias: 'function'
    }
  };
}

/***/ }),

/***/ 4026:
/***/ ((module) => {



module.exports = http;
http.displayName = 'http';
http.aliases = [];

function http(Prism) {
  ;

  (function (Prism) {
    Prism.languages.http = {
      'request-line': {
        pattern: /^(?:GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH|PRI|SEARCH)\s(?:https?:\/\/|\/)\S*\sHTTP\/[0-9.]+/m,
        inside: {
          // HTTP Method
          method: {
            pattern: /^[A-Z]+\b/,
            alias: 'property'
          },
          // Request Target e.g. http://example.com, /path/to/file
          'request-target': {
            pattern: /^(\s)(?:https?:\/\/|\/)\S*(?=\s)/,
            lookbehind: true,
            alias: 'url',
            inside: Prism.languages.uri
          },
          // HTTP Version
          'http-version': {
            pattern: /^(\s)HTTP\/[0-9.]+/,
            lookbehind: true,
            alias: 'property'
          }
        }
      },
      'response-status': {
        pattern: /^HTTP\/[0-9.]+ \d+ .+/m,
        inside: {
          // HTTP Version
          'http-version': {
            pattern: /^HTTP\/[0-9.]+/,
            alias: 'property'
          },
          // Status Code
          'status-code': {
            pattern: /^(\s)\d+(?=\s)/,
            lookbehind: true,
            alias: 'number'
          },
          // Reason Phrase
          'reason-phrase': {
            pattern: /^(\s).+/,
            lookbehind: true,
            alias: 'string'
          }
        }
      },
      // HTTP header name
      'header-name': {
        pattern: /^[\w-]+:(?=.)/m,
        alias: 'keyword'
      }
    }; // Create a mapping of Content-Type headers to language definitions

    var langs = Prism.languages;
    var httpLanguages = {
      'application/javascript': langs.javascript,
      'application/json': langs.json || langs.javascript,
      'application/xml': langs.xml,
      'text/xml': langs.xml,
      'text/html': langs.html,
      'text/css': langs.css
    }; // Declare which types can also be suffixes

    var suffixTypes = {
      'application/json': true,
      'application/xml': true
    };
    /**
     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.
     *
     * @param {string} contentType
     * @returns {string}
     */

    function getSuffixPattern(contentType) {
      var suffix = contentType.replace(/^[a-z]+\//, '');
      var suffixPattern = '\\w+/(?:[\\w.-]+\\+)+' + suffix + '(?![+\\w.-])';
      return '(?:' + contentType + '|' + suffixPattern + ')';
    } // Insert each content type parser that has its associated language
    // currently loaded.


    var options;

    for (var contentType in httpLanguages) {
      if (httpLanguages[contentType]) {
        options = options || {};
        var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;
        options[contentType.replace(/\//g, '-')] = {
          pattern: RegExp('(content-type:\\s*' + pattern + '(?:(?:\\r\\n?|\\n).+)*)(?:\\r?\\n|\\r){2}[\\s\\S]*', 'i'),
          lookbehind: true,
          inside: httpLanguages[contentType]
        };
      }
    }

    if (options) {
      Prism.languages.insertBefore('http', 'header-name', options);
    }
  })(Prism);
}

/***/ }),

/***/ 3879:
/***/ ((module) => {



module.exports = ichigojam;
ichigojam.displayName = 'ichigojam';
ichigojam.aliases = [];

function ichigojam(Prism) {
  // according to the offical reference (EN)
  // https://ichigojam.net/IchigoJam-en.html
  Prism.languages.ichigojam = {
    comment: /(?:\B'|REM)(?:[^\n\r]*)/i,
    string: {
      pattern: /"(?:""|[!#$%&'()*,\/:;<=>?^\w +\-.])*"/i,
      greedy: true
    },
    number: /\B#[0-9A-F]+|\B`[01]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i,
    keyword: /\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GSB|GOTO|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|RIGHT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\$|\b)/i,
    "function": /\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\$|\b)/i,
    label: /(?:\B@\S+)/i,
    operator: /<[=>]?|>=?|\|\||&&|[+\-*\/=|&^~!]|\b(?:AND|NOT|OR)\b/i,
    punctuation: /[\[,;:()\]]/
  };
}

/***/ }),

/***/ 533:
/***/ ((module) => {



module.exports = icon;
icon.displayName = 'icon';
icon.aliases = [];

function icon(Prism) {
  Prism.languages.icon = {
    comment: /#.*/,
    string: {
      pattern: /(["'])(?:(?!\1)[^\\\r\n_]|\\.|_(?!\1)(?:\r\n|[\s\S]))*\1/,
      greedy: true
    },
    number: /\b(?:\d+r[a-z\d]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b|\.\d+\b/i,
    'builtin-keyword': {
      pattern: /&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\b/,
      alias: 'variable'
    },
    directive: {
      pattern: /\$\w+/,
      alias: 'builtin'
    },
    keyword: /\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\b/,
    "function": /\b(?!\d)\w+(?=\s*[({]|\s*!\s*\[)/,
    operator: /[+-]:(?!=)|(?:[\/?@^%&]|\+\+?|--?|==?=?|~==?=?|\*\*?|\|\|\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\|~]/,
    punctuation: /[\[\](){},;]/
  };
}

/***/ }),

/***/ 3689:
/***/ ((module) => {



module.exports = icuMessageFormat;
icuMessageFormat.displayName = 'icuMessageFormat';
icuMessageFormat.aliases = [];

function icuMessageFormat(Prism) {
  // https://unicode-org.github.io/icu/userguide/format_parse/messages/
  // https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/text/MessageFormat.html
  ;

  (function (Prism) {
    /**
     * @param {string} source
     * @param {number} level
     * @returns {string}
     */
    function nested(source, level) {
      if (level <= 0) {
        return /[]/.source;
      } else {
        return source.replace(/<SELF>/g, function () {
          return nested(source, level - 1);
        });
      }
    }

    var stringPattern = /'[{}:=,](?:[^']|'')*'(?!')/;
    var escape = {
      pattern: /''/,
      greedy: true,
      alias: 'operator'
    };
    var string = {
      pattern: stringPattern,
      greedy: true,
      inside: {
        escape: escape
      }
    };
    var argumentSource = nested(/\{(?:[^{}']|'(?![{},'])|''|<STR>|<SELF>)*\}/.source.replace(/<STR>/g, function () {
      return stringPattern.source;
    }), 8);
    var nestedMessage = {
      pattern: RegExp(argumentSource),
      inside: {
        message: {
          pattern: /^(\{)[\s\S]+(?=\}$)/,
          lookbehind: true,
          inside: null // see below

        },
        'message-delimiter': {
          pattern: /./,
          alias: 'punctuation'
        }
      }
    };
    Prism.languages['icu-message-format'] = {
      argument: {
        pattern: RegExp(argumentSource),
        greedy: true,
        inside: {
          content: {
            pattern: /^(\{)[\s\S]+(?=\}$)/,
            lookbehind: true,
            inside: {
              'argument-name': {
                pattern: /^(\s*)[^{}:=,\s]+/,
                lookbehind: true
              },
              'choice-style': {
                // https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classicu_1_1ChoiceFormat.html#details
                pattern: /^(\s*,\s*choice\s*,\s*)\S(?:[\s\S]*\S)?/,
                lookbehind: true,
                inside: {
                  punctuation: /\|/,
                  range: {
                    pattern: /^(\s*)[+-]?(?:\d+(?:\.\d*)?|\u221e)\s*[<#\u2264]/,
                    lookbehind: true,
                    inside: {
                      operator: /[<#\u2264]/,
                      number: /\S+/
                    }
                  },
                  rest: null // see below

                }
              },
              'plural-style': {
                // https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/text/PluralFormat.html#:~:text=Patterns%20and%20Their%20Interpretation
                pattern: /^(\s*,\s*(?:plural|selectordinal)\s*,\s*)\S(?:[\s\S]*\S)?/,
                lookbehind: true,
                inside: {
                  offset: /^offset:\s*\d+/,
                  'nested-message': nestedMessage,
                  selector: {
                    pattern: /=\d+|[^{}:=,\s]+/,
                    inside: {
                      keyword: /^(?:zero|one|two|few|many|other)$/
                    }
                  }
                }
              },
              'select-style': {
                // https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/text/SelectFormat.html#:~:text=Patterns%20and%20Their%20Interpretation
                pattern: /^(\s*,\s*select\s*,\s*)\S(?:[\s\S]*\S)?/,
                lookbehind: true,
                inside: {
                  'nested-message': nestedMessage,
                  selector: {
                    pattern: /[^{}:=,\s]+/,
                    inside: {
                      keyword: /^other$/
                    }
                  }
                }
              },
              keyword: /\b(?:choice|plural|select|selectordinal)\b/,
              'arg-type': {
                pattern: /\b(?:number|date|time|spellout|ordinal|duration)\b/,
                alias: 'keyword'
              },
              'arg-skeleton': {
                pattern: /(,\s*)::[^{}:=,\s]+/,
                lookbehind: true
              },
              'arg-style': {
                pattern: /(,\s*)(?:short|medium|long|full|integer|currency|percent)(?=\s*$)/,
                lookbehind: true
              },
              'arg-style-text': {
                pattern: RegExp(/(^\s*,\s*(?=\S))/.source + nested(/(?:[^{}']|'[^']*'|\{(?:<SELF>)?\})+/.source, 8) + '$'),
                lookbehind: true,
                alias: 'string'
              },
              punctuation: /,/
            }
          },
          'argument-delimiter': {
            pattern: /./,
            alias: 'operator'
          }
        }
      },
      escape: escape,
      string: string
    };
    nestedMessage.inside.message.inside = Prism.languages['icu-message-format'];
    Prism.languages['icu-message-format'].argument.inside.content.inside['choice-style'].inside.rest = Prism.languages['icu-message-format'];
  })(Prism);
}

/***/ }),

/***/ 5317:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorHaskell = __webpack_require__(3830);

module.exports = idris;
idris.displayName = 'idris';
idris.aliases = ['idr'];

function idris(Prism) {
  Prism.register(refractorHaskell);
  Prism.languages.idris = Prism.languages.extend('haskell', {
    comment: {
      pattern: /(?:(?:--|\|\|\|).*$|\{-[\s\S]*?-\})/m
    },
    keyword: /\b(?:Type|case|class|codata|constructor|corecord|data|do|dsl|else|export|if|implementation|implicit|import|impossible|in|infix|infixl|infixr|instance|interface|let|module|mutual|namespace|of|parameters|partial|postulate|private|proof|public|quoteGoal|record|rewrite|syntax|then|total|using|where|with)\b/,
    'import-statement': {
      pattern: /(^\s*)import\s+(?:[A-Z][\w']*)(?:\.[A-Z][\w']*)*/m,
      lookbehind: true
    },
    builtin: undefined
  });
  Prism.languages.idr = Prism.languages.idris;
}

/***/ }),

/***/ 2549:
/***/ ((module) => {



module.exports = iecst;
iecst.displayName = 'iecst';
iecst.aliases = [];

function iecst(Prism) {
  Prism.languages.iecst = {
    comment: [{
      pattern: /(^|[^\\])(?:\/\*[\s\S]*?(?:\*\/|$)|\(\*[\s\S]*?(?:\*\)|$)|\{[\s\S]*?(?:\}|$))/,
      lookbehind: true
    }, {
      pattern: /(^|[^\\:])\/\/.*/,
      lookbehind: true,
      greedy: true
    }],
    string: {
      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    'class-name': /\b(?:END_)?(?:PROGRAM|CONFIGURATION|INTERFACE|FUNCTION_BLOCK|FUNCTION|ACTION|TRANSITION|TYPE|STRUCT|(?:INITIAL_)?STEP|NAMESPACE|LIBRARY|CHANNEL|FOLDER|RESOURCE|VAR_(?:GLOBAL|INPUT|PUTPUT|IN_OUT|ACCESS|TEMP|EXTERNAL|CONFIG)|VAR|METHOD|PROPERTY)\b/i,
    keyword: /\b(?:(?:END_)?(?:IF|WHILE|REPEAT|CASE|FOR)|ELSE|FROM|THEN|ELSIF|DO|TO|BY|PRIVATE|PUBLIC|PROTECTED|CONSTANT|RETURN|EXIT|CONTINUE|GOTO|JMP|AT|RETAIN|NON_RETAIN|TASK|WITH|UNTIL|USING|EXTENDS|IMPLEMENTS|GET|SET|__TRY|__CATCH|__FINALLY|__ENDTRY)\b/,
    variable: /\b(?:AT|BOOL|BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT|L?REAL|TIME(?:_OF_DAY)?|TOD|DT|DATE(?:_AND_TIME)?|STRING|ARRAY|ANY|POINTER)\b/,
    symbol: /%[IQM][XBWDL][\d.]*|%[IQ][\d.]*/,
    number: /\b(?:16#[\da-f]+|2#[01_]+|0x[\da-f]+)\b|\b(?:T|D|DT|TOD)#[\d_shmd:]*|\b[A-Z]*#[\d.,_]*|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
    "boolean": /\b(?:TRUE|FALSE|NULL)\b/,
    "function": /\w+(?=\()/,
    operator: /(?:S?R?:?=>?|&&?|\*\*?|<=?|>=?|[-:^/+])|\b(?:OR|AND|MOD|NOT|XOR|LE|GE|EQ|NE|GT|LT)\b/,
    punctuation: /[();]/,
    type: {
      pattern: /#/,
      alias: 'selector'
    }
  };
}

/***/ }),

/***/ 6410:
/***/ ((module) => {



module.exports = ignore;
ignore.displayName = 'ignore';
ignore.aliases = ['gitignore', 'hgignore', 'npmignore'];

function ignore(Prism) {
  ;

  (function (Prism) {
    Prism.languages.ignore = {
      // https://git-scm.com/docs/gitignore
      comment: /^#.*/m,
      entry: {
        pattern: /\S(?:.*(?:(?:\\ )|\S))?/,
        alias: 'string',
        inside: {
          operator: /^!|\*\*?|\?/,
          regex: {
            pattern: /(^|[^\\])\[[^\[\]]*\]/,
            lookbehind: true
          },
          punctuation: /\//
        }
      }
    };
    Prism.languages.gitignore = Prism.languages.ignore;
    Prism.languages.hgignore = Prism.languages.ignore;
    Prism.languages.npmignore = Prism.languages.ignore;
  })(Prism);
}

/***/ }),

/***/ 1088:
/***/ ((module) => {



module.exports = inform7;
inform7.displayName = 'inform7';
inform7.aliases = [];

function inform7(Prism) {
  Prism.languages.inform7 = {
    string: {
      pattern: /"[^"]*"/,
      inside: {
        substitution: {
          pattern: /\[[^\[\]]+\]/,
          inside: {
            delimiter: {
              pattern: /\[|\]/,
              alias: 'punctuation'
            } // See rest below

          }
        }
      }
    },
    comment: {
      pattern: /\[[^\[\]]+\]/,
      greedy: true
    },
    title: {
      pattern: /^[ \t]*(?:volume|book|part(?! of)|chapter|section|table)\b.+/im,
      alias: 'important'
    },
    number: {
      pattern: /(^|[^-])(?:\b\d+(?:\.\d+)?(?:\^\d+)?(?:(?!\d)\w+)?|\b(?:one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve))\b(?!-)/i,
      lookbehind: true
    },
    verb: {
      pattern: /(^|[^-])\b(?:applying to|are|attacking|answering|asking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:s|ing)?|consulting|contain(?:s|ing)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:ve|s|ving)|hold(?:s|ing)?|impl(?:y|ies)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:s|ing)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:s|ing)?|setting|showing|singing|sleeping|smelling|squeezing|switching|support(?:s|ing)?|swearing|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:s|ing)?|var(?:y|ies|ying)|waiting|waking|waving|wear(?:s|ing)?)\b(?!-)/i,
      lookbehind: true,
      alias: 'operator'
    },
    keyword: {
      pattern: /(^|[^-])\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|unless|the story)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\b(?!-)/i,
      lookbehind: true
    },
    property: {
      pattern: /(^|[^-])\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: on| off)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\b(?!-)/i,
      lookbehind: true,
      alias: 'symbol'
    },
    position: {
      pattern: /(^|[^-])\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\b(?!-)/i,
      lookbehind: true,
      alias: 'keyword'
    },
    type: {
      pattern: /(^|[^-])\b(?:actions?|activit(?:y|ies)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\b(?!-)/i,
      lookbehind: true,
      alias: 'variable'
    },
    punctuation: /[.,:;(){}]/
  };
  Prism.languages.inform7['string'].inside['substitution'].inside.rest = Prism.languages.inform7; // We don't want the remaining text in the substitution to be highlighted as the string.

  Prism.languages.inform7['string'].inside['substitution'].inside.rest.text = {
    pattern: /\S(?:\s*\S)*/,
    alias: 'comment'
  };
}

/***/ }),

/***/ 4674:
/***/ ((module) => {



module.exports = ini;
ini.displayName = 'ini';
ini.aliases = [];

function ini(Prism) {
  Prism.languages.ini = {
    /**
     * The component mimics the behavior of the Win32 API parser.
     *
     * @see {@link https://github.com/PrismJS/prism/issues/2775#issuecomment-787477723}
     */
    comment: {
      pattern: /(^[ \f\t\v]*)[#;][^\n\r]*/m,
      lookbehind: true
    },
    header: {
      pattern: /(^[ \f\t\v]*)\[[^\n\r\]]*\]?/m,
      lookbehind: true,
      inside: {
        'section-name': {
          pattern: /(^\[[ \f\t\v]*)[^ \f\t\v\]]+(?:[ \f\t\v]+[^ \f\t\v\]]+)*/,
          lookbehind: true,
          alias: 'selector'
        },
        punctuation: /\[|\]/
      }
    },
    key: {
      pattern: /(^[ \f\t\v]*)[^ \f\n\r\t\v=]+(?:[ \f\t\v]+[^ \f\n\r\t\v=]+)*(?=[ \f\t\v]*=)/m,
      lookbehind: true,
      alias: 'attr-name'
    },
    value: {
      pattern: /(=[ \f\t\v]*)[^ \f\n\r\t\v]+(?:[ \f\t\v]+[^ \f\n\r\t\v]+)*/,
      lookbehind: true,
      alias: 'attr-value',
      inside: {
        'inner-value': {
          pattern: /^("|').+(?=\1$)/,
          lookbehind: true
        }
      }
    },
    punctuation: /=/
  };
}

/***/ }),

/***/ 6512:
/***/ ((module) => {



module.exports = io;
io.displayName = 'io';
io.aliases = [];

function io(Prism) {
  Prism.languages.io = {
    comment: [{
      pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
      lookbehind: true
    }, {
      pattern: /(^|[^\\])\/\/.*/,
      lookbehind: true
    }, {
      pattern: /(^|[^\\])#.*/,
      lookbehind: true
    }],
    'triple-quoted-string': {
      pattern: /"""(?:\\[\s\S]|(?!""")[^\\])*"""/,
      greedy: true,
      alias: 'string'
    },
    string: {
      pattern: /"(?:\\.|[^\\\r\n"])*"/,
      greedy: true
    },
    keyword: /\b(?:activate|activeCoroCount|asString|block|break|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getSlot|getEnvironmentVariable|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|call|try|type|uniqueId|updateSlot|wait|while|write|yield)\b/,
    builtin: /\b(?:Array|AudioDevice|AudioMixer|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Regex|SGML|SGMLElement|SGMLParser|SQLite|Server|Sequence|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink|Random|BigNum)\b/,
    "boolean": /\b(?:true|false|nil)\b/,
    number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e-?\d+)?/i,
    operator: /[=!*/%+\-^&|]=|>>?=?|<<?=?|:?:?=|\+\+?|--?|\*\*?|\/\/?|%|\|\|?|&&?|\b(?:return|and|or|not)\b|@@?|\?\??|\.\./,
    punctuation: /[{}[\];(),.:]/
  };
}

/***/ }),

/***/ 4842:
/***/ ((module) => {



module.exports = j;
j.displayName = 'j';
j.aliases = [];

function j(Prism) {
  Prism.languages.j = {
    comment: /\bNB\..*/,
    string: {
      pattern: /'(?:''|[^'\r\n])*'/,
      greedy: true
    },
    keyword: /\b(?:(?:adverb|conjunction|CR|def|define|dyad|LF|monad|noun|verb)\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\w+|goto_\w+|if|label_\w+|return|select|throw|try|while|whilst)\.)/,
    verb: {
      // Negative look-ahead prevents bad highlighting
      // of ^: ;. =. =: !. !:
      pattern: /(?!\^:|;\.|[=!][.:])(?:\{(?:\.|::?)?|p(?:\.\.?|:)|[=!\]]|[<>+*\-%$|,#][.:]?|[?^]\.?|[;\[]:?|[~}"i][.:]|[ACeEIjLor]\.|(?:[_\/\\qsux]|_?\d):)/,
      alias: 'keyword'
    },
    number: /\b_?(?:(?!\d:)\d+(?:\.\d+)?(?:(?:[ejpx]|ad|ar)_?\d+(?:\.\d+)?)*(?:b_?[\da-z]+(?:\.[\da-z]+)?)?|_\b(?!\.))/,
    adverb: {
      pattern: /[~}]|[\/\\]\.?|[bfM]\.|t[.:]/,
      alias: 'builtin'
    },
    operator: /[=a][.:]|_\./,
    conjunction: {
      pattern: /&(?:\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\.|`:?|[\^LS]:|"/,
      alias: 'variable'
    },
    punctuation: /[()]/
  };
}

/***/ }),

/***/ 2266:
/***/ ((module) => {



module.exports = java;
java.displayName = 'java';
java.aliases = [];

function java(Prism) {
  ;

  (function (Prism) {
    var keywords = /\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/; // full package (optional) + parent classes (optional)

    var classNamePrefix = /(^|[^\w.])(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source; // based on the java naming conventions

    var className = {
      pattern: RegExp(classNamePrefix + /[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),
      lookbehind: true,
      inside: {
        namespace: {
          pattern: /^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,
          inside: {
            punctuation: /\./
          }
        },
        punctuation: /\./
      }
    };
    Prism.languages.java = Prism.languages.extend('clike', {
      'class-name': [className, {
        // variables and parameters
        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
        pattern: RegExp(classNamePrefix + /[A-Z]\w*(?=\s+\w+\s*[;,=()])/.source),
        lookbehind: true,
        inside: className.inside
      }],
      keyword: keywords,
      "function": [Prism.languages.clike["function"], {
        pattern: /(::\s*)[a-z_]\w*/,
        lookbehind: true
      }],
      number: /\b0b[01][01_]*L?\b|\b0x(?:\.[\da-f_p+-]+|[\da-f_]+(?:\.[\da-f_p+-]+)?)\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,
      operator: {
        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,
        lookbehind: true
      }
    });
    Prism.languages.insertBefore('java', 'string', {
      'triple-quoted-string': {
        // http://openjdk.java.net/jeps/355#Description
        pattern: /"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,
        greedy: true,
        alias: 'string'
      }
    });
    Prism.languages.insertBefore('java', 'class-name', {
      annotation: {
        pattern: /(^|[^.])@\w+(?:\s*\.\s*\w+)*/,
        lookbehind: true,
        alias: 'punctuation'
      },
      generics: {
        pattern: /<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&))*>)*>)*>)*>/,
        inside: {
          'class-name': className,
          keyword: keywords,
          punctuation: /[<>(),.:]/,
          operator: /[?&|]/
        }
      },
      namespace: {
        pattern: RegExp(/(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)(?!<keyword>)[a-z]\w*(?:\.[a-z]\w*)*\.?/.source.replace(/<keyword>/g, function () {
          return keywords.source;
        })),
        lookbehind: true,
        inside: {
          punctuation: /\./
        }
      }
    });
  })(Prism);
}

/***/ }),

/***/ 74:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorJava = __webpack_require__(2266);

var refractorJavadoclike = __webpack_require__(8829);

module.exports = javadoc;
javadoc.displayName = 'javadoc';
javadoc.aliases = [];

function javadoc(Prism) {
  Prism.register(refractorJava);
  Prism.register(refractorJavadoclike);

  (function (Prism) {
    var codeLinePattern = /(^(?:[\t ]*(?:\*\s*)*))[^*\s].*$/m;
    var memberReference = /#\s*\w+(?:\s*\([^()]*\))?/.source;
    var reference = /(?:\b[a-zA-Z]\w+\s*\.\s*)*\b[A-Z]\w*(?:\s*<mem>)?|<mem>/.source.replace(/<mem>/g, function () {
      return memberReference;
    });
    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {});
    Prism.languages.insertBefore('javadoc', 'keyword', {
      reference: {
        pattern: RegExp(/(@(?:exception|throws|see|link|linkplain|value)\s+(?:\*\s*)?)/.source + '(?:' + reference + ')'),
        lookbehind: true,
        inside: {
          "function": {
            pattern: /(#\s*)\w+(?=\s*\()/,
            lookbehind: true
          },
          field: {
            pattern: /(#\s*)\w+/,
            lookbehind: true
          },
          namespace: {
            pattern: /\b(?:[a-z]\w*\s*\.\s*)+/,
            inside: {
              punctuation: /\./
            }
          },
          'class-name': /\b[A-Z]\w*/,
          keyword: Prism.languages.java.keyword,
          punctuation: /[#()[\],.]/
        }
      },
      'class-name': {
        // @param <T> the first generic type parameter
        pattern: /(@param\s+)<[A-Z]\w*>/,
        lookbehind: true,
        inside: {
          punctuation: /[.<>]/
        }
      },
      'code-section': [{
        pattern: /(\{@code\s+(?!\s))(?:[^\s{}]|\s+(?![\s}])|\{(?:[^{}]|\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})*\})+(?=\s*\})/,
        lookbehind: true,
        inside: {
          code: {
            // there can't be any HTML inside of {@code} tags
            pattern: codeLinePattern,
            lookbehind: true,
            inside: Prism.languages.java,
            alias: 'language-java'
          }
        }
      }, {
        pattern: /(<(code|pre|tt)>(?!<code>)\s*)\S(?:\S|\s+\S)*?(?=\s*<\/\2>)/,
        lookbehind: true,
        inside: {
          line: {
            pattern: codeLinePattern,
            lookbehind: true,
            inside: {
              // highlight HTML tags and entities
              tag: Prism.languages.markup.tag,
              entity: Prism.languages.markup.entity,
              code: {
                // everything else is Java code
                pattern: /.+/,
                inside: Prism.languages.java,
                alias: 'language-java'
              }
            }
          }
        }
      }],
      tag: Prism.languages.markup.tag,
      entity: Prism.languages.markup.entity
    });
    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc);
  })(Prism);
}

/***/ }),

/***/ 8829:
/***/ ((module) => {



module.exports = javadoclike;
javadoclike.displayName = 'javadoclike';
javadoclike.aliases = [];

function javadoclike(Prism) {
  ;

  (function (Prism) {
    var javaDocLike = Prism.languages.javadoclike = {
      parameter: {
        pattern: /(^[\t ]*(?:\/{3}|\*|\/\*\*)\s*@(?:param|arg|arguments)\s+)\w+/m,
        lookbehind: true
      },
      keyword: {
        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.
        // @word, {@word}
        pattern: /(^[\t ]*(?:\/{3}|\*|\/\*\*)\s*|\{)@[a-z][a-zA-Z-]+\b/m,
        lookbehind: true
      },
      punctuation: /[{}]/
    };
    /**
     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.
     *
     * @param {string} lang the language add doc comment support to.
     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.
     */

    function docCommentSupport(lang, callback) {
      var tokenName = 'doc-comment';
      var grammar = Prism.languages[lang];

      if (!grammar) {
        return;
      }

      var token = grammar[tokenName];

      if (!token) {
        // add doc comment: /** */
        var definition = {};
        definition[tokenName] = {
          pattern: /(^|[^\\])\/\*\*[^/][\s\S]*?(?:\*\/|$)/,
          lookbehind: true,
          alias: 'comment'
        };
        grammar = Prism.languages.insertBefore(lang, 'comment', definition);
        token = grammar[tokenName];
      }

      if (token instanceof RegExp) {
        // convert regex to object
        token = grammar[tokenName] = {
          pattern: token
        };
      }

      if (Array.isArray(token)) {
        for (var i = 0, l = token.length; i < l; i++) {
          if (token[i] instanceof RegExp) {
            token[i] = {
              pattern: token[i]
            };
          }

          callback(token[i]);
        }
      } else {
        callback(token);
      }
    }
    /**
     * Adds doc-comment support to the given languages for the given documentation language.
     *
     * @param {string[]|string} languages
     * @param {Object} docLanguage
     */


    function addSupport(languages, docLanguage) {
      if (typeof languages === 'string') {
        languages = [languages];
      }

      languages.forEach(function (lang) {
        docCommentSupport(lang, function (pattern) {
          if (!pattern.inside) {
            pattern.inside = {};
          }

          pattern.inside.rest = docLanguage;
        });
      });
    }

    Object.defineProperty(javaDocLike, 'addSupport', {
      value: addSupport
    });
    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);
  })(Prism);
}

/***/ }),

/***/ 4872:
/***/ ((module) => {



module.exports = javascript;
javascript.displayName = 'javascript';
javascript.aliases = ['js'];

function javascript(Prism) {
  Prism.languages.javascript = Prism.languages.extend('clike', {
    'class-name': [Prism.languages.clike['class-name'], {
      pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:prototype|constructor))/,
      lookbehind: true
    }],
    keyword: [{
      pattern: /((?:^|\})\s*)catch\b/,
      lookbehind: true
    }, {
      pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
      lookbehind: true
    }],
    // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
    "function": /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
    number: /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,
    operator: /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
  });
  Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;
  Prism.languages.insertBefore('javascript', 'keyword', {
    regex: {
      // eslint-disable-next-line regexp/no-dupe-characters-character-class
      pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,
      lookbehind: true,
      greedy: true,
      inside: {
        'regex-source': {
          pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
          lookbehind: true,
          alias: 'language-regex',
          inside: Prism.languages.regex
        },
        'regex-delimiter': /^\/|\/$/,
        'regex-flags': /^[a-z]+$/
      }
    },
    // This must be declared before keyword because we use "function" inside the look-forward
    'function-variable': {
      pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
      alias: 'function'
    },
    parameter: [{
      pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
      lookbehind: true,
      inside: Prism.languages.javascript
    }, {
      pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
      lookbehind: true,
      inside: Prism.languages.javascript
    }, {
      pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
      lookbehind: true,
      inside: Prism.languages.javascript
    }, {
      pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
      lookbehind: true,
      inside: Prism.languages.javascript
    }],
    constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
  });
  Prism.languages.insertBefore('javascript', 'string', {
    hashbang: {
      pattern: /^#!.*/,
      greedy: true,
      alias: 'comment'
    },
    'template-string': {
      pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
      greedy: true,
      inside: {
        'template-punctuation': {
          pattern: /^`|`$/,
          alias: 'string'
        },
        interpolation: {
          pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
          lookbehind: true,
          inside: {
            'interpolation-punctuation': {
              pattern: /^\$\{|\}$/,
              alias: 'punctuation'
            },
            rest: Prism.languages.javascript
          }
        },
        string: /[\s\S]+/
      }
    }
  });

  if (Prism.languages.markup) {
    Prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.
    // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events

    Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');
  }

  Prism.languages.js = Prism.languages.javascript;
}

/***/ }),

/***/ 523:
/***/ ((module) => {



module.exports = javastacktrace;
javastacktrace.displayName = 'javastacktrace';
javastacktrace.aliases = [];

function javastacktrace(Prism) {
  // Specification:
  // https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Throwable.html#printStackTrace()
  Prism.languages.javastacktrace = {
    // java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]
    // Caused by: java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]
    // Caused by: com.example.myproject.MyProjectServletException
    // Caused by: MidLevelException: LowLevelException
    // Suppressed: Resource$CloseFailException: Resource ID = 0
    summary: {
      pattern: /^[\t ]*(?:(?:Caused by:|Suppressed:|Exception in thread "[^"]*")[\t ]+)?[\w$.]+(?::.*)?$/m,
      inside: {
        keyword: {
          pattern: /^(\s*)(?:(?:Caused by|Suppressed)(?=:)|Exception in thread)/m,
          lookbehind: true
        },
        // the current thread if the summary starts with 'Exception in thread'
        string: {
          pattern: /^(\s*)"[^"]*"/,
          lookbehind: true
        },
        exceptions: {
          pattern: /^(:?\s*)[\w$.]+(?=:|$)/,
          lookbehind: true,
          inside: {
            'class-name': /[\w$]+(?=$|:)/,
            namespace: /[a-z]\w*/,
            punctuation: /[.:]/
          }
        },
        message: {
          pattern: /(:\s*)\S.*/,
          lookbehind: true,
          alias: 'string'
        },
        punctuation: /:/
      }
    },
    // at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)
    // at org.hsqldb.jdbc.Util.throwError(Unknown Source) here could be some notes
    // at java.base/java.lang.Class.forName0(Native Method)
    // at Util.<init>(Unknown Source)
    // at com.foo.loader/foo@9.0/com.foo.Main.run(Main.java:101)
    // at com.foo.loader//com.foo.bar.App.run(App.java:12)
    // at acme@2.1/org.acme.Lib.test(Lib.java:80)
    // at MyClass.mash(MyClass.java:9)
    //
    // More information:
    // https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/StackTraceElement.html#toString()
    //
    // A valid Java module name is defined as:
    //   "A module name consists of one or more Java identifiers (§3.8) separated by "." tokens."
    // https://docs.oracle.com/javase/specs/jls/se9/html/jls-6.html#jls-ModuleName
    //
    // A Java module version is defined by this class:
    // https://docs.oracle.com/javase/9/docs/api/java/lang/module/ModuleDescriptor.Version.html
    // This is the implementation of the `parse` method in JDK13:
    // https://github.com/matcdac/jdk/blob/2305df71d1b7710266ae0956d73927a225132c0f/src/java.base/share/classes/java/lang/module/ModuleDescriptor.java#L1108
    // However, to keep this simple, a version will be matched by the pattern /@[\w$.+-]*/.
    'stack-frame': {
      pattern: /^[\t ]*at (?:[\w$./]|@[\w$.+-]*\/)+(?:<init>)?\([^()]*\)/m,
      inside: {
        keyword: {
          pattern: /^(\s*)at(?= )/,
          lookbehind: true
        },
        source: [// (Main.java:15)
        // (Main.scala:15)
        {
          pattern: /(\()\w+\.\w+:\d+(?=\))/,
          lookbehind: true,
          inside: {
            file: /^\w+\.\w+/,
            punctuation: /:/,
            'line-number': {
              pattern: /\d+/,
              alias: 'number'
            }
          }
        }, // (Unknown Source)
        // (Native Method)
        // (...something...)
        {
          pattern: /(\()[^()]*(?=\))/,
          lookbehind: true,
          inside: {
            keyword: /^(?:Unknown Source|Native Method)$/
          }
        }],
        'class-name': /[\w$]+(?=\.(?:<init>|[\w$]+)\()/,
        "function": /(?:<init>|[\w$]+)(?=\()/,
        'class-loader': {
          pattern: /(\s)[a-z]\w*(?:\.[a-z]\w*)*(?=\/[\w@$.]*\/)/,
          lookbehind: true,
          alias: 'namespace',
          inside: {
            punctuation: /\./
          }
        },
        module: {
          pattern: /([\s/])[a-z]\w*(?:\.[a-z]\w*)*(?:@[\w$.+-]*)?(?=\/)/,
          lookbehind: true,
          inside: {
            version: {
              pattern: /(@)[\s\S]+/,
              lookbehind: true,
              alias: 'number'
            },
            punctuation: /[@.]/
          }
        },
        namespace: {
          pattern: /(?:[a-z]\w*\.)+/,
          inside: {
            punctuation: /\./
          }
        },
        punctuation: /[()/.]/
      }
    },
    // ... 32 more
    // ... 32 common frames omitted
    more: {
      pattern: /^[\t ]*\.{3} \d+ [a-z]+(?: [a-z]+)*/m,
      inside: {
        punctuation: /\.{3}/,
        number: /\d+/,
        keyword: /\b[a-z]+(?: [a-z]+)*\b/
      }
    }
  };
}

/***/ }),

/***/ 1465:
/***/ ((module) => {



module.exports = jexl;
jexl.displayName = 'jexl';
jexl.aliases = [];

function jexl(Prism) {
  Prism.languages.jexl = {
    string: /(["'])(?:\\[\s\S]|(?!\1)[^\\])*\1/,
    transform: {
      pattern: /(\|\s*)[a-zA-Zа-яА-Я_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$][\wа-яА-Я\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$]*/,
      alias: 'function',
      lookbehind: true
    },
    "function": /[a-zA-Zа-яА-Я_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$][\wа-яА-Я\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$]*\s*(?=\()/,
    number: /\b\d+(?:\.\d+)?\b|\B\.\d+\b/,
    operator: /[<>!]=?|-|\+|&&|==|\|\|?|\/\/?|[?:*^%]/,
    "boolean": /\b(?:true|false)\b/,
    keyword: /\bin\b/,
    punctuation: /[{}[\](),.]/
  };
}

/***/ }),

/***/ 1159:
/***/ ((module) => {



module.exports = jolie;
jolie.displayName = 'jolie';
jolie.aliases = [];

function jolie(Prism) {
  Prism.languages.jolie = Prism.languages.extend('clike', {
    string: {
      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    keyword: /\b(?:include|define|is_defined|undef|main|init|outputPort|inputPort|Location|Protocol|Interfaces|RequestResponse|OneWay|type|interface|extender|throws|cset|csets|forward|Aggregates|Redirects|embedded|courier|execution|sequential|concurrent|single|scope|install|throw|comp|cH|default|global|linkIn|linkOut|synchronized|this|new|for|if|else|while|in|Jolie|Java|Javascript|nullProcess|spawn|constants|with|provide|until|exit|foreach|instanceof|over|service)\b/,
    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?l?/i,
    operator: /-[-=>]?|\+[+=]?|<[<=]?|[>=*!]=?|&&|\|\||[:?\/%^]/,
    punctuation: /[,.]/,
    builtin: /\b(?:undefined|string|int|void|long|Byte|bool|double|float|char|any)\b/,
    symbol: /[|;@]/
  });
  delete Prism.languages.jolie['class-name'];
  Prism.languages.insertBefore('jolie', 'keyword', {
    "function": {
      pattern: /((?:\b(?:outputPort|inputPort|in|service|courier)\b|@)\s*)\w+/,
      lookbehind: true
    },
    aggregates: {
      pattern: /(\bAggregates\s*:\s*)(?:\w+(?:\s+with\s+\w+)?\s*,\s*)*\w+(?:\s+with\s+\w+)?/,
      lookbehind: true,
      inside: {
        'with-extension': {
          pattern: /\bwith\s+\w+/,
          inside: {
            keyword: /\bwith\b/
          }
        },
        "function": {
          pattern: /\w+/
        },
        punctuation: {
          pattern: /,/
        }
      }
    },
    redirects: {
      pattern: /(\bRedirects\s*:\s*)(?:\w+\s*=>\s*\w+\s*,\s*)*(?:\w+\s*=>\s*\w+)/,
      lookbehind: true,
      inside: {
        punctuation: {
          pattern: /,/
        },
        "function": {
          pattern: /\w+/
        },
        symbol: {
          pattern: /=>/
        }
      }
    }
  });
}

/***/ }),

/***/ 7926:
/***/ ((module) => {



module.exports = jq;
jq.displayName = 'jq';
jq.aliases = [];

function jq(Prism) {
  ;

  (function (Prism) {
    var interpolation = /\\\((?:[^()]|\([^()]*\))*\)/.source;
    var string = RegExp(/"(?:[^"\r\n\\]|\\[^\r\n(]|__)*"/.source.replace(/__/g, function () {
      return interpolation;
    }));
    var stringInterpolation = {
      interpolation: {
        pattern: RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + interpolation),
        lookbehind: true,
        inside: {
          content: {
            pattern: /^(\\\()[\s\S]+(?=\)$)/,
            lookbehind: true,
            inside: null // see below

          },
          punctuation: /^\\\(|\)$/
        }
      }
    };
    var jq = Prism.languages.jq = {
      comment: /#.*/,
      property: {
        pattern: RegExp(string.source + /(?=\s*:(?!:))/.source),
        greedy: true,
        inside: stringInterpolation
      },
      string: {
        pattern: string,
        greedy: true,
        inside: stringInterpolation
      },
      "function": {
        pattern: /(\bdef\s+)[a-z_]\w+/i,
        lookbehind: true
      },
      variable: /\B\$\w+/,
      'property-literal': {
        pattern: /\b[a-z_]\w*(?=\s*:(?!:))/i,
        alias: 'property'
      },
      keyword: /\b(?:as|break|catch|def|elif|else|end|foreach|if|import|include|label|module|modulemeta|null|reduce|then|try|while)\b/,
      "boolean": /\b(?:true|false)\b/,
      number: /(?:\b\d+\.|\B\.)?\b\d+(?:[eE][+-]?\d+)?\b/,
      operator: [{
        pattern: /\|=?/,
        alias: 'pipe'
      }, /\.\.|[!=<>]?=|\?\/\/|\/\/=?|[-+*/%]=?|[<>?]|\b(?:and|or|not)\b/],
      'c-style-function': {
        pattern: /\b[a-z_]\w*(?=\s*\()/i,
        alias: 'function'
      },
      punctuation: /::|[()\[\]{},:;]|\.(?=\s*[\[\w$])/,
      dot: {
        pattern: /\./,
        alias: 'important'
      }
    };
    stringInterpolation.interpolation.inside.content.inside = jq;
  })(Prism);
}

/***/ }),

/***/ 5050:
/***/ ((module) => {



module.exports = jsExtras;
jsExtras.displayName = 'jsExtras';
jsExtras.aliases = [];

function jsExtras(Prism) {
  ;

  (function (Prism) {
    Prism.languages.insertBefore('javascript', 'function-variable', {
      'method-variable': {
        pattern: RegExp('(\\.\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),
        lookbehind: true,
        alias: ['function-variable', 'method', 'function', 'property-access']
      }
    });
    Prism.languages.insertBefore('javascript', 'function', {
      method: {
        pattern: RegExp('(\\.\\s*)' + Prism.languages.javascript['function'].source),
        lookbehind: true,
        alias: ['function', 'property-access']
      }
    });
    Prism.languages.insertBefore('javascript', 'constant', {
      'known-class-name': [{
        // standard built-ins
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
        pattern: /\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\b/,
        alias: 'class-name'
      }, {
        // errors
        pattern: /\b(?:[A-Z]\w*)Error\b/,
        alias: 'class-name'
      }]
    });
    /**
     * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.
     *
     * @param {string} source
     * @param {string} [flags]
     * @returns {RegExp}
     */

    function withId(source, flags) {
      return RegExp(source.replace(/<ID>/g, function () {
        return /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/.source;
      }), flags);
    }

    Prism.languages.insertBefore('javascript', 'keyword', {
      imports: {
        // https://tc39.es/ecma262/#sec-imports
        pattern: withId(/(\bimport\b\s*)(?:<ID>(?:\s*,\s*(?:\*\s*as\s+<ID>|\{[^{}]*\}))?|\*\s*as\s+<ID>|\{[^{}]*\})(?=\s*\bfrom\b)/.source),
        lookbehind: true,
        inside: Prism.languages.javascript
      },
      exports: {
        // https://tc39.es/ecma262/#sec-exports
        pattern: withId(/(\bexport\b\s*)(?:\*(?:\s*as\s+<ID>)?(?=\s*\bfrom\b)|\{[^{}]*\})/.source),
        lookbehind: true,
        inside: Prism.languages.javascript
      }
    });
    Prism.languages.javascript['keyword'].unshift({
      pattern: /\b(?:as|default|export|from|import)\b/,
      alias: 'module'
    }, {
      pattern: /\b(?:await|break|catch|continue|do|else|for|finally|if|return|switch|throw|try|while|yield)\b/,
      alias: 'control-flow'
    }, {
      pattern: /\bnull\b/,
      alias: ['null', 'nil']
    }, {
      pattern: /\bundefined\b/,
      alias: 'nil'
    });
    Prism.languages.insertBefore('javascript', 'operator', {
      spread: {
        pattern: /\.{3}/,
        alias: 'operator'
      },
      arrow: {
        pattern: /=>/,
        alias: 'operator'
      }
    });
    Prism.languages.insertBefore('javascript', 'punctuation', {
      'property-access': {
        pattern: withId(/(\.\s*)#?<ID>/.source),
        lookbehind: true
      },
      'maybe-class-name': {
        pattern: /(^|[^$\w\xA0-\uFFFF])[A-Z][$\w\xA0-\uFFFF]+/,
        lookbehind: true
      },
      dom: {
        // this contains only a few commonly used DOM variables
        pattern: /\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\b/,
        alias: 'variable'
      },
      console: {
        pattern: /\bconsole(?=\s*\.)/,
        alias: 'class-name'
      }
    }); // add 'maybe-class-name' to tokens which might be a class name

    var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];

    for (var i = 0; i < maybeClassNameTokens.length; i++) {
      var token = maybeClassNameTokens[i];
      var value = Prism.languages.javascript[token]; // convert regex to object

      if (Prism.util.type(value) === 'RegExp') {
        value = Prism.languages.javascript[token] = {
          pattern: value
        };
      } // keep in mind that we don't support arrays


      var inside = value.inside || {};
      value.inside = inside;
      inside['maybe-class-name'] = /^[A-Z][\s\S]*/;
    }
  })(Prism);
}

/***/ }),

/***/ 1775:
/***/ ((module) => {



module.exports = jsTemplates;
jsTemplates.displayName = 'jsTemplates';
jsTemplates.aliases = [];

function jsTemplates(Prism) {
  ;

  (function (Prism) {
    var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js

    var templateLiteralPattern = templateString.pattern.source;
    var interpolationObject = templateString.inside['interpolation'];
    var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];
    var interpolationPattern = interpolationObject.pattern.source;
    /**
     * Creates a new pattern to match a template string with a special tag.
     *
     * This will return `undefined` if there is no grammar with the given language id.
     *
     * @param {string} language The language id of the embedded language. E.g. `markdown`.
     * @param {string} tag The regex pattern to match the tag.
     * @returns {object | undefined}
     * @example
     * createTemplate('css', /\bcss/.source);
     */

    function createTemplate(language, tag) {
      if (!Prism.languages[language]) {
        return undefined;
      }

      return {
        pattern: RegExp('((?:' + tag + ')\\s*)' + templateLiteralPattern),
        lookbehind: true,
        greedy: true,
        inside: {
          'template-punctuation': {
            pattern: /^`|`$/,
            alias: 'string'
          },
          'embedded-code': {
            pattern: /[\s\S]+/,
            alias: language
          }
        }
      };
    }

    Prism.languages.javascript['template-string'] = [// styled-jsx:
    //   css`a { color: #25F; }`
    // styled-components:
    //   styled.h1`color: red;`
    createTemplate('css', /\b(?:styled(?:\([^)]*\))?(?:\s*\.\s*\w+(?:\([^)]*\))*)*|css(?:\s*\.\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source), // html`<p></p>`
    // div.innerHTML = `<p></p>`
    createTemplate('html', /\bhtml|\.\s*(?:inner|outer)HTML\s*\+?=/.source), // svg`<path fill="#fff" d="M55.37 ..."/>`
    createTemplate('svg', /\bsvg/.source), // md`# h1`, markdown`## h2`
    createTemplate('markdown', /\b(?:md|markdown)/.source), // gql`...`, graphql`...`, graphql.experimental`...`
    createTemplate('graphql', /\b(?:gql|graphql(?:\s*\.\s*experimental)?)/.source), // sql`...`
    createTemplate('sql', /\bsql/.source), // vanilla template string
    templateString].filter(Boolean);
    /**
     * Returns a specific placeholder literal for the given language.
     *
     * @param {number} counter
     * @param {string} language
     * @returns {string}
     */

    function getPlaceholder(counter, language) {
      return '___' + language.toUpperCase() + '_' + counter + '___';
    }
    /**
     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.
     *
     * @param {string} code
     * @param {any} grammar
     * @param {string} language
     * @returns {(string|Token)[]}
     */


    function tokenizeWithHooks(code, grammar, language) {
      var env = {
        code: code,
        grammar: grammar,
        language: language
      };
      Prism.hooks.run('before-tokenize', env);
      env.tokens = Prism.tokenize(env.code, env.grammar);
      Prism.hooks.run('after-tokenize', env);
      return env.tokens;
    }
    /**
     * Returns the token of the given JavaScript interpolation expression.
     *
     * @param {string} expression The code of the expression. E.g. `"${42}"`
     * @returns {Token}
     */


    function tokenizeInterpolationExpression(expression) {
      var tempGrammar = {};
      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;
      /** @type {Array} */

      var tokens = Prism.tokenize(expression, tempGrammar);

      if (tokens.length === 3) {
        /**
         * The token array will look like this
         * [
         *     ["interpolation-punctuation", "${"]
         *     "..." // JavaScript expression of the interpolation
         *     ["interpolation-punctuation", "}"]
         * ]
         */
        var args = [1, 1];
        args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));
        tokens.splice.apply(tokens, args);
      }

      return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);
    }
    /**
     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.
     *
     * This function has 3 phases:
     *
     * 1. Replace all JavaScript interpolation expression with a placeholder.
     *    The placeholder will have the syntax of a identify of the target language.
     * 2. Tokenize the code with placeholders.
     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.
     *    The insertion only works if a placeholder hasn't been "ripped apart" meaning that the placeholder has been
     *    tokenized as two tokens by the grammar of the embedded language.
     *
     * @param {string} code
     * @param {object} grammar
     * @param {string} language
     * @returns {Token}
     */


    function tokenizeEmbedded(code, grammar, language) {
      // 1. First filter out all interpolations
      // because they might be escaped, we need a lookbehind, so we use Prism

      /** @type {(Token|string)[]} */
      var _tokens = Prism.tokenize(code, {
        interpolation: {
          pattern: RegExp(interpolationPattern),
          lookbehind: true
        }
      }); // replace all interpolations with a placeholder which is not in the code already


      var placeholderCounter = 0;
      /** @type {Object<string, string>} */

      var placeholderMap = {};

      var embeddedCode = _tokens.map(function (token) {
        if (typeof token === 'string') {
          return token;
        } else {
          var interpolationExpression = token.content;
          var placeholder;

          while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {
            /* noop */
          }

          placeholderMap[placeholder] = interpolationExpression;
          return placeholder;
        }
      }).join(''); // 2. Tokenize the embedded code


      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation

      var placeholders = Object.keys(placeholderMap);
      placeholderCounter = 0;
      /**
       *
       * @param {(Token|string)[]} tokens
       * @returns {void}
       */

      function walkTokens(tokens) {
        for (var i = 0; i < tokens.length; i++) {
          if (placeholderCounter >= placeholders.length) {
            return;
          }

          var token = tokens[i];

          if (typeof token === 'string' || typeof token.content === 'string') {
            var placeholder = placeholders[placeholderCounter];
            var s = typeof token === 'string' ? token :
            /** @type {string} */
            token.content;
            var index = s.indexOf(placeholder);

            if (index !== -1) {
              ++placeholderCounter;
              var before = s.substring(0, index);
              var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);
              var after = s.substring(index + placeholder.length);
              var replacement = [];

              if (before) {
                replacement.push(before);
              }

              replacement.push(middle);

              if (after) {
                var afterTokens = [after];
                walkTokens(afterTokens);
                replacement.push.apply(replacement, afterTokens);
              }

              if (typeof token === 'string') {
                tokens.splice.apply(tokens, [i, 1].concat(replacement));
                i += replacement.length - 1;
              } else {
                token.content = replacement;
              }
            }
          } else {
            var content = token.content;

            if (Array.isArray(content)) {
              walkTokens(content);
            } else {
              walkTokens([content]);
            }
          }
        }
      }

      walkTokens(embeddedTokens);
      return new Prism.Token(language, embeddedTokens, 'language-' + language, code);
    }
    /**
     * The languages for which JS templating will handle tagged template literals.
     *
     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.
     */


    var supportedLanguages = {
      javascript: true,
      js: true,
      typescript: true,
      ts: true,
      jsx: true,
      tsx: true
    };
    Prism.hooks.add('after-tokenize', function (env) {
      if (!(env.language in supportedLanguages)) {
        return;
      }
      /**
       * Finds and tokenizes all template strings with an embedded languages.
       *
       * @param {(Token | string)[]} tokens
       * @returns {void}
       */


      function findTemplateStrings(tokens) {
        for (var i = 0, l = tokens.length; i < l; i++) {
          var token = tokens[i];

          if (typeof token === 'string') {
            continue;
          }

          var content = token.content;

          if (!Array.isArray(content)) {
            if (typeof content !== 'string') {
              findTemplateStrings([content]);
            }

            continue;
          }

          if (token.type === 'template-string') {
            /**
             * A JavaScript template-string token will look like this:
             *
             * ["template-string", [
             *     ["template-punctuation", "`"],
             *     (
             *         An array of "string" and "interpolation" tokens. This is the simple string case.
             *         or
             *         ["embedded-code", "..."] This is the token containing the embedded code.
             *                                  It also has an alias which is the language of the embedded code.
             *     ),
             *     ["template-punctuation", "`"]
             * ]]
             */
            var embedded = content[1];

            if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {
              // get string content
              var code = stringContent(embedded);
              var alias = embedded.alias;
              var language = Array.isArray(alias) ? alias[0] : alias;
              var grammar = Prism.languages[language];

              if (!grammar) {
                // the embedded language isn't registered.
                continue;
              }

              content[1] = tokenizeEmbedded(code, grammar, language);
            }
          } else {
            findTemplateStrings(content);
          }
        }
      }

      findTemplateStrings(env.tokens);
    });
    /**
     * Returns the string content of a token or token stream.
     *
     * @param {string | Token | (string | Token)[]} value
     * @returns {string}
     */

    function stringContent(value) {
      if (typeof value === 'string') {
        return value;
      } else if (Array.isArray(value)) {
        return value.map(stringContent).join('');
      } else {
        return stringContent(value.content);
      }
    }
  })(Prism);
}

/***/ }),

/***/ 7436:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorJavadoclike = __webpack_require__(8829);

var refractorTypescript = __webpack_require__(2747);

module.exports = jsdoc;
jsdoc.displayName = 'jsdoc';
jsdoc.aliases = [];

function jsdoc(Prism) {
  Prism.register(refractorJavadoclike);
  Prism.register(refractorTypescript);

  (function (Prism) {
    var javascript = Prism.languages.javascript;
    var type = /\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})+\}/.source;
    var parameterPrefix = '(@(?:param|arg|argument|property)\\s+(?:' + type + '\\s+)?)';
    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {
      parameter: {
        // @param {string} foo - foo bar
        pattern: RegExp(parameterPrefix + /(?:(?!\s)[$\w\xA0-\uFFFF.])+(?=\s|$)/.source),
        lookbehind: true,
        inside: {
          punctuation: /\./
        }
      }
    });
    Prism.languages.insertBefore('jsdoc', 'keyword', {
      'optional-parameter': {
        // @param {string} [baz.foo="bar"] foo bar
        pattern: RegExp(parameterPrefix + /\[(?:(?!\s)[$\w\xA0-\uFFFF.])+(?:=[^[\]]+)?\](?=\s|$)/.source),
        lookbehind: true,
        inside: {
          parameter: {
            pattern: /(^\[)[$\w\xA0-\uFFFF\.]+/,
            lookbehind: true,
            inside: {
              punctuation: /\./
            }
          },
          code: {
            pattern: /(=)[\s\S]*(?=\]$)/,
            lookbehind: true,
            inside: javascript,
            alias: 'language-javascript'
          },
          punctuation: /[=[\]]/
        }
      },
      'class-name': [{
        pattern: RegExp(/(@(?:augments|extends|class|interface|memberof!?|template|this|typedef)\s+(?:<TYPE>\s+)?)[A-Z]\w*(?:\.[A-Z]\w*)*/.source.replace(/<TYPE>/g, function () {
          return type;
        })),
        lookbehind: true,
        inside: {
          punctuation: /\./
        }
      }, {
        pattern: RegExp('(@[a-z]+\\s+)' + type),
        lookbehind: true,
        inside: {
          string: javascript.string,
          number: javascript.number,
          "boolean": javascript["boolean"],
          keyword: Prism.languages.typescript.keyword,
          operator: /=>|\.\.\.|[&|?:*]/,
          punctuation: /[.,;=<>{}()[\]]/
        }
      }],
      example: {
        pattern: /(@example\s+(?!\s))(?:[^@\s]|\s+(?!\s))+?(?=\s*(?:\*\s*)?(?:@\w|\*\/))/,
        lookbehind: true,
        inside: {
          code: {
            pattern: /^([\t ]*(?:\*\s*)?)\S.*$/m,
            lookbehind: true,
            inside: javascript,
            alias: 'language-javascript'
          }
        }
      }
    });
    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc);
  })(Prism);
}

/***/ }),

/***/ 9677:
/***/ ((module) => {



module.exports = json;
json.displayName = 'json';
json.aliases = ['webmanifest'];

function json(Prism) {
  // https://www.json.org/json-en.html
  Prism.languages.json = {
    property: {
      pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,
      lookbehind: true,
      greedy: true
    },
    string: {
      pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,
      lookbehind: true,
      greedy: true
    },
    comment: {
      pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
      greedy: true
    },
    number: /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
    punctuation: /[{}[\],]/,
    operator: /:/,
    "boolean": /\b(?:true|false)\b/,
    "null": {
      pattern: /\bnull\b/,
      alias: 'keyword'
    }
  };
  Prism.languages.webmanifest = Prism.languages.json;
}

/***/ }),

/***/ 6257:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorJson = __webpack_require__(9677);

module.exports = json5;
json5.displayName = 'json5';
json5.aliases = [];

function json5(Prism) {
  Prism.register(refractorJson);

  (function (Prism) {
    var string = /("|')(?:\\(?:\r\n?|\n|.)|(?!\1)[^\\\r\n])*\1/;
    Prism.languages.json5 = Prism.languages.extend('json', {
      property: [{
        pattern: RegExp(string.source + '(?=\\s*:)'),
        greedy: true
      }, {
        pattern: /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/,
        alias: 'unquoted'
      }],
      string: {
        pattern: string,
        greedy: true
      },
      number: /[+-]?\b(?:NaN|Infinity|0x[a-fA-F\d]+)\b|[+-]?(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[eE][+-]?\d+\b)?/
    });
  })(Prism);
}

/***/ }),

/***/ 8731:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorJson = __webpack_require__(9677);

module.exports = jsonp;
jsonp.displayName = 'jsonp';
jsonp.aliases = [];

function jsonp(Prism) {
  Prism.register(refractorJson);
  Prism.languages.jsonp = Prism.languages.extend('json', {
    punctuation: /[{}[\]();,.]/
  });
  Prism.languages.insertBefore('jsonp', 'punctuation', {
    "function": /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*\()/
  });
}

/***/ }),

/***/ 8678:
/***/ ((module) => {



module.exports = jsstacktrace;
jsstacktrace.displayName = 'jsstacktrace';
jsstacktrace.aliases = [];

function jsstacktrace(Prism) {
  Prism.languages.jsstacktrace = {
    'error-message': {
      pattern: /^\S.*/m,
      alias: 'string'
    },
    'stack-frame': {
      pattern: /(^[ \t]+)at[ \t].*/m,
      lookbehind: true,
      inside: {
        'not-my-code': {
          pattern: /^at[ \t]+(?!\s)(?:node\.js|<unknown>|.*(?:node_modules|\(<anonymous>\)|\(<unknown>|<anonymous>$|\(internal\/|\(node\.js)).*/m,
          alias: 'comment'
        },
        filename: {
          pattern: /(\bat\s+(?!\s)|\()(?:[a-zA-Z]:)?[^():]+(?=:)/,
          lookbehind: true,
          alias: 'url'
        },
        "function": {
          pattern: /(at\s+(?:new\s+)?)(?!\s)[_$a-zA-Z\xA0-\uFFFF<][.$\w\xA0-\uFFFF<>]*/,
          lookbehind: true,
          inside: {
            punctuation: /\./
          }
        },
        punctuation: /[()]/,
        keyword: /\b(?:at|new)\b/,
        alias: {
          pattern: /\[(?:as\s+)?(?!\s)[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\]/,
          alias: 'variable'
        },
        'line-number': {
          pattern: /:[0-9]+(?::[0-9]+)?\b/,
          alias: 'number',
          inside: {
            punctuation: /:/
          }
        }
      }
    }
  };
}

/***/ }),

/***/ 4369:
/***/ ((module) => {



module.exports = jsx;
jsx.displayName = 'jsx';
jsx.aliases = [];

function jsx(Prism) {
  ;

  (function (Prism) {
    var javascript = Prism.util.clone(Prism.languages.javascript);
    var space = /(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source;
    var braces = /(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source;
    var spread = /(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;
    /**
     * @param {string} source
     * @param {string} [flags]
     */

    function re(source, flags) {
      source = source.replace(/<S>/g, function () {
        return space;
      }).replace(/<BRACES>/g, function () {
        return braces;
      }).replace(/<SPREAD>/g, function () {
        return spread;
      });
      return RegExp(source, flags);
    }

    spread = re(spread).source;
    Prism.languages.jsx = Prism.languages.extend('markup', javascript);
    Prism.languages.jsx.tag.pattern = re(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source);
    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\/?[^\s>\/]*/i;
    Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/i;
    Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\w*(?:\.[A-Z]\w*)*$/;
    Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];
    Prism.languages.insertBefore('inside', 'attr-name', {
      spread: {
        pattern: re(/<SPREAD>/.source),
        inside: Prism.languages.jsx
      }
    }, Prism.languages.jsx.tag);
    Prism.languages.insertBefore('inside', 'special-attr', {
      script: {
        // Allow for two levels of nesting
        pattern: re(/=<BRACES>/.source),
        inside: {
          'script-punctuation': {
            pattern: /^=(?=\{)/,
            alias: 'punctuation'
          },
          rest: Prism.languages.jsx
        },
        alias: 'language-javascript'
      }
    }, Prism.languages.jsx.tag); // The following will handle plain text inside tags

    var stringifyToken = function stringifyToken(token) {
      if (!token) {
        return '';
      }

      if (typeof token === 'string') {
        return token;
      }

      if (typeof token.content === 'string') {
        return token.content;
      }

      return token.content.map(stringifyToken).join('');
    };

    var walkTokens = function walkTokens(tokens) {
      var openedTags = [];

      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        var notTagNorBrace = false;

        if (typeof token !== 'string') {
          if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {
            // We found a tag, now find its kind
            if (token.content[0].content[0].content === '</') {
              // Closing tag
              if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {
                // Pop matching opening tag
                openedTags.pop();
              }
            } else {
              if (token.content[token.content.length - 1].content === '/>') {// Autoclosed tag, ignore
              } else {
                // Opening tag
                openedTags.push({
                  tagName: stringifyToken(token.content[0].content[1]),
                  openedBraces: 0
                });
              }
            }
          } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {
            // Here we might have entered a JSX context inside a tag
            openedTags[openedTags.length - 1].openedBraces++;
          } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {
            // Here we might have left a JSX context inside a tag
            openedTags[openedTags.length - 1].openedBraces--;
          } else {
            notTagNorBrace = true;
          }
        }

        if (notTagNorBrace || typeof token === 'string') {
          if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {
            // Here we are inside a tag, and not inside a JSX context.
            // That's plain text: drop any tokens matched.
            var plainText = stringifyToken(token); // And merge text with adjacent text

            if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {
              plainText += stringifyToken(tokens[i + 1]);
              tokens.splice(i + 1, 1);
            }

            if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {
              plainText = stringifyToken(tokens[i - 1]) + plainText;
              tokens.splice(i - 1, 1);
              i--;
            }

            tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);
          }
        }

        if (token.content && typeof token.content !== 'string') {
          walkTokens(token.content);
        }
      }
    };

    Prism.hooks.add('after-tokenize', function (env) {
      if (env.language !== 'jsx' && env.language !== 'tsx') {
        return;
      }

      walkTokens(env.tokens);
    });
  })(Prism);
}

/***/ }),

/***/ 3511:
/***/ ((module) => {



module.exports = julia;
julia.displayName = 'julia';
julia.aliases = [];

function julia(Prism) {
  Prism.languages.julia = {
    comment: {
      // support one level of nested comments
      // https://github.com/JuliaLang/julia/pull/6128
      pattern: /(^|[^\\])(?:#=(?:[^#=]|=(?!#)|#(?!=)|#=(?:[^#=]|=(?!#)|#(?!=))*=#)*=#|#.*)/,
      lookbehind: true
    },
    regex: {
      // https://docs.julialang.org/en/v1/manual/strings/#Regular-Expressions-1
      pattern: /r"(?:\\.|[^"\\\r\n])*"[imsx]{0,4}/,
      greedy: true
    },
    string: {
      // https://docs.julialang.org/en/v1/manual/strings/#man-characters-1
      // https://docs.julialang.org/en/v1/manual/strings/#String-Basics-1
      // https://docs.julialang.org/en/v1/manual/strings/#non-standard-string-literals-1
      // https://docs.julialang.org/en/v1/manual/running-external-programs/#Running-External-Programs-1
      pattern: /"""[\s\S]+?"""|(?:\b\w+)?"(?:\\.|[^"\\\r\n])*"|(^|[^\w'])'(?:\\[^\r\n][^'\r\n]*|[^\\\r\n])'|`(?:[^\\`\r\n]|\\.)*`/,
      lookbehind: true,
      greedy: true
    },
    keyword: /\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|in|let|local|macro|module|print|println|quote|return|struct|try|type|typealias|using|while)\b/,
    "boolean": /\b(?:true|false)\b/,
    number: /(?:\b(?=\d)|\B(?=\.))(?:0[box])?(?:[\da-f]+(?:_[\da-f]+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[efp][+-]?\d+(?:_\d+)*)?j?/i,
    // https://docs.julialang.org/en/v1/manual/mathematical-operations/
    // https://docs.julialang.org/en/v1/manual/mathematical-operations/#Operator-Precedence-and-Associativity-1
    operator: /&&|\|\||[-+*^%÷⊻&$\\]=?|\/[\/=]?|!=?=?|\|[=>]?|<(?:<=?|[=:|])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥'√∛]/,
    punctuation: /::?|[{}[\]();,.?]/,
    // https://docs.julialang.org/en/v1/base/numbers/#Base.im
    constant: /\b(?:(?:NaN|Inf)(?:16|32|64)?|im|pi)\b|[πℯ]/
  };
}

/***/ }),

/***/ 5608:
/***/ ((module) => {



module.exports = keyman;
keyman.displayName = 'keyman';
keyman.aliases = [];

function keyman(Prism) {
  Prism.languages.keyman = {
    comment: /\bc\s.*/i,
    "function": /\[\s*(?:(?:CTRL|SHIFT|ALT|LCTRL|RCTRL|LALT|RALT|CAPS|NCAPS)\s+)*(?:[TKU]_[\w?]+|".+?"|'.+?')\s*\]/i,
    // virtual key
    string: /("|').*?\1/,
    bold: [// header statements, system stores and variable system stores
    /&(?:baselayout|bitmap|capsononly|capsalwaysoff|shiftfreescaps|copyright|ethnologuecode|hotkey|includecodes|keyboardversion|kmw_embedcss|kmw_embedjs|kmw_helpfile|kmw_helptext|kmw_rtl|language|layer|layoutfile|message|mnemoniclayout|name|oldcharposmatching|platform|targets|version|visualkeyboard|windowslanguages)\b/i, /\b(?:bitmap|bitmaps|caps on only|caps always off|shift frees caps|copyright|hotkey|language|layout|message|name|version)\b/i],
    keyword: /\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|return|reset|save|set|store|use)\b/i,
    // rule keywords
    atrule: /\b(?:ansi|begin|unicode|group|using keys|match|nomatch)\b/i,
    // structural keywords
    number: /\b(?:U\+[\dA-F]+|d\d+|x[\da-f]+|\d+)\b/i,
    // U+####, x###, d### characters and numbers
    operator: /[+>\\,()]/,
    tag: /\$(?:keyman|kmfl|weaver|keymanweb|keymanonly):/i // prefixes

  };
}

/***/ }),

/***/ 3414:
/***/ ((module) => {



module.exports = kotlin;
kotlin.displayName = 'kotlin';
kotlin.aliases = ['kt', 'kts'];

function kotlin(Prism) {
  ;

  (function (Prism) {
    Prism.languages.kotlin = Prism.languages.extend('clike', {
      keyword: {
        // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get
        pattern: /(^|[^.])\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\b/,
        lookbehind: true
      },
      "function": [{
        pattern: /(?:`[^\r\n`]+`|\b\w+)(?=\s*\()/,
        greedy: true
      }, {
        pattern: /(\.)(?:`[^\r\n`]+`|\w+)(?=\s*\{)/,
        lookbehind: true,
        greedy: true
      }],
      number: /\b(?:0[xX][\da-fA-F]+(?:_[\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?(?:[eE][+-]?\d+(?:_\d+)*)?[fFL]?)\b/,
      operator: /\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\/*%<>]=?|[?:]:?|\.\.|&&|\|\||\b(?:and|inv|or|shl|shr|ushr|xor)\b/
    });
    delete Prism.languages.kotlin['class-name'];
    Prism.languages.insertBefore('kotlin', 'string', {
      'raw-string': {
        pattern: /("""|''')[\s\S]*?\1/,
        alias: 'string' // See interpolation below

      }
    });
    Prism.languages.insertBefore('kotlin', 'keyword', {
      annotation: {
        pattern: /\B@(?:\w+:)?(?:[A-Z]\w*|\[[^\]]+\])/,
        alias: 'builtin'
      }
    });
    Prism.languages.insertBefore('kotlin', 'function', {
      label: {
        pattern: /\b\w+@|@\w+\b/,
        alias: 'symbol'
      }
    });
    var interpolation = [{
      pattern: /\$\{[^}]+\}/,
      inside: {
        delimiter: {
          pattern: /^\$\{|\}$/,
          alias: 'variable'
        },
        rest: Prism.languages.kotlin
      }
    }, {
      pattern: /\$\w+/,
      alias: 'variable'
    }];
    Prism.languages.kotlin['string'].inside = Prism.languages.kotlin['raw-string'].inside = {
      interpolation: interpolation
    };
    Prism.languages.kt = Prism.languages.kotlin;
    Prism.languages.kts = Prism.languages.kotlin;
  })(Prism);
}

/***/ }),

/***/ 1750:
/***/ ((module) => {



module.exports = kumir;
kumir.displayName = 'kumir';
kumir.aliases = ['kum'];

function kumir(Prism) {
  /* eslint-disable regexp/no-dupe-characters-character-class */
  ;

  (function (Prism) {
    /**
     * Regular expression for characters that are not allowed in identifiers.
     *
     * @type {string}
     */
    var nonId = /\s\x00-\x1f\x22-\x2f\x3a-\x3f\x5b-\x5e\x60\x7b-\x7e/.source;
    /**
     * Surround a regular expression for IDs with patterns for non-ID sequences.
     *
     * @param {string} pattern A regular expression for identifiers.
     * @param {string} [flags] The regular expression flags.
     * @returns {RegExp} A wrapped regular expression for identifiers.
     */

    function wrapId(pattern, flags) {
      return RegExp(pattern.replace(/<nonId>/g, nonId), flags);
    }

    Prism.languages.kumir = {
      comment: {
        pattern: /\|.*/
      },
      prolog: {
        pattern: /#.*/,
        greedy: true
      },
      string: {
        pattern: /"[^\n\r"]*"|'[^\n\r']*'/,
        greedy: true
      },
      "boolean": {
        pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),
        lookbehind: true
      },
      'operator-word': {
        pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),
        lookbehind: true,
        alias: 'keyword'
      },
      'system-variable': {
        pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),
        lookbehind: true,
        alias: 'keyword'
      },
      type: [{
        pattern: wrapId(/(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\x20*таб)?(?=[<nonId>]|$)/.source),
        lookbehind: true,
        alias: 'builtin'
      }, {
        pattern: wrapId(/(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source),
        lookbehind: true,
        alias: 'important'
      }],

      /**
       * Should be performed after searching for type names because of "таб".
       * "таб" is a reserved word, but never used without a preceding type name.
       * "НАЗНАЧИТЬ", "Фввод", and "Фвывод" are not reserved words.
       */
      keyword: {
        pattern: wrapId(/(^|[<nonId>])(?:алг|арг(?:\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\x20+|_)исп)?|кц(?:(?:\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/.source),
        lookbehind: true
      },

      /** Should be performed after searching for reserved words. */
      name: {
        // eslint-disable-next-line regexp/no-super-linear-backtracking
        pattern: wrapId(/(^|[<nonId>])[^\d<nonId>][^<nonId>]*(?:\x20+[^<nonId>]+)*(?=[<nonId>]|$)/.source),
        lookbehind: true
      },

      /** Should be performed after searching for names. */
      number: {
        pattern: wrapId(/(^|[<nonId>])(?:\B\$[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)(?=[<nonId>]|$)/.source, 'i'),
        lookbehind: true
      },

      /** Should be performed after searching for words. */
      punctuation: /:=|[(),:;\[\]]/,

      /**
       * Should be performed after searching for
       * - numeric constants (because of "+" and "-");
       * - punctuation marks (because of ":=" and "=").
       */
      'operator-char': {
        pattern: /\*\*?|<[=>]?|>=?|[-+/=]/,
        alias: 'operator'
      }
    };
    Prism.languages.kum = Prism.languages.kumir;
  })(Prism);
}

/***/ }),

/***/ 6132:
/***/ ((module) => {



module.exports = kusto;
kusto.displayName = 'kusto';
kusto.aliases = [];

function kusto(Prism) {
  Prism.languages.kusto = {
    comment: {
      pattern: /\/\/.*/,
      greedy: true
    },
    string: {
      pattern: /```[\s\S]*?```|[hH]?(?:"(?:[^\r\n\\"]|\\.)*"|'(?:[^\r\n\\']|\\.)*'|@(?:"[^\r\n"]*"|'[^\r\n']*'))/,
      greedy: true
    },
    verb: {
      pattern: /(\|\s*)[a-z][\w-]*/i,
      lookbehind: true,
      alias: 'keyword'
    },
    command: {
      pattern: /\.[a-z][a-z\d-]*\b/,
      alias: 'keyword'
    },
    'class-name': /\b(?:bool|datetime|decimal|dynamic|guid|int|long|real|string|timespan)\b/,
    keyword: /\b(?:access|alias|and|anti|as|asc|auto|between|by|database|declare|desc|external|from|fullouter|has_all|in|ingestion|inline|inner|innerunique|into|let|like|local|not|of|on|or|pattern|print|query_parameters|range|restrict|schema|set|step|table|tables|to|view|where|with|(?:has(?:perfix|suffix)?|contains|(?:starts|ends)with)(?:_cs)?|(?:left|right)(?:anti(?:semi)?|inner|outer|semi)?|matches\s+regex|nulls\s+(?:first|last))(?![\w-])/,
    "boolean": /\b(?:true|false|null)\b/,
    "function": /\b[a-z_]\w*(?=\s*\()/,
    datetime: [{
      // RFC 822 + RFC 850
      pattern: /\b(?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday)\s*,\s*)?\d{1,2}(?:\s+|-)(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)(?:\s+|-)\d{2}\s+\d{2}:\d{2}(?::\d{2})?(?:\s*(?:\b(?:(?:U|GM|[ECMT][DS])T|[A-Z])|[+-]\d{4}))?\b/,
      alias: 'number'
    }, {
      // ISO 8601
      pattern: /[+-]?\b(?:\d{4}-\d{2}-\d{2}(?:[ T]\d{2}:\d{2}(?::\d{2}(?:\.\d+)?)?)?|\d{2}:\d{2}(?::\d{2}(?:\.\d+)?)?)Z?/,
      alias: 'number'
    }],
    number: /\b(?:0x[0-9A-Fa-f]+|\d+(?:\.\d+)?(?:[Ee][+-]?\d+)?)(?:(?:min|sec|[mnµ]s|tick|microsecond|[dhms])\b)?|[+-]?\binf\b/,
    operator: /=>|[!=]~|[!=<>]=?|[-+*/%|]|\.\./,
    punctuation: /[()\[\]{},;.:]/
  };
}

/***/ }),

/***/ 4232:
/***/ ((module) => {



module.exports = latex;
latex.displayName = 'latex';
latex.aliases = ['tex', 'context'];

function latex(Prism) {
  ;

  (function (Prism) {
    var funcPattern = /\\(?:[^a-z()[\]]|[a-z*]+)/i;
    var insideEqu = {
      'equation-command': {
        pattern: funcPattern,
        alias: 'regex'
      }
    };
    Prism.languages.latex = {
      comment: /%.*/m,
      // the verbatim environment prints whitespace to the document
      cdata: {
        pattern: /(\\begin\{((?:verbatim|lstlisting)\*?)\})[\s\S]*?(?=\\end\{\2\})/,
        lookbehind: true
      },

      /*
       * equations can be between $$ $$ or $ $ or \( \) or \[ \]
       * (all are multiline)
       */
      equation: [{
        pattern: /\$\$(?:\\[\s\S]|[^\\$])+\$\$|\$(?:\\[\s\S]|[^\\$])+\$|\\\([\s\S]*?\\\)|\\\[[\s\S]*?\\\]/,
        inside: insideEqu,
        alias: 'string'
      }, {
        pattern: /(\\begin\{((?:equation|math|eqnarray|align|multline|gather)\*?)\})[\s\S]*?(?=\\end\{\2\})/,
        lookbehind: true,
        inside: insideEqu,
        alias: 'string'
      }],

      /*
       * arguments which are keywords or references are highlighted
       * as keywords
       */
      keyword: {
        pattern: /(\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\[[^\]]+\])?\{)[^}]+(?=\})/,
        lookbehind: true
      },
      url: {
        pattern: /(\\url\{)[^}]+(?=\})/,
        lookbehind: true
      },

      /*
       * section or chapter headlines are highlighted as bold so that
       * they stand out more
       */
      headline: {
        pattern: /(\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\*?(?:\[[^\]]+\])?\{)[^}]+(?=\})/,
        lookbehind: true,
        alias: 'class-name'
      },
      "function": {
        pattern: funcPattern,
        alias: 'selector'
      },
      punctuation: /[[\]{}&]/
    };
    Prism.languages.tex = Prism.languages.latex;
    Prism.languages.context = Prism.languages.latex;
  })(Prism);
}

/***/ }),

/***/ 4018:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorMarkupTemplating = __webpack_require__(8083);

var refractorPhp = __webpack_require__(391);

module.exports = latte;
latte.displayName = 'latte';
latte.aliases = [];

function latte(Prism) {
  Prism.register(refractorMarkupTemplating);
  Prism.register(refractorPhp);

  (function (Prism) {
    Prism.languages.latte = {
      comment: /^\{\*[\s\S]*/,
      ld: {
        pattern: /^\{(?:[=_]|\/?(?!\d|\w+\()\w+)?/,
        inside: {
          punctuation: /^\{\/?/,
          tag: {
            pattern: /.+/,
            alias: 'important'
          }
        }
      },
      rd: {
        pattern: /\}$/,
        inside: {
          punctuation: /.+/
        }
      },
      php: {
        pattern: /\S(?:[\s\S]*\S)?/,
        alias: 'language-php',
        inside: Prism.languages.php
      }
    };
    var markupLatte = Prism.languages.extend('markup', {});
    Prism.languages.insertBefore('inside', 'attr-value', {
      'n-attr': {
        pattern: /n:[\w-]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+))?/,
        inside: {
          'attr-name': {
            pattern: /^[^\s=]+/,
            alias: 'important'
          },
          'attr-value': {
            pattern: /=[\s\S]+/,
            inside: {
              punctuation: [/^=/, {
                pattern: /^(\s*)["']|["']$/,
                lookbehind: true
              }],
              php: {
                pattern: /\S(?:[\s\S]*\S)?/,
                inside: Prism.languages.php
              }
            }
          }
        }
      }
    }, markupLatte.tag);
    Prism.hooks.add('before-tokenize', function (env) {
      if (env.language !== 'latte') {
        return;
      }

      var lattePattern = /\{\*[\s\S]*?\*\}|\{[^'"\s{}*](?:[^"'/{}]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|\/\*(?:[^*]|\*(?!\/))*\*\/)*\}/g;
      Prism.languages['markup-templating'].buildPlaceholders(env, 'latte', lattePattern);
      env.grammar = markupLatte;
    });
    Prism.hooks.add('after-tokenize', function (env) {
      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'latte');
    });
  })(Prism);
}

/***/ }),

/***/ 5861:
/***/ ((module) => {



module.exports = less;
less.displayName = 'less';
less.aliases = [];

function less(Prism) {
  /* FIXME :
  :extend() is not handled specifically : its highlighting is buggy.
  Mixin usage must be inside a ruleset to be highlighted.
  At-rules (e.g. import) containing interpolations are buggy.
  Detached rulesets are highlighted as at-rules.
  A comment before a mixin usage prevents the latter to be properly highlighted.
  */
  Prism.languages.less = Prism.languages.extend('css', {
    comment: [/\/\*[\s\S]*?\*\//, {
      pattern: /(^|[^\\])\/\/.*/,
      lookbehind: true
    }],
    atrule: {
      pattern: /@[\w-](?:\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};\s]|\s+(?!\s))*?(?=\s*\{)/,
      inside: {
        punctuation: /[:()]/
      }
    },
    // selectors and mixins are considered the same
    selector: {
      pattern: /(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};@\s]|\s+(?!\s))*?(?=\s*\{)/,
      inside: {
        // mixin parameters
        variable: /@+[\w-]+/
      }
    },
    property: /(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/i,
    operator: /[+\-*\/]/
  });
  Prism.languages.insertBefore('less', 'property', {
    variable: [// Variable declaration (the colon must be consumed!)
    {
      pattern: /@[\w-]+\s*:/,
      inside: {
        punctuation: /:/
      }
    }, // Variable usage
    /@@?[\w-]+/],
    'mixin-usage': {
      pattern: /([{;]\s*)[.#](?!\d)[\w-].*?(?=[(;])/,
      lookbehind: true,
      alias: 'function'
    }
  });
}

/***/ }),

/***/ 849:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorScheme = __webpack_require__(2359);

module.exports = lilypond;
lilypond.displayName = 'lilypond';
lilypond.aliases = [];

function lilypond(Prism) {
  Prism.register(refractorScheme);

  (function (Prism) {
    var schemeExpression = /\((?:[^();"#\\]|\\[\s\S]|;.*(?!.)|"(?:[^"\\]|\\.)*"|#(?:\{(?:(?!#\})[\s\S])*#\}|[^{])|<expr>)*\)/.source; // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions
    // For some reason, this can't be 4

    var recursivenessLog2 = 5;

    for (var i = 0; i < recursivenessLog2; i++) {
      schemeExpression = schemeExpression.replace(/<expr>/g, function () {
        return schemeExpression;
      });
    }

    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\s\S]/.source);
    var lilypond = Prism.languages.lilypond = {
      comment: /%(?:(?!\{).*|\{[\s\S]*?%\})/,
      'embedded-scheme': {
        pattern: RegExp(/(^|[=\s])#(?:"(?:[^"\\]|\\.)*"|[^\s()"]*(?:[^\s()]|<expr>))/.source.replace(/<expr>/g, function () {
          return schemeExpression;
        }), 'm'),
        lookbehind: true,
        greedy: true,
        inside: {
          scheme: {
            pattern: /^(#)[\s\S]+$/,
            lookbehind: true,
            alias: 'language-scheme',
            inside: {
              'embedded-lilypond': {
                pattern: /#\{[\s\S]*?#\}/,
                greedy: true,
                inside: {
                  punctuation: /^#\{|#\}$/,
                  lilypond: {
                    pattern: /[\s\S]+/,
                    alias: 'language-lilypond',
                    inside: null // see below

                  }
                }
              },
              rest: Prism.languages.scheme
            }
          },
          punctuation: /#/
        }
      },
      string: {
        pattern: /"(?:[^"\\]|\\.)*"/,
        greedy: true
      },
      'class-name': {
        pattern: /(\\new\s+)[\w-]+/,
        lookbehind: true
      },
      keyword: {
        pattern: /\\[a-z][-\w]*/i,
        inside: {
          punctuation: /^\\/
        }
      },
      operator: /[=|]|<<|>>/,
      punctuation: {
        pattern: /(^|[a-z\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\d))|[_^]\.?|[.!])|[{}()[\]<>^~]|\\[()[\]<>\\!]|--|__/,
        lookbehind: true
      },
      number: /\b\d+(?:\/\d+)?\b/
    };
    lilypond['embedded-scheme'].inside['scheme'].inside['embedded-lilypond'].inside['lilypond'].inside = lilypond;
    Prism.languages.ly = lilypond;
  })(Prism);
}

/***/ }),

/***/ 3696:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorMarkupTemplating = __webpack_require__(8083);

module.exports = liquid;
liquid.displayName = 'liquid';
liquid.aliases = [];

function liquid(Prism) {
  Prism.register(refractorMarkupTemplating);
  Prism.languages.liquid = {
    comment: {
      pattern: /(^\{%\s*comment\s*%\})[\s\S]+(?=\{%\s*endcomment\s*%\}$)/,
      lookbehind: true
    },
    delimiter: {
      pattern: /^\{(?:\{\{|[%\{])-?|-?(?:\}\}|[%\}])\}$/,
      alias: 'punctuation'
    },
    string: {
      pattern: /"[^"]*"|'[^']*'/,
      greedy: true
    },
    keyword: /\b(?:as|assign|break|continue|cycle|decrement|echo|else|elsif|(?:end)?(?:capture|case|comment|for|form|if|paginate|style|raw|tablerow|unless)|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\b/,
    object: /\b(?:address|all_country_option_tags|article|block|blog|cart|checkout|collection|color|comment|country|country_option_tags|currency|current_page|current_tags|customer|customer_address|date|discount_allocation|discount_application|external_video|filter|filter_value|font|forloop|form|fulfillment|generic_file|gift_card|group|handle|image|line_item|link|linklist|localization|location|measurement|media|metafield|model|model_source|order|page|page_description|page_image|page_title|paginate|part|policy|product|product_option|recommendations|request|robots|routes|rule|script|search|section|selling_plan|selling_plan_allocation|selling_plan_group|shipping_method|shop|shop_locale|sitemap|store_availability|tablerow|tax_line|template|theme|transaction|unit_price_measurement|user_agent|variant|video|video_source)\b/,
    "function": [{
      pattern: /(\|\s*)\w+/,
      lookbehind: true,
      alias: 'filter'
    }, {
      // array functions
      pattern: /(\.\s*)(?:first|last|size)/,
      lookbehind: true
    }],
    "boolean": /\b(?:true|false|nil)\b/,
    range: {
      pattern: /\.\./,
      alias: 'operator'
    },
    // https://github.com/Shopify/liquid/blob/698f5e0d967423e013f6169d9111bd969bd78337/lib/liquid/lexer.rb#L21
    number: /\b\d+(?:\.\d+)?\b/,
    operator: /[!=]=|<>|[<>]=?|[|?:=-]|\b(?:and|or|contains(?=\s))\b/,
    punctuation: /[.,\[\]()]/,
    empty: {
      pattern: /\bempty\b/,
      alias: 'keyword'
    }
  };
  Prism.hooks.add('before-tokenize', function (env) {
    var liquidPattern = /\{%\s*comment\s*%\}[\s\S]*?\{%\s*endcomment\s*%\}|\{(?:%[\s\S]*?%|\{\{[\s\S]*?\}\}|\{[\s\S]*?\})\}/g;
    var insideRaw = false;
    Prism.languages['markup-templating'].buildPlaceholders(env, 'liquid', liquidPattern, function (match) {
      var tagMatch = /^\{%-?\s*(\w+)/.exec(match);

      if (tagMatch) {
        var tag = tagMatch[1];

        if (tag === 'raw' && !insideRaw) {
          insideRaw = true;
          return true;
        } else if (tag === 'endraw') {
          insideRaw = false;
          return true;
        }
      }

      return !insideRaw;
    });
  });
  Prism.hooks.add('after-tokenize', function (env) {
    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'liquid');
  });
}

/***/ }),

/***/ 7342:
/***/ ((module) => {



module.exports = lisp;
lisp.displayName = 'lisp';
lisp.aliases = [];

function lisp(Prism) {
  ;

  (function (Prism) {
    // Functions to construct regular expressions
    // simple form
    // e.g. (interactive ... or (interactive)
    function simple_form(name) {
      return RegExp('(\\()' + name + '(?=[\\s\\)])');
    } // booleans and numbers


    function primitive(pattern) {
      return RegExp('([\\s([])' + pattern + '(?=[\\s)])');
    } // Patterns in regular expressions
    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html
    // & and : are excluded as they are usually used for special purposes


    var symbol = '[-+*/~!@$%^=<>{}\\w]+'; // symbol starting with & used in function arguments

    var marker = '&' + symbol; // Open parenthesis for look-behind

    var par = '(\\()';
    var endpar = '(?=\\))'; // End the pattern with look-ahead space

    var space = '(?=\\s)';
    var language = {
      // Three or four semicolons are considered a heading.
      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html
      heading: {
        pattern: /;;;.*/,
        alias: ['comment', 'title']
      },
      comment: /;.*/,
      string: {
        pattern: /"(?:[^"\\]|\\.)*"/,
        greedy: true,
        inside: {
          argument: /[-A-Z]+(?=[.,\s])/,
          symbol: RegExp('`' + symbol + "'")
        }
      },
      'quoted-symbol': {
        pattern: RegExp("#?'" + symbol),
        alias: ['variable', 'symbol']
      },
      'lisp-property': {
        pattern: RegExp(':' + symbol),
        alias: 'property'
      },
      splice: {
        pattern: RegExp(',@?' + symbol),
        alias: ['symbol', 'variable']
      },
      keyword: [{
        pattern: RegExp(par + '(?:(?:lexical-)?let\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' + space),
        lookbehind: true
      }, {
        pattern: RegExp(par + '(?:for|do|collect|return|finally|append|concat|in|by)' + space),
        lookbehind: true
      }],
      declare: {
        pattern: simple_form('declare'),
        lookbehind: true,
        alias: 'keyword'
      },
      interactive: {
        pattern: simple_form('interactive'),
        lookbehind: true,
        alias: 'keyword'
      },
      "boolean": {
        pattern: primitive('(?:t|nil)'),
        lookbehind: true
      },
      number: {
        pattern: primitive('[-+]?\\d+(?:\\.\\d*)?'),
        lookbehind: true
      },
      defvar: {
        pattern: RegExp(par + 'def(?:var|const|custom|group)\\s+' + symbol),
        lookbehind: true,
        inside: {
          keyword: /^def[a-z]+/,
          variable: RegExp(symbol)
        }
      },
      defun: {
        pattern: RegExp(par + '(?:cl-)?(?:defun\\*?|defmacro)\\s+' + symbol + '\\s+\\([\\s\\S]*?\\)'),
        lookbehind: true,
        inside: {
          keyword: /^(?:cl-)?def\S+/,
          // See below, this property needs to be defined later so that it can
          // reference the language object.
          arguments: null,
          "function": {
            pattern: RegExp('(^\\s)' + symbol),
            lookbehind: true
          },
          punctuation: /[()]/
        }
      },
      lambda: {
        pattern: RegExp(par + 'lambda\\s+\\(\\s*(?:&?' + symbol + '(?:\\s+&?' + symbol + ')*\\s*)?\\)'),
        lookbehind: true,
        inside: {
          keyword: /^lambda/,
          // See below, this property needs to be defined later so that it can
          // reference the language object.
          arguments: null,
          punctuation: /[()]/
        }
      },
      car: {
        pattern: RegExp(par + symbol),
        lookbehind: true
      },
      punctuation: [// open paren, brackets, and close paren
      /(?:['`,]?\(|[)\[\]])/, // cons
      {
        pattern: /(\s)\.(?=\s)/,
        lookbehind: true
      }]
    };
    var arg = {
      'lisp-marker': RegExp(marker),
      rest: {
        argument: {
          pattern: RegExp(symbol),
          alias: 'variable'
        },
        varform: {
          pattern: RegExp(par + symbol + '\\s+\\S[\\s\\S]*' + endpar),
          lookbehind: true,
          inside: {
            string: language.string,
            "boolean": language["boolean"],
            number: language.number,
            symbol: language.symbol,
            punctuation: /[()]/
          }
        }
      }
    };
    var forms = '\\S+(?:\\s+\\S+)*';
    var arglist = {
      pattern: RegExp(par + '[\\s\\S]*' + endpar),
      lookbehind: true,
      inside: {
        'rest-vars': {
          pattern: RegExp('&(?:rest|body)\\s+' + forms),
          inside: arg
        },
        'other-marker-vars': {
          pattern: RegExp('&(?:optional|aux)\\s+' + forms),
          inside: arg
        },
        keys: {
          pattern: RegExp('&key\\s+' + forms + '(?:\\s+&allow-other-keys)?'),
          inside: arg
        },
        argument: {
          pattern: RegExp(symbol),
          alias: 'variable'
        },
        punctuation: /[()]/
      }
    };
    language['lambda'].inside.arguments = arglist;
    language['defun'].inside.arguments = Prism.util.clone(arglist);
    language['defun'].inside.arguments.inside.sublist = arglist;
    Prism.languages.lisp = language;
    Prism.languages.elisp = language;
    Prism.languages.emacs = language;
    Prism.languages['emacs-lisp'] = language;
  })(Prism);
}

/***/ }),

/***/ 9374:
/***/ ((module) => {



module.exports = livescript;
livescript.displayName = 'livescript';
livescript.aliases = [];

function livescript(Prism) {
  Prism.languages.livescript = {
    comment: [{
      pattern: /(^|[^\\])\/\*[\s\S]*?\*\//,
      lookbehind: true
    }, {
      pattern: /(^|[^\\])#.*/,
      lookbehind: true
    }],
    'interpolated-string': {
      /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern
       * forcing it to match """-quoted string when it would otherwise match "-quoted first. */
      pattern: /(^|[^"])("""|")(?:\\[\s\S]|(?!\2)[^\\])*\2(?!")/,
      lookbehind: true,
      greedy: true,
      inside: {
        variable: {
          pattern: /(^|[^\\])#[a-z_](?:-?[a-z]|[\d_])*/m,
          lookbehind: true
        },
        interpolation: {
          pattern: /(^|[^\\])#\{[^}]+\}/m,
          lookbehind: true,
          inside: {
            'interpolation-punctuation': {
              pattern: /^#\{|\}$/,
              alias: 'variable'
            } // See rest below

          }
        },
        string: /[\s\S]+/
      }
    },
    string: [{
      pattern: /('''|')(?:\\[\s\S]|(?!\1)[^\\])*\1/,
      greedy: true
    }, {
      pattern: /<\[[\s\S]*?\]>/,
      greedy: true
    }, /\\[^\s,;\])}]+/],
    regex: [{
      pattern: /\/\/(?:\[[^\r\n\]]*\]|\\.|(?!\/\/)[^\\\[])+\/\/[gimyu]{0,5}/,
      greedy: true,
      inside: {
        comment: {
          pattern: /(^|[^\\])#.*/,
          lookbehind: true
        }
      }
    }, {
      pattern: /\/(?:\[[^\r\n\]]*\]|\\.|[^/\\\r\n\[])+\/[gimyu]{0,5}/,
      greedy: true
    }],
    keyword: {
      pattern: /(^|(?!-).)\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\b/m,
      lookbehind: true
    },
    'keyword-operator': {
      pattern: /(^|[^-])\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?:nt| not)?|not|of|or|til|to|typeof|with|xor)(?!-)\b)/m,
      lookbehind: true,
      alias: 'operator'
    },
    "boolean": {
      pattern: /(^|[^-])\b(?:false|no|off|on|true|yes)(?!-)\b/m,
      lookbehind: true
    },
    argument: {
      // Don't match .&. nor &&
      pattern: /(^|(?!\.&\.)[^&])&(?!&)\d*/m,
      lookbehind: true,
      alias: 'variable'
    },
    number: /\b(?:\d+~[\da-z]+|\d[\d_]*(?:\.\d[\d_]*)?(?:[a-z]\w*)?)/i,
    identifier: /[a-z_](?:-?[a-z]|[\d_])*/i,
    operator: [// Spaced .
    {
      pattern: /( )\.(?= )/,
      lookbehind: true
    }, // Full list, in order:
    // .= .~ .. ...
    // .&. .^. .<<. .>>. .>>>.
    // := :: ::=
    // &&
    // || |>
    // < << <<< <<<<
    // <- <-- <-! <--!
    // <~ <~~ <~! <~~!
    // <| <= <?
    // > >> >= >?
    // - -- -> -->
    // + ++
    // @ @@
    // % %%
    // * **
    // ! != !~=
    // !~> !~~>
    // !-> !-->
    // ~ ~> ~~> ~=
    // = ==
    // ^ ^^
    // / ?
    /\.(?:[=~]|\.\.?)|\.(?:[&|^]|<<|>>>?)\.|:(?:=|:=?)|&&|\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\+\+?|@@?|%%?|\*\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\^\^?|[\/?]/],
    punctuation: /[(){}\[\]|.,:;`]/
  };
  Prism.languages.livescript['interpolated-string'].inside['interpolation'].inside.rest = Prism.languages.livescript;
}

/***/ }),

/***/ 1934:
/***/ ((module) => {



module.exports = llvm;
llvm.displayName = 'llvm';
llvm.aliases = [];

function llvm(Prism) {
  ;

  (function (Prism) {
    Prism.languages.llvm = {
      comment: /;.*/,
      string: {
        pattern: /"[^"]*"/,
        greedy: true
      },
      "boolean": /\b(?:true|false)\b/,
      variable: /[%@!#](?:(?!\d)(?:[-$.\w]|\\[a-f\d]{2})+|\d+)/i,
      label: /(?!\d)(?:[-$.\w]|\\[a-f\d]{2})+:/i,
      type: {
        pattern: /\b(?:double|float|fp128|half|i[1-9]\d*|label|metadata|ppc_fp128|token|void|x86_fp80|x86_mmx)\b/,
        alias: 'class-name'
      },
      keyword: /\b[a-z_][a-z_0-9]*\b/,
      number: /[+-]?\b\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\b|\b0x[\dA-Fa-f]+\b|\b0xK[\dA-Fa-f]{20}\b|\b0x[ML][\dA-Fa-f]{32}\b|\b0xH[\dA-Fa-f]{4}\b/,
      punctuation: /[{}[\];(),.!*=<>]/
    };
  })(Prism);
}

/***/ }),

/***/ 2:
/***/ ((module) => {



module.exports = log;
log.displayName = 'log';
log.aliases = [];

function log(Prism) {
  // This is a language definition for generic log files.
  // Since there is no one log format, this language definition has to support all formats to some degree.
  //
  // Based on https://github.com/MTDL9/vim-log-highlighting
  Prism.languages.log = {
    string: {
      // Single-quoted strings must not be confused with plain text. E.g. Can't isn't Susan's Chris' toy
      pattern: /"(?:[^"\\\r\n]|\\.)*"|'(?![st] | \w)(?:[^'\\\r\n]|\\.)*'/,
      greedy: true
    },
    exception: {
      pattern: /(^|[^\w.])[a-z][\w.]*(?:Exception|Error):.*(?:(?:\r\n?|\n)[ \t]*(?:at[ \t].+|\.{3}.*|Caused by:.*))+(?:(?:\r\n?|\n)[ \t]*\.\.\. .*)?/,
      lookbehind: true,
      greedy: true,
      alias: ['javastacktrace', 'language-javastacktrace'],
      inside: Prism.languages['javastacktrace'] || {
        keyword: /\bat\b/,
        "function": /[a-z_][\w$]*(?=\()/,
        punctuation: /[.:()]/
      }
    },
    level: [{
      pattern: /\b(?:ALERT|CRIT|CRITICAL|EMERG|EMERGENCY|ERR|ERROR|FAILURE|FATAL|SEVERE)\b/,
      alias: ['error', 'important']
    }, {
      pattern: /\b(?:WARN|WARNING|WRN)\b/,
      alias: ['warning', 'important']
    }, {
      pattern: /\b(?:DISPLAY|INF|INFO|NOTICE|STATUS)\b/,
      alias: ['info', 'keyword']
    }, {
      pattern: /\b(?:DBG|DEBUG|FINE)\b/,
      alias: ['debug', 'keyword']
    }, {
      pattern: /\b(?:FINER|FINEST|TRACE|TRC|VERBOSE|VRB)\b/,
      alias: ['trace', 'comment']
    }],
    property: {
      pattern: /((?:^|[\]|])[ \t]*)[a-z_](?:[\w-]|\b\/\b)*(?:[. ]\(?\w(?:[\w-]|\b\/\b)*\)?)*:(?=\s)/im,
      lookbehind: true
    },
    separator: {
      pattern: /(^|[^-+])-{3,}|={3,}|\*{3,}|- - /m,
      lookbehind: true,
      alias: 'comment'
    },
    url: /\b(?:https?|ftp|file):\/\/[^\s|,;'"]*[^\s|,;'">.]/,
    email: {
      pattern: /(^|\s)[-\w+.]+@[a-z][a-z0-9-]*(?:\.[a-z][a-z0-9-]*)+(?=\s)/,
      lookbehind: true,
      alias: 'url'
    },
    'ip-address': {
      pattern: /\b(?:\d{1,3}(?:\.\d{1,3}){3})\b/i,
      alias: 'constant'
    },
    'mac-address': {
      pattern: /\b[a-f0-9]{2}(?::[a-f0-9]{2}){5}\b/i,
      alias: 'constant'
    },
    domain: {
      pattern: /(^|\s)[a-z][a-z0-9-]*(?:\.[a-z][a-z0-9-]*)*\.[a-z][a-z0-9-]+(?=\s)/,
      lookbehind: true,
      alias: 'constant'
    },
    uuid: {
      pattern: /\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\b/i,
      alias: 'constant'
    },
    hash: {
      pattern: /\b(?:[a-f0-9]{32}){1,2}\b/i,
      alias: 'constant'
    },
    'file-path': {
      pattern: /\b[a-z]:[\\/][^\s|,;:(){}\[\]"']+|(^|[\s:\[\](>|])\.{0,2}\/\w[^\s|,;:(){}\[\]"']*/i,
      lookbehind: true,
      greedy: true,
      alias: 'string'
    },
    date: {
      pattern: RegExp(/\b\d{4}[-/]\d{2}[-/]\d{2}(?:T(?=\d{1,2}:)|(?=\s\d{1,2}:))/.source + '|' + /\b\d{1,4}[-/ ](?:\d{1,2}|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[-/ ]\d{2,4}T?\b/.source + '|' + /\b(?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)(?:\s{1,2}(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))?|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s{1,2}\d{1,2}\b/.source, 'i'),
      alias: 'number'
    },
    time: {
      pattern: /\b\d{1,2}:\d{1,2}:\d{1,2}(?:[.,:]\d+)?(?:\s?[+-]\d{2}:?\d{2}|Z)?\b/,
      alias: 'number'
    },
    "boolean": /\b(?:true|false|null)\b/i,
    number: {
      pattern: /(^|[^.\w])(?:0x[a-f0-9]+|0o[0-7]+|0b[01]+|v?\d[\da-f]*(?:\.\d+)*(?:e[+-]?\d+)?[a-z]{0,3}\b)\b(?!\.\w)/i,
      lookbehind: true
    },
    operator: /[;:?<=>~/@!$%&+\-|^(){}*#]/,
    punctuation: /[\[\].,]/
  };
}

/***/ }),

/***/ 3764:
/***/ ((module) => {



module.exports = lolcode;
lolcode.displayName = 'lolcode';
lolcode.aliases = [];

function lolcode(Prism) {
  Prism.languages.lolcode = {
    comment: [/\bOBTW\s[\s\S]*?\sTLDR\b/, /\bBTW.+/],
    string: {
      pattern: /"(?::.|[^":])*"/,
      inside: {
        variable: /:\{[^}]+\}/,
        symbol: [/:\([a-f\d]+\)/i, /:\[[^\]]+\]/, /:[)>o":]/]
      },
      greedy: true
    },
    number: /(?:\B-)?(?:\b\d+(?:\.\d*)?|\B\.\d+)/,
    symbol: {
      pattern: /(^|\s)(?:A )?(?:YARN|NUMBR|NUMBAR|TROOF|BUKKIT|NOOB)(?=\s|,|$)/,
      lookbehind: true,
      inside: {
        keyword: /A(?=\s)/
      }
    },
    label: {
      pattern: /((?:^|\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\w*/,
      lookbehind: true,
      alias: 'string'
    },
    "function": {
      pattern: /((?:^|\s)(?:I IZ|HOW IZ I|IZ) )[a-zA-Z]\w*/,
      lookbehind: true
    },
    keyword: [{
      pattern: /(^|\s)(?:O HAI IM|KTHX|HAI|KTHXBYE|I HAS A|ITZ(?: A)?|R|AN|MKAY|SMOOSH|MAEK|IS NOW(?: A)?|VISIBLE|GIMMEH|O RLY\?|YA RLY|NO WAI|OIC|MEBBE|WTF\?|OMG|OMGWTF|GTFO|IM IN YR|IM OUTTA YR|FOUND YR|YR|TIL|WILE|UPPIN|NERFIN|I IZ|HOW IZ I|IF U SAY SO|SRS|HAS A|LIEK(?: A)?|IZ)(?=\s|,|$)/,
      lookbehind: true
    }, /'Z(?=\s|,|$)/],
    "boolean": {
      pattern: /(^|\s)(?:WIN|FAIL)(?=\s|,|$)/,
      lookbehind: true
    },
    variable: {
      pattern: /(^|\s)IT(?=\s|,|$)/,
      lookbehind: true
    },
    operator: {
      pattern: /(^|\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:SUM|DIFF|PRODUKT|QUOSHUNT|MOD|BIGGR|SMALLR|BOTH|EITHER|WON|ALL|ANY) OF)(?=\s|,|$)/,
      lookbehind: true
    },
    punctuation: /\.{3}|…|,|!/
  };
}

/***/ }),

/***/ 8281:
/***/ ((module) => {



module.exports = lua;
lua.displayName = 'lua';
lua.aliases = [];

function lua(Prism) {
  Prism.languages.lua = {
    comment: /^#!.+|--(?:\[(=*)\[[\s\S]*?\]\1\]|.*)/m,
    // \z may be used to skip the following space
    string: {
      pattern: /(["'])(?:(?!\1)[^\\\r\n]|\\z(?:\r\n|\s)|\\(?:\r\n|[^z]))*\1|\[(=*)\[[\s\S]*?\]\2\]/,
      greedy: true
    },
    number: /\b0x[a-f\d]+(?:\.[a-f\d]*)?(?:p[+-]?\d+)?\b|\b\d+(?:\.\B|(?:\.\d*)?(?:e[+-]?\d+)?\b)|\B\.\d+(?:e[+-]?\d+)?\b/i,
    keyword: /\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\b/,
    "function": /(?!\d)\w+(?=\s*(?:[({]))/,
    operator: [/[-+*%^&|#]|\/\/?|<[<=]?|>[>=]?|[=~]=?/, {
      // Match ".." but don't break "..."
      pattern: /(^|[^.])\.\.(?!\.)/,
      lookbehind: true
    }],
    punctuation: /[\[\](){},;]|\.+|:+/
  };
}

/***/ }),

/***/ 2541:
/***/ ((module) => {



module.exports = magma;
magma.displayName = 'magma';
magma.aliases = [];

function magma(Prism) {
  Prism.languages.magma = {
    output: {
      pattern: /^(>.*(?:\r(?:\n|(?!\n))|\n))(?!>)(?:.+|(?:\r(?:\n|(?!\n))|\n)(?!>).*)(?:(?:\r(?:\n|(?!\n))|\n)(?!>).*)*/m,
      lookbehind: true,
      greedy: true
    },
    comment: {
      pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
      greedy: true
    },
    string: {
      pattern: /(^|[^\\"])"(?:[^\r\n\\"]|\\.)*"/,
      lookbehind: true,
      greedy: true
    },
    // http://magma.maths.usyd.edu.au/magma/handbook/text/82
    keyword: /\b(?:_|adj|and|assert|assert2|assert3|assigned|break|by|case|cat|catch|clear|cmpeq|cmpne|continue|declare|default|delete|diff|div|do|elif|else|end|eq|error|eval|exists|exit|for|forall|forward|fprintf|freeze|function|ge|gt|if|iload|import|in|intrinsic|is|join|le|load|local|lt|meet|mod|ne|not|notadj|notin|notsubset|or|print|printf|procedure|quit|random|read|readi|repeat|require|requirege|requirerange|restore|return|save|sdiff|select|subset|then|time|to|try|until|vprint|vprintf|vtime|when|where|while|xor)\b/,
    "boolean": /\b(?:false|true)\b/,
    generator: {
      pattern: /\b[a-z_]\w*(?=\s*<)/i,
      alias: 'class-name'
    },
    "function": /\b[a-z_]\w*(?=\s*\()/i,
    number: {
      pattern: /(^|[^\w.]|\.\.)(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?(?:_[a-z]?)?(?=$|[^\w.]|\.\.)/,
      lookbehind: true
    },
    operator: /->|[-+*/^~!|#=]|:=|\.\./,
    punctuation: /[()[\]{}<>,;.:]/
  };
}

/***/ }),

/***/ 9550:
/***/ ((module) => {



module.exports = makefile;
makefile.displayName = 'makefile';
makefile.aliases = [];

function makefile(Prism) {
  Prism.languages.makefile = {
    comment: {
      pattern: /(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,
      lookbehind: true
    },
    string: {
      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    // Built-in target names
    builtin: /\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,
    // Targets
    symbol: {
      pattern: /^(?:[^:=\s]|[ \t]+(?![\s:]))+(?=\s*:(?!=))/m,
      inside: {
        variable: /\$+(?:(?!\$)[^(){}:#=\s]+|(?=[({]))/
      }
    },
    variable: /\$+(?:(?!\$)[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,
    keyword: [// Directives
    /-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/, // Functions
    {
      pattern: /(\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \t])/,
      lookbehind: true
    }],
    operator: /(?:::|[?:+!])?=|[|@]/,
    punctuation: /[:;(){}]/
  };
}

/***/ }),

/***/ 6545:
/***/ ((module) => {



module.exports = markdown;
markdown.displayName = 'markdown';
markdown.aliases = ['md'];

function markdown(Prism) {
  ;

  (function (Prism) {
    // Allow only one line break
    var inner = /(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;
    /**
     * This function is intended for the creation of the bold or italic pattern.
     *
     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.
     *
     * _Note:_ Keep in mind that this adds a capturing group.
     *
     * @param {string} pattern
     * @returns {RegExp}
     */

    function createInline(pattern) {
      pattern = pattern.replace(/<inner>/g, function () {
        return inner;
      });
      return RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + '(?:' + pattern + ')');
    }

    var tableCell = /(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source;
    var tableRow = /\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g, function () {
      return tableCell;
    });
    var tableLine = /\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;
    Prism.languages.markdown = Prism.languages.extend('markup', {});
    Prism.languages.insertBefore('markdown', 'prolog', {
      'front-matter-block': {
        pattern: /(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,
        lookbehind: true,
        greedy: true,
        inside: {
          punctuation: /^---|---$/,
          'font-matter': {
            pattern: /\S+(?:\s+\S+)*/,
            alias: ['yaml', 'language-yaml'],
            inside: Prism.languages.yaml
          }
        }
      },
      blockquote: {
        // > ...
        pattern: /^>(?:[\t ]*>)*/m,
        alias: 'punctuation'
      },
      table: {
        pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),
        inside: {
          'table-data-rows': {
            pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),
            lookbehind: true,
            inside: {
              'table-data': {
                pattern: RegExp(tableCell),
                inside: Prism.languages.markdown
              },
              punctuation: /\|/
            }
          },
          'table-line': {
            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),
            lookbehind: true,
            inside: {
              punctuation: /\||:?-{3,}:?/
            }
          },
          'table-header-row': {
            pattern: RegExp('^' + tableRow + '$'),
            inside: {
              'table-header': {
                pattern: RegExp(tableCell),
                alias: 'important',
                inside: Prism.languages.markdown
              },
              punctuation: /\|/
            }
          }
        }
      },
      code: [{
        // Prefixed by 4 spaces or 1 tab and preceded by an empty line
        pattern: /((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,
        lookbehind: true,
        alias: 'keyword'
      }, {
        // ```optional language
        // code block
        // ```
        pattern: /^```[\s\S]*?^```$/m,
        greedy: true,
        inside: {
          'code-block': {
            pattern: /^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,
            lookbehind: true
          },
          'code-language': {
            pattern: /^(```).+/,
            lookbehind: true
          },
          punctuation: /```/
        }
      }],
      title: [{
        // title 1
        // =======
        // title 2
        // -------
        pattern: /\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,
        alias: 'important',
        inside: {
          punctuation: /==+$|--+$/
        }
      }, {
        // # title 1
        // ###### title 6
        pattern: /(^\s*)#.+/m,
        lookbehind: true,
        alias: 'important',
        inside: {
          punctuation: /^#+|#+$/
        }
      }],
      hr: {
        // ***
        // ---
        // * * *
        // -----------
        pattern: /(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,
        lookbehind: true,
        alias: 'punctuation'
      },
      list: {
        // * item
        // + item
        // - item
        // 1. item
        pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,
        lookbehind: true,
        alias: 'punctuation'
      },
      'url-reference': {
        // [id]: http://example.com "Optional title"
        // [id]: http://example.com 'Optional title'
        // [id]: http://example.com (Optional title)
        // [id]: <http://example.com> "Optional title"
        pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,
        inside: {
          variable: {
            pattern: /^(!?\[)[^\]]+/,
            lookbehind: true
          },
          string: /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,
          punctuation: /^[\[\]!:]|[<>]/
        },
        alias: 'url'
      },
      bold: {
        // **strong**
        // __strong__
        // allow one nested instance of italic text using the same delimiter
        pattern: createInline(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),
        lookbehind: true,
        greedy: true,
        inside: {
          content: {
            pattern: /(^..)[\s\S]+(?=..$)/,
            lookbehind: true,
            inside: {} // see below

          },
          punctuation: /\*\*|__/
        }
      },
      italic: {
        // *em*
        // _em_
        // allow one nested instance of bold text using the same delimiter
        pattern: createInline(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),
        lookbehind: true,
        greedy: true,
        inside: {
          content: {
            pattern: /(^.)[\s\S]+(?=.$)/,
            lookbehind: true,
            inside: {} // see below

          },
          punctuation: /[*_]/
        }
      },
      strike: {
        // ~~strike through~~
        // ~strike~
        // eslint-disable-next-line regexp/strict
        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\2/.source),
        lookbehind: true,
        greedy: true,
        inside: {
          content: {
            pattern: /(^~~?)[\s\S]+(?=\1$)/,
            lookbehind: true,
            inside: {} // see below

          },
          punctuation: /~~?/
        }
      },
      'code-snippet': {
        // `code`
        // ``code``
        pattern: /(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,
        lookbehind: true,
        greedy: true,
        alias: ['code', 'keyword']
      },
      url: {
        // [example](http://example.com "Optional title")
        // [example][id]
        // [example] [id]
        pattern: createInline(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),
        lookbehind: true,
        greedy: true,
        inside: {
          operator: /^!/,
          content: {
            pattern: /(^\[)[^\]]+(?=\])/,
            lookbehind: true,
            inside: {} // see below

          },
          variable: {
            pattern: /(^\][ \t]?\[)[^\]]+(?=\]$)/,
            lookbehind: true
          },
          url: {
            pattern: /(^\]\()[^\s)]+/,
            lookbehind: true
          },
          string: {
            pattern: /(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,
            lookbehind: true
          }
        }
      }
    });
    ['url', 'bold', 'italic', 'strike'].forEach(function (token) {
      ;
      ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {
        if (token !== inside) {
          Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];
        }
      });
    });
    Prism.hooks.add('after-tokenize', function (env) {
      if (env.language !== 'markdown' && env.language !== 'md') {
        return;
      }

      function walkTokens(tokens) {
        if (!tokens || typeof tokens === 'string') {
          return;
        }

        for (var i = 0, l = tokens.length; i < l; i++) {
          var token = tokens[i];

          if (token.type !== 'code') {
            walkTokens(token.content);
            continue;
          }
          /*
           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token
           * is optional. But the grammar is defined so that there is only one case we have to handle:
           *
           * token.content = [
           *     <span class="punctuation">```</span>,
           *     <span class="code-language">xxxx</span>,
           *     '\n', // exactly one new lines (\r or \n or \r\n)
           *     <span class="code-block">...</span>,
           *     '\n', // exactly one new lines again
           *     <span class="punctuation">```</span>
           * ];
           */


          var codeLang = token.content[1];
          var codeBlock = token.content[3];

          if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {
            // this might be a language that Prism does not support
            // do some replacements to support C++, C#, and F#
            var lang = codeLang.content.replace(/\b#/g, 'sharp').replace(/\b\+\+/g, 'pp'); // only use the first word

            lang = (/[a-z][\w-]*/i.exec(lang) || [''])[0].toLowerCase();
            var alias = 'language-' + lang; // add alias

            if (!codeBlock.alias) {
              codeBlock.alias = [alias];
            } else if (typeof codeBlock.alias === 'string') {
              codeBlock.alias = [codeBlock.alias, alias];
            } else {
              codeBlock.alias.push(alias);
            }
          }
        }
      }

      walkTokens(env.tokens);
    });
    Prism.hooks.add('wrap', function (env) {
      if (env.type !== 'code-block') {
        return;
      }

      var codeLang = '';

      for (var i = 0, l = env.classes.length; i < l; i++) {
        var cls = env.classes[i];
        var match = /language-(.+)/.exec(cls);

        if (match) {
          codeLang = match[1];
          break;
        }
      }

      var grammar = Prism.languages[codeLang];

      if (!grammar) {
        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {
          var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);
          env.attributes['id'] = id;
          Prism.plugins.autoloader.loadLanguages(codeLang, function () {
            var ele = document.getElementById(id);

            if (ele) {
              ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);
            }
          });
        }
      } else {
        env.content = Prism.highlight(textContent(env.content.value), grammar, codeLang);
      }
    });
    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');
    /**
     * A list of known entity names.
     *
     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.
     *
     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}
     */

    var KNOWN_ENTITY_NAMES = {
      amp: '&',
      lt: '<',
      gt: '>',
      quot: '"'
    }; // IE 11 doesn't support `String.fromCodePoint`

    var fromCodePoint = String.fromCodePoint || String.fromCharCode;
    /**
     * Returns the text content of a given HTML source code string.
     *
     * @param {string} html
     * @returns {string}
     */

    function textContent(html) {
      // remove all tags
      var text = html.replace(tagPattern, ''); // decode known entities

      text = text.replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi, function (m, code) {
        code = code.toLowerCase();

        if (code[0] === '#') {
          var value;

          if (code[1] === 'x') {
            value = parseInt(code.slice(2), 16);
          } else {
            value = Number(code.slice(1));
          }

          return fromCodePoint(value);
        } else {
          var known = KNOWN_ENTITY_NAMES[code];

          if (known) {
            return known;
          } // unable to decode


          return m;
        }
      });
      return text;
    }

    Prism.languages.md = Prism.languages.markdown;
  })(Prism);
}

/***/ }),

/***/ 8083:
/***/ ((module) => {



module.exports = markupTemplating;
markupTemplating.displayName = 'markupTemplating';
markupTemplating.aliases = [];

function markupTemplating(Prism) {
  ;

  (function (Prism) {
    /**
     * Returns the placeholder for the given language id and index.
     *
     * @param {string} language
     * @param {string|number} index
     * @returns {string}
     */
    function getPlaceholder(language, index) {
      return '___' + language.toUpperCase() + index + '___';
    }

    Object.defineProperties(Prism.languages['markup-templating'] = {}, {
      buildPlaceholders: {
        /**
         * Tokenize all inline templating expressions matching `placeholderPattern`.
         *
         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns
         * `true` will be replaced.
         *
         * @param {object} env The environment of the `before-tokenize` hook.
         * @param {string} language The language id.
         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.
         * @param {(match: string) => boolean} [replaceFilter]
         */
        value: function value(env, language, placeholderPattern, replaceFilter) {
          if (env.language !== language) {
            return;
          }

          var tokenStack = env.tokenStack = [];
          env.code = env.code.replace(placeholderPattern, function (match) {
            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {
              return match;
            }

            var i = tokenStack.length;
            var placeholder; // Check for existing strings

            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {
              ++i;
            } // Create a sparse array


            tokenStack[i] = match;
            return placeholder;
          }); // Switch the grammar to markup

          env.grammar = Prism.languages.markup;
        }
      },
      tokenizePlaceholders: {
        /**
         * Replace placeholders with proper tokens after tokenizing.
         *
         * @param {object} env The environment of the `after-tokenize` hook.
         * @param {string} language The language id.
         */
        value: function value(env, language) {
          if (env.language !== language || !env.tokenStack) {
            return;
          } // Switch the grammar back


          env.grammar = Prism.languages[language];
          var j = 0;
          var keys = Object.keys(env.tokenStack);

          function walkTokens(tokens) {
            for (var i = 0; i < tokens.length; i++) {
              // all placeholders are replaced already
              if (j >= keys.length) {
                break;
              }

              var token = tokens[i];

              if (typeof token === 'string' || token.content && typeof token.content === 'string') {
                var k = keys[j];
                var t = env.tokenStack[k];
                var s = typeof token === 'string' ? token : token.content;
                var placeholder = getPlaceholder(language, k);
                var index = s.indexOf(placeholder);

                if (index > -1) {
                  ++j;
                  var before = s.substring(0, index);
                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);
                  var after = s.substring(index + placeholder.length);
                  var replacement = [];

                  if (before) {
                    replacement.push.apply(replacement, walkTokens([before]));
                  }

                  replacement.push(middle);

                  if (after) {
                    replacement.push.apply(replacement, walkTokens([after]));
                  }

                  if (typeof token === 'string') {
                    tokens.splice.apply(tokens, [i, 1].concat(replacement));
                  } else {
                    token.content = replacement;
                  }
                }
              } else if (token.content
              /* && typeof token.content !== 'string' */
              ) {
                walkTokens(token.content);
              }
            }

            return tokens;
          }

          walkTokens(env.tokens);
        }
      }
    });
  })(Prism);
}

/***/ }),

/***/ 4876:
/***/ ((module) => {



module.exports = markup;
markup.displayName = 'markup';
markup.aliases = ['html', 'mathml', 'svg', 'xml', 'ssml', 'atom', 'rss'];

function markup(Prism) {
  Prism.languages.markup = {
    comment: {
      pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
      greedy: true
    },
    prolog: {
      pattern: /<\?[\s\S]+?\?>/,
      greedy: true
    },
    doctype: {
      // https://www.w3.org/TR/xml/#NT-doctypedecl
      pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
      greedy: true,
      inside: {
        'internal-subset': {
          pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
          lookbehind: true,
          greedy: true,
          inside: null // see below

        },
        string: {
          pattern: /"[^"]*"|'[^']*'/,
          greedy: true
        },
        punctuation: /^<!|>$|[[\]]/,
        'doctype-tag': /^DOCTYPE/i,
        name: /[^\s<>'"]+/
      }
    },
    cdata: {
      pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
      greedy: true
    },
    tag: {
      pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
      greedy: true,
      inside: {
        tag: {
          pattern: /^<\/?[^\s>\/]+/,
          inside: {
            punctuation: /^<\/?/,
            namespace: /^[^\s>\/:]+:/
          }
        },
        'special-attr': [],
        'attr-value': {
          pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
          inside: {
            punctuation: [{
              pattern: /^=/,
              alias: 'attr-equals'
            }, /"|'/]
          }
        },
        punctuation: /\/?>/,
        'attr-name': {
          pattern: /[^\s>\/]+/,
          inside: {
            namespace: /^[^\s>\/:]+:/
          }
        }
      }
    },
    entity: [{
      pattern: /&[\da-z]{1,8};/i,
      alias: 'named-entity'
    }, /&#x?[\da-f]{1,8};/i]
  };
  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];
  Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov

  Prism.hooks.add('wrap', function (env) {
    if (env.type === 'entity') {
      env.attributes['title'] = env.content.value.replace(/&amp;/, '&');
    }
  });
  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
    /**
     * Adds an inlined language to markup.
     *
     * An example of an inlined language is CSS with `<style>` tags.
     *
     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
     * case insensitive.
     * @param {string} lang The language key.
     * @example
     * addInlined('style', 'css');
     */
    value: function addInlined(tagName, lang) {
      var includedCdataInside = {};
      includedCdataInside['language-' + lang] = {
        pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
        lookbehind: true,
        inside: Prism.languages[lang]
      };
      includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;
      var inside = {
        'included-cdata': {
          pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
          inside: includedCdataInside
        }
      };
      inside['language-' + lang] = {
        pattern: /[\s\S]+/,
        inside: Prism.languages[lang]
      };
      var def = {};
      def[tagName] = {
        pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () {
          return tagName;
        }), 'i'),
        lookbehind: true,
        greedy: true,
        inside: inside
      };
      Prism.languages.insertBefore('markup', 'cdata', def);
    }
  });
  Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
    /**
     * Adds an pattern to highlight languages embedded in HTML attributes.
     *
     * An example of an inlined language is CSS with `style` attributes.
     *
     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
     * case insensitive.
     * @param {string} lang The language key.
     * @example
     * addAttribute('style', 'css');
     */
    value: function value(attrName, lang) {
      Prism.languages.markup.tag.inside['special-attr'].push({
        pattern: RegExp(/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source, 'i'),
        lookbehind: true,
        inside: {
          'attr-name': /^[^\s=]+/,
          'attr-value': {
            pattern: /=[\s\S]+/,
            inside: {
              value: {
                pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
                lookbehind: true,
                alias: [lang, 'language-' + lang],
                inside: Prism.languages[lang]
              },
              punctuation: [{
                pattern: /^=/,
                alias: 'attr-equals'
              }, /"|'/]
            }
          }
        }
      });
    }
  });
  Prism.languages.html = Prism.languages.markup;
  Prism.languages.mathml = Prism.languages.markup;
  Prism.languages.svg = Prism.languages.markup;
  Prism.languages.xml = Prism.languages.extend('markup', {});
  Prism.languages.ssml = Prism.languages.xml;
  Prism.languages.atom = Prism.languages.xml;
  Prism.languages.rss = Prism.languages.xml;
}

/***/ }),

/***/ 5394:
/***/ ((module) => {



module.exports = matlab;
matlab.displayName = 'matlab';
matlab.aliases = [];

function matlab(Prism) {
  Prism.languages.matlab = {
    comment: [/%\{[\s\S]*?\}%/, /%.+/],
    string: {
      pattern: /\B'(?:''|[^'\r\n])*'/,
      greedy: true
    },
    // FIXME We could handle imaginary numbers as a whole
    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[eE][+-]?\d+)?(?:[ij])?|\b[ij]\b/,
    keyword: /\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\b/,
    "function": /\b(?!\d)\w+(?=\s*\()/,
    operator: /\.?[*^\/\\']|[+\-:@]|[<>=~]=?|&&?|\|\|?/,
    punctuation: /\.{3}|[.,;\[\](){}!]/
  };
}

/***/ }),

/***/ 4543:
/***/ ((module) => {



module.exports = maxscript;
maxscript.displayName = 'maxscript';
maxscript.aliases = [];

function maxscript(Prism) {
  Prism.languages.maxscript = {
    comment: {
      pattern: /\/\*[\s\S]*?(?:\*\/|$)|--.*/,
      greedy: true
    },
    string: {
      pattern: /(^|[^"\\@])(?:"(?:[^"\\]|\\[\s\S])*"|@"[^"]*")/,
      lookbehind: true,
      greedy: true
    },
    path: {
      pattern: /\$(?:[\w/\\.*?]|'[^']*')*/,
      greedy: true,
      alias: 'string'
    },
    'function-definition': {
      pattern: /(\b(?:function|fn)\s+)\w+\b/,
      lookbehind: true,
      alias: 'function'
    },
    argument: {
      pattern: /\b[a-z_]\w*(?=:)/i,
      alias: 'attr-name'
    },
    keyword: /\b(?:about|and|animate|as|at|attributes|by|case|catch|collect|continue|coordsys|do|else|exit|fn|for|from|function|global|if|in|local|macroscript|mapped|max|not|of|off|on|or|parameters|persistent|plugin|rcmenu|return|rollout|set|struct|then|throw|to|tool|try|undo|utility|when|where|while|with)\b/i,
    "boolean": /\b(?:true|false|on|off)\b/,
    time: {
      pattern: /(^|[^\w.])(?:(?:(?:\d+(?:\.\d*)?|\.\d+)(?:[eEdD][+-]\d+|[LP])?[msft])+|\d+:\d+(?:\.\d*)?)(?![\w.:])/,
      lookbehind: true,
      alias: 'number'
    },
    number: [{
      pattern: /(^|[^\w.])(?:(?:\d+(?:\.\d*)?|\.\d+)(?:[eEdD][+-]\d+|[LP])?|0x[a-fA-F0-9]+)(?![\w.:])/,
      lookbehind: true
    }, /\b(?:e|pi)\b/],
    constant: /\b(?:black|blue|brown|gray|green|orange|red|white|yellow)\b/,
    color: {
      pattern: /\b(?:dontcollect|ok|silentValue|undefined|unsupplied)\b/i,
      alias: 'constant'
    },
    operator: /[-+*/<>=!]=?|[&^]|#(?!\()/,
    punctuation: /[()\[\]{}.:,;]|#(?=\()|\\$/m
  };
}

/***/ }),

/***/ 8812:
/***/ ((module) => {



module.exports = mel;
mel.displayName = 'mel';
mel.aliases = [];

function mel(Prism) {
  Prism.languages.mel = {
    comment: /\/\/.*/,
    code: {
      pattern: /`(?:\\.|[^\\`\r\n])*`/,
      greedy: true,
      alias: 'italic',
      inside: {
        delimiter: {
          pattern: /^`|`$/,
          alias: 'punctuation'
        } // See rest below

      }
    },
    string: {
      pattern: /"(?:\\.|[^\\"\r\n])*"/,
      greedy: true
    },
    variable: /\$\w+/,
    number: /\b0x[\da-fA-F]+\b|\b\d+(?:\.\d*)?|\B\.\d+/,
    flag: {
      pattern: /-[^\d\W]\w*/,
      alias: 'operator'
    },
    keyword: /\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\b/,
    "function": /\b\w+(?=\()|\b(?:about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|CBG|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|Mayatomr|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\b/,
    operator: [/\+[+=]?|-[-=]?|&&|\|\||[<>]=|[*\/!=]=?|[%^]/, {
      // We don't want to match <<
      pattern: /(^|[^<])<(?!<)/,
      lookbehind: true
    }, {
      // We don't want to match >>
      pattern: /(^|[^>])>(?!>)/,
      lookbehind: true
    }],
    punctuation: /<<|>>|[.,:;?\[\](){}]/
  };
  Prism.languages.mel['code'].inside.rest = Prism.languages.mel;
}

/***/ }),

/***/ 2621:
/***/ ((module) => {



module.exports = mermaid;
mermaid.displayName = 'mermaid';
mermaid.aliases = [];

function mermaid(Prism) {
  Prism.languages.mermaid = {
    comment: {
      pattern: /%%.*/,
      greedy: true
    },
    style: {
      pattern: /^([ \t]*(?:classDef|linkStyle|style)[ \t]+[\w$-]+[ \t]+)\w.*[^\s;]/m,
      lookbehind: true,
      inside: {
        property: /\b\w[\w-]*(?=[ \t]*:)/,
        operator: /:/,
        punctuation: /,/
      }
    },
    'inter-arrow-label': {
      pattern: /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \t]*(?:"[^"\r\n]*"|[^\s".=-](?:[^\r\n.=-]*[^\s.=-])?)[ \t]*(?:\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,
      lookbehind: true,
      greedy: true,
      inside: {
        arrow: {
          pattern: /(?:\.+->?|--+[->]|==+[=>])$/,
          alias: 'operator'
        },
        label: {
          pattern: /^([\s\S]{2}[ \t]*)\S(?:[\s\S]*\S)?/,
          lookbehind: true,
          alias: 'property'
        },
        'arrow-head': {
          pattern: /^\S+/,
          alias: ['arrow', 'operator']
        }
      }
    },
    arrow: [// This might look complex but it really isn't.
    // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The
    // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow
    // characters in the one lookbehind because that would create too many false negatives. So we have to split the
    // arrows into different patterns.
    {
      // ER diagram
      pattern: /(^|[^{}|o.-])[|}][|o](?:--|\.\.)[|o][|{](?![{}|o.-])/,
      lookbehind: true,
      alias: 'operator'
    }, {
      // flow chart
      // (?:==+|--+|-\.*-)
      pattern: /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\.*-)[>ox]?|(?:==+|--+|-\.*-)[>ox]|===+|---+|-\.+-)(?![<>ox.=-])/,
      lookbehind: true,
      alias: 'operator'
    }, {
      // sequence diagram
      pattern: /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,
      lookbehind: true,
      alias: 'operator'
    }, {
      // class diagram
      pattern: /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\|?(?:--|\.\.)|(?:--|\.\.)\|?>|--|\.\.)(?![<>|*o.-])/,
      lookbehind: true,
      alias: 'operator'
    }],
    label: {
      pattern: /(^|[^|<])\|(?:[^\r\n"|]|"[^"\r\n]*")+\|/,
      lookbehind: true,
      greedy: true,
      alias: 'property'
    },
    text: {
      pattern: /(?:[(\[{]+|\b>)(?:[^\r\n"()\[\]{}]|"[^"\r\n]*")+(?:[)\]}]+|>)/,
      alias: 'string'
    },
    string: {
      pattern: /"[^"\r\n]*"/,
      greedy: true
    },
    annotation: {
      pattern: /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\[\[(?:choice|fork|join)\]\]/i,
      alias: 'important'
    },
    keyword: [// This language has both case-sensitive and case-insensitive keywords
    {
      pattern: /(^[ \t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\w$-])/m,
      lookbehind: true,
      greedy: true
    }, {
      pattern: /(^[ \t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \t]+note)?|loop|opt|par|participant|rect|state|note[ \t]+(?:over|(?:left|right)[ \t]+of))(?![\w$-])/im,
      lookbehind: true,
      greedy: true
    }],
    entity: /#[a-z0-9]+;/,
    operator: {
      pattern: /(\w[ \t]*)&(?=[ \t]*\w)|:::|:/,
      lookbehind: true
    },
    punctuation: /[(){};]/
  };
}

/***/ }),

/***/ 7581:
/***/ ((module) => {



module.exports = mizar;
mizar.displayName = 'mizar';
mizar.aliases = [];

function mizar(Prism) {
  Prism.languages.mizar = {
    comment: /::.+/,
    keyword: /@proof\b|\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|equals|end|environ|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:y|ies)|when|where|with|wrt)\b/,
    parameter: {
      pattern: /\$(?:10|\d)/,
      alias: 'variable'
    },
    variable: /\b\w+(?=:)/,
    number: /(?:\b|-)\d+\b/,
    operator: /\.\.\.|->|&|\.?=/,
    punctuation: /\(#|#\)|[,:;\[\](){}]/
  };
}

/***/ }),

/***/ 5011:
/***/ ((module) => {



module.exports = mongodb;
mongodb.displayName = 'mongodb';
mongodb.aliases = [];

function mongodb(Prism) {
  ;

  (function (Prism) {
    var operators = [// query and projection
    '$eq', '$gt', '$gte', '$in', '$lt', '$lte', '$ne', '$nin', '$and', '$not', '$nor', '$or', '$exists', '$type', '$expr', '$jsonSchema', '$mod', '$regex', '$text', '$where', '$geoIntersects', '$geoWithin', '$near', '$nearSphere', '$all', '$elemMatch', '$size', '$bitsAllClear', '$bitsAllSet', '$bitsAnyClear', '$bitsAnySet', '$comment', '$elemMatch', '$meta', '$slice', // update
    '$currentDate', '$inc', '$min', '$max', '$mul', '$rename', '$set', '$setOnInsert', '$unset', '$addToSet', '$pop', '$pull', '$push', '$pullAll', '$each', '$position', '$slice', '$sort', '$bit', // aggregation pipeline stages
    '$addFields', '$bucket', '$bucketAuto', '$collStats', '$count', '$currentOp', '$facet', '$geoNear', '$graphLookup', '$group', '$indexStats', '$limit', '$listLocalSessions', '$listSessions', '$lookup', '$match', '$merge', '$out', '$planCacheStats', '$project', '$redact', '$replaceRoot', '$replaceWith', '$sample', '$set', '$skip', '$sort', '$sortByCount', '$unionWith', '$unset', '$unwind', // aggregation pipeline operators
    '$abs', '$accumulator', '$acos', '$acosh', '$add', '$addToSet', '$allElementsTrue', '$and', '$anyElementTrue', '$arrayElemAt', '$arrayToObject', '$asin', '$asinh', '$atan', '$atan2', '$atanh', '$avg', '$binarySize', '$bsonSize', '$ceil', '$cmp', '$concat', '$concatArrays', '$cond', '$convert', '$cos', '$dateFromParts', '$dateToParts', '$dateFromString', '$dateToString', '$dayOfMonth', '$dayOfWeek', '$dayOfYear', '$degreesToRadians', '$divide', '$eq', '$exp', '$filter', '$first', '$floor', '$function', '$gt', '$gte', '$hour', '$ifNull', '$in', '$indexOfArray', '$indexOfBytes', '$indexOfCP', '$isArray', '$isNumber', '$isoDayOfWeek', '$isoWeek', '$isoWeekYear', '$last', '$last', '$let', '$literal', '$ln', '$log', '$log10', '$lt', '$lte', '$ltrim', '$map', '$max', '$mergeObjects', '$meta', '$min', '$millisecond', '$minute', '$mod', '$month', '$multiply', '$ne', '$not', '$objectToArray', '$or', '$pow', '$push', '$radiansToDegrees', '$range', '$reduce', '$regexFind', '$regexFindAll', '$regexMatch', '$replaceOne', '$replaceAll', '$reverseArray', '$round', '$rtrim', '$second', '$setDifference', '$setEquals', '$setIntersection', '$setIsSubset', '$setUnion', '$size', '$sin', '$slice', '$split', '$sqrt', '$stdDevPop', '$stdDevSamp', '$strcasecmp', '$strLenBytes', '$strLenCP', '$substr', '$substrBytes', '$substrCP', '$subtract', '$sum', '$switch', '$tan', '$toBool', '$toDate', '$toDecimal', '$toDouble', '$toInt', '$toLong', '$toObjectId', '$toString', '$toLower', '$toUpper', '$trim', '$trunc', '$type', '$week', '$year', '$zip', // aggregation pipeline query modifiers
    '$comment', '$explain', '$hint', '$max', '$maxTimeMS', '$min', '$orderby', '$query', '$returnKey', '$showDiskLoc', '$natural'];
    var builtinFunctions = ['ObjectId', 'Code', 'BinData', 'DBRef', 'Timestamp', 'NumberLong', 'NumberDecimal', 'MaxKey', 'MinKey', 'RegExp', 'ISODate', 'UUID'];
    operators = operators.map(function (operator) {
      return operator.replace('$', '\\$');
    });
    var operatorsSource = '(?:' + operators.join('|') + ')\\b';
    Prism.languages.mongodb = Prism.languages.extend('javascript', {});
    Prism.languages.insertBefore('mongodb', 'string', {
      property: {
        pattern: /(?:(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)(?=\s*:)/,
        greedy: true,
        inside: {
          keyword: RegExp('^([\'"])?' + operatorsSource + '(?:\\1)?$')
        }
      }
    });
    Prism.languages.mongodb.string.inside = {
      url: {
        // url pattern
        pattern: /https?:\/\/[-\w@:%.+~#=]{1,256}\.[a-z0-9()]{1,6}\b[-\w()@:%+.~#?&/=]*/i,
        greedy: true
      },
      entity: {
        // ipv4
        pattern: /\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/,
        greedy: true
      }
    };
    Prism.languages.insertBefore('mongodb', 'constant', {
      builtin: {
        pattern: RegExp('\\b(?:' + builtinFunctions.join('|') + ')\\b'),
        alias: 'keyword'
      }
    });
  })(Prism);
}

/***/ }),

/***/ 5981:
/***/ ((module) => {



module.exports = monkey;
monkey.displayName = 'monkey';
monkey.aliases = [];

function monkey(Prism) {
  Prism.languages.monkey = {
    string: /"[^"\r\n]*"/,
    comment: [{
      pattern: /^#Rem\s[\s\S]*?^#End/im,
      greedy: true
    }, {
      pattern: /'.+/,
      greedy: true
    }],
    preprocessor: {
      pattern: /(^[ \t]*)#.+/m,
      lookbehind: true,
      alias: 'comment'
    },
    "function": /\b\w+(?=\()/,
    'type-char': {
      pattern: /(\w)[?%#$]/,
      lookbehind: true,
      alias: 'variable'
    },
    number: {
      pattern: /((?:\.\.)?)(?:(?:\b|\B-\.?|\B\.)\d+(?:(?!\.\.)\.\d*)?|\$[\da-f]+)/i,
      lookbehind: true
    },
    keyword: /\b(?:Void|Strict|Public|Private|Property|Bool|Int|Float|String|Array|Object|Continue|Exit|Import|Extern|New|Self|Super|Try|Catch|Eachin|True|False|Extends|Abstract|Final|Select|Case|Default|Const|Local|Global|Field|Method|Function|Class|End|If|Then|Else|ElseIf|EndIf|While|Wend|Repeat|Until|Forever|For|To|Step|Next|Return|Module|Interface|Implements|Inline|Throw|Null)\b/i,
    operator: /\.\.|<[=>]?|>=?|:?=|(?:[+\-*\/&~|]|\b(?:Mod|Shl|Shr)\b)=?|\b(?:And|Not|Or)\b/i,
    punctuation: /[.,:;()\[\]]/
  };
}

/***/ }),

/***/ 7109:
/***/ ((module) => {



module.exports = moonscript;
moonscript.displayName = 'moonscript';
moonscript.aliases = ['moon'];

function moonscript(Prism) {
  Prism.languages.moonscript = {
    comment: /--.*/,
    string: [{
      pattern: /'[^']*'|\[(=*)\[[\s\S]*?\]\1\]/,
      greedy: true
    }, {
      pattern: /"[^"]*"/,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /#\{[^{}]*\}/,
          inside: {
            moonscript: {
              pattern: /(^#\{)[\s\S]+(?=\})/,
              lookbehind: true,
              inside: null // see beow

            },
            'interpolation-punctuation': {
              pattern: /#\{|\}/,
              alias: 'punctuation'
            }
          }
        }
      }
    }],
    'class-name': [{
      pattern: /(\b(?:class|extends)[ \t]+)\w+/,
      lookbehind: true
    }, // class-like names start with a capital letter
    /\b[A-Z]\w*/],
    keyword: /\b(?:class|continue|do|else|elseif|export|extends|for|from|if|import|in|local|nil|return|self|super|switch|then|unless|using|when|while|with)\b/,
    variable: /@@?\w*/,
    property: {
      pattern: /\b(?!\d)\w+(?=:)|(:)(?!\d)\w+/,
      lookbehind: true
    },
    "function": {
      pattern: /\b(?:_G|_VERSION|assert|collectgarbage|coroutine\.(?:running|create|resume|status|wrap|yield)|debug\.(?:debug|gethook|getinfo|getlocal|getupvalue|setlocal|setupvalue|sethook|traceback|getfenv|getmetatable|getregistry|setfenv|setmetatable)|dofile|error|getfenv|getmetatable|io\.(?:stdin|stdout|stderr|close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|ipairs|load|loadfile|loadstring|math\.(?:abs|acos|asin|atan|atan2|ceil|sin|cos|tan|deg|exp|floor|log|log10|max|min|fmod|modf|cosh|sinh|tanh|pow|rad|sqrt|frexp|ldexp|random|randomseed|pi)|module|next|os\.(?:clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\.(?:cpath|loaded|loadlib|path|preload|seeall)|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|string\.(?:byte|char|dump|find|len|lower|rep|sub|upper|format|gsub|gmatch|match|reverse)|table\.(?:maxn|concat|sort|insert|remove)|tonumber|tostring|type|unpack|xpcall)\b/,
      inside: {
        punctuation: /\./
      }
    },
    "boolean": /\b(?:false|true)\b/,
    number: /(?:\B\.\d+|\b\d+\.\d+|\b\d+(?=[eE]))(?:[eE][-+]?\d+)?\b|\b(?:0x[a-fA-F\d]+|\d+)(?:U?LL)?\b/,
    operator: /\.{3}|[-=]>|~=|(?:[-+*/%<>!=]|\.\.)=?|[:#^]|\b(?:and|or)\b=?|\b(?:not)\b/,
    punctuation: /[.,()[\]{}\\]/
  };
  Prism.languages.moonscript.string[1].inside.interpolation.inside.moonscript.inside = Prism.languages.moonscript;
  Prism.languages.moon = Prism.languages.moonscript;
}

/***/ }),

/***/ 6114:
/***/ ((module) => {



module.exports = n1ql;
n1ql.displayName = 'n1ql';
n1ql.aliases = [];

function n1ql(Prism) {
  Prism.languages.n1ql = {
    comment: /\/\*[\s\S]*?(?:$|\*\/)/,
    parameter: /\$[\w.]+/,
    string: {
      pattern: /(["'])(?:\\[\s\S]|(?!\1)[^\\]|\1\1)*\1/,
      greedy: true
    },
    identifier: {
      pattern: /`(?:\\[\s\S]|[^\\`]|``)*`/,
      greedy: true
    },
    "function": /\b(?:ABS|ACOS|ARRAY_AGG|ARRAY_APPEND|ARRAY_AVG|ARRAY_CONCAT|ARRAY_CONTAINS|ARRAY_COUNT|ARRAY_DISTINCT|ARRAY_FLATTEN|ARRAY_IFNULL|ARRAY_INSERT|ARRAY_INTERSECT|ARRAY_LENGTH|ARRAY_MAX|ARRAY_MIN|ARRAY_POSITION|ARRAY_PREPEND|ARRAY_PUT|ARRAY_RANGE|ARRAY_REMOVE|ARRAY_REPEAT|ARRAY_REPLACE|ARRAY_REVERSE|ARRAY_SORT|ARRAY_STAR|ARRAY_SUM|ARRAY_SYMDIFF|ARRAY_SYMDIFFN|ARRAY_UNION|ASIN|ATAN|ATAN2|AVG|BASE64|BASE64_DECODE|BASE64_ENCODE|BITAND|BITCLEAR|BITNOT|BITOR|BITSET|BITSHIFT|BITTEST|BITXOR|CEIL|CLOCK_LOCAL|CLOCK_MILLIS|CLOCK_STR|CLOCK_TZ|CLOCK_UTC|CONTAINS|CONTAINS_TOKEN|CONTAINS_TOKEN_LIKE|CONTAINS_TOKEN_REGEXP|COS|COUNT|CURL|DATE_ADD_MILLIS|DATE_ADD_STR|DATE_DIFF_MILLIS|DATE_DIFF_STR|DATE_FORMAT_STR|DATE_PART_MILLIS|DATE_PART_STR|DATE_RANGE_MILLIS|DATE_RANGE_STR|DATE_TRUNC_MILLIS|DATE_TRUNC_STR|DECODE_JSON|DEGREES|DURATION_TO_STR|E|ENCODED_SIZE|ENCODE_JSON|EXP|FLOOR|GREATEST|HAS_TOKEN|IFINF|IFMISSING|IFMISSINGORNULL|IFNAN|IFNANORINF|IFNULL|INITCAP|ISARRAY|ISATOM|ISBOOLEAN|ISNUMBER|ISOBJECT|ISSTRING|IsBitSET|LEAST|LENGTH|LN|LOG|LOWER|LTRIM|MAX|META|MILLIS|MILLIS_TO_LOCAL|MILLIS_TO_STR|MILLIS_TO_TZ|MILLIS_TO_UTC|MILLIS_TO_ZONE_NAME|MIN|MISSINGIF|NANIF|NEGINFIF|NOW_LOCAL|NOW_MILLIS|NOW_STR|NOW_TZ|NOW_UTC|NULLIF|OBJECT_ADD|OBJECT_CONCAT|OBJECT_INNER_PAIRS|OBJECT_INNER_VALUES|OBJECT_LENGTH|OBJECT_NAMES|OBJECT_PAIRS|OBJECT_PUT|OBJECT_REMOVE|OBJECT_RENAME|OBJECT_REPLACE|OBJECT_UNWRAP|OBJECT_VALUES|PAIRS|PI|POLY_LENGTH|POSINFIF|POSITION|POWER|RADIANS|RANDOM|REGEXP_CONTAINS|REGEXP_LIKE|REGEXP_POSITION|REGEXP_REPLACE|REPEAT|REPLACE|REVERSE|ROUND|RTRIM|SIGN|SIN|SPLIT|SQRT|STR_TO_DURATION|STR_TO_MILLIS|STR_TO_TZ|STR_TO_UTC|STR_TO_ZONE_NAME|SUBSTR|SUFFIXES|SUM|TAN|TITLE|TOARRAY|TOATOM|TOBOOLEAN|TOKENS|TONUMBER|TOOBJECT|TOSTRING|TRIM|TRUNC|TYPE|UPPER|WEEKDAY_MILLIS|WEEKDAY_STR)(?=\s*\()/i,
    keyword: /\b(?:ALL|ALTER|ANALYZE|AS|ASC|BEGIN|BINARY|BOOLEAN|BREAK|BUCKET|BUILD|BY|CALL|CAST|CLUSTER|COLLATE|COLLECTION|COMMIT|CONNECT|CONTINUE|CORRELATE|COVER|CREATE|DATABASE|DATASET|DATASTORE|DECLARE|DECREMENT|DELETE|DERIVED|DESC|DESCRIBE|DISTINCT|DO|DROP|EACH|ELEMENT|EXCEPT|EXCLUDE|EXECUTE|EXPLAIN|FETCH|FLATTEN|FOR|FORCE|FROM|FUNCTION|GRANT|GROUP|GSI|HAVING|IF|IGNORE|ILIKE|INCLUDE|INCREMENT|INDEX|INFER|INLINE|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KEYS|KEYSPACE|KNOWN|LAST|LEFT|LET|LETTING|LIMIT|LSM|MAP|MAPPING|MATCHED|MATERIALIZED|MERGE|MINUS|MISSING|NAMESPACE|NEST|NULL|NUMBER|OBJECT|OFFSET|ON|OPTION|ORDER|OUTER|OVER|PARSE|PARTITION|PASSWORD|PATH|POOL|PREPARE|PRIMARY|PRIVATE|PRIVILEGE|PROCEDURE|PUBLIC|RAW|REALM|REDUCE|RENAME|RETURN|RETURNING|REVOKE|RIGHT|ROLE|ROLLBACK|SATISFIES|SCHEMA|SELECT|SELF|SEMI|SET|SHOW|SOME|START|STATISTICS|STRING|SYSTEM|TO|TRANSACTION|TRIGGER|TRUNCATE|UNDER|UNION|UNIQUE|UNKNOWN|UNNEST|UNSET|UPDATE|UPSERT|USE|USER|USING|VALIDATE|VALUE|VALUES|VIA|VIEW|WHERE|WHILE|WITH|WORK|XOR)\b/i,
    "boolean": /\b(?:TRUE|FALSE)\b/i,
    number: /(?:\b\d+\.|\B\.)\d+e[+\-]?\d+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,
    operator: /[-+*\/%]|!=|==?|\|\||<[>=]?|>=?|\b(?:AND|ANY|ARRAY|BETWEEN|CASE|ELSE|END|EVERY|EXISTS|FIRST|IN|LIKE|NOT|OR|THEN|VALUED|WHEN|WITHIN)\b/i,
    punctuation: /[;[\](),.{}:]/
  };
}

/***/ }),

/***/ 1880:
/***/ ((module) => {



module.exports = n4js;
n4js.displayName = 'n4js';
n4js.aliases = ['n4jsd'];

function n4js(Prism) {
  Prism.languages.n4js = Prism.languages.extend('javascript', {
    // Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html
    keyword: /\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\b/
  });
  Prism.languages.insertBefore('n4js', 'constant', {
    // Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations
    annotation: {
      pattern: /@+\w+/,
      alias: 'operator'
    }
  });
  Prism.languages.n4jsd = Prism.languages.n4js;
}

/***/ }),

/***/ 6013:
/***/ ((module) => {



module.exports = nand2tetrisHdl;
nand2tetrisHdl.displayName = 'nand2tetrisHdl';
nand2tetrisHdl.aliases = [];

function nand2tetrisHdl(Prism) {
  Prism.languages['nand2tetris-hdl'] = {
    comment: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
    keyword: /\b(?:CHIP|IN|OUT|PARTS|BUILTIN|CLOCKED)\b/,
    "boolean": /\b(?:true|false)\b/,
    "function": /\b[A-Za-z][A-Za-z0-9]*(?=\()/,
    number: /\b\d+\b/,
    operator: /=|\.\./,
    punctuation: /[{}[\];(),:]/
  };
}

/***/ }),

/***/ 7506:
/***/ ((module) => {



module.exports = naniscript;
naniscript.displayName = 'naniscript';
naniscript.aliases = [];

function naniscript(Prism) {
  ;

  (function (Prism) {
    var expressionDef = /\{[^\r\n\[\]{}]*\}/;
    var params = {
      'quoted-string': {
        pattern: /"(?:[^"\\]|\\.)*"/,
        alias: 'operator'
      },
      'command-param-id': {
        pattern: /(\s)\w+:/,
        lookbehind: true,
        alias: 'property'
      },
      'command-param-value': [{
        pattern: expressionDef,
        alias: 'selector'
      }, {
        pattern: /([\t ])\S+/,
        lookbehind: true,
        greedy: true,
        alias: 'operator'
      }, {
        pattern: /\S(?:.*\S)?/,
        alias: 'operator'
      }]
    };
    Prism.languages.naniscript = {
      // ; ...
      comment: {
        pattern: /^([\t ]*);.*/m,
        lookbehind: true
      },
      // > ...
      // Define is a control line starting with '>' followed by a word, a space and a text.
      define: {
        pattern: /^>.+/m,
        alias: 'tag',
        inside: {
          value: {
            pattern: /(^>\w+[\t ]+)(?!\s)[^{}\r\n]+/,
            lookbehind: true,
            alias: 'operator'
          },
          key: {
            pattern: /(^>)\w+/,
            lookbehind: true
          }
        }
      },
      // # ...
      label: {
        pattern: /^([\t ]*)#[\t ]*\w+[\t ]*$/m,
        lookbehind: true,
        alias: 'regex'
      },
      command: {
        pattern: /^([\t ]*)@\w+(?=[\t ]|$).*/m,
        lookbehind: true,
        alias: 'function',
        inside: {
          'command-name': /^@\w+/,
          expression: {
            pattern: expressionDef,
            greedy: true,
            alias: 'selector'
          },
          'command-params': {
            pattern: /\s*\S[\s\S]*/,
            inside: params
          }
        }
      },
      // Generic is any line that doesn't start with operators: ;>#@
      'generic-text': {
        pattern: /(^[ \t]*)[^#@>;\s].*/m,
        lookbehind: true,
        alias: 'punctuation',
        inside: {
          // \{ ... \} ... \[ ... \] ... \"
          'escaped-char': /\\[{}\[\]"]/,
          expression: {
            pattern: expressionDef,
            greedy: true,
            alias: 'selector'
          },
          'inline-command': {
            pattern: /\[[\t ]*\w[^\r\n\[\]]*\]/,
            greedy: true,
            alias: 'function',
            inside: {
              'command-params': {
                pattern: /(^\[[\t ]*\w+\b)[\s\S]+(?=\]$)/,
                lookbehind: true,
                inside: params
              },
              'command-param-name': {
                pattern: /^(\[[\t ]*)\w+/,
                lookbehind: true,
                alias: 'name'
              },
              'start-stop-char': /[\[\]]/
            }
          }
        }
      }
    };
    Prism.languages.nani = Prism.languages['naniscript'];
    /** @typedef {InstanceType<import("./prism-core")["Token"]>} Token */

    /**
     * This hook is used to validate generic-text tokens for balanced brackets.
     * Mark token as bad-line when contains not balanced brackets: {},[]
     */

    Prism.hooks.add('after-tokenize', function (env) {
      /** @type {(Token | string)[]} */
      var tokens = env.tokens;
      tokens.forEach(function (token) {
        if (typeof token !== 'string' && token.type === 'generic-text') {
          var content = getTextContent(token);

          if (!isBracketsBalanced(content)) {
            token.type = 'bad-line';
            token.content = content;
          }
        }
      });
    });
    /**
     * @param {string} input
     * @returns {boolean}
     */

    function isBracketsBalanced(input) {
      var brackets = '[]{}';
      var stack = [];

      for (var i = 0; i < input.length; i++) {
        var bracket = input[i];
        var bracketsIndex = brackets.indexOf(bracket);

        if (bracketsIndex !== -1) {
          if (bracketsIndex % 2 === 0) {
            stack.push(bracketsIndex + 1);
          } else if (stack.pop() !== bracketsIndex) {
            return false;
          }
        }
      }

      return stack.length === 0;
    }
    /**
     * @param {string | Token | (string | Token)[]} token
     * @returns {string}
     */


    function getTextContent(token) {
      if (typeof token === 'string') {
        return token;
      } else if (Array.isArray(token)) {
        return token.map(getTextContent).join('');
      } else {
        return getTextContent(token.content);
      }
    }
  })(Prism);
}

/***/ }),

/***/ 3429:
/***/ ((module) => {



module.exports = nasm;
nasm.displayName = 'nasm';
nasm.aliases = [];

function nasm(Prism) {
  Prism.languages.nasm = {
    comment: /;.*$/m,
    string: /(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,
    label: {
      pattern: /(^\s*)[A-Za-z._?$][\w.?$@~#]*:/m,
      lookbehind: true,
      alias: 'function'
    },
    keyword: [/\[?BITS (?:16|32|64)\]?/, {
      pattern: /(^\s*)section\s*[a-z.]+:?/im,
      lookbehind: true
    }, /(?:extern|global)[^;\r\n]*/i, /(?:CPU|FLOAT|DEFAULT).*$/m],
    register: {
      pattern: /\b(?:st\d|[xyz]mm\d\d?|[cdt]r\d|r\d\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s)\b/i,
      alias: 'variable'
    },
    number: /(?:\b|(?=\$))(?:0[hx](?:\.[\da-f]+|[\da-f]+(?:\.[\da-f]+)?)(?:p[+-]?\d+)?|\d[\da-f]+[hx]|\$\d[\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\d+|(?:\d+(?:\.\d+)?|\.\d+)(?:\.?e[+-]?\d+)?[dt]?)\b/i,
    operator: /[\[\]*+\-\/%<>=&|$!]/
  };
}

/***/ }),

/***/ 458:
/***/ ((module) => {



module.exports = neon;
neon.displayName = 'neon';
neon.aliases = [];

function neon(Prism) {
  Prism.languages.neon = {
    comment: {
      pattern: /#.*/,
      greedy: true
    },
    datetime: {
      pattern: /(^|[[{(=:,\s])\d\d\d\d-\d\d?-\d\d?(?:(?:[Tt]| +)\d\d?:\d\d:\d\d(?:\.\d*)? *(?:Z|[-+]\d\d?(?::?\d\d)?)?)?(?=$|[\]}),\s])/,
      lookbehind: true,
      alias: 'number'
    },
    key: {
      pattern: /(^|[[{(,\s])[^,:=[\]{}()'"\s]+(?=\s*:(?:$|[\]}),\s])|\s*=)/,
      lookbehind: true,
      alias: 'atrule'
    },
    number: {
      pattern: /(^|[[{(=:,\s])[+-]?(?:0x[\da-fA-F]+|0o[0-7]+|0b[01]+|(?:\d+(?:\.\d*)?|\.?\d+)(?:[eE][+-]?\d+)?)(?=$|[\]}),:=\s])/,
      lookbehind: true
    },
    "boolean": {
      pattern: /(^|[[{(=:,\s])(?:true|false|yes|no)(?=$|[\]}),:=\s])/i,
      lookbehind: true
    },
    "null": {
      pattern: /(^|[[{(=:,\s])(?:null)(?=$|[\]}),:=\s])/i,
      lookbehind: true,
      alias: 'keyword'
    },
    string: {
      pattern: /(^|[[{(=:,\s])(?:('''|""")\r?\n(?:(?:[^\r\n]|\r?\n(?![\t ]*\2))*\r?\n)?[\t ]*\2|'[^'\r\n]*'|"(?:\\.|[^\\"\r\n])*")/,
      lookbehind: true,
      greedy: true
    },
    literal: {
      pattern: /(^|[[{(=:,\s])(?:[^#"',:=[\]{}()\s`-]|[:-][^"',=[\]{}()\s])(?:[^,:=\]})(\s]|:(?![\s,\]})]|$)|[ \t]+[^#,:=\]})(\s])*/,
      lookbehind: true,
      alias: 'string'
    },
    punctuation: /[,:=[\]{}()-]/
  };
}

/***/ }),

/***/ 2232:
/***/ ((module) => {



module.exports = nevod;
nevod.displayName = 'nevod';
nevod.aliases = [];

function nevod(Prism) {
  Prism.languages.nevod = {
    comment: /\/\/.*|(?:\/\*[\s\S]*?(?:\*\/|$))/,
    string: {
      pattern: /(?:"(?:""|[^"])*"(?!")|'(?:''|[^'])*'(?!'))!?\*?/,
      greedy: true,
      inside: {
        'string-attrs': /!$|!\*$|\*$/
      }
    },
    namespace: {
      pattern: /(@namespace\s+)[a-zA-Z0-9\-.]+(?=\s*\{)/,
      lookbehind: true
    },
    pattern: {
      pattern: /(@pattern\s+)?#?[a-zA-Z0-9\-.]+(?:\s*\(\s*(?:~\s*)?[a-zA-Z0-9\-.]+\s*(?:,\s*(?:~\s*)?[a-zA-Z0-9\-.]*)*\))?(?=\s*=)/,
      lookbehind: true,
      inside: {
        'pattern-name': {
          pattern: /^#?[a-zA-Z0-9\-.]+/,
          alias: 'class-name'
        },
        fields: {
          pattern: /\(.*\)/,
          inside: {
            'field-name': {
              pattern: /[a-zA-Z0-9\-.]+/,
              alias: 'variable'
            },
            punctuation: /[,()]/,
            operator: {
              pattern: /~/,
              alias: 'field-hidden-mark'
            }
          }
        }
      }
    },
    search: {
      pattern: /(@search\s+|#)[a-zA-Z0-9\-.]+(?:\.\*)?(?=\s*;)/,
      alias: 'function',
      lookbehind: true
    },
    keyword: /@(?:require|namespace|pattern|search|inside|outside|having|where)\b/,
    'standard-pattern': {
      pattern: /\b(?:Word|Punct|Symbol|Space|LineBreak|Start|End|Alpha|AlphaNum|Num|NumAlpha|Blank|WordBreak|Any)(?:\([a-zA-Z0-9\-.,\s+]*\))?/,
      inside: {
        'standard-pattern-name': {
          pattern: /^[a-zA-Z0-9\-.]+/,
          alias: 'builtin'
        },
        quantifier: {
          pattern: /\b\d+(?:\s*\+|\s*-\s*\d+)?(?!\w)/,
          alias: 'number'
        },
        'standard-pattern-attr': {
          pattern: /[a-zA-Z0-9\-.]+/,
          alias: 'builtin'
        },
        punctuation: /[,()]/
      }
    },
    quantifier: {
      pattern: /\b\d+(?:\s*\+|\s*-\s*\d+)?(?!\w)/,
      alias: 'number'
    },
    operator: [{
      pattern: /=/,
      alias: 'pattern-def'
    }, {
      pattern: /&/,
      alias: 'conjunction'
    }, {
      pattern: /~/,
      alias: 'exception'
    }, {
      pattern: /\?/,
      alias: 'optionality'
    }, {
      pattern: /[[\]]/,
      alias: 'repetition'
    }, {
      pattern: /[{}]/,
      alias: 'variation'
    }, {
      pattern: /[+_]/,
      alias: 'sequence'
    }, {
      pattern: /\.{2,3}/,
      alias: 'span'
    }],
    'field-capture': [{
      pattern: /([a-zA-Z0-9\-.]+\s*\()\s*[a-zA-Z0-9\-.]+\s*:\s*[a-zA-Z0-9\-.]+(?:\s*,\s*[a-zA-Z0-9\-.]+\s*:\s*[a-zA-Z0-9\-.]+)*(?=\s*\))/,
      lookbehind: true,
      inside: {
        'field-name': {
          pattern: /[a-zA-Z0-9\-.]+/,
          alias: 'variable'
        },
        colon: /:/
      }
    }, {
      pattern: /[a-zA-Z0-9\-.]+\s*:/,
      inside: {
        'field-name': {
          pattern: /[a-zA-Z0-9\-.]+/,
          alias: 'variable'
        },
        colon: /:/
      }
    }],
    punctuation: /[:;,()]/,
    name: /[a-zA-Z0-9\-.]+/
  };
}

/***/ }),

/***/ 1247:
/***/ ((module) => {



module.exports = nginx;
nginx.displayName = 'nginx';
nginx.aliases = [];

function nginx(Prism) {
  ;

  (function (Prism) {
    var variable = /\$(?:\w[a-z\d]*(?:_[^\x00-\x1F\s"'\\()$]*)?|\{[^}\s"'\\]+\})/i;
    Prism.languages.nginx = {
      comment: {
        pattern: /(^|[\s{};])#.*/,
        lookbehind: true
      },
      directive: {
        pattern: /(^|\s)\w(?:[^;{}"'\\\s]|\\.|"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*'|\s+(?:#.*(?!.)|(?![#\s])))*?(?=\s*[;{])/,
        lookbehind: true,
        greedy: true,
        inside: {
          string: {
            pattern: /((?:^|[^\\])(?:\\\\)*)(?:"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*')/,
            lookbehind: true,
            inside: {
              escape: {
                pattern: /\\["'\\nrt]/,
                alias: 'entity'
              },
              variable: variable
            }
          },
          comment: {
            pattern: /(\s)#.*/,
            lookbehind: true,
            greedy: true
          },
          keyword: {
            pattern: /^\S+/,
            greedy: true
          },
          // other patterns
          "boolean": {
            pattern: /(\s)(?:off|on)(?!\S)/,
            lookbehind: true
          },
          number: {
            pattern: /(\s)\d+[a-z]*(?!\S)/i,
            lookbehind: true
          },
          variable: variable
        }
      },
      punctuation: /[{};]/
    };
  })(Prism);
}

/***/ }),

/***/ 1572:
/***/ ((module) => {



module.exports = nim;
nim.displayName = 'nim';
nim.aliases = [];

function nim(Prism) {
  Prism.languages.nim = {
    comment: /#.*/,
    // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)
    // Character literals are handled specifically to prevent issues with numeric type suffixes
    string: {
      pattern: /(?:(?:\b(?!\d)(?:\w|\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:"""[\s\S]*?"""(?!")|"(?:\\[\s\S]|""|[^"\\])*")|'(?:\\(?:\d+|x[\da-fA-F]{2}|.)|[^'])')/,
      greedy: true
    },
    // The negative look ahead prevents wrong highlighting of the .. operator
    number: /\b(?:0[xXoObB][\da-fA-F_]+|\d[\d_]*(?:(?!\.\.)\.[\d_]*)?(?:[eE][+-]?\d[\d_]*)?)(?:'?[iuf]\d*)?/,
    keyword: /\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\b/,
    "function": {
      pattern: /(?:(?!\d)(?:\w|\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\r\n]+`)\*?(?:\[[^\]]+\])?(?=\s*\()/,
      inside: {
        operator: /\*$/
      }
    },
    // We don't want to highlight operators inside backticks
    ignore: {
      pattern: /`[^`\r\n]+`/,
      inside: {
        punctuation: /`/
      }
    },
    operator: {
      // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)
      // but allow the slice operator .. to take precedence over them
      // One can define his own operators in Nim so all combination of operators might be an operator.
      pattern: /(^|[({\[](?=\.\.)|(?![({\[]\.).)(?:(?:[=+\-*\/<>@$~&%|!?^:\\]|\.\.|\.(?![)}\]]))+|\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\b)/m,
      lookbehind: true
    },
    punctuation: /[({\[]\.|\.[)}\]]|[`(){}\[\],:]/
  };
}

/***/ }),

/***/ 7855:
/***/ ((module) => {



module.exports = nix;
nix.displayName = 'nix';
nix.aliases = [];

function nix(Prism) {
  Prism.languages.nix = {
    comment: /\/\*[\s\S]*?\*\/|#.*/,
    string: {
      pattern: /"(?:[^"\\]|\\[\s\S])*"|''(?:(?!'')[\s\S]|''(?:'|\\|\$\{))*''/,
      greedy: true,
      inside: {
        interpolation: {
          // The lookbehind ensures the ${} is not preceded by \ or ''
          pattern: /(^|(?:^|(?!'').)[^\\])\$\{(?:[^{}]|\{[^}]*\})*\}/,
          lookbehind: true,
          inside: {
            antiquotation: {
              pattern: /^\$(?=\{)/,
              alias: 'variable'
            } // See rest below

          }
        }
      }
    },
    url: [/\b(?:[a-z]{3,7}:\/\/)[\w\-+%~\/.:#=?&]+/, {
      pattern: /([^\/])(?:[\w\-+%~.:#=?&]*(?!\/\/)[\w\-+%~\/.:#=?&])?(?!\/\/)\/[\w\-+%~\/.:#=?&]*/,
      lookbehind: true
    }],
    antiquotation: {
      pattern: /\$(?=\{)/,
      alias: 'variable'
    },
    number: /\b\d+\b/,
    keyword: /\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\b/,
    "function": /\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:url|Tarball)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\b|\bfoldl'\B/,
    "boolean": /\b(?:true|false)\b/,
    operator: /[=!<>]=?|\+\+?|\|\||&&|\/\/|->?|[?@]/,
    punctuation: /[{}()[\].,:;]/
  };
  Prism.languages.nix.string.inside.interpolation.inside.rest = Prism.languages.nix;
}

/***/ }),

/***/ 5885:
/***/ ((module) => {



module.exports = nsis;
nsis.displayName = 'nsis';
nsis.aliases = [];

function nsis(Prism) {
  /**
   * Original by Jan T. Sott (http://github.com/idleberg)
   *
   * Includes all commands and plug-ins shipped with NSIS 3.02
   */
  Prism.languages.nsis = {
    comment: {
      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|[#;].*)/,
      lookbehind: true
    },
    string: {
      pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    keyword: {
      pattern: /(^[\t ]*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|Banner|BG(?:Font|Gradient|Image)|BrandingText|BringToFront|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|WriteUTF16LE|Seek|Write|WriteByte|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DlgItem|DLLVersion(?:Local)?|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|Name|Nop|ns(?:Dialogs|Exec)|NSISdl|OutFile|Page(?:Callbacks)?|PE(?:DllCharacteristics|SubsysVer)|Pop|Push|Quit|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|Unicode|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UninstPage|UnRegDLL|UserInfo|Var|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle)\b/m,
      lookbehind: true
    },
    property: /\b(?:admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user|ARCHIVE|FILE_(?:ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK(?:(?:CR|CU|LM)(?:32|64)?|DD|PD|U)|HKEY_(?:CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(?:ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(?:ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)\b/,
    constant: /\$\{[\w\.:\^-]+\}|\$\([\w\.:\^-]+\)/i,
    variable: /\$\w+/i,
    number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
    operator: /--?|\+\+?|<=?|>=?|==?=?|&&?|\|\|?|[?*\/~^%]/,
    punctuation: /[{}[\];(),.:]/,
    important: {
      pattern: /(^[\t ]*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\b/im,
      lookbehind: true
    }
  };
}

/***/ }),

/***/ 6055:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorC = __webpack_require__(3530);

module.exports = objectivec;
objectivec.displayName = 'objectivec';
objectivec.aliases = ['objc'];

function objectivec(Prism) {
  Prism.register(refractorC);
  Prism.languages.objectivec = Prism.languages.extend('c', {
    string: /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|@"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
    keyword: /\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,
    operator: /-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/
  });
  delete Prism.languages.objectivec['class-name'];
  Prism.languages.objc = Prism.languages.objectivec;
}

/***/ }),

/***/ 4445:
/***/ ((module) => {



module.exports = ocaml;
ocaml.displayName = 'ocaml';
ocaml.aliases = [];

function ocaml(Prism) {
  Prism.languages.ocaml = {
    comment: /\(\*[\s\S]*?\*\)/,
    string: [{
      pattern: /"(?:\\.|[^\\\r\n"])*"/,
      greedy: true
    }, {
      pattern: /(['`])(?:\\(?:\d+|x[\da-f]+|.)|(?!\1)[^\\\r\n])\1/i,
      greedy: true
    }],
    number: /\b(?:0x[\da-f][\da-f_]+|(?:0[bo])?\d[\d_]*(?:\.[\d_]*)?(?:e[+-]?[\d_]+)?)/i,
    directive: {
      pattern: /\B#\w+/,
      alias: 'important'
    },
    label: {
      pattern: /\B~\w+/,
      alias: 'function'
    },
    'type-variable': {
      pattern: /\B'\w+/,
      alias: 'function'
    },
    variant: {
      pattern: /`\w+/,
      alias: 'variable'
    },
    module: {
      pattern: /\b[A-Z]\w+/,
      alias: 'variable'
    },
    // For the list of keywords and operators,
    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84
    keyword: /\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\b/,
    "boolean": /\b(?:false|true)\b/,
    // Custom operators are allowed
    operator: /:=|[=<>@^|&+\-*\/$%!?~][!$%&*+\-.\/:<=>?@^|~]*|\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\b/,
    punctuation: /[(){}\[\]|.,:;]|\b_\b/
  };
}

/***/ }),

/***/ 185:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorC = __webpack_require__(3530);

module.exports = opencl;
opencl.displayName = 'opencl';
opencl.aliases = [];

function opencl(Prism) {
  Prism.register(refractorC);

  (function (Prism) {
    /* OpenCL kernel language */
    Prism.languages.opencl = Prism.languages.extend('c', {
      // Extracted from the official specs (2.0) and http://streamcomputing.eu/downloads/?opencl.lang (opencl-keywords, opencl-types) and http://sourceforge.net/tracker/?func=detail&aid=2957794&group_id=95717&atid=612384 (Words2, partly Words3)
      keyword: /\b(?:__attribute__|(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|auto|break|case|complex|const|continue|default|do|(?:float|double)(?:16(?:x(?:1|16|2|4|8))?|1x(?:1|16|2|4|8)|2(?:x(?:1|16|2|4|8))?|3|4(?:x(?:1|16|2|4|8))?|8(?:x(?:1|16|2|4|8))?)?|else|enum|extern|for|goto|(?:u?(?:char|short|int|long)|half|quad|bool)(?:2|3|4|8|16)?|if|imaginary|inline|packed|pipe|register|restrict|return|signed|sizeof|static|struct|switch|typedef|uniform|union|unsigned|void|volatile|while)\b/,
      // Extracted from http://streamcomputing.eu/downloads/?opencl.lang (opencl-const)
      // Math Constants: https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/mathConstants.html
      // Macros and Limits: https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/macroLimits.html
      number: /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[fuhl]{0,4}/i,
      "boolean": /\b(?:false|true)\b/,
      'constant-opencl-kernel': {
        pattern: /\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:LOCAL|GLOBAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT|HALF)_(?:DIG|EPSILON|MANT_DIG|(?:MIN|MAX)(?:(?:_10)?_EXP)?)|FLT_RADIX|HUGE_VALF?|INFINITY|(?:INT|LONG|SCHAR|SHRT)_(?:MAX|MIN)|(?:UCHAR|USHRT|UINT|ULONG)_MAX|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:10|2)E?|PI(?:_[24])?|SQRT(?:1_2|2))(?:_F|_H)?|NAN)\b/,
        alias: 'constant'
      }
    });
    Prism.languages.insertBefore('opencl', 'class-name', {
      // https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/scalarDataTypes.html
      // https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/otherDataTypes.html
      'builtin-type': {
        pattern: /\b(?:_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|cl_(?:image_format|mem_fence_flags)|clk_event_t|event_t|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|intptr_t|ndrange_t|ptrdiff_t|queue_t|reserve_id_t|sampler_t|size_t|uintptr_t)\b/,
        alias: 'keyword'
      }
    });
    var attributes = {
      // Extracted from http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-types and opencl-host)
      'type-opencl-host': {
        pattern: /\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|short|int|long)|float|double)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\b/,
        alias: 'keyword'
      },
      'boolean-opencl-host': {
        pattern: /\bCL_(?:TRUE|FALSE)\b/,
        alias: 'boolean'
      },
      // Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-const)
      'constant-opencl-host': {
        pattern: /\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:16|24|8|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\b/,
        alias: 'constant'
      },
      // Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-host)
      'function-opencl-host': {
        pattern: /\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|Kernel|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\b/,
        alias: 'function'
      }
    };
    /* OpenCL host API */

    Prism.languages.insertBefore('c', 'keyword', attributes); // C++ includes everything from the OpenCL C host API plus the classes defined in cl2.h

    if (Prism.languages.cpp) {
      // Extracted from doxygen class list http://github.khronos.org/OpenCL-CLHPP/annotated.html
      attributes['type-opencl-host-cpp'] = {
        pattern: /\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|Sampler|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|UserEvent)\b/,
        alias: 'keyword'
      };
      Prism.languages.insertBefore('cpp', 'keyword', attributes);
    }
  })(Prism);
}

/***/ }),

/***/ 2845:
/***/ ((module) => {



module.exports = openqasm;
openqasm.displayName = 'openqasm';
openqasm.aliases = ['qasm'];

function openqasm(Prism) {
  // https://qiskit.github.io/openqasm/grammar/index.html
  Prism.languages.openqasm = {
    comment: /\/\*[\s\S]*?\*\/|\/\/.*/,
    string: {
      pattern: /"[^"\r\n\t]*"|'[^'\r\n\t]*'/,
      greedy: true
    },
    keyword: /\b(?:barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while|CX|OPENQASM|U)\b|#pragma\b/,
    'class-name': /\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\b/,
    "function": /\b(?:sin|cos|tan|exp|ln|sqrt|rotl|rotr|popcount)\b(?=\s*\()/,
    constant: /\b(?:pi|tau|euler)\b|π|𝜏|ℇ/,
    number: {
      pattern: /(^|[^.\w$])(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?(?:dt|ns|us|µs|ms|s)?/i,
      lookbehind: true
    },
    operator: /->|>>=?|<<=?|&&|\|\||\+\+|--|[!=<>&|~^+\-*/%]=?|@/,
    punctuation: /[(){}\[\];,:.]/
  };
  Prism.languages.qasm = Prism.languages.openqasm;
}

/***/ }),

/***/ 1575:
/***/ ((module) => {



module.exports = oz;
oz.displayName = 'oz';
oz.aliases = [];

function oz(Prism) {
  Prism.languages.oz = {
    comment: /\/\*[\s\S]*?\*\/|%.*/,
    string: {
      pattern: /"(?:[^"\\]|\\[\s\S])*"/,
      greedy: true
    },
    atom: {
      pattern: /'(?:[^'\\]|\\[\s\S])*'/,
      greedy: true,
      alias: 'builtin'
    },
    keyword: /\$|\[\]|\b(?:_|at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\b/,
    "function": [/\b[a-z][A-Za-z\d]*(?=\()/, {
      pattern: /(\{)[A-Z][A-Za-z\d]*\b/,
      lookbehind: true
    }],
    number: /\b(?:0[bx][\da-f]+|\d+(?:\.\d*)?(?:e~?\d+)?)\b|&(?:[^\\]|\\(?:\d{3}|.))/i,
    variable: /\b[A-Z][A-Za-z\d]*|`(?:[^`\\]|\\.)+`/,
    'attr-name': /\b\w+(?=:)/,
    operator: /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\=:?|!!?|[|#+\-*\/,~^@]|\b(?:andthen|div|mod|orelse)\b/,
    punctuation: /[\[\](){}.:;?]/
  };
}

/***/ }),

/***/ 4714:
/***/ ((module) => {



module.exports = parigp;
parigp.displayName = 'parigp';
parigp.aliases = [];

function parigp(Prism) {
  Prism.languages.parigp = {
    comment: /\/\*[\s\S]*?\*\/|\\\\.*/,
    string: {
      pattern: /"(?:[^"\\\r\n]|\\.)*"/,
      greedy: true
    },
    // PARI/GP does not care about white spaces at all
    // so let's process the keywords to build an appropriate regexp
    // (e.g. "b *r *e *a *k", etc.)
    keyword: function () {
      var keywords = ['breakpoint', 'break', 'dbg_down', 'dbg_err', 'dbg_up', 'dbg_x', 'forcomposite', 'fordiv', 'forell', 'forpart', 'forprime', 'forstep', 'forsubgroup', 'forvec', 'for', 'iferr', 'if', 'local', 'my', 'next', 'return', 'until', 'while'];
      keywords = keywords.map(function (keyword) {
        return keyword.split('').join(' *');
      }).join('|');
      return RegExp('\\b(?:' + keywords + ')\\b');
    }(),
    "function": /\b\w(?:[\w ]*\w)?(?= *\()/,
    number: {
      // The lookbehind and the negative lookahead prevent from breaking the .. operator
      pattern: /((?:\. *\. *)?)(?:\b\d(?: *\d)*(?: *(?!\. *\.)\.(?: *\d)*)?|\. *\d(?: *\d)*)(?: *e *(?:[+-] *)?\d(?: *\d)*)?/i,
      lookbehind: true
    },
    operator: /\. *\.|[*\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\(?: *\/)?(?: *=)?|&(?: *&)?|\| *\||['#~^]/,
    punctuation: /[\[\]{}().,:;|]/
  };
}

/***/ }),

/***/ 6149:
/***/ ((module) => {



module.exports = parser;
parser.displayName = 'parser';
parser.aliases = [];

function parser(Prism) {
  ;

  (function (Prism) {
    var parser = Prism.languages.parser = Prism.languages.extend('markup', {
      keyword: {
        pattern: /(^|[^^])(?:\^(?:case|eval|for|if|switch|throw)\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\b)/,
        lookbehind: true
      },
      variable: {
        pattern: /(^|[^^])\B\$(?:\w+|(?=[.{]))(?:(?:\.|::?)\w+)*(?:\.|::?)?/,
        lookbehind: true,
        inside: {
          punctuation: /\.|:+/
        }
      },
      "function": {
        pattern: /(^|[^^])\B[@^]\w+(?:(?:\.|::?)\w+)*(?:\.|::?)?/,
        lookbehind: true,
        inside: {
          keyword: {
            pattern: /(^@)(?:GET_|SET_)/,
            lookbehind: true
          },
          punctuation: /\.|:+/
        }
      },
      escape: {
        pattern: /\^(?:[$^;@()\[\]{}"':]|#[a-f\d]*)/i,
        alias: 'builtin'
      },
      punctuation: /[\[\](){};]/
    });
    parser = Prism.languages.insertBefore('parser', 'keyword', {
      'parser-comment': {
        pattern: /(\s)#.*/,
        lookbehind: true,
        alias: 'comment'
      },
      expression: {
        // Allow for 3 levels of depth
        pattern: /(^|[^^])\((?:[^()]|\((?:[^()]|\((?:[^()])*\))*\))*\)/,
        greedy: true,
        lookbehind: true,
        inside: {
          string: {
            pattern: /(^|[^^])(["'])(?:(?!\2)[^^]|\^[\s\S])*\2/,
            lookbehind: true
          },
          keyword: parser.keyword,
          variable: parser.variable,
          "function": parser["function"],
          "boolean": /\b(?:true|false)\b/,
          number: /\b(?:0x[a-f\d]+|\d+(?:\.\d*)?(?:e[+-]?\d+)?)\b/i,
          escape: parser.escape,
          operator: /[~+*\/\\%]|!(?:\|\|?|=)?|&&?|\|\|?|==|<[<=]?|>[>=]?|-[fd]?|\b(?:def|eq|ge|gt|in|is|le|lt|ne)\b/,
          punctuation: parser.punctuation
        }
      }
    });
    Prism.languages.insertBefore('inside', 'punctuation', {
      expression: parser.expression,
      keyword: parser.keyword,
      variable: parser.variable,
      "function": parser["function"],
      escape: parser.escape,
      'parser-punctuation': {
        pattern: parser.punctuation,
        alias: 'punctuation'
      }
    }, parser['tag'].inside['attr-value']);
  })(Prism);
}

/***/ }),

/***/ 6501:
/***/ ((module) => {



module.exports = pascal;
pascal.displayName = 'pascal';
pascal.aliases = ['objectpascal'];

function pascal(Prism) {
  // Based on Free Pascal

  /* TODO
  Support inline asm ?
  */
  Prism.languages.pascal = {
    comment: [/\(\*[\s\S]+?\*\)/, /\{[\s\S]+?\}/, /\/\/.*/],
    string: {
      pattern: /(?:'(?:''|[^'\r\n])*'(?!')|#[&$%]?[a-f\d]+)+|\^[a-z]/i,
      greedy: true
    },
    keyword: [{
      // Turbo Pascal
      pattern: /(^|[^&])\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\b/i,
      lookbehind: true
    }, {
      // Free Pascal
      pattern: /(^|[^&])\b(?:dispose|exit|false|new|true)\b/i,
      lookbehind: true
    }, {
      // Object Pascal
      pattern: /(^|[^&])\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\b/i,
      lookbehind: true
    }, {
      // Modifiers
      pattern: /(^|[^&])\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\b/i,
      lookbehind: true
    }],
    number: [// Hexadecimal, octal and binary
    /(?:[&%]\d+|\$[a-f\d]+)/i, // Decimal
    /\b\d+(?:\.\d+)?(?:e[+-]?\d+)?/i],
    operator: [/\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=]/i, {
      pattern: /(^|[^&])\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\b/,
      lookbehind: true
    }],
    punctuation: /\(\.|\.\)|[()\[\]:;,.]/
  };
  Prism.languages.objectpascal = Prism.languages.pascal;
}

/***/ }),

/***/ 5356:
/***/ ((module) => {



module.exports = pascaligo;
pascaligo.displayName = 'pascaligo';
pascaligo.aliases = [];

function pascaligo(Prism) {
  ;

  (function (Prism) {
    // Pascaligo is a layer 2 smart contract language for the tezos blockchain
    var braces = /\((?:[^()]|\((?:[^()]|\([^()]*\))*\))*\)/.source;
    var type = /(?:\b\w+(?:<braces>)?|<braces>)/.source.replace(/<braces>/g, function () {
      return braces;
    });
    var pascaligo = Prism.languages.pascaligo = {
      comment: /\(\*[\s\S]+?\*\)|\/\/.*/,
      string: {
        pattern: /(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1|\^[a-z]/i,
        greedy: true
      },
      'class-name': [{
        pattern: RegExp(/(\btype\s+\w+\s+is\s+)<type>/.source.replace(/<type>/g, function () {
          return type;
        }), 'i'),
        lookbehind: true,
        inside: null // see below

      }, {
        pattern: RegExp(/<type>(?=\s+is\b)/.source.replace(/<type>/g, function () {
          return type;
        }), 'i'),
        inside: null // see below

      }, {
        pattern: RegExp(/(:\s*)<type>/.source.replace(/<type>/g, function () {
          return type;
        })),
        lookbehind: true,
        inside: null // see below

      }],
      keyword: {
        pattern: /(^|[^&])\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\b/i,
        lookbehind: true
      },
      "boolean": {
        pattern: /(^|[^&])\b(?:True|False)\b/i,
        lookbehind: true
      },
      builtin: {
        pattern: /(^|[^&])\b(?:bool|int|list|map|nat|record|string|unit)\b/i,
        lookbehind: true
      },
      "function": /\b\w+(?=\s*\()/i,
      number: [// Hexadecimal, octal and binary
      /%[01]+|&[0-7]+|\$[a-f\d]+/i, // Decimal
      /\b\d+(?:\.\d+)?(?:e[+-]?\d+)?(?:mtz|n)?/i],
      operator: /->|=\/=|\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=|]|\b(?:and|mod|or)\b/,
      punctuation: /\(\.|\.\)|[()\[\]:;,.{}]/
    };
    var classNameInside = ['comment', 'keyword', 'builtin', 'operator', 'punctuation'].reduce(function (accum, key) {
      accum[key] = pascaligo[key];
      return accum;
    }, {});
    pascaligo['class-name'].forEach(function (p) {
      p.inside = classNameInside;
    });
  })(Prism);
}

/***/ }),

/***/ 4154:
/***/ ((module) => {



module.exports = pcaxis;
pcaxis.displayName = 'pcaxis';
pcaxis.aliases = ['px'];

function pcaxis(Prism) {
  Prism.languages.pcaxis = {
    string: /"[^"]*"/,
    keyword: {
      pattern: /((?:^|;)\s*)[-A-Z\d]+(?:\s*\[[-\w]+\])?(?:\s*\("[^"]*"(?:,\s*"[^"]*")*\))?(?=\s*=)/,
      lookbehind: true,
      greedy: true,
      inside: {
        keyword: /^[-A-Z\d]+/,
        language: {
          pattern: /^(\s*)\[[-\w]+\]/,
          lookbehind: true,
          inside: {
            punctuation: /^\[|\]$/,
            property: /[-\w]+/
          }
        },
        'sub-key': {
          pattern: /^(\s*)\S[\s\S]*/,
          lookbehind: true,
          inside: {
            parameter: {
              pattern: /"[^"]*"/,
              alias: 'property'
            },
            punctuation: /^\(|\)$|,/
          }
        }
      }
    },
    operator: /=/,
    tlist: {
      pattern: /TLIST\s*\(\s*\w+(?:(?:\s*,\s*"[^"]*")+|\s*,\s*"[^"]*"-"[^"]*")?\s*\)/,
      greedy: true,
      inside: {
        "function": /^TLIST/,
        property: {
          pattern: /^(\s*\(\s*)\w+/,
          lookbehind: true
        },
        string: /"[^"]*"/,
        punctuation: /[(),]/,
        operator: /-/
      }
    },
    punctuation: /[;,]/,
    number: {
      pattern: /(^|\s)\d+(?:\.\d+)?(?!\S)/,
      lookbehind: true
    },
    "boolean": /YES|NO/
  };
  Prism.languages.px = Prism.languages.pcaxis;
}

/***/ }),

/***/ 1697:
/***/ ((module) => {



module.exports = peoplecode;
peoplecode.displayName = 'peoplecode';
peoplecode.aliases = ['pcode'];

function peoplecode(Prism) {
  Prism.languages.peoplecode = {
    comment: RegExp([// C-style multiline comments
    /\/\*[\s\S]*?\*\//.source, // REM comments
    /\bREM[^;]*;/.source, // Nested <* *> comments
    /<\*(?:[^<*]|\*(?!>)|<(?!\*)|<\*(?:(?!\*>)[\s\S])*\*>)*\*>/.source, // /+ +/ comments
    /\/\+[\s\S]*?\+\//.source].join('|')),
    string: {
      pattern: /'(?:''|[^'\r\n])*'(?!')|"(?:""|[^"\r\n])*"(?!")/,
      greedy: true
    },
    variable: /%\w+/,
    'function-definition': {
      pattern: /((?:^|[^\w-])(?:function|method)\s+)\w+/i,
      lookbehind: true,
      alias: 'function'
    },
    'class-name': {
      pattern: /((?:^|[^-\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\s+)\w+(?::\w+)*/i,
      lookbehind: true,
      inside: {
        punctuation: /:/
      }
    },
    keyword: /\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|implements|import|instance|if|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\b/i,
    'operator-keyword': {
      pattern: /\b(?:and|not|or)\b/i,
      alias: 'operator'
    },
    "function": /[_a-z]\w*(?=\s*\()/i,
    "boolean": /\b(?:false|true)\b/i,
    number: /\b\d+(?:\.\d+)?\b/,
    operator: /<>|[<>]=?|!=|\*\*|[-+*/|=@]/,
    punctuation: /[:.;,()[\]]/
  };
  Prism.languages.pcode = Prism.languages.peoplecode;
}

/***/ }),

/***/ 8670:
/***/ ((module) => {



module.exports = perl;
perl.displayName = 'perl';
perl.aliases = [];

function perl(Prism) {
  Prism.languages.perl = {
    comment: [{
      // POD
      pattern: /(^\s*)=\w[\s\S]*?=cut.*/m,
      lookbehind: true
    }, {
      pattern: /(^|[^\\$])#.*/,
      lookbehind: true
    }],
    // TODO Could be nice to handle Heredoc too.
    string: [// q/.../
    {
      pattern: /\b(?:q|qq|qx|qw)\s*([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/,
      greedy: true
    }, // q a...a
    {
      pattern: /\b(?:q|qq|qx|qw)\s+([a-zA-Z0-9])(?:(?!\1)[^\\]|\\[\s\S])*\1/,
      greedy: true
    }, // q(...)
    {
      pattern: /\b(?:q|qq|qx|qw)\s*\((?:[^()\\]|\\[\s\S])*\)/,
      greedy: true
    }, // q{...}
    {
      pattern: /\b(?:q|qq|qx|qw)\s*\{(?:[^{}\\]|\\[\s\S])*\}/,
      greedy: true
    }, // q[...]
    {
      pattern: /\b(?:q|qq|qx|qw)\s*\[(?:[^[\]\\]|\\[\s\S])*\]/,
      greedy: true
    }, // q<...>
    {
      pattern: /\b(?:q|qq|qx|qw)\s*<(?:[^<>\\]|\\[\s\S])*>/,
      greedy: true
    }, // "...", `...`
    {
      pattern: /("|`)(?:(?!\1)[^\\]|\\[\s\S])*\1/,
      greedy: true
    }, // '...'
    // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '
    {
      pattern: /'(?:[^'\\\r\n]|\\.)*'/,
      greedy: true
    }],
    regex: [// m/.../
    {
      pattern: /\b(?:m|qr)\s*([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1[msixpodualngc]*/,
      greedy: true
    }, // m a...a
    {
      pattern: /\b(?:m|qr)\s+([a-zA-Z0-9])(?:(?!\1)[^\\]|\\[\s\S])*\1[msixpodualngc]*/,
      greedy: true
    }, // m(...)
    {
      pattern: /\b(?:m|qr)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngc]*/,
      greedy: true
    }, // m{...}
    {
      pattern: /\b(?:m|qr)\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngc]*/,
      greedy: true
    }, // m[...]
    {
      pattern: /\b(?:m|qr)\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngc]*/,
      greedy: true
    }, // m<...>
    {
      pattern: /\b(?:m|qr)\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngc]*/,
      greedy: true
    }, // The lookbehinds prevent -s from breaking
    // FIXME We don't handle change of separator like s(...)[...]
    // s/.../.../
    {
      pattern: /(^|[^-]\b)(?:s|tr|y)\s*([^a-zA-Z0-9\s{(\[<])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2[msixpodualngcer]*/,
      lookbehind: true,
      greedy: true
    }, // s a...a...a
    {
      pattern: /(^|[^-]\b)(?:s|tr|y)\s+([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2[msixpodualngcer]*/,
      lookbehind: true,
      greedy: true
    }, // s(...)(...)
    {
      pattern: /(^|[^-]\b)(?:s|tr|y)\s*\((?:[^()\\]|\\[\s\S])*\)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngcer]*/,
      lookbehind: true,
      greedy: true
    }, // s{...}{...}
    {
      pattern: /(^|[^-]\b)(?:s|tr|y)\s*\{(?:[^{}\\]|\\[\s\S])*\}\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngcer]*/,
      lookbehind: true,
      greedy: true
    }, // s[...][...]
    {
      pattern: /(^|[^-]\b)(?:s|tr|y)\s*\[(?:[^[\]\\]|\\[\s\S])*\]\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngcer]*/,
      lookbehind: true,
      greedy: true
    }, // s<...><...>
    {
      pattern: /(^|[^-]\b)(?:s|tr|y)\s*<(?:[^<>\\]|\\[\s\S])*>\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngcer]*/,
      lookbehind: true,
      greedy: true
    }, // /.../
    // The look-ahead tries to prevent two divisions on
    // the same line from being highlighted as regex.
    // This does not support multi-line regex.
    {
      pattern: /\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\b))/,
      greedy: true
    }],
    // FIXME Not sure about the handling of ::, ', and #
    variable: [// ${^POSTMATCH}
    /[&*$@%]\{\^[A-Z]+\}/, // $^V
    /[&*$@%]\^[A-Z_]/, // ${...}
    /[&*$@%]#?(?=\{)/, // $foo
    /[&*$@%]#?(?:(?:::)*'?(?!\d)[\w$]+(?![\w$]))+(?:::)*/i, // $1
    /[&*$@%]\d+/, // $_, @_, %!
    // The negative lookahead prevents from breaking the %= operator
    /(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/],
    filehandle: {
      // <>, <FOO>, _
      pattern: /<(?![<=])\S*>|\b_\b/,
      alias: 'symbol'
    },
    vstring: {
      // v1.2, 1.2.3
      pattern: /v\d+(?:\.\d+)*|\d+(?:\.\d+){2,}/,
      alias: 'string'
    },
    "function": {
      pattern: /sub \w+/i,
      inside: {
        keyword: /sub/
      }
    },
    keyword: /\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\b/,
    number: /\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)\b/,
    operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\b/,
    punctuation: /[{}[\];(),:]/
  };
}

/***/ }),

/***/ 760:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorPhp = __webpack_require__(391);

module.exports = phpExtras;
phpExtras.displayName = 'phpExtras';
phpExtras.aliases = [];

function phpExtras(Prism) {
  Prism.register(refractorPhp);
  Prism.languages.insertBefore('php', 'variable', {
    "this": /\$this\b/,
    global: /\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\b/,
    scope: {
      pattern: /\b[\w\\]+::/,
      inside: {
        keyword: /static|self|parent/,
        punctuation: /::|\\/
      }
    }
  });
}

/***/ }),

/***/ 391:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorMarkupTemplating = __webpack_require__(8083);

module.exports = php;
php.displayName = 'php';
php.aliases = [];

function php(Prism) {
  Prism.register(refractorMarkupTemplating)
  /**
   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/
   * Modified by Miles Johnson: http://milesj.me
   * Rewritten by Tom Pavelec
   *
   * Supports PHP 5.3 - 8.0
   */
  ;

  (function (Prism) {
    var comment = /\/\*[\s\S]*?\*\/|\/\/.*|#(?!\[).*/;
    var constant = [{
      pattern: /\b(?:false|true)\b/i,
      alias: 'boolean'
    }, {
      pattern: /(::\s*)\b[a-z_]\w*\b(?!\s*\()/i,
      greedy: true,
      lookbehind: true
    }, {
      pattern: /(\b(?:case|const)\s+)\b[a-z_]\w*(?=\s*[;=])/i,
      greedy: true,
      lookbehind: true
    }, /\b(?:null)\b/i, /\b[A-Z_][A-Z0-9_]*\b(?!\s*\()/];
    var number = /\b0b[01]+(?:_[01]+)*\b|\b0o[0-7]+(?:_[0-7]+)*\b|\b0x[\da-f]+(?:_[\da-f]+)*\b|(?:\b\d+(?:_\d+)*\.?(?:\d+(?:_\d+)*)?|\B\.\d+)(?:e[+-]?\d+)?/i;
    var operator = /<?=>|\?\?=?|\.{3}|\??->|[!=]=?=?|::|\*\*=?|--|\+\+|&&|\|\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;
    var punctuation = /[{}\[\](),:;]/;
    Prism.languages.php = {
      delimiter: {
        pattern: /\?>$|^<\?(?:php(?=\s)|=)?/i,
        alias: 'important'
      },
      comment: comment,
      variable: /\$+(?:\w+\b|(?=\{))/i,
      "package": {
        pattern: /(namespace\s+|use\s+(?:function\s+)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
        lookbehind: true,
        inside: {
          punctuation: /\\/
        }
      },
      'class-name-definition': {
        pattern: /(\b(?:class|enum|interface|trait)\s+)\b[a-z_]\w*(?!\\)\b/i,
        lookbehind: true,
        alias: 'class-name'
      },
      'function-definition': {
        pattern: /(\bfunction\s+)[a-z_]\w*(?=\s*\()/i,
        lookbehind: true,
        alias: 'function'
      },
      keyword: [{
        pattern: /(\(\s*)\b(?:bool|boolean|int|integer|float|string|object|array)\b(?=\s*\))/i,
        alias: 'type-casting',
        greedy: true,
        lookbehind: true
      }, {
        pattern: /([(,?]\s*)\b(?:bool|int|float|string|object|array(?!\s*\()|mixed|self|static|callable|iterable|(?:null|false)(?=\s*\|))\b(?=\s*\$)/i,
        alias: 'type-hint',
        greedy: true,
        lookbehind: true
      }, {
        pattern: /([(,?]\s*[\w|]\|\s*)(?:null|false)\b(?=\s*\$)/i,
        alias: 'type-hint',
        greedy: true,
        lookbehind: true
      }, {
        pattern: /(\)\s*:\s*(?:\?\s*)?)\b(?:bool|int|float|string|object|void|array(?!\s*\()|mixed|self|static|callable|iterable|(?:null|false)(?=\s*\|))\b/i,
        alias: 'return-type',
        greedy: true,
        lookbehind: true
      }, {
        pattern: /(\)\s*:\s*(?:\?\s*)?[\w|]\|\s*)(?:null|false)\b/i,
        alias: 'return-type',
        greedy: true,
        lookbehind: true
      }, {
        pattern: /\b(?:bool|int|float|string|object|void|array(?!\s*\()|mixed|iterable|(?:null|false)(?=\s*\|))\b/i,
        alias: 'type-declaration',
        greedy: true
      }, {
        pattern: /(\|\s*)(?:null|false)\b/i,
        alias: 'type-declaration',
        greedy: true,
        lookbehind: true
      }, {
        pattern: /\b(?:parent|self|static)(?=\s*::)/i,
        alias: 'static-context',
        greedy: true
      }, {
        // yield from
        pattern: /(\byield\s+)from\b/i,
        lookbehind: true
      }, // `class` is always a keyword unlike other keywords
      /\bclass\b/i, {
        // https://www.php.net/manual/en/reserved.keywords.php
        //
        // keywords cannot be preceded by "->"
        // the complex lookbehind means `(?<!(?:->|::)\s*)`
        pattern: /((?:^|[^\s>:]|(?:^|[^-])>|(?:^|[^:]):)\s*)\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\b/i,
        lookbehind: true
      }],
      'argument-name': {
        pattern: /([(,]\s+)\b[a-z_]\w*(?=\s*:(?!:))/i,
        lookbehind: true
      },
      'class-name': [{
        pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self|\s+static))\s+|\bcatch\s*\()\b[a-z_]\w*(?!\\)\b/i,
        greedy: true,
        lookbehind: true
      }, {
        pattern: /(\|\s*)\b[a-z_]\w*(?!\\)\b/i,
        greedy: true,
        lookbehind: true
      }, {
        pattern: /\b[a-z_]\w*(?!\\)\b(?=\s*\|)/i,
        greedy: true
      }, {
        pattern: /(\|\s*)(?:\\?\b[a-z_]\w*)+\b/i,
        alias: 'class-name-fully-qualified',
        greedy: true,
        lookbehind: true,
        inside: {
          punctuation: /\\/
        }
      }, {
        pattern: /(?:\\?\b[a-z_]\w*)+\b(?=\s*\|)/i,
        alias: 'class-name-fully-qualified',
        greedy: true,
        inside: {
          punctuation: /\\/
        }
      }, {
        pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self\b|\s+static\b))\s+|\bcatch\s*\()(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
        alias: 'class-name-fully-qualified',
        greedy: true,
        lookbehind: true,
        inside: {
          punctuation: /\\/
        }
      }, {
        pattern: /\b[a-z_]\w*(?=\s*\$)/i,
        alias: 'type-declaration',
        greedy: true
      }, {
        pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
        alias: ['class-name-fully-qualified', 'type-declaration'],
        greedy: true,
        inside: {
          punctuation: /\\/
        }
      }, {
        pattern: /\b[a-z_]\w*(?=\s*::)/i,
        alias: 'static-context',
        greedy: true
      }, {
        pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*::)/i,
        alias: ['class-name-fully-qualified', 'static-context'],
        greedy: true,
        inside: {
          punctuation: /\\/
        }
      }, {
        pattern: /([(,?]\s*)[a-z_]\w*(?=\s*\$)/i,
        alias: 'type-hint',
        greedy: true,
        lookbehind: true
      }, {
        pattern: /([(,?]\s*)(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
        alias: ['class-name-fully-qualified', 'type-hint'],
        greedy: true,
        lookbehind: true,
        inside: {
          punctuation: /\\/
        }
      }, {
        pattern: /(\)\s*:\s*(?:\?\s*)?)\b[a-z_]\w*(?!\\)\b/i,
        alias: 'return-type',
        greedy: true,
        lookbehind: true
      }, {
        pattern: /(\)\s*:\s*(?:\?\s*)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
        alias: ['class-name-fully-qualified', 'return-type'],
        greedy: true,
        lookbehind: true,
        inside: {
          punctuation: /\\/
        }
      }],
      constant: constant,
      "function": {
        pattern: /(^|[^\\\w])\\?[a-z_](?:[\w\\]*\w)?(?=\s*\()/i,
        lookbehind: true,
        inside: {
          punctuation: /\\/
        }
      },
      property: {
        pattern: /(->\s*)\w+/,
        lookbehind: true
      },
      number: number,
      operator: operator,
      punctuation: punctuation
    };
    var string_interpolation = {
      pattern: /\{\$(?:\{(?:\{[^{}]+\}|[^{}]+)\}|[^{}])+\}|(^|[^\\{])\$+(?:\w+(?:\[[^\r\n\[\]]+\]|->\w+)?)/,
      lookbehind: true,
      inside: Prism.languages.php
    };
    var string = [{
      pattern: /<<<'([^']+)'[\r\n](?:.*[\r\n])*?\1;/,
      alias: 'nowdoc-string',
      greedy: true,
      inside: {
        delimiter: {
          pattern: /^<<<'[^']+'|[a-z_]\w*;$/i,
          alias: 'symbol',
          inside: {
            punctuation: /^<<<'?|[';]$/
          }
        }
      }
    }, {
      pattern: /<<<(?:"([^"]+)"[\r\n](?:.*[\r\n])*?\1;|([a-z_]\w*)[\r\n](?:.*[\r\n])*?\2;)/i,
      alias: 'heredoc-string',
      greedy: true,
      inside: {
        delimiter: {
          pattern: /^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i,
          alias: 'symbol',
          inside: {
            punctuation: /^<<<"?|[";]$/
          }
        },
        interpolation: string_interpolation
      }
    }, {
      pattern: /`(?:\\[\s\S]|[^\\`])*`/,
      alias: 'backtick-quoted-string',
      greedy: true
    }, {
      pattern: /'(?:\\[\s\S]|[^\\'])*'/,
      alias: 'single-quoted-string',
      greedy: true
    }, {
      pattern: /"(?:\\[\s\S]|[^\\"])*"/,
      alias: 'double-quoted-string',
      greedy: true,
      inside: {
        interpolation: string_interpolation
      }
    }];
    Prism.languages.insertBefore('php', 'variable', {
      string: string,
      attribute: {
        pattern: /#\[(?:[^"'\/#]|\/(?![*/])|\/\/.*$|#(?!\[).*$|\/\*(?:[^*]|\*(?!\/))*\*\/|"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*')+\](?=\s*[a-z$#])/im,
        greedy: true,
        inside: {
          'attribute-content': {
            pattern: /^(#\[)[\s\S]+(?=\]$)/,
            lookbehind: true,
            // inside can appear subset of php
            inside: {
              comment: comment,
              string: string,
              'attribute-class-name': [{
                pattern: /([^:]|^)\b[a-z_]\w*(?!\\)\b/i,
                alias: 'class-name',
                greedy: true,
                lookbehind: true
              }, {
                pattern: /([^:]|^)(?:\\?\b[a-z_]\w*)+/i,
                alias: ['class-name', 'class-name-fully-qualified'],
                greedy: true,
                lookbehind: true,
                inside: {
                  punctuation: /\\/
                }
              }],
              constant: constant,
              number: number,
              operator: operator,
              punctuation: punctuation
            }
          },
          delimiter: {
            pattern: /^#\[|\]$/,
            alias: 'punctuation'
          }
        }
      }
    });
    Prism.hooks.add('before-tokenize', function (env) {
      if (!/<\?/.test(env.code)) {
        return;
      }

      var phpPattern = /<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#(?!\[))(?:[^?\n\r]|\?(?!>))*(?=$|\?>|[\r\n])|#\[|\/\*(?:[^*]|\*(?!\/))*(?:\*\/|$))*?(?:\?>|$)/gi;
      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);
    });
    Prism.hooks.add('after-tokenize', function (env) {
      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');
    });
  })(Prism);
}

/***/ }),

/***/ 7721:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorPhp = __webpack_require__(391);

var refractorJavadoclike = __webpack_require__(8829);

module.exports = phpdoc;
phpdoc.displayName = 'phpdoc';
phpdoc.aliases = [];

function phpdoc(Prism) {
  Prism.register(refractorPhp);
  Prism.register(refractorJavadoclike);

  (function (Prism) {
    var typeExpression = /(?:\b[a-zA-Z]\w*|[|\\[\]])+/.source;
    Prism.languages.phpdoc = Prism.languages.extend('javadoclike', {
      parameter: {
        pattern: RegExp('(@(?:global|param|property(?:-read|-write)?|var)\\s+(?:' + typeExpression + '\\s+)?)\\$\\w+'),
        lookbehind: true
      }
    });
    Prism.languages.insertBefore('phpdoc', 'keyword', {
      'class-name': [{
        pattern: RegExp('(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\s+)' + typeExpression),
        lookbehind: true,
        inside: {
          keyword: /\b(?:callback|resource|boolean|integer|double|object|string|array|false|float|mixed|bool|null|self|true|void|int)\b/,
          punctuation: /[|\\[\]()]/
        }
      }]
    });
    Prism.languages.javadoclike.addSupport('php', Prism.languages.phpdoc);
  })(Prism);
}

/***/ }),

/***/ 6376:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorSql = __webpack_require__(8707);

module.exports = plsql;
plsql.displayName = 'plsql';
plsql.aliases = [];

function plsql(Prism) {
  Prism.register(refractorSql);

  (function (Prism) {
    var plsql = Prism.languages.plsql = Prism.languages.extend('sql', {
      comment: [/\/\*[\s\S]*?\*\//, /--.*/]
    });
    var keyword = plsql['keyword'];

    if (!Array.isArray(keyword)) {
      keyword = plsql['keyword'] = [keyword];
    }

    keyword.unshift(/\b(?:ACCESS|AGENT|AGGREGATE|ARRAY|ARROW|AT|ATTRIBUTE|AUDIT|AUTHID|BFILE_BASE|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BYTE|CALLING|CHAR_BASE|CHARSET(?:FORM|ID)|CLOB_BASE|COLAUTH|COLLECT|CLUSTERS?|COMPILED|COMPRESS|CONSTANT|CONSTRUCTOR|CONTEXT|CRASH|CUSTOMDATUM|DANGLING|DATE_BASE|DEFINE|DETERMINISTIC|DURATION|ELEMENT|EMPTY|EXCEPTIONS?|EXCLUSIVE|EXTERNAL|FINAL|FORALL|FORM|FOUND|GENERAL|HEAP|HIDDEN|IDENTIFIED|IMMEDIATE|INCLUDING|INCREMENT|INDICATOR|INDEXES|INDICES|INFINITE|INITIAL|ISOPEN|INSTANTIABLE|INTERFACE|INVALIDATE|JAVA|LARGE|LEADING|LENGTH|LIBRARY|LIKE[24C]|LIMITED|LONG|LOOP|MAP|MAXEXTENTS|MAXLEN|MEMBER|MINUS|MLSLABEL|MULTISET|NAME|NAN|NATIVE|NEW|NOAUDIT|NOCOMPRESS|NOCOPY|NOTFOUND|NOWAIT|NUMBER(?:_BASE)?|OBJECT|OCI(?:COLL|DATE|DATETIME|DURATION|INTERVAL|LOBLOCATOR|NUMBER|RAW|REF|REFCURSOR|ROWID|STRING|TYPE)|OFFLINE|ONLINE|ONLY|OPAQUE|OPERATOR|ORACLE|ORADATA|ORGANIZATION|ORL(?:ANY|VARY)|OTHERS|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETERS?|PASCAL|PCTFREE|PIPE(?:LINED)?|PRAGMA|PRIOR|PRIVATE|RAISE|RANGE|RAW|RECORD|REF|REFERENCE|REM|REMAINDER|RESULT|RESOURCE|RETURNING|REVERSE|ROW(?:ID|NUM|TYPE)|SAMPLE|SB[124]|SEGMENT|SELF|SEPARATE|SEQUENCE|SHORT|SIZE(?:_T)?|SPARSE|SQL(?:CODE|DATA|NAME|STATE)|STANDARD|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUCCESSFUL|SYNONYM|SYSDATE|TABAUTH|TDO|THE|TIMEZONE_(?:ABBR|HOUR|MINUTE|REGION)|TRAILING|TRANSAC(?:TIONAL)?|TRUSTED|UB[124]|UID|UNDER|UNTRUSTED|VALIDATE|VALIST|VARCHAR2|VARIABLE|VARIANCE|VARRAY|VIEWS|VOID|WHENEVER|WRAPPED|ZONE)\b/i);
    var operator = plsql['operator'];

    if (!Array.isArray(operator)) {
      operator = plsql['operator'] = [operator];
    }

    operator.unshift(/:=/);
  })(Prism);
}

/***/ }),

/***/ 500:
/***/ ((module) => {



module.exports = powerquery;
powerquery.displayName = 'powerquery';
powerquery.aliases = [];

function powerquery(Prism) {
  // https://docs.microsoft.com/en-us/powerquery-m/power-query-m-language-specification
  Prism.languages.powerquery = {
    comment: {
      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:\/\/).*)/,
      lookbehind: true
    },
    'quoted-identifier': {
      pattern: /#"(?:[^"\r\n]|"")*"(?!")/,
      greedy: true,
      alias: 'variable'
    },
    string: {
      pattern: /"(?:[^"\r\n]|"")*"(?!")/,
      greedy: true
    },
    constant: [/\bDay\.(?:Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday)\b/, /\bTraceLevel\.(?:Critical|Error|Information|Verbose|Warning)\b/, /\bOccurrence\.(?:First|Last|All)\b/, /\bOrder\.(?:Ascending|Descending)\b/, /\bRoundingMode\.(?:AwayFromZero|Down|ToEven|TowardZero|Up)\b/, /\bMissingField\.(?:Error|Ignore|UseNull)\b/, /\bQuoteStyle\.(?:Csv|None)\b/, /\bJoinKind\.(?:Inner|LeftOuter|RightOuter|FullOuter|LeftAnti|RightAnti)\b/, /\bGroupKind\.(?:Global|Local)\b/, /\bExtraValues\.(?:List|Ignore|Error)\b/, /\bJoinAlgorithm\.(?:Dynamic|PairwiseHash|SortMerge|LeftHash|RightHash|LeftIndex|RightIndex)\b/, /\bJoinSide\.(?:Left|Right)\b/, /\bPrecision\.(?:Double|Decimal)\b/, /\bRelativePosition\.From(?:End|Start)\b/, /\bTextEncoding\.(?:Ascii|BigEndianUnicode|Unicode|Utf8|Utf16|Windows)\b/, /\b(?:Any|Binary|Date|DateTime|DateTimeZone|Duration|Int8|Int16|Int32|Int64|Function|List|Logical|None|Number|Record|Table|Text|Time)\.Type\b/, /\bnull\b/],
    "boolean": /\b(?:true|false)\b/,
    keyword: /\b(?:and|as|each|else|error|if|in|is|let|meta|not|nullable|optional|or|otherwise|section|shared|then|try|type)\b|#(?:binary|date|datetime|datetimezone|duration|infinity|nan|sections|shared|table|time)\b/,
    "function": {
      pattern: /(^|[^#\w.])(?!\d)[\w.]+(?=\s*\()/,
      lookbehind: true
    },
    'data-type': {
      pattern: /\b(?:any|anynonnull|binary|date|datetime|datetimezone|duration|function|list|logical|none|number|record|table|text|time|type)\b/,
      alias: 'variable'
    },
    number: {
      pattern: /\b0x[\da-f]+\b|(?:[+-]?(?:\b\d+\.)?\b\d+|[+-]\.\d+|(^|[^.])\B\.\d+)(?:e[+-]?\d+)?\b/i,
      lookbehind: true
    },
    operator: /[-+*\/&?@^]|<(?:=>?|>)?|>=?|=>?|\.\.\.?/,
    punctuation: /[,;\[\](){}]/
  };
  Prism.languages.pq = Prism.languages['powerquery'];
  Prism.languages.mscript = Prism.languages['powerquery'];
}

/***/ }),

/***/ 160:
/***/ ((module) => {



module.exports = powershell;
powershell.displayName = 'powershell';
powershell.aliases = [];

function powershell(Prism) {
  ;

  (function (Prism) {
    var powershell = Prism.languages.powershell = {
      comment: [{
        pattern: /(^|[^`])<#[\s\S]*?#>/,
        lookbehind: true
      }, {
        pattern: /(^|[^`])#.*/,
        lookbehind: true
      }],
      string: [{
        pattern: /"(?:`[\s\S]|[^`"])*"/,
        greedy: true,
        inside: {
          "function": {
            // Allow for one level of nesting
            pattern: /(^|[^`])\$\((?:\$\([^\r\n()]*\)|(?!\$\()[^\r\n)])*\)/,
            lookbehind: true,
            // Populated at end of file
            inside: {}
          }
        }
      }, {
        pattern: /'(?:[^']|'')*'/,
        greedy: true
      }],
      // Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices
      // Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)
      namespace: /\[[a-z](?:\[(?:\[[^\]]*\]|[^\[\]])*\]|[^\[\]])*\]/i,
      "boolean": /\$(?:true|false)\b/i,
      variable: /\$\w+\b/,
      // Cmdlets and aliases. Aliases should come last, otherwise "write" gets preferred over "write-host" for example
      // Get-Command | ?{ $_.ModuleName -match "Microsoft.PowerShell.(Util|Core|Management)" }
      // Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match "Microsoft.PowerShell.(Util|Core|Management)" }
      "function": [/\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\b/i, /\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\b/i],
      // per http://technet.microsoft.com/en-us/library/hh847744.aspx
      keyword: /\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\b/i,
      operator: {
        pattern: /(\W?)(?:!|-(?:eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\b|-[-=]?|\+[+=]?|[*\/%]=?)/i,
        lookbehind: true
      },
      punctuation: /[|{}[\];(),.]/
    }; // Variable interpolation inside strings, and nested expressions

    var stringInside = powershell.string[0].inside;
    stringInside["boolean"] = powershell["boolean"];
    stringInside.variable = powershell.variable;
    stringInside["function"].inside = powershell;
  })(Prism);
}

/***/ }),

/***/ 9207:
/***/ ((module) => {



module.exports = processing;
processing.displayName = 'processing';
processing.aliases = [];

function processing(Prism) {
  Prism.languages.processing = Prism.languages.extend('clike', {
    keyword: /\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\b/,
    operator: /<[<=]?|>[>=]?|&&?|\|\|?|[%?]|[!=+\-*\/]=?/
  });
  Prism.languages.insertBefore('processing', 'number', {
    // Special case: XML is a type
    constant: /\b(?!XML\b)[A-Z][A-Z\d_]+\b/,
    type: {
      pattern: /\b(?:boolean|byte|char|color|double|float|int|[A-Z]\w*)\b/,
      alias: 'variable'
    }
  }); // Spaces are allowed between function name and parenthesis

  Prism.languages.processing['function'] = /\b\w+(?=\s*\()/; // Class-names is not styled by default

  Prism.languages.processing['class-name'].alias = 'variable';
}

/***/ }),

/***/ 5107:
/***/ ((module) => {



module.exports = prolog;
prolog.displayName = 'prolog';
prolog.aliases = [];

function prolog(Prism) {
  Prism.languages.prolog = {
    // Syntax depends on the implementation
    comment: [/%.+/, /\/\*[\s\S]*?\*\//],
    // Depending on the implementation, strings may allow escaped newlines and quote-escape
    string: {
      pattern: /(["'])(?:\1\1|\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    builtin: /\b(?:fx|fy|xf[xy]?|yfx?)\b/,
    variable: /\b[A-Z_]\w*/,
    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?
    "function": /\b[a-z]\w*(?:(?=\()|\/\d+)/,
    number: /\b\d+(?:\.\d*)?/,
    // Custom operators are allowed
    operator: /[:\\=><\-?*@\/;+^|!$.]+|\b(?:is|mod|not|xor)\b/,
    punctuation: /[(){}\[\],]/
  };
}

/***/ }),

/***/ 1696:
/***/ ((module) => {



module.exports = promql;
promql.displayName = 'promql';
promql.aliases = [];

function promql(Prism) {
  // Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts
  // As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/
  ;

  (function (Prism) {
    // PromQL Aggregation Operators
    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)
    var aggregations = ['sum', 'min', 'max', 'avg', 'group', 'stddev', 'stdvar', 'count', 'count_values', 'bottomk', 'topk', 'quantile']; // PromQL vector matching + the by and without clauses
    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)

    var vectorMatching = ['on', 'ignoring', 'group_right', 'group_left', 'by', 'without']; // PromQL offset modifier
    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)

    var offsetModifier = ['offset'];
    var keywords = aggregations.concat(vectorMatching, offsetModifier);
    Prism.languages.promql = {
      comment: {
        pattern: /(^[ \t]*)#.*/m,
        lookbehind: true
      },
      'vector-match': {
        // Match the comma-separated label lists inside vector matching:
        pattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\s*)\\([^)]*\\)'),
        lookbehind: true,
        inside: {
          'label-key': {
            pattern: /\b[^,]+\b/,
            alias: 'attr-name'
          },
          punctuation: /[(),]/
        }
      },
      'context-labels': {
        pattern: /\{[^{}]*\}/,
        inside: {
          'label-key': {
            pattern: /\b[a-z_]\w*(?=\s*(?:=|![=~]))/,
            alias: 'attr-name'
          },
          'label-value': {
            pattern: /(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1/,
            greedy: true,
            alias: 'attr-value'
          },
          punctuation: /\{|\}|=~?|![=~]|,/
        }
      },
      'context-range': [{
        pattern: /\[[\w\s:]+\]/,
        // [1m]
        inside: {
          punctuation: /\[|\]|:/,
          'range-duration': {
            pattern: /\b(?:\d+(?:[smhdwy]|ms))+\b/i,
            alias: 'number'
          }
        }
      }, {
        pattern: /(\boffset\s+)\w+/,
        // offset 1m
        lookbehind: true,
        inside: {
          'range-duration': {
            pattern: /\b(?:\d+(?:[smhdwy]|ms))+\b/i,
            alias: 'number'
          }
        }
      }],
      keyword: new RegExp('\\b(?:' + keywords.join('|') + ')\\b', 'i'),
      "function": /\b[a-z_]\w*(?=\s*\()/i,
      number: /[-+]?(?:(?:\b\d+(?:\.\d+)?|\B\.\d+)(?:e[-+]?\d+)?\b|\b(?:0x[0-9a-f]+|nan|inf)\b)/i,
      operator: /[\^*/%+-]|==|!=|<=|<|>=|>|\b(?:and|unless|or)\b/i,
      punctuation: /[{};()`,.[\]]/
    };
  })(Prism);
}

/***/ }),

/***/ 786:
/***/ ((module) => {



module.exports = properties;
properties.displayName = 'properties';
properties.aliases = [];

function properties(Prism) {
  Prism.languages.properties = {
    comment: /^[ \t]*[#!].*$/m,
    'attr-value': {
      pattern: /(^[ \t]*(?:\\(?:\r\n|[\s\S])|[^\\\s:=])+(?: *[=:] *(?! )| ))(?:\\(?:\r\n|[\s\S])|[^\\\r\n])+/m,
      lookbehind: true
    },
    'attr-name': /^[ \t]*(?:\\(?:\r\n|[\s\S])|[^\\\s:=])+(?= *[=:]| )/m,
    punctuation: /[=:]/
  };
}

/***/ }),

/***/ 4834:
/***/ ((module) => {



module.exports = protobuf;
protobuf.displayName = 'protobuf';
protobuf.aliases = [];

function protobuf(Prism) {
  ;

  (function (Prism) {
    var builtinTypes = /\b(?:double|float|[su]?int(?:32|64)|s?fixed(?:32|64)|bool|string|bytes)\b/;
    Prism.languages.protobuf = Prism.languages.extend('clike', {
      'class-name': [{
        pattern: /(\b(?:enum|extend|message|service)\s+)[A-Za-z_]\w*(?=\s*\{)/,
        lookbehind: true
      }, {
        pattern: /(\b(?:rpc\s+\w+|returns)\s*\(\s*(?:stream\s+)?)\.?[A-Za-z_]\w*(?:\.[A-Za-z_]\w*)*(?=\s*\))/,
        lookbehind: true
      }],
      keyword: /\b(?:enum|extend|extensions|import|message|oneof|option|optional|package|public|repeated|required|reserved|returns|rpc(?=\s+\w)|service|stream|syntax|to)\b(?!\s*=\s*\d)/,
      "function": /\b[a-z_]\w*(?=\s*\()/i
    });
    Prism.languages.insertBefore('protobuf', 'operator', {
      map: {
        pattern: /\bmap<\s*[\w.]+\s*,\s*[\w.]+\s*>(?=\s+[a-z_]\w*\s*[=;])/i,
        alias: 'class-name',
        inside: {
          punctuation: /[<>.,]/,
          builtin: builtinTypes
        }
      },
      builtin: builtinTypes,
      'positional-class-name': {
        pattern: /(?:\b|\B\.)[a-z_]\w*(?:\.[a-z_]\w*)*(?=\s+[a-z_]\w*\s*[=;])/i,
        alias: 'class-name',
        inside: {
          punctuation: /\./
        }
      },
      annotation: {
        pattern: /(\[\s*)[a-z_]\w*(?=\s*=)/i,
        lookbehind: true
      }
    });
  })(Prism);
}

/***/ }),

/***/ 2921:
/***/ ((module) => {



module.exports = psl;
psl.displayName = 'psl';
psl.aliases = [];

function psl(Prism) {
  Prism.languages.psl = {
    comment: {
      pattern: /#.*/,
      greedy: true
    },
    string: {
      pattern: /"(?:\\.|[^\\"])*"/,
      greedy: true,
      inside: {
        symbol: /\\[ntrbA-Z"\\]/
      }
    },
    'heredoc-string': {
      pattern: /<<<([a-zA-Z_]\w*)[\r\n](?:.*[\r\n])*?\1\b/,
      alias: 'string',
      greedy: true
    },
    keyword: /\b(?:__multi|__single|case|default|do|else|elsif|exit|export|for|foreach|function|if|last|line|local|next|requires|return|switch|until|while|word)\b/,
    constant: /\b(?:ALARM|CHART_ADD_GRAPH|CHART_DELETE_GRAPH|CHART_DESTROY|CHART_LOAD|CHART_PRINT|EOF|FALSE|False|false|NO|No|no|OFFLINE|OK|PSL_PROF_LOG|R_CHECK_HORIZ|R_CHECK_VERT|R_CLICKER|R_COLUMN|R_FRAME|R_ICON|R_LABEL|R_LABEL_CENTER|R_LIST_MULTIPLE|R_LIST_MULTIPLE_ND|R_LIST_SINGLE|R_LIST_SINGLE_ND|R_MENU|R_POPUP|R_POPUP_SCROLLED|R_RADIO_HORIZ|R_RADIO_VERT|R_ROW|R_SCALE_HORIZ|R_SCALE_VERT|R_SPINNER|R_TEXT_FIELD|R_TEXT_FIELD_LABEL|R_TOGGLE|TRIM_LEADING|TRIM_LEADING_AND_TRAILING|TRIM_REDUNDANT|TRIM_TRAILING|TRUE|True|true|VOID|WARN)\b/,
    variable: /\b(?:errno|exit_status|PslDebug)\b/,
    builtin: {
      pattern: /\b(?:acos|add_diary|annotate|annotate_get|asctime|asin|atan|atexit|ascii_to_ebcdic|batch_set|blackout|cat|ceil|chan_exists|change_state|close|code_cvt|cond_signal|cond_wait|console_type|convert_base|convert_date|convert_locale_date|cos|cosh|create|destroy_lock|dump_hist|date|destroy|difference|dget_text|dcget_text|ebcdic_to_ascii|encrypt|event_archive|event_catalog_get|event_check|event_query|event_range_manage|event_range_query|event_report|event_schedule|event_trigger|event_trigger2|execute|exists|exp|fabs|floor|fmod|full_discovery|file|fopen|ftell|fseek|grep|get_vars|getenv|get|get_chan_info|get_ranges|get_text|gethostinfo|getpid|getpname|history_get_retention|history|index|int|is_var|intersection|isnumber|internal|in_transition|join|kill|length|lines|lock|lock_info|log|loge|log10|matchline|msg_check|msg_get_format|msg_get_severity|msg_printf|msg_sprintf|ntharg|num_consoles|nthargf|nthline|nthlinef|num_bytes|print|proc_exists|process|popen|printf|pconfig|poplines|pow|PslExecute|PslFunctionCall|PslFunctionExists|PslSetOptions|random|read|readln|refresh_parameters|remote_check|remote_close|remote_event_query|remote_event_trigger|remote_file_send|remote_open|remove|replace|rindex|sec_check_priv|sec_store_get|sec_store_set|set_alarm_ranges|set_locale|share|sin|sinh|sleep|sopen|sqrt|srandom|subset|set|substr|system|sprintf|sort|snmp_agent_config|_snmp_debug|snmp_agent_stop|snmp_agent_start|snmp_h_set|snmp_h_get_next|snmp_h_get|snmp_set|snmp_walk|snmp_get_next|snmp_get|snmp_config|snmp_close|snmp_open|snmp_trap_receive|snmp_trap_ignore|snmp_trap_listen|snmp_trap_send|snmp_trap_raise_std_trap|snmp_trap_register_im|splitline|strcasecmp|str_repeat|trim|tail|tan|tanh|time|tmpnam|tolower|toupper|trace_psl_process|text_domain|unlock|unique|union|unset|va_arg|va_start|write)\b/,
      alias: 'builtin-function'
    },
    'foreach-variable': {
      pattern: /(\bforeach\s+(?:(?:\w+\b|"(?:\\.|[^\\"])*")\s+){0,2})[_a-zA-Z]\w*(?=\s*\()/,
      lookbehind: true,
      greedy: true
    },
    "function": {
      pattern: /\b[_a-z]\w*\b(?=\s*\()/i
    },
    number: /\b(?:0x[0-9a-f]+|[0-9]+(?:\.[0-9]+)?)\b/i,
    operator: /--|\+\+|&&=?|\|\|=?|<<=?|>>=?|[=!]~|[-+*/%&|^!=<>]=?|\.|[:?]/,
    punctuation: /[(){}\[\];,]/
  };
}

/***/ }),

/***/ 8153:
/***/ ((module) => {



module.exports = pug;
pug.displayName = 'pug';
pug.aliases = [];

function pug(Prism) {
  ;

  (function (Prism) {
    // TODO:
    // - Add CSS highlighting inside <style> tags
    // - Add support for multi-line code blocks
    // - Add support for interpolation #{} and !{}
    // - Add support for tag interpolation #[]
    // - Add explicit support for plain text using |
    // - Add support for markup embedded in plain text
    Prism.languages.pug = {
      // Multiline stuff should appear before the rest
      // This handles both single-line and multi-line comments
      comment: {
        pattern: /(^([\t ]*))\/\/.*(?:(?:\r?\n|\r)\2[\t ].+)*/m,
        lookbehind: true
      },
      // All the tag-related part is in lookbehind
      // so that it can be highlighted by the "tag" pattern
      'multiline-script': {
        pattern: /(^([\t ]*)script\b.*\.[\t ]*)(?:(?:\r?\n|\r(?!\n))(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/m,
        lookbehind: true,
        inside: Prism.languages.javascript
      },
      // See at the end of the file for known filters
      filter: {
        pattern: /(^([\t ]*)):.+(?:(?:\r?\n|\r(?!\n))(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/m,
        lookbehind: true,
        inside: {
          'filter-name': {
            pattern: /^:[\w-]+/,
            alias: 'variable'
          }
        }
      },
      'multiline-plain-text': {
        pattern: /(^([\t ]*)[\w\-#.]+\.[\t ]*)(?:(?:\r?\n|\r(?!\n))(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/m,
        lookbehind: true
      },
      markup: {
        pattern: /(^[\t ]*)<.+/m,
        lookbehind: true,
        inside: Prism.languages.markup
      },
      doctype: {
        pattern: /((?:^|\n)[\t ]*)doctype(?: .+)?/,
        lookbehind: true
      },
      // This handle all conditional and loop keywords
      'flow-control': {
        pattern: /(^[\t ]*)(?:if|unless|else|case|when|default|each|while)\b(?: .+)?/m,
        lookbehind: true,
        inside: {
          each: {
            pattern: /^each .+? in\b/,
            inside: {
              keyword: /\b(?:each|in)\b/,
              punctuation: /,/
            }
          },
          branch: {
            pattern: /^(?:if|unless|else|case|when|default|while)\b/,
            alias: 'keyword'
          },
          rest: Prism.languages.javascript
        }
      },
      keyword: {
        pattern: /(^[\t ]*)(?:block|extends|include|append|prepend)\b.+/m,
        lookbehind: true
      },
      mixin: [// Declaration
      {
        pattern: /(^[\t ]*)mixin .+/m,
        lookbehind: true,
        inside: {
          keyword: /^mixin/,
          "function": /\w+(?=\s*\(|\s*$)/,
          punctuation: /[(),.]/
        }
      }, // Usage
      {
        pattern: /(^[\t ]*)\+.+/m,
        lookbehind: true,
        inside: {
          name: {
            pattern: /^\+\w+/,
            alias: 'function'
          },
          rest: Prism.languages.javascript
        }
      }],
      script: {
        pattern: /(^[\t ]*script(?:(?:&[^(]+)?\([^)]+\))*[\t ]).+/m,
        lookbehind: true,
        inside: Prism.languages.javascript
      },
      'plain-text': {
        pattern: /(^[\t ]*(?!-)[\w\-#.]*[\w\-](?:(?:&[^(]+)?\([^)]+\))*\/?[\t ]).+/m,
        lookbehind: true
      },
      tag: {
        pattern: /(^[\t ]*)(?!-)[\w\-#.]*[\w\-](?:(?:&[^(]+)?\([^)]+\))*\/?:?/m,
        lookbehind: true,
        inside: {
          attributes: [{
            pattern: /&[^(]+\([^)]+\)/,
            inside: Prism.languages.javascript
          }, {
            pattern: /\([^)]+\)/,
            inside: {
              'attr-value': {
                pattern: /(=\s*(?!\s))(?:\{[^}]*\}|[^,)\r\n]+)/,
                lookbehind: true,
                inside: Prism.languages.javascript
              },
              'attr-name': /[\w-]+(?=\s*!?=|\s*[,)])/,
              punctuation: /[!=(),]+/
            }
          }],
          punctuation: /:/,
          'attr-id': /#[\w\-]+/,
          'attr-class': /\.[\w\-]+/
        }
      },
      code: [{
        pattern: /(^[\t ]*(?:-|!?=)).+/m,
        lookbehind: true,
        inside: Prism.languages.javascript
      }],
      punctuation: /[.\-!=|]+/
    };
    var filter_pattern = /(^([\t ]*)):<filter_name>(?:(?:\r?\n|\r(?!\n))(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/.source; // Non exhaustive list of available filters and associated languages

    var filters = [{
      filter: 'atpl',
      language: 'twig'
    }, {
      filter: 'coffee',
      language: 'coffeescript'
    }, 'ejs', 'handlebars', 'less', 'livescript', 'markdown', {
      filter: 'sass',
      language: 'scss'
    }, 'stylus'];
    var all_filters = {};

    for (var i = 0, l = filters.length; i < l; i++) {
      var filter = filters[i];
      filter = typeof filter === 'string' ? {
        filter: filter,
        language: filter
      } : filter;

      if (Prism.languages[filter.language]) {
        all_filters['filter-' + filter.filter] = {
          pattern: RegExp(filter_pattern.replace('<filter_name>', function () {
            return filter.filter;
          }), 'm'),
          lookbehind: true,
          inside: {
            'filter-name': {
              pattern: /^:[\w-]+/,
              alias: 'variable'
            },
            rest: Prism.languages[filter.language]
          }
        };
      }
    }

    Prism.languages.insertBefore('pug', 'filter', all_filters);
  })(Prism);
}

/***/ }),

/***/ 3514:
/***/ ((module) => {



module.exports = puppet;
puppet.displayName = 'puppet';
puppet.aliases = [];

function puppet(Prism) {
  ;

  (function (Prism) {
    Prism.languages.puppet = {
      heredoc: [// Matches the content of a quoted heredoc string (subject to interpolation)
      {
        pattern: /(@\("([^"\r\n\/):]+)"(?:\/[nrts$uL]*)?\).*(?:\r?\n|\r))(?:.*(?:\r?\n|\r(?!\n)))*?[ \t]*(?:\|[ \t]*)?(?:-[ \t]*)?\2/,
        lookbehind: true,
        alias: 'string',
        inside: {
          // Matches the end tag
          punctuation: /(?=\S).*\S(?= *$)/ // See interpolation below

        }
      }, // Matches the content of an unquoted heredoc string (no interpolation)
      {
        pattern: /(@\(([^"\r\n\/):]+)(?:\/[nrts$uL]*)?\).*(?:\r?\n|\r))(?:.*(?:\r?\n|\r(?!\n)))*?[ \t]*(?:\|[ \t]*)?(?:-[ \t]*)?\2/,
        lookbehind: true,
        greedy: true,
        alias: 'string',
        inside: {
          // Matches the end tag
          punctuation: /(?=\S).*\S(?= *$)/
        }
      }, // Matches the start tag of heredoc strings
      {
        pattern: /@\("?(?:[^"\r\n\/):]+)"?(?:\/[nrts$uL]*)?\)/,
        alias: 'string',
        inside: {
          punctuation: {
            pattern: /(\().+?(?=\))/,
            lookbehind: true
          }
        }
      }],
      'multiline-comment': {
        pattern: /(^|[^\\])\/\*[\s\S]*?\*\//,
        lookbehind: true,
        greedy: true,
        alias: 'comment'
      },
      regex: {
        // Must be prefixed with the keyword "node" or a non-word char
        pattern: /((?:\bnode\s+|[~=\(\[\{,]\s*|[=+]>\s*|^\s*))\/(?:[^\/\\]|\\[\s\S])+\/(?:[imx]+\b|\B)/,
        lookbehind: true,
        greedy: true,
        inside: {
          // Extended regexes must have the x flag. They can contain single-line comments.
          'extended-regex': {
            pattern: /^\/(?:[^\/\\]|\\[\s\S])+\/[im]*x[im]*$/,
            inside: {
              comment: /#.*/
            }
          }
        }
      },
      comment: {
        pattern: /(^|[^\\])#.*/,
        lookbehind: true,
        greedy: true
      },
      string: {
        // Allow for one nested level of double quotes inside interpolation
        pattern: /(["'])(?:\$\{(?:[^'"}]|(["'])(?:(?!\2)[^\\]|\\[\s\S])*\2)+\}|\$(?!\{)|(?!\1)[^\\$]|\\[\s\S])*\1/,
        greedy: true,
        inside: {
          'double-quoted': {
            pattern: /^"[\s\S]*"$/,
            inside: {// See interpolation below
            }
          }
        }
      },
      variable: {
        pattern: /\$(?:::)?\w+(?:::\w+)*/,
        inside: {
          punctuation: /::/
        }
      },
      'attr-name': /(?:\b\w+|\*)(?=\s*=>)/,
      "function": [{
        pattern: /(\.)(?!\d)\w+/,
        lookbehind: true
      }, /\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\b|\b(?!\d)\w+(?=\()/],
      number: /\b(?:0x[a-f\d]+|\d+(?:\.\d+)?(?:e-?\d+)?)\b/i,
      "boolean": /\b(?:true|false)\b/,
      // Includes words reserved for future use
      keyword: /\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\b/,
      datatype: {
        pattern: /\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\b/,
        alias: 'symbol'
      },
      operator: /=[=~>]?|![=~]?|<(?:<\|?|[=~|-])?|>[>=]?|->?|~>|\|>?>?|[*\/%+?]|\b(?:and|in|or)\b/,
      punctuation: /[\[\]{}().,;]|:+/
    };
    var interpolation = [{
      // Allow for one nested level of braces inside interpolation
      pattern: /(^|[^\\])\$\{(?:[^'"{}]|\{[^}]*\}|(["'])(?:(?!\2)[^\\]|\\[\s\S])*\2)+\}/,
      lookbehind: true,
      inside: {
        'short-variable': {
          // Negative look-ahead prevent wrong highlighting of functions
          pattern: /(^\$\{)(?!\w+\()(?:::)?\w+(?:::\w+)*/,
          lookbehind: true,
          alias: 'variable',
          inside: {
            punctuation: /::/
          }
        },
        delimiter: {
          pattern: /^\$/,
          alias: 'variable'
        },
        rest: Prism.languages.puppet
      }
    }, {
      pattern: /(^|[^\\])\$(?:::)?\w+(?:::\w+)*/,
      lookbehind: true,
      alias: 'variable',
      inside: {
        punctuation: /::/
      }
    }];
    Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation;
    Prism.languages.puppet['string'].inside['double-quoted'].inside.interpolation = interpolation;
  })(Prism);
}

/***/ }),

/***/ 4017:
/***/ ((module) => {



module.exports = pure;
pure.displayName = 'pure';
pure.aliases = [];

function pure(Prism) {
  ;

  (function (Prism) {
    // https://agraef.github.io/pure-docs/pure.html#lexical-matters
    Prism.languages.pure = {
      comment: [{
        pattern: /(^|[^\\])\/\*[\s\S]*?\*\//,
        lookbehind: true
      }, {
        pattern: /(^|[^\\:])\/\/.*/,
        lookbehind: true
      }, /#!.+/],
      'inline-lang': {
        pattern: /%<[\s\S]+?%>/,
        greedy: true,
        inside: {
          lang: {
            pattern: /(^%< *)-\*-.+?-\*-/,
            lookbehind: true,
            alias: 'comment'
          },
          delimiter: {
            pattern: /^%<.*|%>$/,
            alias: 'punctuation'
          }
        }
      },
      string: {
        pattern: /"(?:\\.|[^"\\\r\n])*"/,
        greedy: true
      },
      number: {
        // The look-behind prevents wrong highlighting of the .. operator
        pattern: /((?:\.\.)?)(?:\b(?:inf|nan)\b|\b0x[\da-f]+|(?:\b(?:0b)?\d+(?:\.\d+)?|\B\.\d+)(?:e[+-]?\d+)?L?)/i,
        lookbehind: true
      },
      keyword: /\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\b/,
      "function": /\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\b/,
      special: {
        pattern: /\b__[a-z]+__\b/i,
        alias: 'builtin'
      },
      // Any combination of operator chars can be an operator
      // eslint-disable-next-line no-misleading-character-class
      operator: /(?:[!"#$%&'*+,\-.\/:<=>?@\\^`|~\u00a1-\u00bf\u00d7-\u00f7\u20d0-\u2bff]|\b_+\b)+|\b(?:and|div|mod|not|or)\b/,
      // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?
      punctuation: /[(){}\[\];,|]/
    };
    var inlineLanguages = ['c', {
      lang: 'c++',
      alias: 'cpp'
    }, 'fortran'];
    var inlineLanguageRe = /%< *-\*- *<lang>\d* *-\*-[\s\S]+?%>/.source;
    inlineLanguages.forEach(function (lang) {
      var alias = lang;

      if (typeof lang !== 'string') {
        alias = lang.alias;
        lang = lang.lang;
      }

      if (Prism.languages[alias]) {
        var o = {};
        o['inline-lang-' + alias] = {
          pattern: RegExp(inlineLanguageRe.replace('<lang>', lang.replace(/([.+*?\/\\(){}\[\]])/g, '\\$1')), 'i'),
          inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)
        };
        o['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);
        Prism.languages.insertBefore('pure', 'inline-lang', o);
      }
    }); // C is the default inline language

    if (Prism.languages.c) {
      Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);
    }
  })(Prism);
}

/***/ }),

/***/ 5018:
/***/ ((module) => {



module.exports = purebasic;
purebasic.displayName = 'purebasic';
purebasic.aliases = [];

function purebasic(Prism) {
  /*
  Original Code by Bas Groothedde
  !!MANY THANKS!! I never would have made this, regex and me will never be best friends ;)
  ==> https://codepen.io/ImagineProgramming/details/JYydBy/
  slightly changed to pass all tests
  */
  // PureBasic support, steal stuff from ansi-c
  Prism.languages.purebasic = Prism.languages.extend('clike', {
    comment: /;.*/,
    keyword: /\b(?:declarecdll|declaredll|compilerselect|compilercase|compilerdefault|compilerendselect|compilererror|enableexplicit|disableexplicit|not|and|or|xor|calldebugger|debuglevel|enabledebugger|disabledebugger|restore|read|includepath|includebinary|threaded|runtime|with|endwith|structureunion|endstructureunion|align|newlist|newmap|interface|endinterface|extends|enumeration|endenumeration|swap|foreach|continue|fakereturn|goto|gosub|return|break|module|endmodule|declaremodule|enddeclaremodule|declare|declarec|prototype|prototypec|enableasm|disableasm|dim|redim|data|datasection|enddatasection|to|procedurereturn|debug|default|case|select|endselect|as|import|endimport|importc|compilerif|compilerelse|compilerendif|compilerelseif|end|structure|endstructure|while|wend|for|next|step|if|else|elseif|endif|repeat|until|procedure|proceduredll|procedurec|procedurecdll|endprocedure|protected|shared|static|global|define|includefile|xincludefile|macro|endmacro)\b/i,
    "function": /\b\w+(?:\.\w+)?\s*(?=\()/,
    number: /(?:\$[\da-f]+|\b-?(?:\d+(?:\.\d+)?|\.\d+)(?:e[+-]?\d+)?)\b/i,
    operator: /(?:@\*?|\?|\*)\w+|-[>-]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|?\||[~^%?*/@]/
  });
  Prism.languages.insertBefore('purebasic', 'keyword', {
    tag: /#\w+/,
    asm: {
      pattern: /(^[\t ]*)!.*/m,
      lookbehind: true,
      alias: 'tag',
      inside: {
        comment: /;.*/,
        string: {
          pattern: /(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,
          greedy: true
        },
        // Anonymous label references, i.e.: jmp @b
        'label-reference-anonymous': {
          pattern: /(!\s*j[a-z]+\s+)@[fb]/i,
          lookbehind: true,
          alias: 'fasm-label'
        },
        // Named label reference, i.e.: jne label1
        'label-reference-addressed': {
          pattern: /(!\s*j[a-z]+\s+)[A-Z._?$@][\w.?$@~#]*/i,
          lookbehind: true,
          alias: 'fasm-label'
        },
        "function": {
          pattern: /^([\t ]*!\s*)[\da-z]+(?=\s|$)/im,
          lookbehind: true
        },
        'function-inline': {
          pattern: /(:\s*)[\da-z]+(?=\s)/i,
          lookbehind: true,
          alias: 'function'
        },
        label: {
          pattern: /^([\t ]*!\s*)[A-Za-z._?$@][\w.?$@~#]*(?=:)/m,
          lookbehind: true,
          alias: 'fasm-label'
        },
        keyword: [/\b(?:extern|global)\b[^;\r\n]*/i, /\b(?:CPU|FLOAT|DEFAULT)\b.*/],
        register: /\b(?:st\d|[xyz]mm\d\d?|[cdt]r\d|r\d\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|sp|si|di)|[cdefgs]s|mm\d+)\b/i,
        number: /(?:\b|-|(?=\$))(?:0[hx](?:[\da-f]*\.)?[\da-f]+(?:p[+-]?\d+)?|\d[\da-f]+[hx]|\$\d[\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\d+|(?:\d+(?:\.\d+)?|\.\d+)(?:\.?e[+-]?\d+)?[dt]?)\b/i,
        operator: /[\[\]*+\-/%<>=&|$!,.:]/
      }
    }
  });
  delete Prism.languages.purebasic['class-name'];
  delete Prism.languages.purebasic['boolean'];
  Prism.languages.pbfasm = Prism.languages['purebasic'];
}

/***/ }),

/***/ 575:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorHaskell = __webpack_require__(3830);

module.exports = purescript;
purescript.displayName = 'purescript';
purescript.aliases = ['purs'];

function purescript(Prism) {
  Prism.register(refractorHaskell);
  Prism.languages.purescript = Prism.languages.extend('haskell', {
    keyword: /\b(?:ado|case|class|data|derive|do|else|forall|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\b|∀/,
    'import-statement': {
      // The imported or hidden names are not included in this import
      // statement. This is because we want to highlight those exactly like
      // we do for the names in the program.
      pattern: /(^[\t ]*)import\s+[A-Z][\w']*(?:\.[A-Z][\w']*)*(?:\s+as\s+[A-Z][\w']*(?:\.[A-Z][\w']*)*)?(?:\s+hiding\b)?/m,
      lookbehind: true,
      inside: {
        keyword: /\b(?:import|as|hiding)\b/,
        punctuation: /\./
      }
    },
    // These are builtin functions only. Constructors are highlighted later as a constant.
    builtin: /\b(?:absurd|add|ap|append|apply|between|bind|bottom|clamp|compare|comparing|compose|conj|const|degree|discard|disj|div|eq|flap|flip|gcd|identity|ifM|join|lcm|liftA1|liftM1|map|max|mempty|min|mod|mul|negate|not|notEq|one|otherwise|recip|show|sub|top|unit|unless|unlessM|void|when|whenM|zero)\b/,
    operator: [// Infix operators
    Prism.languages.haskell.operator[0], // ASCII operators
    Prism.languages.haskell.operator[2], // All UTF16 Unicode operator symbols
    // This regex is equivalent to /(?=[\x80-\uFFFF])[\p{gc=Math_Symbol}\p{gc=Currency_Symbol}\p{Modifier_Symbol}\p{Other_Symbol}]/u
    // See https://github.com/PrismJS/prism/issues/3006 for more details.
    /[\xa2-\xa6\xa8\xa9\xac\xae-\xb1\xb4\xb8\xd7\xf7\u02c2-\u02c5\u02d2-\u02df\u02e5-\u02eb\u02ed\u02ef-\u02ff\u0375\u0384\u0385\u03f6\u0482\u058d-\u058f\u0606-\u0608\u060b\u060e\u060f\u06de\u06e9\u06fd\u06fe\u07f6\u07fe\u07ff\u09f2\u09f3\u09fa\u09fb\u0af1\u0b70\u0bf3-\u0bfa\u0c7f\u0d4f\u0d79\u0e3f\u0f01-\u0f03\u0f13\u0f15-\u0f17\u0f1a-\u0f1f\u0f34\u0f36\u0f38\u0fbe-\u0fc5\u0fc7-\u0fcc\u0fce\u0fcf\u0fd5-\u0fd8\u109e\u109f\u1390-\u1399\u166d\u17db\u1940\u19de-\u19ff\u1b61-\u1b6a\u1b74-\u1b7c\u1fbd\u1fbf-\u1fc1\u1fcd-\u1fcf\u1fdd-\u1fdf\u1fed-\u1fef\u1ffd\u1ffe\u2044\u2052\u207a-\u207c\u208a-\u208c\u20a0-\u20bf\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211e-\u2123\u2125\u2127\u2129\u212e\u213a\u213b\u2140-\u2144\u214a-\u214d\u214f\u218a\u218b\u2190-\u2307\u230c-\u2328\u232b-\u2426\u2440-\u244a\u249c-\u24e9\u2500-\u2767\u2794-\u27c4\u27c7-\u27e5\u27f0-\u2982\u2999-\u29d7\u29dc-\u29fb\u29fe-\u2b73\u2b76-\u2b95\u2b97-\u2bff\u2ce5-\u2cea\u2e50\u2e51\u2e80-\u2e99\u2e9b-\u2ef3\u2f00-\u2fd5\u2ff0-\u2ffb\u3004\u3012\u3013\u3020\u3036\u3037\u303e\u303f\u309b\u309c\u3190\u3191\u3196-\u319f\u31c0-\u31e3\u3200-\u321e\u322a-\u3247\u3250\u3260-\u327f\u328a-\u32b0\u32c0-\u33ff\u4dc0-\u4dff\ua490-\ua4c6\ua700-\ua716\ua720\ua721\ua789\ua78a\ua828-\ua82b\ua836-\ua839\uaa77-\uaa79\uab5b\uab6a\uab6b\ufb29\ufbb2-\ufbc1\ufdfc\ufdfd\ufe62\ufe64-\ufe66\ufe69\uff04\uff0b\uff1c-\uff1e\uff3e\uff40\uff5c\uff5e\uffe0-\uffe6\uffe8-\uffee\ufffc\ufffd]/]
  });
  Prism.languages.purs = Prism.languages.purescript;
}

/***/ }),

/***/ 3918:
/***/ ((module) => {



module.exports = python;
python.displayName = 'python';
python.aliases = ['py'];

function python(Prism) {
  Prism.languages.python = {
    comment: {
      pattern: /(^|[^\\])#.*/,
      lookbehind: true
    },
    'string-interpolation': {
      pattern: /(?:f|rf|fr)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
      greedy: true,
      inside: {
        interpolation: {
          // "{" <expression> <optional "!s", "!r", or "!a"> <optional ":" format specifier> "}"
          pattern: /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,
          lookbehind: true,
          inside: {
            'format-spec': {
              pattern: /(:)[^:(){}]+(?=\}$)/,
              lookbehind: true
            },
            'conversion-option': {
              pattern: /![sra](?=[:}]$)/,
              alias: 'punctuation'
            },
            rest: null
          }
        },
        string: /[\s\S]+/
      }
    },
    'triple-quoted-string': {
      pattern: /(?:[rub]|rb|br)?("""|''')[\s\S]*?\1/i,
      greedy: true,
      alias: 'string'
    },
    string: {
      pattern: /(?:[rub]|rb|br)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
      greedy: true
    },
    "function": {
      pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
      lookbehind: true
    },
    'class-name': {
      pattern: /(\bclass\s+)\w+/i,
      lookbehind: true
    },
    decorator: {
      pattern: /(^[\t ]*)@\w+(?:\.\w+)*/im,
      lookbehind: true,
      alias: ['annotation', 'punctuation'],
      inside: {
        punctuation: /\./
      }
    },
    keyword: /\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
    builtin: /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
    "boolean": /\b(?:True|False|None)\b/,
    number: /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?\b/i,
    operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
    punctuation: /[{}[\];(),.:]/
  };
  Prism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;
  Prism.languages.py = Prism.languages.python;
}

/***/ }),

/***/ 4557:
/***/ ((module) => {



module.exports = q;
q.displayName = 'q';
q.aliases = [];

function q(Prism) {
  Prism.languages.q = {
    string: /"(?:\\.|[^"\\\r\n])*"/,
    comment: [// From http://code.kx.com/wiki/Reference/Slash:
    // When / is following a space (or a right parenthesis, bracket, or brace), it is ignored with the rest of the line.
    {
      pattern: /([\t )\]}])\/.*/,
      lookbehind: true,
      greedy: true
    }, // From http://code.kx.com/wiki/Reference/Slash:
    // A line which has / as its first character and contains at least one other non-whitespace character is a whole-line comment and is ignored entirely.
    // A / on a line by itself begins a multiline comment which is terminated by the next \ on a line by itself.
    // If a / is not matched by a \, the multiline comment is unterminated and continues to end of file.
    // The / and \ must be the first char on the line, but may be followed by any amount of whitespace.
    {
      pattern: /(^|\r?\n|\r)\/[\t ]*(?:(?:\r?\n|\r)(?:.*(?:\r?\n|\r(?!\n)))*?(?:\\(?=[\t ]*(?:\r?\n|\r))|$)|\S.*)/,
      lookbehind: true,
      greedy: true
    }, // From http://code.kx.com/wiki/Reference/Slash:
    // A \ on a line by itself with no preceding matching / will comment to end of file.
    {
      pattern: /^\\[\t ]*(?:\r?\n|\r)[\s\S]+/m,
      greedy: true
    }, {
      pattern: /^#!.+/m,
      greedy: true
    }],
    symbol: /`(?::\S+|[\w.]*)/,
    datetime: {
      pattern: /0N[mdzuvt]|0W[dtz]|\d{4}\.\d\d(?:m|\.\d\d(?:T(?:\d\d(?::\d\d(?::\d\d(?:[.:]\d\d\d)?)?)?)?)?[dz]?)|\d\d:\d\d(?::\d\d(?:[.:]\d\d\d)?)?[uvt]?/,
      alias: 'number'
    },
    // The negative look-ahead prevents bad highlighting
    // of verbs 0: and 1:
    number: /\b(?![01]:)(?:0[wn]|0W[hj]?|0N[hje]?|0x[\da-fA-F]+|\d+(?:\.\d*)?(?:e[+-]?\d+)?[hjfeb]?)/,
    keyword: /\\\w+\b|\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\b/,
    adverb: {
      pattern: /['\/\\]:?|\beach\b/,
      alias: 'function'
    },
    verb: {
      pattern: /(?:\B\.\B|\b[01]:|<[=>]?|>=?|[:+\-*%,!?~=|$&#@^]):?|\b_\b:?/,
      alias: 'operator'
    },
    punctuation: /[(){}\[\];.]/
  };
}

/***/ }),

/***/ 4172:
/***/ ((module) => {



module.exports = qml;
qml.displayName = 'qml';
qml.aliases = [];

function qml(Prism) {
  ;

  (function (Prism) {
    var jsString = /"(?:\\.|[^\\"\r\n])*"|'(?:\\.|[^\\'\r\n])*'/.source;
    var jsComment = /\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))*\*\//.source;
    var jsExpr = /(?:[^\\()[\]{}"'/]|<string>|\/(?![*/])|<comment>|\(<expr>*\)|\[<expr>*\]|\{<expr>*\}|\\[\s\S])/.source.replace(/<string>/g, function () {
      return jsString;
    }).replace(/<comment>/g, function () {
      return jsComment;
    }); // the pattern will blow up, so only a few iterations

    for (var i = 0; i < 2; i++) {
      jsExpr = jsExpr.replace(/<expr>/g, function () {
        return jsExpr;
      });
    }

    jsExpr = jsExpr.replace(/<expr>/g, '[^\\s\\S]');
    Prism.languages.qml = {
      comment: {
        pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
        greedy: true
      },
      'javascript-function': {
        pattern: RegExp(/((?:^|;)[ \t]*)function\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*\(<js>*\)\s*\{<js>*\}/.source.replace(/<js>/g, function () {
          return jsExpr;
        }), 'm'),
        lookbehind: true,
        greedy: true,
        alias: 'language-javascript',
        inside: Prism.languages.javascript
      },
      'class-name': {
        pattern: /((?:^|[:;])[ \t]*)(?!\d)\w+(?=[ \t]*\{|[ \t]+on\b)/m,
        lookbehind: true
      },
      property: [{
        pattern: /((?:^|[;{])[ \t]*)(?!\d)\w+(?:\.\w+)*(?=[ \t]*:)/m,
        lookbehind: true
      }, {
        pattern: /((?:^|[;{])[ \t]*)property[ \t]+(?!\d)\w+(?:\.\w+)*[ \t]+(?!\d)\w+(?:\.\w+)*(?=[ \t]*:)/m,
        lookbehind: true,
        inside: {
          keyword: /^property/,
          property: /\w+(?:\.\w+)*/
        }
      }],
      'javascript-expression': {
        pattern: RegExp(/(:[ \t]*)(?![\s;}[])(?:(?!$|[;}])<js>)+/.source.replace(/<js>/g, function () {
          return jsExpr;
        }), 'm'),
        lookbehind: true,
        greedy: true,
        alias: 'language-javascript',
        inside: Prism.languages.javascript
      },
      string: /"(?:\\.|[^\\"\r\n])*"/,
      keyword: /\b(?:as|import|on)\b/,
      punctuation: /[{}[\]:;,]/
    };
  })(Prism);
}

/***/ }),

/***/ 5876:
/***/ ((module) => {



module.exports = qore;
qore.displayName = 'qore';
qore.aliases = [];

function qore(Prism) {
  Prism.languages.qore = Prism.languages.extend('clike', {
    comment: {
      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:\/\/|#).*)/,
      lookbehind: true
    },
    // Overridden to allow unescaped multi-line strings
    string: {
      pattern: /("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/,
      greedy: true
    },
    keyword: /\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\b/,
    "boolean": /\b(?:true|false)\b/i,
    "function": /\$?\b(?!\d)\w+(?=\()/,
    number: /\b(?:0b[01]+|0x(?:[\da-f]*\.)?[\da-fp\-]+|(?:\d+(?:\.\d+)?|\.\d+)(?:e\d+)?[df]|(?:\d+(?:\.\d+)?|\.\d+))\b/i,
    operator: {
      pattern: /(^|[^.])(?:\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\|[|=]?|[*\/%^]=?|[~?])/,
      lookbehind: true
    },
    variable: /\$(?!\d)\w+\b/
  });
}

/***/ }),

/***/ 4162:
/***/ ((module) => {



module.exports = qsharp;
qsharp.displayName = 'qsharp';
qsharp.aliases = ['qs'];

function qsharp(Prism) {
  ;

  (function (Prism) {
    /**
     * Replaces all placeholders "<<n>>" of given pattern with the n-th replacement (zero based).
     *
     * Note: This is a simple text based replacement. Be careful when using backreferences!
     *
     * @param {string} pattern the given pattern.
     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.
     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.
     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source
     */
    function replace(pattern, replacements) {
      return pattern.replace(/<<(\d+)>>/g, function (m, index) {
        return '(?:' + replacements[+index] + ')';
      });
    }
    /**
     * @param {string} pattern
     * @param {string[]} replacements
     * @param {string} [flags]
     * @returns {RegExp}
     */


    function re(pattern, replacements, flags) {
      return RegExp(replace(pattern, replacements), flags || '');
    }
    /**
     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.
     *
     * @param {string} pattern
     * @param {number} depthLog2
     * @returns {string}
     */


    function nested(pattern, depthLog2) {
      for (var i = 0; i < depthLog2; i++) {
        pattern = pattern.replace(/<<self>>/g, function () {
          return '(?:' + pattern + ')';
        });
      }

      return pattern.replace(/<<self>>/g, '[^\\s\\S]');
    } // https://docs.microsoft.com/en-us/azure/quantum/user-guide/language/typesystem/
    // https://github.com/microsoft/qsharp-language/tree/main/Specifications/Language/5_Grammar


    var keywordKinds = {
      // keywords which represent a return or variable type
      type: 'Adj BigInt Bool Ctl Double false Int One Pauli PauliI PauliX PauliY PauliZ Qubit Range Result String true Unit Zero',
      // all other keywords
      other: 'Adjoint adjoint apply as auto body borrow borrowing Controlled controlled distribute elif else fail fixup for function if in internal intrinsic invert is let mutable namespace new newtype open operation repeat return self set until use using while within'
    }; // keywords

    function keywordsToPattern(words) {
      return '\\b(?:' + words.trim().replace(/ /g, '|') + ')\\b';
    }

    var keywords = RegExp(keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.other)); // types

    var identifier = /\b[A-Za-z_]\w*\b/.source;
    var qualifiedName = replace(/<<0>>(?:\s*\.\s*<<0>>)*/.source, [identifier]);
    var typeInside = {
      keyword: keywords,
      punctuation: /[<>()?,.:[\]]/
    }; // strings

    var regularString = /"(?:\\.|[^\\"])*"/.source;
    Prism.languages.qsharp = Prism.languages.extend('clike', {
      comment: /\/\/.*/,
      string: [{
        pattern: re(/(^|[^$\\])<<0>>/.source, [regularString]),
        lookbehind: true,
        greedy: true
      }],
      'class-name': [{
        // open Microsoft.Quantum.Canon;
        // open Microsoft.Quantum.Canon as CN;
        pattern: re(/(\b(?:as|open)\s+)<<0>>(?=\s*(?:;|as\b))/.source, [qualifiedName]),
        lookbehind: true,
        inside: typeInside
      }, {
        // namespace Quantum.App1;
        pattern: re(/(\bnamespace\s+)<<0>>(?=\s*\{)/.source, [qualifiedName]),
        lookbehind: true,
        inside: typeInside
      }],
      keyword: keywords,
      number: /(?:\b0(?:x[\da-f]+|b[01]+|o[0-7]+)|(?:\B\.\d+|\b\d+(?:\.\d*)?)(?:e[-+]?\d+)?)l?\b/i,
      operator: /\band=|\bor=|\band\b|\bor\b|\bnot\b|<[-=]|[-=]>|>>>=?|<<<=?|\^\^\^=?|\|\|\|=?|&&&=?|w\/=?|~~~|[*\/+\-^=!%]=?/,
      punctuation: /::|[{}[\];(),.:]/
    });
    Prism.languages.insertBefore('qsharp', 'number', {
      range: {
        pattern: /\.\./,
        alias: 'operator'
      }
    }); // single line

    var interpolationExpr = nested(replace(/\{(?:[^"{}]|<<0>>|<<self>>)*\}/.source, [regularString]), 2);
    Prism.languages.insertBefore('qsharp', 'string', {
      'interpolation-string': {
        pattern: re(/\$"(?:\\.|<<0>>|[^\\"{])*"/.source, [interpolationExpr]),
        greedy: true,
        inside: {
          interpolation: {
            pattern: re(/((?:^|[^\\])(?:\\\\)*)<<0>>/.source, [interpolationExpr]),
            lookbehind: true,
            inside: {
              punctuation: /^\{|\}$/,
              expression: {
                pattern: /[\s\S]+/,
                alias: 'language-qsharp',
                inside: Prism.languages.qsharp
              }
            }
          },
          string: /[\s\S]+/
        }
      }
    });
  })(Prism);

  Prism.languages.qs = Prism.languages.qsharp;
}

/***/ }),

/***/ 9459:
/***/ ((module) => {



module.exports = r;
r.displayName = 'r';
r.aliases = [];

function r(Prism) {
  Prism.languages.r = {
    comment: /#.*/,
    string: {
      pattern: /(['"])(?:\\.|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    'percent-operator': {
      // Includes user-defined operators
      // and %%, %*%, %/%, %in%, %o%, %x%
      pattern: /%[^%\s]*%/,
      alias: 'operator'
    },
    "boolean": /\b(?:TRUE|FALSE)\b/,
    ellipsis: /\.\.(?:\.|\d+)/,
    number: [/\b(?:NaN|Inf)\b/, /(?:\b0x[\dA-Fa-f]+(?:\.\d*)?|\b\d+(?:\.\d*)?|\B\.\d+)(?:[EePp][+-]?\d+)?[iL]?/],
    keyword: /\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\b/,
    operator: /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\|\|?|[+*\/^$@~]/,
    punctuation: /[(){}\[\],;]/
  };
}

/***/ }),

/***/ 3128:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorScheme = __webpack_require__(2359);

module.exports = racket;
racket.displayName = 'racket';
racket.aliases = ['rkt'];

function racket(Prism) {
  Prism.register(refractorScheme);
  Prism.languages.racket = Prism.languages.extend('scheme', {
    'lambda-parameter': {
      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.
      // this will just prevent false positives of the `function` pattern
      pattern: /([(\[]lambda\s+[(\[])[^()\[\]'\s]+/,
      lookbehind: true
    }
  });
  Prism.languages.insertBefore('racket', 'string', {
    lang: {
      pattern: /^#lang.+/m,
      greedy: true,
      alias: 'keyword'
    }
  });
  Prism.languages.rkt = Prism.languages.racket;
}

/***/ }),

/***/ 3539:
/***/ ((module) => {



module.exports = reason;
reason.displayName = 'reason';
reason.aliases = [];

function reason(Prism) {
  Prism.languages.reason = Prism.languages.extend('clike', {
    string: {
      pattern: /"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,
      greedy: true
    },
    // 'class-name' must be matched *after* 'constructor' defined below
    'class-name': /\b[A-Z]\w*/,
    keyword: /\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\b/,
    operator: /\.{3}|:[:=]|\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\-*\/]\.?|\b(?:mod|land|lor|lxor|lsl|lsr|asr)\b/
  });
  Prism.languages.insertBefore('reason', 'class-name', {
    character: {
      pattern: /'(?:\\x[\da-f]{2}|\\o[0-3][0-7][0-7]|\\\d{3}|\\.|[^'\\\r\n])'/,
      alias: 'string'
    },
    constructor: {
      // Negative look-ahead prevents from matching things like String.capitalize
      pattern: /\b[A-Z]\w*\b(?!\s*\.)/,
      alias: 'variable'
    },
    label: {
      pattern: /\b[a-z]\w*(?=::)/,
      alias: 'symbol'
    }
  }); // We can't match functions property, so let's not even try.

  delete Prism.languages.reason["function"];
}

/***/ }),

/***/ 8588:
/***/ ((module) => {



module.exports = regex;
regex.displayName = 'regex';
regex.aliases = [];

function regex(Prism) {
  ;

  (function (Prism) {
    var specialEscape = {
      pattern: /\\[\\(){}[\]^$+*?|.]/,
      alias: 'escape'
    };
    var escape = /\\(?:x[\da-fA-F]{2}|u[\da-fA-F]{4}|u\{[\da-fA-F]+\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/;
    var charClass = {
      pattern: /\.|\\[wsd]|\\p\{[^{}]+\}/i,
      alias: 'class-name'
    };
    var charClassWithoutDot = {
      pattern: /\\[wsd]|\\p\{[^{}]+\}/i,
      alias: 'class-name'
    };
    var rangeChar = '(?:[^\\\\-]|' + escape.source + ')';
    var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group

    var groupName = {
      pattern: /(<|')[^<>']+(?=[>']$)/,
      lookbehind: true,
      alias: 'variable'
    };
    Prism.languages.regex = {
      charset: {
        pattern: /((?:^|[^\\])(?:\\\\)*)\[(?:[^\\\]]|\\[\s\S])*\]/,
        lookbehind: true,
        inside: {
          'charset-negation': {
            pattern: /(^\[)\^/,
            lookbehind: true,
            alias: 'operator'
          },
          'charset-punctuation': {
            pattern: /^\[|\]$/,
            alias: 'punctuation'
          },
          range: {
            pattern: range,
            inside: {
              escape: escape,
              'range-punctuation': {
                pattern: /-/,
                alias: 'operator'
              }
            }
          },
          'special-escape': specialEscape,
          charclass: charClassWithoutDot,
          escape: escape
        }
      },
      'special-escape': specialEscape,
      charclass: charClass,
      backreference: [{
        // a backreference which is not an octal escape
        pattern: /\\(?![123][0-7]{2})[1-9]/,
        alias: 'keyword'
      }, {
        pattern: /\\k<[^<>']+>/,
        alias: 'keyword',
        inside: {
          'group-name': groupName
        }
      }],
      anchor: {
        pattern: /[$^]|\\[ABbGZz]/,
        alias: 'function'
      },
      escape: escape,
      group: [{
        // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html
        // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs
        // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)
        pattern: /\((?:\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,
        alias: 'punctuation',
        inside: {
          'group-name': groupName
        }
      }, {
        pattern: /\)/,
        alias: 'punctuation'
      }],
      quantifier: {
        pattern: /(?:[+*?]|\{\d+(?:,\d*)?\})[?+]?/,
        alias: 'number'
      },
      alternation: {
        pattern: /\|/,
        alias: 'keyword'
      }
    };
  })(Prism);
}

/***/ }),

/***/ 7386:
/***/ ((module) => {



module.exports = rego;
rego.displayName = 'rego';
rego.aliases = [];

function rego(Prism) {
  // https://www.openpolicyagent.org/docs/latest/policy-reference/
  Prism.languages.rego = {
    comment: /#.*/,
    property: {
      pattern: /(^|[^\\.])(?:"(?:\\.|[^\\"\r\n])*"|`[^`]*`|\b[a-z_]\w*\b)(?=\s*:(?!=))/i,
      lookbehind: true,
      greedy: true
    },
    string: {
      pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"|`[^`]*`/,
      lookbehind: true,
      greedy: true
    },
    keyword: /\b(?:as|default|else|import|package|not|null|some|with|set(?=\s*\())\b/,
    "boolean": /\b(?:true|false)\b/,
    "function": {
      pattern: /\b[a-z_]\w*\b(?:\s*\.\s*\b[a-z_]\w*\b)*(?=\s*\()/i,
      inside: {
        namespace: /\b\w+\b(?=\s*\.)/,
        punctuation: /\./
      }
    },
    number: /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
    operator: /[-+*/%|&]|[<>:=]=?|!=|\b_\b/,
    punctuation: /[,;.\[\]{}()]/
  };
}

/***/ }),

/***/ 5994:
/***/ ((module) => {



module.exports = renpy;
renpy.displayName = 'renpy';
renpy.aliases = ['rpy'];

function renpy(Prism) {
  Prism.languages.renpy = {
    // TODO Write tests.
    comment: {
      pattern: /(^|[^\\])#.+/,
      lookbehind: true
    },
    string: {
      pattern: /("""|''')[\s\S]+?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2|(?:^#?(?:[0-9a-fA-F]{6}|(?:[0-9a-fA-F]){3})$)/m,
      greedy: true
    },
    "function": /\b[a-z_]\w*(?=\()/i,
    property: /\b(?:insensitive|idle|hover|selected_idle|selected_hover|background|position|alt|xpos|ypos|pos|xanchor|yanchor|anchor|xalign|yalign|align|xcenter|ycenter|xofsset|yoffset|ymaximum|maximum|xmaximum|xminimum|yminimum|minimum|xsize|ysizexysize|xfill|yfill|area|antialias|black_color|bold|caret|color|first_indent|font|size|italic|justify|kerning|language|layout|line_leading|line_overlap_split|line_spacing|min_width|newline_indent|outlines|rest_indent|ruby_style|slow_cps|slow_cps_multiplier|strikethrough|text_align|underline|hyperlink_functions|vertical|hinting|foreground|left_margin|xmargin|top_margin|bottom_margin|ymargin|left_padding|right_padding|xpadding|top_padding|bottom_padding|ypadding|size_group|child|hover_sound|activate_sound|mouse|focus_mask|keyboard_focus|bar_vertical|bar_invert|bar_resizing|left_gutter|right_gutter|top_gutter|bottom_gutter|left_bar|right_bar|top_bar|bottom_bar|thumb|thumb_shadow|thumb_offset|unscrollable|spacing|first_spacing|box_reverse|box_wrap|order_reverse|fit_first|ysize|thumbnail_width|thumbnail_height|help|text_ypos|text_xpos|idle_color|hover_color|selected_idle_color|selected_hover_color|insensitive_color|alpha|insensitive_background|hover_background|zorder|value|width|xadjustment|xanchoraround|xaround|xinitial|xoffset|xzoom|yadjustment|yanchoraround|yaround|yinitial|yzoom|zoom|ground|height|text_style|text_y_fudge|selected_insensitive|has_sound|has_music|has_voice|focus|hovered|image_style|length|minwidth|mousewheel|offset|prefix|radius|range|right_margin|rotate|rotate_pad|developer|screen_width|screen_height|window_title|name|version|windows_icon|default_fullscreen|default_text_cps|default_afm_time|main_menu_music|sample_sound|enter_sound|exit_sound|save_directory|enter_transition|exit_transition|intra_transition|main_game_transition|game_main_transition|end_splash_transition|end_game_transition|after_load_transition|window_show_transition|window_hide_transition|adv_nvl_transition|nvl_adv_transition|enter_yesno_transition|exit_yesno_transition|enter_replay_transition|exit_replay_transition|say_attribute_transition|directory_name|executable_name|include_update|window_icon|modal|google_play_key|google_play_salt|drag_name|drag_handle|draggable|dragged|droppable|dropped|narrator_menu|action|default_afm_enable|version_name|version_tuple|inside|fadeout|fadein|layers|layer_clipping|linear|scrollbars|side_xpos|side_ypos|side_spacing|edgescroll|drag_joined|drag_raise|drop_shadow|drop_shadow_color|subpixel|easein|easeout|time|crop|auto|update|get_installed_packages|can_update|UpdateVersion|Update|overlay_functions|translations|window_left_padding|show_side_image|show_two_window)\b/,
    tag: /\b(?:label|image|menu|[hv]box|frame|text|imagemap|imagebutton|bar|vbar|screen|textbutton|buttoscreenn|fixed|grid|input|key|mousearea|side|timer|viewport|window|hotspot|hotbar|self|button|drag|draggroup|tag|mm_menu_frame|nvl|block|parallel)\b|\$/,
    keyword: /\b(?:as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|yield|adjustment|alignaround|allow|angle|around|box_layout|cache|changed|child_size|clicked|clipping|corner1|corner2|default|delay|exclude|scope|slow|slow_abortable|slow_done|sound|style_group|substitute|suffix|transform_anchor|transpose|unhovered|config|theme|mm_root|gm_root|rounded_window|build|disabled_text|disabled|widget_selected|widget_text|widget_hover|widget|updater|behind|call|expression|hide|init|jump|onlayer|python|renpy|scene|set|show|transform|play|queue|stop|pause|define|window|repeat|contains|choice|on|function|event|animation|clockwise|counterclockwise|circles|knot|null|None|random|has|add|use|fade|dissolve|style|store|id|voice|center|left|right|less_rounded|music|movie|clear|persistent|ui)\b/,
    "boolean": /\b(?:[Tt]rue|[Ff]alse)\b/,
    number: /(?:\b(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*(?:\.\d*)?)|\B\.\d+)(?:e[+-]?\d+)?j?/i,
    operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:or|and|not|with|at)\b/,
    punctuation: /[{}[\];(),.:]/
  };
  Prism.languages.rpy = Prism.languages.renpy;
}

/***/ }),

/***/ 5233:
/***/ ((module) => {



module.exports = rest;
rest.displayName = 'rest';
rest.aliases = [];

function rest(Prism) {
  Prism.languages.rest = {
    table: [{
      pattern: /(^[\t ]*)(?:\+[=-]+)+\+(?:\r?\n|\r)(?:\1[+|].+[+|](?:\r?\n|\r))+\1(?:\+[=-]+)+\+/m,
      lookbehind: true,
      inside: {
        punctuation: /\||(?:\+[=-]+)+\+/
      }
    }, {
      pattern: /(^[\t ]*)=+ [ =]*=(?:(?:\r?\n|\r)\1.+)+(?:\r?\n|\r)\1=+ [ =]*=(?=(?:\r?\n|\r){2}|\s*$)/m,
      lookbehind: true,
      inside: {
        punctuation: /[=-]+/
      }
    }],
    // Directive-like patterns
    'substitution-def': {
      pattern: /(^[\t ]*\.\. )\|(?:[^|\s](?:[^|]*[^|\s])?)\| [^:]+::/m,
      lookbehind: true,
      inside: {
        substitution: {
          pattern: /^\|(?:[^|\s]|[^|\s][^|]*[^|\s])\|/,
          alias: 'attr-value',
          inside: {
            punctuation: /^\||\|$/
          }
        },
        directive: {
          pattern: /( )(?! )[^:]+::/,
          lookbehind: true,
          alias: 'function',
          inside: {
            punctuation: /::$/
          }
        }
      }
    },
    'link-target': [{
      pattern: /(^[\t ]*\.\. )\[[^\]]+\]/m,
      lookbehind: true,
      alias: 'string',
      inside: {
        punctuation: /^\[|\]$/
      }
    }, {
      pattern: /(^[\t ]*\.\. )_(?:`[^`]+`|(?:[^:\\]|\\.)+):/m,
      lookbehind: true,
      alias: 'string',
      inside: {
        punctuation: /^_|:$/
      }
    }],
    directive: {
      pattern: /(^[\t ]*\.\. )[^:]+::/m,
      lookbehind: true,
      alias: 'function',
      inside: {
        punctuation: /::$/
      }
    },
    comment: {
      // The two alternatives try to prevent highlighting of blank comments
      pattern: /(^[\t ]*\.\.)(?:(?: .+)?(?:(?:\r?\n|\r).+)+| .+)(?=(?:\r?\n|\r){2}|$)/m,
      lookbehind: true
    },
    title: [// Overlined and underlined
    {
      pattern: /^(([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\2+)(?:\r?\n|\r).+(?:\r?\n|\r)\1$/m,
      inside: {
        punctuation: /^[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]+|[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]+$/,
        important: /.+/
      }
    }, // Underlined only
    {
      pattern: /(^|(?:\r?\n|\r){2}).+(?:\r?\n|\r)([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\2+(?=\r?\n|\r|$)/,
      lookbehind: true,
      inside: {
        punctuation: /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]+$/,
        important: /.+/
      }
    }],
    hr: {
      pattern: /((?:\r?\n|\r){2})([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\2{3,}(?=(?:\r?\n|\r){2})/,
      lookbehind: true,
      alias: 'punctuation'
    },
    field: {
      pattern: /(^[\t ]*):[^:\r\n]+:(?= )/m,
      lookbehind: true,
      alias: 'attr-name'
    },
    'command-line-option': {
      pattern: /(^[\t ]*)(?:[+-][a-z\d]|(?:--|\/)[a-z\d-]+)(?:[ =](?:[a-z][\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\d]|(?:--|\/)[a-z\d-]+)(?:[ =](?:[a-z][\w-]*|<[^<>]+>))?)*(?=(?:\r?\n|\r)? {2,}\S)/im,
      lookbehind: true,
      alias: 'symbol'
    },
    'literal-block': {
      pattern: /::(?:\r?\n|\r){2}([ \t]+)(?![ \t]).+(?:(?:\r?\n|\r)\1.+)*/,
      inside: {
        'literal-block-punctuation': {
          pattern: /^::/,
          alias: 'punctuation'
        }
      }
    },
    'quoted-literal-block': {
      pattern: /::(?:\r?\n|\r){2}([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]).*(?:(?:\r?\n|\r)\1.*)*/,
      inside: {
        'literal-block-punctuation': {
          pattern: /^(?:::|([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\1*)/m,
          alias: 'punctuation'
        }
      }
    },
    'list-bullet': {
      pattern: /(^[\t ]*)(?:[*+\-•‣⁃]|\(?(?:\d+|[a-z]|[ivxdclm]+)\)|(?:\d+|[a-z]|[ivxdclm]+)\.)(?= )/im,
      lookbehind: true,
      alias: 'punctuation'
    },
    'doctest-block': {
      pattern: /(^[\t ]*)>>> .+(?:(?:\r?\n|\r).+)*/m,
      lookbehind: true,
      inside: {
        punctuation: /^>>>/
      }
    },
    inline: [{
      pattern: /(^|[\s\-:\/'"<(\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\*\*?|``?|\|)(?!\s)(?:(?!\2).)*\S\2(?=[\s\-.,:;!?\\\/'")\]}]|$))/m,
      lookbehind: true,
      inside: {
        bold: {
          pattern: /(^\*\*).+(?=\*\*$)/,
          lookbehind: true
        },
        italic: {
          pattern: /(^\*).+(?=\*$)/,
          lookbehind: true
        },
        'inline-literal': {
          pattern: /(^``).+(?=``$)/,
          lookbehind: true,
          alias: 'symbol'
        },
        role: {
          pattern: /^:[^:]+:|:[^:]+:$/,
          alias: 'function',
          inside: {
            punctuation: /^:|:$/
          }
        },
        'interpreted-text': {
          pattern: /(^`).+(?=`$)/,
          lookbehind: true,
          alias: 'attr-value'
        },
        substitution: {
          pattern: /(^\|).+(?=\|$)/,
          lookbehind: true,
          alias: 'attr-value'
        },
        punctuation: /\*\*?|``?|\|/
      }
    }],
    link: [{
      pattern: /\[[^\[\]]+\]_(?=[\s\-.,:;!?\\\/'")\]}]|$)/,
      alias: 'string',
      inside: {
        punctuation: /^\[|\]_$/
      }
    }, {
      pattern: /(?:\b[a-z\d]+(?:[_.:+][a-z\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\s\-.,:;!?\\\/'")\]}]|$)/i,
      alias: 'string',
      inside: {
        punctuation: /^_?`|`$|`?_?_$/
      }
    }],
    // Line block start,
    // quote attribution,
    // explicit markup start,
    // and anonymous hyperlink target shortcut (__)
    punctuation: {
      pattern: /(^[\t ]*)(?:\|(?= |$)|(?:---?|—|\.\.|__)(?= )|\.\.$)/m,
      lookbehind: true
    }
  };
}

/***/ }),

/***/ 2664:
/***/ ((module) => {



module.exports = rip;
rip.displayName = 'rip';
rip.aliases = [];

function rip(Prism) {
  Prism.languages.rip = {
    comment: /#.*/,
    keyword: /(?:=>|->)|\b(?:class|if|else|switch|case|return|exit|try|catch|finally|raise)\b/,
    builtin: /@|\bSystem\b/,
    "boolean": /\b(?:true|false)\b/,
    date: /\b\d{4}-\d{2}-\d{2}\b/,
    time: /\b\d{2}:\d{2}:\d{2}\b/,
    datetime: /\b\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\b/,
    character: /\B`[^\s`'",.:;#\/\\()<>\[\]{}]\b/,
    regex: {
      pattern: /(^|[^/])\/(?!\/)(?:\[[^\n\r\]]*\]|\\.|[^/\\\r\n\[])+\/(?=\s*(?:$|[\r\n,.;})]))/,
      lookbehind: true,
      greedy: true
    },
    symbol: /:[^\d\s`'",.:;#\/\\()<>\[\]{}][^\s`'",.:;#\/\\()<>\[\]{}]*/,
    string: {
      pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    number: /[+-]?\b(?:\d+\.\d+|\d+)\b/,
    punctuation: /(?:\.{2,3})|[`,.:;=\/\\()<>\[\]{}]/,
    reference: /[^\d\s`'",.:;#\/\\()<>\[\]{}][^\s`'",.:;#\/\\()<>\[\]{}]*/
  };
}

/***/ }),

/***/ 3046:
/***/ ((module) => {



module.exports = roboconf;
roboconf.displayName = 'roboconf';
roboconf.aliases = [];

function roboconf(Prism) {
  Prism.languages.roboconf = {
    comment: /#.*/,
    keyword: {
      pattern: /(^|\s)(?:(?:facet|instance of)(?=[ \t]+[\w-]+[ \t]*\{)|(?:external|import)\b)/,
      lookbehind: true
    },
    component: {
      pattern: /[\w-]+(?=[ \t]*\{)/,
      alias: 'variable'
    },
    property: /[\w.-]+(?=[ \t]*:)/,
    value: {
      pattern: /(=[ \t]*(?![ \t]))[^,;]+/,
      lookbehind: true,
      alias: 'attr-value'
    },
    optional: {
      pattern: /\(optional\)/,
      alias: 'builtin'
    },
    wildcard: {
      pattern: /(\.)\*/,
      lookbehind: true,
      alias: 'operator'
    },
    punctuation: /[{},.;:=]/
  };
}

/***/ }),

/***/ 4774:
/***/ ((module) => {



module.exports = robotframework;
robotframework.displayName = 'robotframework';
robotframework.aliases = [];

function robotframework(Prism) {
  ;

  (function (Prism) {
    var comment = {
      pattern: /(^[ \t]*| {2}|\t)#.*/m,
      lookbehind: true,
      greedy: true
    };
    var variable = {
      pattern: /((?:^|[^\\])(?:\\{2})*)[$@&%]\{(?:[^{}\r\n]|\{[^{}\r\n]*\})*\}/,
      lookbehind: true,
      inside: {
        punctuation: /^[$@&%]\{|\}$/
      }
    };

    function createSection(name, inside) {
      var extendecInside = {};
      extendecInside['section-header'] = {
        pattern: /^ ?\*{3}.+?\*{3}/,
        alias: 'keyword'
      }; // copy inside tokens

      for (var token in inside) {
        extendecInside[token] = inside[token];
      }

      extendecInside['tag'] = {
        pattern: /([\r\n](?: {2}|\t)[ \t]*)\[[-\w]+\]/,
        lookbehind: true,
        inside: {
          punctuation: /\[|\]/
        }
      };
      extendecInside['variable'] = variable;
      extendecInside['comment'] = comment;
      return {
        pattern: RegExp(/^ ?\*{3}[ \t]*<name>[ \t]*\*{3}(?:.|[\r\n](?!\*{3}))*/.source.replace(/<name>/g, function () {
          return name;
        }), 'im'),
        alias: 'section',
        inside: extendecInside
      };
    }

    var docTag = {
      pattern: /(\[Documentation\](?: {2}|\t)[ \t]*)(?![ \t]|#)(?:.|(?:\r\n?|\n)[ \t]*\.{3})+/,
      lookbehind: true,
      alias: 'string'
    };
    var testNameLike = {
      pattern: /([\r\n] ?)(?!#)(?:\S(?:[ \t]\S)*)+/,
      lookbehind: true,
      alias: 'function',
      inside: {
        variable: variable
      }
    };
    var testPropertyLike = {
      pattern: /([\r\n](?: {2}|\t)[ \t]*)(?!\[|\.{3}|#)(?:\S(?:[ \t]\S)*)+/,
      lookbehind: true,
      inside: {
        variable: variable
      }
    };
    Prism.languages['robotframework'] = {
      settings: createSection('Settings', {
        documentation: {
          pattern: /([\r\n] ?Documentation(?: {2}|\t)[ \t]*)(?![ \t]|#)(?:.|(?:\r\n?|\n)[ \t]*\.{3})+/,
          lookbehind: true,
          alias: 'string'
        },
        property: {
          pattern: /([\r\n] ?)(?!\.{3}|#)(?:\S(?:[ \t]\S)*)+/,
          lookbehind: true
        }
      }),
      variables: createSection('Variables'),
      'test-cases': createSection('Test Cases', {
        'test-name': testNameLike,
        documentation: docTag,
        property: testPropertyLike
      }),
      keywords: createSection('Keywords', {
        'keyword-name': testNameLike,
        documentation: docTag,
        property: testPropertyLike
      }),
      tasks: createSection('Tasks', {
        'task-name': testNameLike,
        documentation: docTag,
        property: testPropertyLike
      }),
      comment: comment
    };
    Prism.languages.robot = Prism.languages['robotframework'];
  })(Prism);
}

/***/ }),

/***/ 9636:
/***/ ((module) => {



module.exports = ruby;
ruby.displayName = 'ruby';
ruby.aliases = ['rb'];

function ruby(Prism) {
  /**
   * Original by Samuel Flores
   *
   * Adds the following new token classes:
   *     constant, builtin, variable, symbol, regex
   */
  ;

  (function (Prism) {
    Prism.languages.ruby = Prism.languages.extend('clike', {
      comment: [/#.*/, {
        pattern: /^=begin\s[\s\S]*?^=end/m,
        greedy: true
      }],
      'class-name': {
        pattern: /(\b(?:class)\s+|\bcatch\s+\()[\w.\\]+/i,
        lookbehind: true,
        inside: {
          punctuation: /[.\\]/
        }
      },
      keyword: /\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\b/
    });
    var interpolation = {
      pattern: /#\{[^}]+\}/,
      inside: {
        delimiter: {
          pattern: /^#\{|\}$/,
          alias: 'tag'
        },
        rest: Prism.languages.ruby
      }
    };
    delete Prism.languages.ruby["function"];
    Prism.languages.insertBefore('ruby', 'keyword', {
      regex: [{
        pattern: RegExp(/%r/.source + '(?:' + [/([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source, /\((?:[^()\\]|\\[\s\S])*\)/.source, // Here we need to specifically allow interpolation
        /\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/.source, /\[(?:[^\[\]\\]|\\[\s\S])*\]/.source, /<(?:[^<>\\]|\\[\s\S])*>/.source].join('|') + ')' + /[egimnosux]{0,6}/.source),
        greedy: true,
        inside: {
          interpolation: interpolation
        }
      }, {
        pattern: /(^|[^/])\/(?!\/)(?:\[[^\r\n\]]+\]|\\.|[^[/\\\r\n])+\/[egimnosux]{0,6}(?=\s*(?:$|[\r\n,.;})#]))/,
        lookbehind: true,
        greedy: true,
        inside: {
          interpolation: interpolation
        }
      }],
      variable: /[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,
      symbol: {
        pattern: /(^|[^:]):[a-zA-Z_]\w*(?:[?!]|\b)/,
        lookbehind: true
      },
      'method-definition': {
        pattern: /(\bdef\s+)[\w.]+/,
        lookbehind: true,
        inside: {
          "function": /\w+$/,
          rest: Prism.languages.ruby
        }
      }
    });
    Prism.languages.insertBefore('ruby', 'number', {
      builtin: /\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\b/,
      constant: /\b[A-Z]\w*(?:[?!]|\b)/
    });
    Prism.languages.ruby.string = [{
      pattern: RegExp(/%[qQiIwWxs]?/.source + '(?:' + [/([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source, /\((?:[^()\\]|\\[\s\S])*\)/.source, // Here we need to specifically allow interpolation
      /\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/.source, /\[(?:[^\[\]\\]|\\[\s\S])*\]/.source, /<(?:[^<>\\]|\\[\s\S])*>/.source].join('|') + ')'),
      greedy: true,
      inside: {
        interpolation: interpolation
      }
    }, {
      pattern: /("|')(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|(?!\1)[^\\#\r\n])*\1/,
      greedy: true,
      inside: {
        interpolation: interpolation
      }
    }, {
      pattern: /<<[-~]?([a-z_]\w*)[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
      alias: 'heredoc-string',
      greedy: true,
      inside: {
        delimiter: {
          pattern: /^<<[-~]?[a-z_]\w*|[a-z_]\w*$/i,
          alias: 'symbol',
          inside: {
            punctuation: /^<<[-~]?/
          }
        },
        interpolation: interpolation
      }
    }, {
      pattern: /<<[-~]?'([a-z_]\w*)'[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
      alias: 'heredoc-string',
      greedy: true,
      inside: {
        delimiter: {
          pattern: /^<<[-~]?'[a-z_]\w*'|[a-z_]\w*$/i,
          alias: 'symbol',
          inside: {
            punctuation: /^<<[-~]?'|'$/
          }
        }
      }
    }];
    Prism.languages.rb = Prism.languages.ruby;
  })(Prism);
}

/***/ }),

/***/ 2018:
/***/ ((module) => {



module.exports = rust;
rust.displayName = 'rust';
rust.aliases = [];

function rust(Prism) {
  ;

  (function (Prism) {
    var multilineComment = /\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|<self>)*\*\//.source;

    for (var i = 0; i < 2; i++) {
      // support 4 levels of nested comments
      multilineComment = multilineComment.replace(/<self>/g, function () {
        return multilineComment;
      });
    }

    multilineComment = multilineComment.replace(/<self>/g, function () {
      return /[^\s\S]/.source;
    });
    Prism.languages.rust = {
      comment: [{
        pattern: RegExp(/(^|[^\\])/.source + multilineComment),
        lookbehind: true,
        greedy: true
      }, {
        pattern: /(^|[^\\:])\/\/.*/,
        lookbehind: true,
        greedy: true
      }],
      string: {
        pattern: /b?"(?:\\[\s\S]|[^\\"])*"|b?r(#*)"(?:[^"]|"(?!\1))*"\1/,
        greedy: true
      },
      "char": {
        pattern: /b?'(?:\\(?:x[0-7][\da-fA-F]|u\{(?:[\da-fA-F]_*){1,6}\}|.)|[^\\\r\n\t'])'/,
        greedy: true,
        alias: 'string'
      },
      attribute: {
        pattern: /#!?\[(?:[^\[\]"]|"(?:\\[\s\S]|[^\\"])*")*\]/,
        greedy: true,
        alias: 'attr-name',
        inside: {
          string: null // see below

        }
      },
      // Closure params should not be confused with bitwise OR |
      'closure-params': {
        pattern: /([=(,:]\s*|\bmove\s*)\|[^|]*\||\|[^|]*\|(?=\s*(?:\{|->))/,
        lookbehind: true,
        greedy: true,
        inside: {
          'closure-punctuation': {
            pattern: /^\||\|$/,
            alias: 'punctuation'
          },
          rest: null // see below

        }
      },
      'lifetime-annotation': {
        pattern: /'\w+/,
        alias: 'symbol'
      },
      'fragment-specifier': {
        pattern: /(\$\w+:)[a-z]+/,
        lookbehind: true,
        alias: 'punctuation'
      },
      variable: /\$\w+/,
      'function-definition': {
        pattern: /(\bfn\s+)\w+/,
        lookbehind: true,
        alias: 'function'
      },
      'type-definition': {
        pattern: /(\b(?:enum|struct|union)\s+)\w+/,
        lookbehind: true,
        alias: 'class-name'
      },
      'module-declaration': [{
        pattern: /(\b(?:crate|mod)\s+)[a-z][a-z_\d]*/,
        lookbehind: true,
        alias: 'namespace'
      }, {
        pattern: /(\b(?:crate|self|super)\s*)::\s*[a-z][a-z_\d]*\b(?:\s*::(?:\s*[a-z][a-z_\d]*\s*::)*)?/,
        lookbehind: true,
        alias: 'namespace',
        inside: {
          punctuation: /::/
        }
      }],
      keyword: [// https://github.com/rust-lang/reference/blob/master/src/keywords.md
      /\b(?:abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|Self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\b/, // primitives and str
      // https://doc.rust-lang.org/stable/rust-by-example/primitives.html
      /\b(?:[ui](?:8|16|32|64|128|size)|f(?:32|64)|bool|char|str)\b/],
      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives
      // and Rust's naming conventions recommend snake_case anyway.
      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html
      "function": /\b[a-z_]\w*(?=\s*(?:::\s*<|\())/,
      macro: {
        pattern: /\b\w+!/,
        alias: 'property'
      },
      constant: /\b[A-Z_][A-Z_\d]+\b/,
      'class-name': /\b[A-Z]\w*\b/,
      namespace: {
        pattern: /(?:\b[a-z][a-z_\d]*\s*::\s*)*\b[a-z][a-z_\d]*\s*::(?!\s*<)/,
        inside: {
          punctuation: /::/
        }
      },
      // Hex, oct, bin, dec numbers with visual separators and type suffix
      number: /\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)(?:_?(?:[iu](?:8|16|32|64|size)?|f32|f64))?\b/,
      "boolean": /\b(?:false|true)\b/,
      punctuation: /->|\.\.=|\.{1,3}|::|[{}[\];(),:]/,
      operator: /[-+*\/%!^]=?|=[=>]?|&[&=]?|\|[|=]?|<<?=?|>>?=?|[@?]/
    };
    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;
    Prism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];
  })(Prism);
}

/***/ }),

/***/ 492:
/***/ ((module) => {



module.exports = sas;
sas.displayName = 'sas';
sas.aliases = [];

function sas(Prism) {
  ;

  (function (Prism) {
    var stringPattern = /(?:"(?:""|[^"])*"(?!")|'(?:''|[^'])*'(?!'))/.source;
    var number = /\b(?:\d[\da-f]*x|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/i;
    var numericConstant = {
      pattern: RegExp(stringPattern + '[bx]'),
      alias: 'number'
    };
    var macroVariable = {
      pattern: /&[a-z_]\w*/i
    };
    var macroKeyword = {
      pattern: /((?:^|\s|=|\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMGLOBL|SYMLOCAL|SYMEXIST|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\b/i,
      lookbehind: true,
      alias: 'keyword'
    };
    var step = {
      pattern: /(^|\s)(?:proc\s+\w+|quit|run|data(?!=))\b/i,
      alias: 'keyword',
      lookbehind: true
    };
    var comment = [/\/\*[\s\S]*?\*\//, {
      pattern: /(^[ \t]*|;\s*)\*[^;]*;/m,
      lookbehind: true
    }];
    var string = {
      pattern: RegExp(stringPattern),
      greedy: true
    };
    var punctuation = /[$%@.(){}\[\];,\\]/;
    var func = {
      pattern: /%?\b\w+(?=\()/,
      alias: 'keyword'
    };
    var args = {
      "function": func,
      'arg-value': {
        pattern: /(=\s*)[A-Z\.]+/i,
        lookbehind: true
      },
      operator: /=/,
      'macro-variable': macroVariable,
      arg: {
        pattern: /[A-Z]+/i,
        alias: 'keyword'
      },
      number: number,
      'numeric-constant': numericConstant,
      punctuation: punctuation,
      string: string
    };
    var format = {
      pattern: /\b(?:format|put)\b=?[\w'$.]+/im,
      inside: {
        keyword: /^(?:format|put)(?==)/i,
        equals: /=/,
        format: {
          pattern: /(?:\w|\$\d)+\.\d?/i,
          alias: 'number'
        }
      }
    };
    var altformat = {
      pattern: /\b(?:format|put)\s+[\w']+(?:\s+[$.\w]+)+(?=;)/i,
      inside: {
        keyword: /^(?:format|put)/i,
        format: {
          pattern: /[\w$]+\.\d?/,
          alias: 'number'
        }
      }
    };
    var globalStatements = {
      pattern: /((?:^|\s)=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\d?)\b/i,
      lookbehind: true,
      alias: 'keyword'
    };
    var submitStatement = {
      pattern: /(^|\s)(?:submit(?:\s+(?:load|parseonly|norun))?|endsubmit)\b/i,
      lookbehind: true,
      alias: 'keyword'
    };
    var actionSets = /accessControl|cdm|aggregation|aStore|ruleMining|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|sccasl|clustering|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deepLearn|deepNeural|varReduce|simSystem|ds2|deduplication|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gam|gleam|graphSemiSupLearn|gVarCluster|hiddenMarkovModel|hyperGroup|image|iml|ica|kernalPca|langModel|ldaTopic|sparseML|mlTools|mixed|modelPublishing|mbc|network|optNetwork|neuralNet|nonlinear|nmf|nonParametricBayes|optimization|panel|pls|percentile|pca|phreg|qkb|qlim|quantreg|recommend|tsReconcile|deepRnn|regression|reinforcementLearn|robustPca|sampling|sparkEmbeddedProcess|search(?:Analytics)?|sentimentAnalysis|sequence|configuration|session(?:Prop)?|severity|simple|smartData|sandwich|spatialreg|stabilityMonitoring|spc|loadStreams|svDataDescription|svm|table|conditionalRandomFields|text(?:Rule(?:Develop|Score)|Mining|Parse|Topic|Util|Filters|Frequency)|tsInfo|timeData|transpose|uniTimeSeries/.source;
    var casActions = {
      pattern: RegExp(/(^|\s)(?:action\s+)?(?:<act>)\.[a-z]+\b[^;]+/.source.replace(/<act>/g, function () {
        return actionSets;
      }), 'i'),
      lookbehind: true,
      inside: {
        keyword: RegExp(/(?:<act>)\.[a-z]+\b/.source.replace(/<act>/g, function () {
          return actionSets;
        }), 'i'),
        action: {
          pattern: /(?:action)/i,
          alias: 'keyword'
        },
        comment: comment,
        "function": func,
        'arg-value': args['arg-value'],
        operator: args.operator,
        argument: args.arg,
        number: number,
        'numeric-constant': numericConstant,
        punctuation: punctuation,
        string: string
      }
    };
    var keywords = {
      pattern: /((?:^|\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?==)|define|delete|describe|document|do\s+over|do|dol|drop|dul|end(?:source|comp)?|entryTitle|else|eval(?:uate)?|exec(?:ute)?|exit|fill(?:attrs)?|file(?:name)?|flist|fnc|function(?:list)?|goto|global|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|name|noobs|nowd|_?null_|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|put|print|raise|ranexp|rannor|rbreak|retain|return|select|set|session|sessref|source|statgraph|sum|summarize|table|temp|terminate|then\s+do|then|title\d?|to|var|when|where|xaxisopts|yaxisopts|y2axisopts)\b/i,
      lookbehind: true
    };
    Prism.languages.sas = {
      datalines: {
        pattern: /^([ \t]*)(?:(?:data)?lines|cards);[\s\S]+?^[ \t]*;/im,
        lookbehind: true,
        alias: 'string',
        inside: {
          keyword: {
            pattern: /^(?:(?:data)?lines|cards)/i
          },
          punctuation: /;/
        }
      },
      'proc-sql': {
        pattern: /(^proc\s+(?:fed)?sql(?:\s+[\w|=]+)?;)[\s\S]+?(?=^(?:proc\s+\w+|quit|run|data);|(?![\s\S]))/im,
        lookbehind: true,
        inside: {
          sql: {
            pattern: RegExp(/^[ \t]*(?:select|alter\s+table|(?:create|describe|drop)\s+(?:index|table(?:\s+constraints)?|view)|create\s+unique\s+index|insert\s+into|update)(?:<str>|[^;"'])+;/.source.replace(/<str>/g, function () {
              return stringPattern;
            }), 'im'),
            alias: 'language-sql',
            inside: Prism.languages.sql
          },
          'global-statements': globalStatements,
          'sql-statements': {
            pattern: /(^|\s)(?:disconnect\s+from|exec(?:ute)?|begin|commit|rollback|reset|validate)\b/i,
            lookbehind: true,
            alias: 'keyword'
          },
          number: number,
          'numeric-constant': numericConstant,
          punctuation: punctuation,
          string: string
        }
      },
      'proc-groovy': {
        pattern: /(^proc\s+groovy(?:\s+[\w|=]+)?;)[\s\S]+?(?=^(?:proc\s+\w+|quit|run|data);|(?![\s\S]))/im,
        lookbehind: true,
        inside: {
          comment: comment,
          groovy: {
            pattern: RegExp(/(^[ \t]*submit(?:\s+(?:load|parseonly|norun))?)(?:<str>|[^"'])+?(?=endsubmit;)/.source.replace(/<str>/g, function () {
              return stringPattern;
            }), 'im'),
            lookbehind: true,
            alias: 'language-groovy',
            inside: Prism.languages.groovy
          },
          keyword: keywords,
          'submit-statement': submitStatement,
          'global-statements': globalStatements,
          number: number,
          'numeric-constant': numericConstant,
          punctuation: punctuation,
          string: string
        }
      },
      'proc-lua': {
        pattern: /(^proc\s+lua(?:\s+[\w|=]+)?;)[\s\S]+?(?=^(?:proc\s+\w+|quit|run|data);|(?![\s\S]))/im,
        lookbehind: true,
        inside: {
          comment: comment,
          lua: {
            pattern: RegExp(/(^[ \t]*submit(?:\s+(?:load|parseonly|norun))?)(?:<str>|[^"'])+?(?=endsubmit;)/.source.replace(/<str>/g, function () {
              return stringPattern;
            }), 'im'),
            lookbehind: true,
            alias: 'language-lua',
            inside: Prism.languages.lua
          },
          keyword: keywords,
          'submit-statement': submitStatement,
          'global-statements': globalStatements,
          number: number,
          'numeric-constant': numericConstant,
          punctuation: punctuation,
          string: string
        }
      },
      'proc-cas': {
        pattern: /(^proc\s+cas(?:\s+[\w|=]+)?;)[\s\S]+?(?=^(?:proc\s+\w+|quit|data);|(?![\s\S]))/im,
        lookbehind: true,
        inside: {
          comment: comment,
          'statement-var': {
            pattern: /((?:^|\s)=?)saveresult\s[^;]+/im,
            lookbehind: true,
            inside: {
              statement: {
                pattern: /^saveresult\s+\S+/i,
                inside: {
                  keyword: /^(?:saveresult)/i
                }
              },
              rest: args
            }
          },
          'cas-actions': casActions,
          statement: {
            pattern: /((?:^|\s)=?)(?:default|(?:un)?set|on|output|upload)[^;]+/im,
            lookbehind: true,
            inside: args
          },
          step: step,
          keyword: keywords,
          "function": func,
          format: format,
          altformat: altformat,
          'global-statements': globalStatements,
          number: number,
          'numeric-constant': numericConstant,
          punctuation: punctuation,
          string: string
        }
      },
      'proc-args': {
        pattern: RegExp(/(^proc\s+\w+\s+)(?!\s)(?:[^;"']|<str>)+;/.source.replace(/<str>/g, function () {
          return stringPattern;
        }), 'im'),
        lookbehind: true,
        inside: args
      },

      /*Special keywords within macros*/
      'macro-keyword': macroKeyword,
      'macro-variable': macroVariable,
      'macro-string-functions': {
        pattern: /((?:^|\s|=))%(?:NRBQUOTE|NRQUOTE|NRSTR|BQUOTE|QUOTE|STR)\(.*?(?:[^%]\))/i,
        lookbehind: true,
        inside: {
          "function": {
            pattern: /%(?:NRBQUOTE|NRQUOTE|NRSTR|BQUOTE|QUOTE|STR)/i,
            alias: 'keyword'
          },
          'macro-keyword': macroKeyword,
          'macro-variable': macroVariable,
          'escaped-char': {
            pattern: /%['"()<>=¬^~;,#]/i
          },
          punctuation: punctuation
        }
      },
      'macro-declaration': {
        pattern: /^%macro[^;]+(?=;)/im,
        inside: {
          keyword: /%macro/i
        }
      },
      'macro-end': {
        pattern: /^%mend[^;]+(?=;)/im,
        inside: {
          keyword: /%mend/i
        }
      },

      /*%_zscore(headcir, _lhc, _mhc, _shc, headcz, headcpct, _Fheadcz); */
      macro: {
        pattern: /%_\w+(?=\()/,
        alias: 'keyword'
      },
      input: {
        pattern: /\binput\s[-\w\s/*.$&]+;/i,
        inside: {
          input: {
            alias: 'keyword',
            pattern: /^input/i
          },
          comment: comment,
          number: number,
          'numeric-constant': numericConstant
        }
      },
      'options-args': {
        pattern: /(^options)[-'"|/\\<>*+=:()\w\s]*(?=;)/im,
        lookbehind: true,
        inside: args
      },
      'cas-actions': casActions,
      comment: comment,
      "function": func,
      format: format,
      altformat: altformat,
      'numeric-constant': numericConstant,
      datetime: {
        // '1jan2013'd, '9:25:19pm't, '18jan2003:9:27:05am'dt
        pattern: RegExp(stringPattern + '(?:dt?|t)'),
        alias: 'number'
      },
      string: string,
      step: step,
      keyword: keywords,
      // In SAS Studio syntax highlighting, these operators are styled like keywords
      'operator-keyword': {
        pattern: /\b(?:eq|ne|gt|lt|ge|le|in|not)\b/i,
        alias: 'operator'
      },
      // Decimal (1.2e23), hexadecimal (0c1x)
      number: number,
      operator: /\*\*?|\|\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\/=&]|[~¬^]=?/i,
      punctuation: punctuation
    };
  })(Prism);
}

/***/ }),

/***/ 3415:
/***/ ((module) => {



module.exports = sass;
sass.displayName = 'sass';
sass.aliases = [];

function sass(Prism) {
  ;

  (function (Prism) {
    Prism.languages.sass = Prism.languages.extend('css', {
      // Sass comments don't need to be closed, only indented
      comment: {
        pattern: /^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t].+)*/m,
        lookbehind: true,
        greedy: true
      }
    });
    Prism.languages.insertBefore('sass', 'atrule', {
      // We want to consume the whole line
      'atrule-line': {
        // Includes support for = and + shortcuts
        pattern: /^(?:[ \t]*)[@+=].+/m,
        greedy: true,
        inside: {
          atrule: /(?:@[\w-]+|[+=])/m
        }
      }
    });
    delete Prism.languages.sass.atrule;
    var variable = /\$[-\w]+|#\{\$[-\w]+\}/;
    var operator = [/[+*\/%]|[=!]=|<=?|>=?|\b(?:and|or|not)\b/, {
      pattern: /(\s)-(?=\s)/,
      lookbehind: true
    }];
    Prism.languages.insertBefore('sass', 'property', {
      // We want to consume the whole line
      'variable-line': {
        pattern: /^[ \t]*\$.+/m,
        greedy: true,
        inside: {
          punctuation: /:/,
          variable: variable,
          operator: operator
        }
      },
      // We want to consume the whole line
      'property-line': {
        pattern: /^[ \t]*(?:[^:\s]+ *:.*|:[^:\s].*)/m,
        greedy: true,
        inside: {
          property: [/[^:\s]+(?=\s*:)/, {
            pattern: /(:)[^:\s]+/,
            lookbehind: true
          }],
          punctuation: /:/,
          variable: variable,
          operator: operator,
          important: Prism.languages.sass.important
        }
      }
    });
    delete Prism.languages.sass.property;
    delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,
    // what's left should be selectors

    Prism.languages.insertBefore('sass', 'punctuation', {
      selector: {
        pattern: /^([ \t]*)\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*)*/m,
        lookbehind: true,
        greedy: true
      }
    });
  })(Prism);
}

/***/ }),

/***/ 8142:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorJava = __webpack_require__(2266);

module.exports = scala;
scala.displayName = 'scala';
scala.aliases = [];

function scala(Prism) {
  Prism.register(refractorJava);
  Prism.languages.scala = Prism.languages.extend('java', {
    'triple-quoted-string': {
      pattern: /"""[\s\S]*?"""/,
      greedy: true,
      alias: 'string'
    },
    string: {
      pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    keyword: /<-|=>|\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\b/,
    number: /\b0x(?:[\da-f]*\.)?[\da-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e\d+)?[dfl]?/i,
    builtin: /\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\b/,
    symbol: /'[^\d\s\\]\w*/
  });
  delete Prism.languages.scala['class-name'];
  delete Prism.languages.scala['function'];
}

/***/ }),

/***/ 2359:
/***/ ((module) => {



module.exports = scheme;
scheme.displayName = 'scheme';
scheme.aliases = [];

function scheme(Prism) {
  ;

  (function (Prism) {
    Prism.languages.scheme = {
      // this supports "normal" single-line comments:
      //   ; comment
      // and (potentially nested) multiline comments:
      //   #| comment #| nested |# still comment |#
      // (only 1 level of nesting is supported)
      comment: /;.*|#;\s*(?:\((?:[^()]|\([^()]*\))*\)|\[(?:[^\[\]]|\[[^\[\]]*\])*\])|#\|(?:[^#|]|#(?!\|)|\|(?!#)|#\|(?:[^#|]|#(?!\|)|\|(?!#))*\|#)*\|#/,
      string: {
        pattern: /"(?:[^"\\]|\\.)*"/,
        greedy: true
      },
      symbol: {
        pattern: /'[^()\[\]#'\s]+/,
        greedy: true
      },
      character: {
        pattern: /#\\(?:[ux][a-fA-F\d]+\b|[-a-zA-Z]+\b|[\uD800-\uDBFF][\uDC00-\uDFFF]|\S)/,
        greedy: true,
        alias: 'string'
      },
      'lambda-parameter': [// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30
      {
        pattern: /((?:^|[^'`#])[(\[]lambda\s+)(?:[^|()\[\]'\s]+|\|(?:[^\\|]|\\.)*\|)/,
        lookbehind: true
      }, {
        pattern: /((?:^|[^'`#])[(\[]lambda\s+[(\[])[^()\[\]']+/,
        lookbehind: true
      }],
      keyword: {
        pattern: /((?:^|[^'`#])[(\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\*)?|let\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\[\]\s]|$)/,
        lookbehind: true
      },
      builtin: {
        // all functions of the base library of R7RS plus some of built-ins of R5Rs
        pattern: /((?:^|[^'`#])[(\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\?|boolean=?\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\?|\?|<\?|<=\?|=\?|>\?|>=\?)|close-(?:input-port|output-port|port)|complex\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\??|eq\?|equal\?|eqv\?|error|error-object(?:-irritants|-message|\?)|eval|even\?|exact(?:-integer-sqrt|-integer\?|\?)?|expt|features|file-error\?|floor(?:-quotient|-remainder|\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\??|input-port(?:-open\?|\?)|integer(?:->char|\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\?|newline|not|null\?|number(?:->string|\?)|numerator|odd\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\?|\?)|pair\?|peek-char|peek-u8|port\?|positive\?|procedure\?|quotient|raise|raise-continuable|rational\?|rationalize|read-(?:bytevector|bytevector!|char|error\?|line|string|u8)|real\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\?|<\?|<=\?|=\?|>\?|>=\?)?|substring|symbol(?:->string|\?|=\?)|syntax-error|textual-port\?|truncate(?:-quotient|-remainder|\/)?|u8-ready\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\?)(?=[()\[\]\s]|$)/,
        lookbehind: true
      },
      operator: {
        pattern: /((?:^|[^'`#])[(\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\[\]\s]|$)/,
        lookbehind: true
      },
      number: {
        // The number pattern from [the R7RS spec](https://small.r7rs.org/attachment/r7rs.pdf).
        //
        // <number>      := <num 2>|<num 8>|<num 10>|<num 16>
        // <num R>       := <prefix R><complex R>
        // <complex R>   := <real R>(?:@<real R>|<imaginary R>)?|<imaginary R>
        // <imaginary R> := [+-](?:<ureal R>|(?:inf|nan)\.0)?i
        // <real R>      := [+-]?<ureal R>|[+-](?:inf|nan)\.0
        // <ureal R>     := <uint R>(?:\/<uint R>)?
        //                | <decimal R>
        //
        // <decimal 10>  := (?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?
        // <uint R>      := <digit R>+
        // <prefix R>    := <radix R>(?:#[ei])?|(?:#[ei])?<radix R>
        // <radix 2>     := #b
        // <radix 8>     := #o
        // <radix 10>    := (?:#d)?
        // <radix 16>    := #x
        // <digit 2>     := [01]
        // <digit 8>     := [0-7]
        // <digit 10>    := \d
        // <digit 16>    := [0-9a-f]
        //
        // The problem with this grammar is that the resulting regex is way to complex, so we simplify by grouping all
        // non-decimal bases together. This results in a decimal (dec) and combined binary, octal, and hexadecimal (box)
        // pattern:
        pattern: RegExp(SortedBNF({
          '<ureal dec>': /\d+(?:\/\d+)|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?/.source,
          '<real dec>': /[+-]?<ureal dec>|[+-](?:inf|nan)\.0/.source,
          '<imaginary dec>': /[+-](?:<ureal dec>|(?:inf|nan)\.0)?i/.source,
          '<complex dec>': /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,
          '<num dec>': /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,
          '<ureal box>': /[0-9a-f]+(?:\/[0-9a-f]+)?/.source,
          '<real box>': /[+-]?<ureal box>|[+-](?:inf|nan)\.0/.source,
          '<imaginary box>': /[+-](?:<ureal box>|(?:inf|nan)\.0)?i/.source,
          '<complex box>': /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,
          '<num box>': /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,
          '<number>': /(^|[()\[\]\s])(?:<num dec>|<num box>)(?=[()\[\]\s]|$)/.source
        }), 'i'),
        lookbehind: true
      },
      "boolean": {
        pattern: /(^|[()\[\]\s])#(?:[ft]|false|true)(?=[()\[\]\s]|$)/,
        lookbehind: true
      },
      "function": {
        pattern: /((?:^|[^'`#])[(\[])(?:[^|()\[\]'\s]+|\|(?:[^\\|]|\\.)*\|)(?=[()\[\]\s]|$)/,
        lookbehind: true
      },
      identifier: {
        pattern: /(^|[()\[\]\s])\|(?:[^\\|]|\\.)*\|(?=[()\[\]\s]|$)/,
        lookbehind: true,
        greedy: true
      },
      punctuation: /[()\[\]']/
    };
    /**
     * Given a topologically sorted BNF grammar, this will return the RegExp source of last rule of the grammar.
     *
     * @param {Record<string, string>} grammar
     * @returns {string}
     */

    function SortedBNF(grammar) {
      for (var key in grammar) {
        grammar[key] = grammar[key].replace(/<[\w\s]+>/g, function (key) {
          return '(?:' + grammar[key].trim() + ')';
        });
      } // return the last item


      return grammar[key];
    }
  })(Prism);
}

/***/ }),

/***/ 136:
/***/ ((module) => {



module.exports = scss;
scss.displayName = 'scss';
scss.aliases = [];

function scss(Prism) {
  Prism.languages.scss = Prism.languages.extend('css', {
    comment: {
      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
      lookbehind: true
    },
    atrule: {
      pattern: /@[\w-](?:\([^()]+\)|[^()\s]|\s+(?!\s))*?(?=\s+[{;])/,
      inside: {
        rule: /@[\w-]+/ // See rest below

      }
    },
    // url, compassified
    url: /(?:[-a-z]+-)?url(?=\()/i,
    // CSS selector regex is not appropriate for Sass
    // since there can be lot more things (var, @ directive, nesting..)
    // a selector must start at the end of a property or after a brace (end of other rules or nesting)
    // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable
    // the end of a selector is found when there is no rules in it ( {} or {\s}) or if there is a property (because an interpolated var
    // can "pass" as a selector- e.g: proper#{$erty})
    // this one was hard to do, so please be careful if you edit this one :)
    selector: {
      // Initial look-ahead is used to prevent matching of blank selectors
      pattern: /(?=\S)[^@;{}()]?(?:[^@;{}()\s]|\s+(?!\s)|#\{\$[-\w]+\})+(?=\s*\{(?:\}|\s|[^}][^:{}]*[:{][^}]))/m,
      inside: {
        parent: {
          pattern: /&/,
          alias: 'important'
        },
        placeholder: /%[-\w]+/,
        variable: /\$[-\w]+|#\{\$[-\w]+\}/
      }
    },
    property: {
      pattern: /(?:[-\w]|\$[-\w]|#\{\$[-\w]+\})+(?=\s*:)/,
      inside: {
        variable: /\$[-\w]+|#\{\$[-\w]+\}/
      }
    }
  });
  Prism.languages.insertBefore('scss', 'atrule', {
    keyword: [/@(?:if|else(?: if)?|forward|for|each|while|import|use|extend|debug|warn|mixin|include|function|return|content)\b/i, {
      pattern: /( )(?:from|through)(?= )/,
      lookbehind: true
    }]
  });
  Prism.languages.insertBefore('scss', 'important', {
    // var and interpolated vars
    variable: /\$[-\w]+|#\{\$[-\w]+\}/
  });
  Prism.languages.insertBefore('scss', 'function', {
    'module-modifier': {
      pattern: /\b(?:as|with|show|hide)\b/i,
      alias: 'keyword'
    },
    placeholder: {
      pattern: /%[-\w]+/,
      alias: 'selector'
    },
    statement: {
      pattern: /\B!(?:default|optional)\b/i,
      alias: 'keyword'
    },
    "boolean": /\b(?:true|false)\b/,
    "null": {
      pattern: /\bnull\b/,
      alias: 'keyword'
    },
    operator: {
      pattern: /(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|or|not)(?=\s)/,
      lookbehind: true
    }
  });
  Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss;
}

/***/ }),

/***/ 385:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorBash = __webpack_require__(4491);

module.exports = shellSession;
shellSession.displayName = 'shellSession';
shellSession.aliases = [];

function shellSession(Prism) {
  Prism.register(refractorBash);

  (function (Prism) {
    // CAREFUL!
    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!
    var strings = [// normal string
    /"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/.source, /'[^']*'/.source, /\$'(?:[^'\\]|\\[\s\S])*'/.source, // here doc
    // 2 capturing groups
    /<<-?\s*(["']?)(\w+)\1\s[\s\S]*?[\r\n]\2/.source].join('|');
    Prism.languages['shell-session'] = {
      command: {
        pattern: RegExp( // user info
        /^/.source + '(?:' + ( // <user> ":" ( <path> )?
        /[^\s@:$#%*!/\\]+@[^\r\n@:$#%*!/\\]+(?::[^\0-\x1F$#%*?"<>:;|]+)?/.source + '|' + // <path>
        // Since the path pattern is quite general, we will require it to start with a special character to
        // prevent false positives.
        /[/~.][^\0-\x1F$#%*?"<>@:;|]*/.source) + ')?' + // shell symbol
        /[$#%](?=\s)/.source + // bash command
        /(?:[^\\\r\n \t'"<$]|[ \t](?:(?!#)|#.*$)|\\(?:[^\r]|\r\n?)|\$(?!')|<(?!<)|<<str>>)+/.source.replace(/<<str>>/g, function () {
          return strings;
        }), 'm'),
        greedy: true,
        inside: {
          info: {
            // foo@bar:~/files$ exit
            // foo@bar$ exit
            // ~/files$ exit
            pattern: /^[^#$%]+/,
            alias: 'punctuation',
            inside: {
              user: /^[^\s@:$#%*!/\\]+@[^\r\n@:$#%*!/\\]+/,
              punctuation: /:/,
              path: /[\s\S]+/
            }
          },
          bash: {
            pattern: /(^[$#%]\s*)\S[\s\S]*/,
            lookbehind: true,
            alias: 'language-bash',
            inside: Prism.languages.bash
          },
          'shell-symbol': {
            pattern: /^[$#%]/,
            alias: 'important'
          }
        }
      },
      output: /.(?:.*(?:[\r\n]|.$))*/
    };
    Prism.languages['sh-session'] = Prism.languages['shellsession'] = Prism.languages['shell-session'];
  })(Prism);
}

/***/ }),

/***/ 2207:
/***/ ((module) => {



module.exports = smali;
smali.displayName = 'smali';
smali.aliases = [];

function smali(Prism) {
  // Test files for the parser itself:
  // https://github.com/JesusFreke/smali/tree/master/smali/src/test/resources/LexerTest
  Prism.languages.smali = {
    comment: /#.*/,
    string: {
      pattern: /"(?:[^\r\n\\"]|\\.)*"|'(?:[^\r\n\\']|\\(?:.|u[\da-fA-F]{4}))'/,
      greedy: true
    },
    'class-name': {
      pattern: /(^|[^L])L(?:(?:\w+|`[^`\r\n]*`)\/)*(?:[\w$]+|`[^`\r\n]*`)(?=\s*;)/,
      lookbehind: true,
      inside: {
        'class-name': {
          pattern: /(^L|\/)(?:[\w$]+|`[^`\r\n]*`)$/,
          lookbehind: true
        },
        namespace: {
          pattern: /^(L)(?:(?:\w+|`[^`\r\n]*`)\/)+/,
          lookbehind: true,
          inside: {
            punctuation: /\//
          }
        },
        builtin: /^L/
      }
    },
    builtin: [{
      // Reference: https://github.com/JesusFreke/smali/wiki/TypesMethodsAndFields#types
      pattern: /([();\[])[BCDFIJSVZ]+/,
      lookbehind: true
    }, {
      // e.g. .field mWifiOnUid:I
      pattern: /([\w$>]:)[BCDFIJSVZ]/,
      lookbehind: true
    }],
    keyword: [{
      pattern: /(\.end\s+)[\w-]+/,
      lookbehind: true
    }, {
      pattern: /(^|[^\w.-])\.(?!\d)[\w-]+/,
      lookbehind: true
    }, {
      pattern: /(^|[^\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\w.-])/,
      lookbehind: true
    }],
    "function": {
      pattern: /(^|[^\w.-])(?:\w+|<[\w$-]+>)(?=\()/,
      lookbehind: true
    },
    field: {
      pattern: /[\w$]+(?=:)/,
      alias: 'variable'
    },
    register: {
      pattern: /(^|[^\w.-])[vp]\d(?![\w.-])/,
      lookbehind: true,
      alias: 'variable'
    },
    "boolean": {
      pattern: /(^|[^\w.-])(?:true|false)(?![\w.-])/,
      lookbehind: true
    },
    number: {
      pattern: /(^|[^/\w.-])-?(?:NAN|INFINITY|0x(?:[\dA-F]+(?:\.[\dA-F]*)?|\.[\dA-F]+)(?:p[+-]?[\dA-F]+)?|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?)[dflst]?(?![\w.-])/i,
      lookbehind: true
    },
    label: {
      pattern: /(:)\w+/,
      lookbehind: true,
      alias: 'property'
    },
    operator: /->|\.\.|[\[=]/,
    punctuation: /[{}(),;:]/
  };
}

/***/ }),

/***/ 9820:
/***/ ((module) => {



module.exports = smalltalk;
smalltalk.displayName = 'smalltalk';
smalltalk.aliases = [];

function smalltalk(Prism) {
  Prism.languages.smalltalk = {
    comment: /"(?:""|[^"])*"/,
    character: {
      pattern: /\$./,
      alias: 'string'
    },
    string: /'(?:''|[^'])*'/,
    symbol: /#[\da-z]+|#(?:-|([+\/\\*~<>=@%|&?!])\1?)|#(?=\()/i,
    'block-arguments': {
      pattern: /(\[\s*):[^\[|]*\|/,
      lookbehind: true,
      inside: {
        variable: /:[\da-z]+/i,
        punctuation: /\|/
      }
    },
    'temporary-variables': {
      pattern: /\|[^|]+\|/,
      inside: {
        variable: /[\da-z]+/i,
        punctuation: /\|/
      }
    },
    keyword: /\b(?:nil|true|false|self|super|new)\b/,
    number: [/\d+r-?[\dA-Z]+(?:\.[\dA-Z]+)?(?:e-?\d+)?/, /\b\d+(?:\.\d+)?(?:e-?\d+)?/],
    operator: /[<=]=?|:=|~[~=]|\/\/?|\\\\|>[>=]?|[!^+\-*&|,@]/,
    punctuation: /[.;:?\[\](){}]/
  };
}

/***/ }),

/***/ 8442:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorMarkupTemplating = __webpack_require__(8083);

module.exports = smarty;
smarty.displayName = 'smarty';
smarty.aliases = [];

function smarty(Prism) {
  Prism.register(refractorMarkupTemplating)
  /* TODO
  Add support for variables inside double quoted strings
  Add support for {php}
  */
  ;

  (function (Prism) {
    Prism.languages.smarty = {
      comment: /\{\*[\s\S]*?\*\}/,
      delimiter: {
        pattern: /^\{|\}$/i,
        alias: 'punctuation'
      },
      string: /(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,
      number: /\b0x[\dA-Fa-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][-+]?\d+)?/,
      variable: [/\$(?!\d)\w+/, /#(?!\d)\w+#/, {
        pattern: /(\.|->)(?!\d)\w+/,
        lookbehind: true
      }, {
        pattern: /(\[)(?!\d)\w+(?=\])/,
        lookbehind: true
      }],
      "function": [{
        pattern: /(\|\s*)@?(?!\d)\w+/,
        lookbehind: true
      }, /^\/?(?!\d)\w+/, /(?!\d)\w+(?=\()/],
      'attr-name': {
        // Value is made optional because it may have already been tokenized
        pattern: /\w+\s*=\s*(?:(?!\d)\w+)?/,
        inside: {
          variable: {
            pattern: /(=\s*)(?!\d)\w+/,
            lookbehind: true
          },
          operator: /=/
        }
      },
      punctuation: [/[\[\]().,:`]|->/],
      operator: [/[+\-*\/%]|==?=?|[!<>]=?|&&|\|\|?/, /\bis\s+(?:not\s+)?(?:div|even|odd)(?:\s+by)?\b/, /\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\b/],
      keyword: /\b(?:false|off|on|no|true|yes)\b/
    }; // Tokenize all inline Smarty expressions

    Prism.hooks.add('before-tokenize', function (env) {
      var smartyPattern = /\{\*[\s\S]*?\*\}|\{[\s\S]+?\}/g;
      var smartyLitteralStart = '{literal}';
      var smartyLitteralEnd = '{/literal}';
      var smartyLitteralMode = false;
      Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {
        // Smarty tags inside {literal} block are ignored
        if (match === smartyLitteralEnd) {
          smartyLitteralMode = false;
        }

        if (!smartyLitteralMode) {
          if (match === smartyLitteralStart) {
            smartyLitteralMode = true;
          }

          return true;
        }

        return false;
      });
    }); // Re-insert the tokens after tokenizing

    Prism.hooks.add('after-tokenize', function (env) {
      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');
    });
  })(Prism);
}

/***/ }),

/***/ 4526:
/***/ ((module) => {



module.exports = sml;
sml.displayName = 'sml';
sml.aliases = ['smlnj'];

function sml(Prism) {
  // https://smlfamily.github.io/sml97-defn.pdf
  // https://people.mpi-sws.org/~rossberg/sml.html
  ;

  (function (Prism) {
    var keywords = /\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\b/i;
    Prism.languages.sml = {
      // allow one level of nesting
      comment: /\(\*(?:[^*(]|\*(?!\))|\((?!\*)|\(\*(?:[^*(]|\*(?!\))|\((?!\*))*\*\))*\*\)/,
      string: {
        pattern: /#?"(?:[^"\\]|\\.)*"/,
        greedy: true
      },
      'class-name': [{
        // This is only an approximation since the real grammar is context-free
        //
        // Why the main loop so complex?
        // The main loop is approximately the same as /(?:\s*(?:[*,]|->)\s*<TERMINAL>)*/ which is, obviously, a lot
        // simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be
        // followed by a long identifier.
        pattern: RegExp(/((?:^|[^:]):\s*)<TERMINAL>(?:\s*(?:(?:\*|->)\s*<TERMINAL>|,\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\s+<LONG-ID>)))*/.source.replace(/<NOT-LAST>/g, function () {
          return /\s*(?:[*,]|->)/.source;
        }).replace(/<TERMINAL>/g, function () {
          return /(?:'[\w']*|<LONG-ID>|\((?:[^()]|\([^()]*\))*\)|\{(?:[^{}]|\{[^{}]*\})*\})(?:\s+<LONG-ID>)*/.source;
        }).replace(/<LONG-ID>/g, function () {
          return /(?!<KEYWORD>)[a-z\d_][\w'.]*/.source;
        }).replace(/<KEYWORD>/g, function () {
          return keywords.source;
        }), 'i'),
        lookbehind: true,
        greedy: true,
        inside: null // see below

      }, {
        pattern: /((?:^|[^\w'])(?:datatype|exception|functor|signature|structure|type)\s+)[a-z_][\w'.]*/i,
        lookbehind: true
      }],
      "function": {
        pattern: /((?:^|[^\w'])fun\s+)[a-z_][\w'.]*/i,
        lookbehind: true
      },
      keyword: keywords,
      variable: {
        pattern: /(^|[^\w'])'[\w']*/,
        lookbehind: true
      },
      number: /~?\b(?:\d+(?:\.\d+)?(?:e~?\d+)?|0x[\da-f]+)\b/i,
      word: {
        pattern: /\b0w(?:\d+|x[\da-f]+)\b/i,
        alias: 'constant'
      },
      "boolean": /\b(?:false|true)\b/i,
      operator: /\.\.\.|:[>=:]|=>?|->|[<>]=?|[!+\-*/^#|@~]/,
      punctuation: /[(){}\[\].:,;]/
    };
    Prism.languages.sml['class-name'][0].inside = Prism.languages.sml;
    Prism.languages.smlnj = Prism.languages.sml;
  })(Prism);
}

/***/ }),

/***/ 9428:
/***/ ((module) => {



module.exports = solidity;
solidity.displayName = 'solidity';
solidity.aliases = ['sol'];

function solidity(Prism) {
  Prism.languages.solidity = Prism.languages.extend('clike', {
    'class-name': {
      pattern: /(\b(?:contract|enum|interface|library|new|struct|using)\s+)(?!\d)[\w$]+/,
      lookbehind: true
    },
    keyword: /\b(?:_|anonymous|as|assembly|assert|break|calldata|case|constant|constructor|continue|contract|default|delete|do|else|emit|enum|event|external|for|from|function|if|import|indexed|inherited|interface|internal|is|let|library|mapping|memory|modifier|new|payable|pragma|private|public|pure|require|returns?|revert|selfdestruct|solidity|storage|struct|suicide|switch|this|throw|using|var|view|while)\b/,
    operator: /=>|->|:=|=:|\*\*|\+\+|--|\|\||&&|<<=?|>>=?|[-+*/%^&|<>!=]=?|[~?]/
  });
  Prism.languages.insertBefore('solidity', 'keyword', {
    builtin: /\b(?:address|bool|string|u?int(?:8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?|byte|bytes(?:[1-9]|[12]\d|3[0-2])?)\b/
  });
  Prism.languages.insertBefore('solidity', 'number', {
    version: {
      pattern: /([<>]=?|\^)\d+\.\d+\.\d+\b/,
      lookbehind: true,
      alias: 'number'
    }
  });
  Prism.languages.sol = Prism.languages.solidity;
}

/***/ }),

/***/ 4179:
/***/ ((module) => {



module.exports = solutionFile;
solutionFile.displayName = 'solutionFile';
solutionFile.aliases = [];

function solutionFile(Prism) {
  ;

  (function (Prism) {
    var guid = {
      // https://en.wikipedia.org/wiki/Universally_unique_identifier#Format
      pattern: /\{[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}\}/i,
      alias: 'constant',
      inside: {
        punctuation: /[{}]/
      }
    };
    Prism.languages['solution-file'] = {
      comment: {
        pattern: /#.*/,
        greedy: true
      },
      string: {
        pattern: /"[^"\r\n]*"|'[^'\r\n]*'/,
        greedy: true,
        inside: {
          guid: guid
        }
      },
      object: {
        // Foo
        //   Bar("abs") = 9
        //   EndBar
        //   Prop = TRUE
        // EndFoo
        pattern: /^([ \t]*)(?:([A-Z]\w*)\b(?=.*(?:\r\n?|\n)(?:\1[ \t].*(?:\r\n?|\n))*\1End\2(?=[ \t]*$))|End[A-Z]\w*(?=[ \t]*$))/m,
        lookbehind: true,
        greedy: true,
        alias: 'keyword'
      },
      property: {
        pattern: /^([ \t]*)(?!\s)[^\r\n"#=()]*[^\s"#=()](?=\s*=)/m,
        lookbehind: true,
        inside: {
          guid: guid
        }
      },
      guid: guid,
      number: /\b\d+(?:\.\d+)*\b/,
      "boolean": /\b(?:FALSE|TRUE)\b/,
      operator: /=/,
      punctuation: /[(),]/
    };
    Prism.languages['sln'] = Prism.languages['solution-file'];
  })(Prism);
}

/***/ }),

/***/ 8254:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorMarkupTemplating = __webpack_require__(8083);

module.exports = soy;
soy.displayName = 'soy';
soy.aliases = [];

function soy(Prism) {
  Prism.register(refractorMarkupTemplating);

  (function (Prism) {
    var stringPattern = /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
    var numberPattern = /\b\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\b|\b0x[\dA-F]+\b/;
    Prism.languages.soy = {
      comment: [/\/\*[\s\S]*?\*\//, {
        pattern: /(\s)\/\/.*/,
        lookbehind: true,
        greedy: true
      }],
      'command-arg': {
        pattern: /(\{+\/?\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\s+)\.?[\w.]+/,
        lookbehind: true,
        alias: 'string',
        inside: {
          punctuation: /\./
        }
      },
      parameter: {
        pattern: /(\{+\/?\s*@?param\??\s+)\.?[\w.]+/,
        lookbehind: true,
        alias: 'variable'
      },
      keyword: [{
        pattern: /(\{+\/?[^\S\r\n]*)(?:\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\??|rb|sp|switch|template|xid)/,
        lookbehind: true
      }, /\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\b/],
      delimiter: {
        pattern: /^\{+\/?|\/?\}+$/,
        alias: 'punctuation'
      },
      property: /\w+(?==)/,
      variable: {
        pattern: /\$[^\W\d]\w*(?:\??(?:\.\w+|\[[^\]]+\]))*/,
        inside: {
          string: {
            pattern: stringPattern,
            greedy: true
          },
          number: numberPattern,
          punctuation: /[\[\].?]/
        }
      },
      string: {
        pattern: stringPattern,
        greedy: true
      },
      "function": [/\w+(?=\()/, {
        pattern: /(\|[^\S\r\n]*)\w+/,
        lookbehind: true
      }],
      "boolean": /\b(?:true|false)\b/,
      number: numberPattern,
      operator: /\?:?|<=?|>=?|==?|!=|[+*/%-]|\b(?:and|not|or)\b/,
      punctuation: /[{}()\[\]|.,:]/
    }; // Tokenize all inline Soy expressions

    Prism.hooks.add('before-tokenize', function (env) {
      var soyPattern = /\{\{.+?\}\}|\{.+?\}|\s\/\/.*|\/\*[\s\S]*?\*\//g;
      var soyLitteralStart = '{literal}';
      var soyLitteralEnd = '{/literal}';
      var soyLitteralMode = false;
      Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {
        // Soy tags inside {literal} block are ignored
        if (match === soyLitteralEnd) {
          soyLitteralMode = false;
        }

        if (!soyLitteralMode) {
          if (match === soyLitteralStart) {
            soyLitteralMode = true;
          }

          return true;
        }

        return false;
      });
    }); // Re-insert the tokens after tokenizing

    Prism.hooks.add('after-tokenize', function (env) {
      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');
    });
  })(Prism);
}

/***/ }),

/***/ 6637:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorTurtle = __webpack_require__(8330);

module.exports = sparql;
sparql.displayName = 'sparql';
sparql.aliases = ['rq'];

function sparql(Prism) {
  Prism.register(refractorTurtle);
  Prism.languages.sparql = Prism.languages.extend('turtle', {
    "boolean": /\b(?:true|false)\b/i,
    variable: {
      pattern: /[?$]\w+/,
      greedy: true
    }
  });
  Prism.languages.insertBefore('sparql', 'punctuation', {
    keyword: [/\b(?:A|ADD|ALL|AS|ASC|ASK|BNODE|BY|CLEAR|CONSTRUCT|COPY|CREATE|DATA|DEFAULT|DELETE|DESC|DESCRIBE|DISTINCT|DROP|EXISTS|FILTER|FROM|GROUP|HAVING|INSERT|INTO|LIMIT|LOAD|MINUS|MOVE|NAMED|NOT|NOW|OFFSET|OPTIONAL|ORDER|RAND|REDUCED|SELECT|SEPARATOR|SERVICE|SILENT|STRUUID|UNION|USING|UUID|VALUES|WHERE)\b/i, /\b(?:ABS|AVG|BIND|BOUND|CEIL|COALESCE|CONCAT|CONTAINS|COUNT|DATATYPE|DAY|ENCODE_FOR_URI|FLOOR|GROUP_CONCAT|HOURS|IF|IRI|isBLANK|isIRI|isLITERAL|isNUMERIC|isURI|LANG|LANGMATCHES|LCASE|MAX|MD5|MIN|MINUTES|MONTH|ROUND|REGEX|REPLACE|sameTerm|SAMPLE|SECONDS|SHA1|SHA256|SHA384|SHA512|STR|STRAFTER|STRBEFORE|STRDT|STRENDS|STRLANG|STRLEN|STRSTARTS|SUBSTR|SUM|TIMEZONE|TZ|UCASE|URI|YEAR)\b(?=\s*\()/i, /\b(?:GRAPH|BASE|PREFIX)\b/i]
  });
  Prism.languages.rq = Prism.languages.sparql;
}

/***/ }),

/***/ 189:
/***/ ((module) => {



module.exports = splunkSpl;
splunkSpl.displayName = 'splunkSpl';
splunkSpl.aliases = [];

function splunkSpl(Prism) {
  Prism.languages['splunk-spl'] = {
    comment: /`comment\("(?:\\.|[^\\"])*"\)`/,
    string: {
      pattern: /"(?:\\.|[^\\"])*"/,
      greedy: true
    },
    // https://docs.splunk.com/Documentation/Splunk/7.3.0/SearchReference/ListOfSearchCommands
    keyword: /\b(?:abstract|accum|addcoltotals|addinfo|addtotals|analyzefields|anomalies|anomalousvalue|anomalydetection|append|appendcols|appendcsv|appendlookup|appendpipe|arules|associate|audit|autoregress|bin|bucket|bucketdir|chart|cluster|cofilter|collect|concurrency|contingency|convert|correlate|datamodel|dbinspect|dedup|delete|delta|diff|erex|eval|eventcount|eventstats|extract|fieldformat|fields|fieldsummary|filldown|fillnull|findtypes|folderize|foreach|format|from|gauge|gentimes|geom|geomfilter|geostats|head|highlight|history|iconify|input|inputcsv|inputlookup|iplocation|join|kmeans|kv|kvform|loadjob|localize|localop|lookup|makecontinuous|makemv|makeresults|map|mcollect|metadata|metasearch|meventcollect|mstats|multikv|multisearch|mvcombine|mvexpand|nomv|outlier|outputcsv|outputlookup|outputtext|overlap|pivot|predict|rangemap|rare|regex|relevancy|reltime|rename|replace|rest|return|reverse|rex|rtorder|run|savedsearch|script|scrub|search|searchtxn|selfjoin|sendemail|set|setfields|sichart|sirare|sistats|sitimechart|sitop|sort|spath|stats|strcat|streamstats|table|tags|tail|timechart|timewrap|top|transaction|transpose|trendline|tscollect|tstats|typeahead|typelearner|typer|union|uniq|untable|where|x11|xmlkv|xmlunescape|xpath|xyseries)\b/i,
    'operator-word': {
      pattern: /\b(?:and|as|by|not|or|xor)\b/i,
      alias: 'operator'
    },
    "function": /\b\w+(?=\s*\()/,
    property: /\b\w+(?=\s*=(?!=))/,
    date: {
      // MM/DD/YYYY(:HH:MM:SS)?
      pattern: /\b\d{1,2}\/\d{1,2}\/\d{1,4}(?:(?::\d{1,2}){3})?\b/,
      alias: 'number'
    },
    number: /\b\d+(?:\.\d+)?\b/,
    "boolean": /\b(?:f|false|t|true)\b/i,
    operator: /[<>=]=?|[-+*/%|]/,
    punctuation: /[()[\],]/
  };
}

/***/ }),

/***/ 7295:
/***/ ((module) => {



module.exports = sqf;
sqf.displayName = 'sqf';
sqf.aliases = [];

function sqf(Prism) {
  Prism.languages.sqf = Prism.languages.extend('clike', {
    string: {
      pattern: /"(?:(?:"")?[^"])*"(?!")|'(?:[^'])*'/,
      greedy: true
    },
    keyword: /\b(?:breakOut|breakTo|call|case|catch|default|do|echo|else|execVM|execFSM|exitWith|for|forEach|forEachMember|forEachMemberAgent|forEachMemberTeam|from|goto|if|nil|preprocessFile|preprocessFileLineNumbers|private|scopeName|spawn|step|switch|then|throw|to|try|while|with)\b/i,
    "boolean": /\b(?:true|false)\b/i,
    "function": /\b(?:abs|accTime|acos|action|actionIDs|actionKeys|actionKeysImages|actionKeysNames|actionKeysNamesArray|actionName|actionParams|activateAddons|activatedAddons|activateKey|add3DENConnection|add3DENEventHandler|add3DENLayer|addAction|addBackpack|addBackpackCargo|addBackpackCargoGlobal|addBackpackGlobal|addCamShake|addCuratorAddons|addCuratorCameraArea|addCuratorEditableObjects|addCuratorEditingArea|addCuratorPoints|addEditorObject|addEventHandler|addForce|addForceGeneratorRTD|addGoggles|addGroupIcon|addHandgunItem|addHeadgear|addItem|addItemCargo|addItemCargoGlobal|addItemPool|addItemToBackpack|addItemToUniform|addItemToVest|addLiveStats|addMagazine|addMagazineAmmoCargo|addMagazineCargo|addMagazineCargoGlobal|addMagazineGlobal|addMagazinePool|addMagazines|addMagazineTurret|addMenu|addMenuItem|addMissionEventHandler|addMPEventHandler|addMusicEventHandler|addOwnedMine|addPlayerScores|addPrimaryWeaponItem|addPublicVariableEventHandler|addRating|addResources|addScore|addScoreSide|addSecondaryWeaponItem|addSwitchableUnit|addTeamMember|addToRemainsCollector|addTorque|addUniform|addVehicle|addVest|addWaypoint|addWeapon|addWeaponCargo|addWeaponCargoGlobal|addWeaponGlobal|addWeaponItem|addWeaponPool|addWeaponTurret|admin|agent|agents|AGLToASL|aimedAtTarget|aimPos|airDensityCurveRTD|airDensityRTD|airplaneThrottle|airportSide|AISFinishHeal|alive|all3DENEntities|allAirports|allControls|allCurators|allCutLayers|allDead|allDeadMen|allDisplays|allGroups|allMapMarkers|allMines|allMissionObjects|allow3DMode|allowCrewInImmobile|allowCuratorLogicIgnoreAreas|allowDamage|allowDammage|allowFileOperations|allowFleeing|allowGetIn|allowSprint|allPlayers|allSimpleObjects|allSites|allTurrets|allUnits|allUnitsUAV|allVariables|ammo|ammoOnPylon|animate|animateBay|animateDoor|animatePylon|animateSource|animationNames|animationPhase|animationSourcePhase|animationState|append|apply|armoryPoints|arrayIntersect|asin|ASLToAGL|ASLToATL|assert|assignAsCargo|assignAsCargoIndex|assignAsCommander|assignAsDriver|assignAsGunner|assignAsTurret|assignCurator|assignedCargo|assignedCommander|assignedDriver|assignedGunner|assignedItems|assignedTarget|assignedTeam|assignedVehicle|assignedVehicleRole|assignItem|assignTeam|assignToAirport|atan|atan2|atg|ATLToASL|attachedObject|attachedObjects|attachedTo|attachObject|attachTo|attackEnabled|backpack|backpackCargo|backpackContainer|backpackItems|backpackMagazines|backpackSpaceFor|behaviour|benchmark|binocular|blufor|boundingBox|boundingBoxReal|boundingCenter|briefingName|buildingExit|buildingPos|buldozer_EnableRoadDiag|buldozer_IsEnabledRoadDiag|buldozer_LoadNewRoads|buldozer_reloadOperMap|buttonAction|buttonSetAction|cadetMode|callExtension|camCommand|camCommit|camCommitPrepared|camCommitted|camConstuctionSetParams|camCreate|camDestroy|cameraEffect|cameraEffectEnableHUD|cameraInterest|cameraOn|cameraView|campaignConfigFile|camPreload|camPreloaded|camPrepareBank|camPrepareDir|camPrepareDive|camPrepareFocus|camPrepareFov|camPrepareFovRange|camPreparePos|camPrepareRelPos|camPrepareTarget|camSetBank|camSetDir|camSetDive|camSetFocus|camSetFov|camSetFovRange|camSetPos|camSetRelPos|camSetTarget|camTarget|camUseNVG|canAdd|canAddItemToBackpack|canAddItemToUniform|canAddItemToVest|cancelSimpleTaskDestination|canFire|canMove|canSlingLoad|canStand|canSuspend|canTriggerDynamicSimulation|canUnloadInCombat|canVehicleCargo|captive|captiveNum|cbChecked|cbSetChecked|ceil|channelEnabled|cheatsEnabled|checkAIFeature|checkVisibility|civilian|className|clear3DENAttribute|clear3DENInventory|clearAllItemsFromBackpack|clearBackpackCargo|clearBackpackCargoGlobal|clearForcesRTD|clearGroupIcons|clearItemCargo|clearItemCargoGlobal|clearItemPool|clearMagazineCargo|clearMagazineCargoGlobal|clearMagazinePool|clearOverlay|clearRadio|clearVehicleInit|clearWeaponCargo|clearWeaponCargoGlobal|clearWeaponPool|clientOwner|closeDialog|closeDisplay|closeOverlay|collapseObjectTree|collect3DENHistory|collectiveRTD|combatMode|commandArtilleryFire|commandChat|commander|commandFire|commandFollow|commandFSM|commandGetOut|commandingMenu|commandMove|commandRadio|commandStop|commandSuppressiveFire|commandTarget|commandWatch|comment|commitOverlay|compile|compileFinal|completedFSM|composeText|configClasses|configFile|configHierarchy|configName|configNull|configProperties|configSourceAddonList|configSourceMod|configSourceModList|confirmSensorTarget|connectTerminalToUAV|controlNull|controlsGroupCtrl|copyFromClipboard|copyToClipboard|copyWaypoints|cos|count|countEnemy|countFriendly|countSide|countType|countUnknown|create3DENComposition|create3DENEntity|createAgent|createCenter|createDialog|createDiaryLink|createDiaryRecord|createDiarySubject|createDisplay|createGearDialog|createGroup|createGuardedPoint|createLocation|createMarker|createMarkerLocal|createMenu|createMine|createMissionDisplay|createMPCampaignDisplay|createSimpleObject|createSimpleTask|createSite|createSoundSource|createTask|createTeam|createTrigger|createUnit|createVehicle|createVehicleCrew|createVehicleLocal|crew|ctAddHeader|ctAddRow|ctClear|ctCurSel|ctData|ctFindHeaderRows|ctFindRowHeader|ctHeaderControls|ctHeaderCount|ctRemoveHeaders|ctRemoveRows|ctrlActivate|ctrlAddEventHandler|ctrlAngle|ctrlAutoScrollDelay|ctrlAutoScrollRewind|ctrlAutoScrollSpeed|ctrlChecked|ctrlClassName|ctrlCommit|ctrlCommitted|ctrlCreate|ctrlDelete|ctrlEnable|ctrlEnabled|ctrlFade|ctrlHTMLLoaded|ctrlIDC|ctrlIDD|ctrlMapAnimAdd|ctrlMapAnimClear|ctrlMapAnimCommit|ctrlMapAnimDone|ctrlMapCursor|ctrlMapMouseOver|ctrlMapScale|ctrlMapScreenToWorld|ctrlMapWorldToScreen|ctrlModel|ctrlModelDirAndUp|ctrlModelScale|ctrlParent|ctrlParentControlsGroup|ctrlPosition|ctrlRemoveAllEventHandlers|ctrlRemoveEventHandler|ctrlScale|ctrlSetActiveColor|ctrlSetAngle|ctrlSetAutoScrollDelay|ctrlSetAutoScrollRewind|ctrlSetAutoScrollSpeed|ctrlSetBackgroundColor|ctrlSetChecked|ctrlSetDisabledColor|ctrlSetEventHandler|ctrlSetFade|ctrlSetFocus|ctrlSetFont|ctrlSetFontH1|ctrlSetFontH1B|ctrlSetFontH2|ctrlSetFontH2B|ctrlSetFontH3|ctrlSetFontH3B|ctrlSetFontH4|ctrlSetFontH4B|ctrlSetFontH5|ctrlSetFontH5B|ctrlSetFontH6|ctrlSetFontH6B|ctrlSetFontHeight|ctrlSetFontHeightH1|ctrlSetFontHeightH2|ctrlSetFontHeightH3|ctrlSetFontHeightH4|ctrlSetFontHeightH5|ctrlSetFontHeightH6|ctrlSetFontHeightSecondary|ctrlSetFontP|ctrlSetFontPB|ctrlSetFontSecondary|ctrlSetForegroundColor|ctrlSetModel|ctrlSetModelDirAndUp|ctrlSetModelScale|ctrlSetPixelPrecision|ctrlSetPosition|ctrlSetScale|ctrlSetStructuredText|ctrlSetText|ctrlSetTextColor|ctrlSetTextColorSecondary|ctrlSetTextSecondary|ctrlSetTooltip|ctrlSetTooltipColorBox|ctrlSetTooltipColorShade|ctrlSetTooltipColorText|ctrlShow|ctrlShown|ctrlText|ctrlTextHeight|ctrlTextSecondary|ctrlTextWidth|ctrlType|ctrlVisible|ctRowControls|ctRowCount|ctSetCurSel|ctSetData|ctSetHeaderTemplate|ctSetRowTemplate|ctSetValue|ctValue|curatorAddons|curatorCamera|curatorCameraArea|curatorCameraAreaCeiling|curatorCoef|curatorEditableObjects|curatorEditingArea|curatorEditingAreaType|curatorMouseOver|curatorPoints|curatorRegisteredObjects|curatorSelected|curatorWaypointCost|current3DENOperation|currentChannel|currentCommand|currentMagazine|currentMagazineDetail|currentMagazineDetailTurret|currentMagazineTurret|currentMuzzle|currentNamespace|currentTask|currentTasks|currentThrowable|currentVisionMode|currentWaypoint|currentWeapon|currentWeaponMode|currentWeaponTurret|currentZeroing|cursorObject|cursorTarget|customChat|customRadio|cutFadeOut|cutObj|cutRsc|cutText|damage|date|dateToNumber|daytime|deActivateKey|debriefingText|debugFSM|debugLog|deg|delete3DENEntities|deleteAt|deleteCenter|deleteCollection|deleteEditorObject|deleteGroup|deleteGroupWhenEmpty|deleteIdentity|deleteLocation|deleteMarker|deleteMarkerLocal|deleteRange|deleteResources|deleteSite|deleteStatus|deleteTeam|deleteVehicle|deleteVehicleCrew|deleteWaypoint|detach|detectedMines|diag_activeMissionFSMs|diag_activeScripts|diag_activeSQFScripts|diag_activeSQSScripts|diag_captureFrame|diag_captureFrameToFile|diag_captureSlowFrame|diag_codePerformance|diag_drawMode|diag_dynamicSimulationEnd|diag_enable|diag_enabled|diag_fps|diag_fpsMin|diag_frameNo|diag_lightNewLoad|diag_list|diag_log|diag_logSlowFrame|diag_mergeConfigFile|diag_recordTurretLimits|diag_setLightNew|diag_tickTime|diag_toggle|dialog|diarySubjectExists|didJIP|didJIPOwner|difficulty|difficultyEnabled|difficultyEnabledRTD|difficultyOption|direction|directSay|disableAI|disableCollisionWith|disableConversation|disableDebriefingStats|disableMapIndicators|disableNVGEquipment|disableRemoteSensors|disableSerialization|disableTIEquipment|disableUAVConnectability|disableUserInput|displayAddEventHandler|displayCtrl|displayNull|displayParent|displayRemoveAllEventHandlers|displayRemoveEventHandler|displaySetEventHandler|dissolveTeam|distance|distance2D|distanceSqr|distributionRegion|do3DENAction|doArtilleryFire|doFire|doFollow|doFSM|doGetOut|doMove|doorPhase|doStop|doSuppressiveFire|doTarget|doWatch|drawArrow|drawEllipse|drawIcon|drawIcon3D|drawLine|drawLine3D|drawLink|drawLocation|drawPolygon|drawRectangle|drawTriangle|driver|drop|dynamicSimulationDistance|dynamicSimulationDistanceCoef|dynamicSimulationEnabled|dynamicSimulationSystemEnabled|east|edit3DENMissionAttributes|editObject|editorSetEventHandler|effectiveCommander|emptyPositions|enableAI|enableAIFeature|enableAimPrecision|enableAttack|enableAudioFeature|enableAutoStartUpRTD|enableAutoTrimRTD|enableCamShake|enableCaustics|enableChannel|enableCollisionWith|enableCopilot|enableDebriefingStats|enableDiagLegend|enableDynamicSimulation|enableDynamicSimulationSystem|enableEndDialog|enableEngineArtillery|enableEnvironment|enableFatigue|enableGunLights|enableInfoPanelComponent|enableIRLasers|enableMimics|enablePersonTurret|enableRadio|enableReload|enableRopeAttach|enableSatNormalOnDetail|enableSaving|enableSentences|enableSimulation|enableSimulationGlobal|enableStamina|enableStressDamage|enableTeamSwitch|enableTraffic|enableUAVConnectability|enableUAVWaypoints|enableVehicleCargo|enableVehicleSensor|enableWeaponDisassembly|endl|endLoadingScreen|endMission|engineOn|enginesIsOnRTD|enginesPowerRTD|enginesRpmRTD|enginesTorqueRTD|entities|environmentEnabled|estimatedEndServerTime|estimatedTimeLeft|evalObjectArgument|everyBackpack|everyContainer|exec|execEditorScript|exp|expectedDestination|exportJIPMessages|eyeDirection|eyePos|face|faction|fadeMusic|fadeRadio|fadeSound|fadeSpeech|failMission|fillWeaponsFromPool|find|findCover|findDisplay|findEditorObject|findEmptyPosition|findEmptyPositionReady|findIf|findNearestEnemy|finishMissionInit|finite|fire|fireAtTarget|firstBackpack|flag|flagAnimationPhase|flagOwner|flagSide|flagTexture|fleeing|floor|flyInHeight|flyInHeightASL|fog|fogForecast|fogParams|forceAddUniform|forceAtPositionRTD|forcedMap|forceEnd|forceFlagTexture|forceFollowRoad|forceGeneratorRTD|forceMap|forceRespawn|forceSpeed|forceWalk|forceWeaponFire|forceWeatherChange|forgetTarget|format|formation|formationDirection|formationLeader|formationMembers|formationPosition|formationTask|formatText|formLeader|freeLook|fromEditor|fuel|fullCrew|gearIDCAmmoCount|gearSlotAmmoCount|gearSlotData|get3DENActionState|get3DENAttribute|get3DENCamera|get3DENConnections|get3DENEntity|get3DENEntityID|get3DENGrid|get3DENIconsVisible|get3DENLayerEntities|get3DENLinesVisible|get3DENMissionAttribute|get3DENMouseOver|get3DENSelected|getAimingCoef|getAllEnvSoundControllers|getAllHitPointsDamage|getAllOwnedMines|getAllSoundControllers|getAmmoCargo|getAnimAimPrecision|getAnimSpeedCoef|getArray|getArtilleryAmmo|getArtilleryComputerSettings|getArtilleryETA|getAssignedCuratorLogic|getAssignedCuratorUnit|getBackpackCargo|getBleedingRemaining|getBurningValue|getCameraViewDirection|getCargoIndex|getCenterOfMass|getClientState|getClientStateNumber|getCompatiblePylonMagazines|getConnectedUAV|getContainerMaxLoad|getCursorObjectParams|getCustomAimCoef|getDammage|getDescription|getDir|getDirVisual|getDLCAssetsUsage|getDLCAssetsUsageByName|getDLCs|getDLCUsageTime|getEditorCamera|getEditorMode|getEditorObjectScope|getElevationOffset|getEngineTargetRpmRTD|getEnvSoundController|getFatigue|getFieldManualStartPage|getForcedFlagTexture|getFriend|getFSMVariable|getFuelCargo|getGroupIcon|getGroupIconParams|getGroupIcons|getHideFrom|getHit|getHitIndex|getHitPointDamage|getItemCargo|getMagazineCargo|getMarkerColor|getMarkerPos|getMarkerSize|getMarkerType|getMass|getMissionConfig|getMissionConfigValue|getMissionDLCs|getMissionLayerEntities|getMissionLayers|getModelInfo|getMousePosition|getMusicPlayedTime|getNumber|getObjectArgument|getObjectChildren|getObjectDLC|getObjectMaterials|getObjectProxy|getObjectTextures|getObjectType|getObjectViewDistance|getOxygenRemaining|getPersonUsedDLCs|getPilotCameraDirection|getPilotCameraPosition|getPilotCameraRotation|getPilotCameraTarget|getPlateNumber|getPlayerChannel|getPlayerScores|getPlayerUID|getPlayerUIDOld|getPos|getPosASL|getPosASLVisual|getPosASLW|getPosATL|getPosATLVisual|getPosVisual|getPosWorld|getPylonMagazines|getRelDir|getRelPos|getRemoteSensorsDisabled|getRepairCargo|getResolution|getRotorBrakeRTD|getShadowDistance|getShotParents|getSlingLoad|getSoundController|getSoundControllerResult|getSpeed|getStamina|getStatValue|getSuppression|getTerrainGrid|getTerrainHeightASL|getText|getTotalDLCUsageTime|getTrimOffsetRTD|getUnitLoadout|getUnitTrait|getUserMFDText|getUserMFDValue|getVariable|getVehicleCargo|getWeaponCargo|getWeaponSway|getWingsOrientationRTD|getWingsPositionRTD|getWPPos|glanceAt|globalChat|globalRadio|goggles|group|groupChat|groupFromNetId|groupIconSelectable|groupIconsVisible|groupId|groupOwner|groupRadio|groupSelectedUnits|groupSelectUnit|grpNull|gunner|gusts|halt|handgunItems|handgunMagazine|handgunWeapon|handsHit|hasInterface|hasPilotCamera|hasWeapon|hcAllGroups|hcGroupParams|hcLeader|hcRemoveAllGroups|hcRemoveGroup|hcSelected|hcSelectGroup|hcSetGroup|hcShowBar|hcShownBar|headgear|hideBody|hideObject|hideObjectGlobal|hideSelection|hint|hintC|hintCadet|hintSilent|hmd|hostMission|htmlLoad|HUDMovementLevels|humidity|image|importAllGroups|importance|in|inArea|inAreaArray|incapacitatedState|independent|inflame|inflamed|infoPanel|infoPanelComponentEnabled|infoPanelComponents|infoPanels|inGameUISetEventHandler|inheritsFrom|initAmbientLife|inPolygon|inputAction|inRangeOfArtillery|insertEditorObject|intersect|is3DEN|is3DENMultiplayer|isAbleToBreathe|isAgent|isAimPrecisionEnabled|isArray|isAutoHoverOn|isAutonomous|isAutoStartUpEnabledRTD|isAutotest|isAutoTrimOnRTD|isBleeding|isBurning|isClass|isCollisionLightOn|isCopilotEnabled|isDamageAllowed|isDedicated|isDLCAvailable|isEngineOn|isEqualTo|isEqualType|isEqualTypeAll|isEqualTypeAny|isEqualTypeArray|isEqualTypeParams|isFilePatchingEnabled|isFlashlightOn|isFlatEmpty|isForcedWalk|isFormationLeader|isGroupDeletedWhenEmpty|isHidden|isInRemainsCollector|isInstructorFigureEnabled|isIRLaserOn|isKeyActive|isKindOf|isLaserOn|isLightOn|isLocalized|isManualFire|isMarkedForCollection|isMultiplayer|isMultiplayerSolo|isNil|isNull|isNumber|isObjectHidden|isObjectRTD|isOnRoad|isPipEnabled|isPlayer|isRealTime|isRemoteExecuted|isRemoteExecutedJIP|isServer|isShowing3DIcons|isSimpleObject|isSprintAllowed|isStaminaEnabled|isSteamMission|isStreamFriendlyUIEnabled|isStressDamageEnabled|isText|isTouchingGround|isTurnedOut|isTutHintsEnabled|isUAVConnectable|isUAVConnected|isUIContext|isUniformAllowed|isVehicleCargo|isVehicleRadarOn|isVehicleSensorEnabled|isWalking|isWeaponDeployed|isWeaponRested|itemCargo|items|itemsWithMagazines|join|joinAs|joinAsSilent|joinSilent|joinString|kbAddDatabase|kbAddDatabaseTargets|kbAddTopic|kbHasTopic|kbReact|kbRemoveTopic|kbTell|kbWasSaid|keyImage|keyName|knowsAbout|land|landAt|landResult|language|laserTarget|lbAdd|lbClear|lbColor|lbColorRight|lbCurSel|lbData|lbDelete|lbIsSelected|lbPicture|lbPictureRight|lbSelection|lbSetColor|lbSetColorRight|lbSetCurSel|lbSetData|lbSetPicture|lbSetPictureColor|lbSetPictureColorDisabled|lbSetPictureColorSelected|lbSetPictureRight|lbSetPictureRightColor|lbSetPictureRightColorDisabled|lbSetPictureRightColorSelected|lbSetSelectColor|lbSetSelectColorRight|lbSetSelected|lbSetText|lbSetTextRight|lbSetTooltip|lbSetValue|lbSize|lbSort|lbSortByValue|lbText|lbTextRight|lbValue|leader|leaderboardDeInit|leaderboardGetRows|leaderboardInit|leaderboardRequestRowsFriends|leaderboardRequestRowsGlobal|leaderboardRequestRowsGlobalAroundUser|leaderboardsRequestUploadScore|leaderboardsRequestUploadScoreKeepBest|leaderboardState|leaveVehicle|libraryCredits|libraryDisclaimers|lifeState|lightAttachObject|lightDetachObject|lightIsOn|lightnings|limitSpeed|linearConversion|lineBreak|lineIntersects|lineIntersectsObjs|lineIntersectsSurfaces|lineIntersectsWith|linkItem|list|listObjects|listRemoteTargets|listVehicleSensors|ln|lnbAddArray|lnbAddColumn|lnbAddRow|lnbClear|lnbColor|lnbColorRight|lnbCurSelRow|lnbData|lnbDeleteColumn|lnbDeleteRow|lnbGetColumnsPosition|lnbPicture|lnbPictureRight|lnbSetColor|lnbSetColorRight|lnbSetColumnsPos|lnbSetCurSelRow|lnbSetData|lnbSetPicture|lnbSetPictureColor|lnbSetPictureColorRight|lnbSetPictureColorSelected|lnbSetPictureColorSelectedRight|lnbSetPictureRight|lnbSetText|lnbSetTextRight|lnbSetValue|lnbSize|lnbSort|lnbSortByValue|lnbText|lnbTextRight|lnbValue|load|loadAbs|loadBackpack|loadFile|loadGame|loadIdentity|loadMagazine|loadOverlay|loadStatus|loadUniform|loadVest|local|localize|locationNull|locationPosition|lock|lockCameraTo|lockCargo|lockDriver|locked|lockedCargo|lockedDriver|lockedTurret|lockIdentity|lockTurret|lockWP|log|logEntities|logNetwork|logNetworkTerminate|lookAt|lookAtPos|magazineCargo|magazines|magazinesAllTurrets|magazinesAmmo|magazinesAmmoCargo|magazinesAmmoFull|magazinesDetail|magazinesDetailBackpack|magazinesDetailUniform|magazinesDetailVest|magazinesTurret|magazineTurretAmmo|mapAnimAdd|mapAnimClear|mapAnimCommit|mapAnimDone|mapCenterOnCamera|mapGridPosition|markAsFinishedOnSteam|markerAlpha|markerBrush|markerColor|markerDir|markerPos|markerShape|markerSize|markerText|markerType|max|members|menuAction|menuAdd|menuChecked|menuClear|menuCollapse|menuData|menuDelete|menuEnable|menuEnabled|menuExpand|menuHover|menuPicture|menuSetAction|menuSetCheck|menuSetData|menuSetPicture|menuSetValue|menuShortcut|menuShortcutText|menuSize|menuSort|menuText|menuURL|menuValue|min|mineActive|mineDetectedBy|missionConfigFile|missionDifficulty|missionName|missionNamespace|missionStart|missionVersion|modelToWorld|modelToWorldVisual|modelToWorldVisualWorld|modelToWorldWorld|modParams|moonIntensity|moonPhase|morale|move|move3DENCamera|moveInAny|moveInCargo|moveInCommander|moveInDriver|moveInGunner|moveInTurret|moveObjectToEnd|moveOut|moveTime|moveTo|moveToCompleted|moveToFailed|musicVolume|name|nameSound|nearEntities|nearestBuilding|nearestLocation|nearestLocations|nearestLocationWithDubbing|nearestObject|nearestObjects|nearestTerrainObjects|nearObjects|nearObjectsReady|nearRoads|nearSupplies|nearTargets|needReload|netId|netObjNull|newOverlay|nextMenuItemIndex|nextWeatherChange|nMenuItems|numberOfEnginesRTD|numberToDate|objectCurators|objectFromNetId|objectParent|objNull|objStatus|onBriefingGear|onBriefingGroup|onBriefingNotes|onBriefingPlan|onBriefingTeamSwitch|onCommandModeChanged|onDoubleClick|onEachFrame|onGroupIconClick|onGroupIconOverEnter|onGroupIconOverLeave|onHCGroupSelectionChanged|onMapSingleClick|onPlayerConnected|onPlayerDisconnected|onPreloadFinished|onPreloadStarted|onShowNewObject|onTeamSwitch|openCuratorInterface|openDLCPage|openDSInterface|openMap|openSteamApp|openYoutubeVideo|opfor|orderGetIn|overcast|overcastForecast|owner|param|params|parseNumber|parseSimpleArray|parseText|parsingNamespace|particlesQuality|pi|pickWeaponPool|pitch|pixelGrid|pixelGridBase|pixelGridNoUIScale|pixelH|pixelW|playableSlotsNumber|playableUnits|playAction|playActionNow|player|playerRespawnTime|playerSide|playersNumber|playGesture|playMission|playMove|playMoveNow|playMusic|playScriptedMission|playSound|playSound3D|position|positionCameraToWorld|posScreenToWorld|posWorldToScreen|ppEffectAdjust|ppEffectCommit|ppEffectCommitted|ppEffectCreate|ppEffectDestroy|ppEffectEnable|ppEffectEnabled|ppEffectForceInNVG|precision|preloadCamera|preloadObject|preloadSound|preloadTitleObj|preloadTitleRsc|primaryWeapon|primaryWeaponItems|primaryWeaponMagazine|priority|processDiaryLink|processInitCommands|productVersion|profileName|profileNamespace|profileNameSteam|progressLoadingScreen|progressPosition|progressSetPosition|publicVariable|publicVariableClient|publicVariableServer|pushBack|pushBackUnique|putWeaponPool|queryItemsPool|queryMagazinePool|queryWeaponPool|rad|radioChannelAdd|radioChannelCreate|radioChannelRemove|radioChannelSetCallSign|radioChannelSetLabel|radioVolume|rain|rainbow|random|rank|rankId|rating|rectangular|registeredTasks|registerTask|reload|reloadEnabled|remoteControl|remoteExec|remoteExecCall|remoteExecutedOwner|remove3DENConnection|remove3DENEventHandler|remove3DENLayer|removeAction|removeAll3DENEventHandlers|removeAllActions|removeAllAssignedItems|removeAllContainers|removeAllCuratorAddons|removeAllCuratorCameraAreas|removeAllCuratorEditingAreas|removeAllEventHandlers|removeAllHandgunItems|removeAllItems|removeAllItemsWithMagazines|removeAllMissionEventHandlers|removeAllMPEventHandlers|removeAllMusicEventHandlers|removeAllOwnedMines|removeAllPrimaryWeaponItems|removeAllWeapons|removeBackpack|removeBackpackGlobal|removeCuratorAddons|removeCuratorCameraArea|removeCuratorEditableObjects|removeCuratorEditingArea|removeDrawIcon|removeDrawLinks|removeEventHandler|removeFromRemainsCollector|removeGoggles|removeGroupIcon|removeHandgunItem|removeHeadgear|removeItem|removeItemFromBackpack|removeItemFromUniform|removeItemFromVest|removeItems|removeMagazine|removeMagazineGlobal|removeMagazines|removeMagazinesTurret|removeMagazineTurret|removeMenuItem|removeMissionEventHandler|removeMPEventHandler|removeMusicEventHandler|removeOwnedMine|removePrimaryWeaponItem|removeSecondaryWeaponItem|removeSimpleTask|removeSwitchableUnit|removeTeamMember|removeUniform|removeVest|removeWeapon|removeWeaponAttachmentCargo|removeWeaponCargo|removeWeaponGlobal|removeWeaponTurret|reportRemoteTarget|requiredVersion|resetCamShake|resetSubgroupDirection|resistance|resize|resources|respawnVehicle|restartEditorCamera|reveal|revealMine|reverse|reversedMouseY|roadAt|roadsConnectedTo|roleDescription|ropeAttachedObjects|ropeAttachedTo|ropeAttachEnabled|ropeAttachTo|ropeCreate|ropeCut|ropeDestroy|ropeDetach|ropeEndPosition|ropeLength|ropes|ropeUnwind|ropeUnwound|rotorsForcesRTD|rotorsRpmRTD|round|runInitScript|safeZoneH|safeZoneW|safeZoneWAbs|safeZoneX|safeZoneXAbs|safeZoneY|save3DENInventory|saveGame|saveIdentity|saveJoysticks|saveOverlay|saveProfileNamespace|saveStatus|saveVar|savingEnabled|say|say2D|say3D|score|scoreSide|screenshot|screenToWorld|scriptDone|scriptName|scriptNull|scudState|secondaryWeapon|secondaryWeaponItems|secondaryWeaponMagazine|select|selectBestPlaces|selectDiarySubject|selectedEditorObjects|selectEditorObject|selectionNames|selectionPosition|selectLeader|selectMax|selectMin|selectNoPlayer|selectPlayer|selectRandom|selectRandomWeighted|selectWeapon|selectWeaponTurret|sendAUMessage|sendSimpleCommand|sendTask|sendTaskResult|sendUDPMessage|serverCommand|serverCommandAvailable|serverCommandExecutable|serverName|serverTime|set|set3DENAttribute|set3DENAttributes|set3DENGrid|set3DENIconsVisible|set3DENLayer|set3DENLinesVisible|set3DENLogicType|set3DENMissionAttribute|set3DENMissionAttributes|set3DENModelsVisible|set3DENObjectType|set3DENSelected|setAccTime|setActualCollectiveRTD|setAirplaneThrottle|setAirportSide|setAmmo|setAmmoCargo|setAmmoOnPylon|setAnimSpeedCoef|setAperture|setApertureNew|setArmoryPoints|setAttributes|setAutonomous|setBehaviour|setBleedingRemaining|setBrakesRTD|setCameraInterest|setCamShakeDefParams|setCamShakeParams|setCamUseTI|setCaptive|setCenterOfMass|setCollisionLight|setCombatMode|setCompassOscillation|setConvoySeparation|setCuratorCameraAreaCeiling|setCuratorCoef|setCuratorEditingAreaType|setCuratorWaypointCost|setCurrentChannel|setCurrentTask|setCurrentWaypoint|setCustomAimCoef|setCustomWeightRTD|setDamage|setDammage|setDate|setDebriefingText|setDefaultCamera|setDestination|setDetailMapBlendPars|setDir|setDirection|setDrawIcon|setDriveOnPath|setDropInterval|setDynamicSimulationDistance|setDynamicSimulationDistanceCoef|setEditorMode|setEditorObjectScope|setEffectCondition|setEngineRpmRTD|setFace|setFaceAnimation|setFatigue|setFeatureType|setFlagAnimationPhase|setFlagOwner|setFlagSide|setFlagTexture|setFog|setForceGeneratorRTD|setFormation|setFormationTask|setFormDir|setFriend|setFromEditor|setFSMVariable|setFuel|setFuelCargo|setGroupIcon|setGroupIconParams|setGroupIconsSelectable|setGroupIconsVisible|setGroupId|setGroupIdGlobal|setGroupOwner|setGusts|setHideBehind|setHit|setHitIndex|setHitPointDamage|setHorizonParallaxCoef|setHUDMovementLevels|setIdentity|setImportance|setInfoPanel|setLeader|setLightAmbient|setLightAttenuation|setLightBrightness|setLightColor|setLightDayLight|setLightFlareMaxDistance|setLightFlareSize|setLightIntensity|setLightnings|setLightUseFlare|setLocalWindParams|setMagazineTurretAmmo|setMarkerAlpha|setMarkerAlphaLocal|setMarkerBrush|setMarkerBrushLocal|setMarkerColor|setMarkerColorLocal|setMarkerDir|setMarkerDirLocal|setMarkerPos|setMarkerPosLocal|setMarkerShape|setMarkerShapeLocal|setMarkerSize|setMarkerSizeLocal|setMarkerText|setMarkerTextLocal|setMarkerType|setMarkerTypeLocal|setMass|setMimic|setMousePosition|setMusicEffect|setMusicEventHandler|setName|setNameSound|setObjectArguments|setObjectMaterial|setObjectMaterialGlobal|setObjectProxy|setObjectTexture|setObjectTextureGlobal|setObjectViewDistance|setOvercast|setOwner|setOxygenRemaining|setParticleCircle|setParticleClass|setParticleFire|setParticleParams|setParticleRandom|setPilotCameraDirection|setPilotCameraRotation|setPilotCameraTarget|setPilotLight|setPiPEffect|setPitch|setPlateNumber|setPlayable|setPlayerRespawnTime|setPos|setPosASL|setPosASL2|setPosASLW|setPosATL|setPosition|setPosWorld|setPylonLoadOut|setPylonsPriority|setRadioMsg|setRain|setRainbow|setRandomLip|setRank|setRectangular|setRepairCargo|setRotorBrakeRTD|setShadowDistance|setShotParents|setSide|setSimpleTaskAlwaysVisible|setSimpleTaskCustomData|setSimpleTaskDescription|setSimpleTaskDestination|setSimpleTaskTarget|setSimpleTaskType|setSimulWeatherLayers|setSize|setSkill|setSlingLoad|setSoundEffect|setSpeaker|setSpeech|setSpeedMode|setStamina|setStaminaScheme|setStatValue|setSuppression|setSystemOfUnits|setTargetAge|setTaskMarkerOffset|setTaskResult|setTaskState|setTerrainGrid|setText|setTimeMultiplier|setTitleEffect|setToneMapping|setToneMappingParams|setTrafficDensity|setTrafficDistance|setTrafficGap|setTrafficSpeed|setTriggerActivation|setTriggerArea|setTriggerStatements|setTriggerText|setTriggerTimeout|setTriggerType|setType|setUnconscious|setUnitAbility|setUnitLoadout|setUnitPos|setUnitPosWeak|setUnitRank|setUnitRecoilCoefficient|setUnitTrait|setUnloadInCombat|setUserActionText|setUserMFDText|setUserMFDValue|setVariable|setVectorDir|setVectorDirAndUp|setVectorUp|setVehicleAmmo|setVehicleAmmoDef|setVehicleArmor|setVehicleCargo|setVehicleId|setVehicleInit|setVehicleLock|setVehiclePosition|setVehicleRadar|setVehicleReceiveRemoteTargets|setVehicleReportOwnPosition|setVehicleReportRemoteTargets|setVehicleTIPars|setVehicleVarName|setVelocity|setVelocityModelSpace|setVelocityTransformation|setViewDistance|setVisibleIfTreeCollapsed|setWantedRpmRTD|setWaves|setWaypointBehaviour|setWaypointCombatMode|setWaypointCompletionRadius|setWaypointDescription|setWaypointForceBehaviour|setWaypointFormation|setWaypointHousePosition|setWaypointLoiterRadius|setWaypointLoiterType|setWaypointName|setWaypointPosition|setWaypointScript|setWaypointSpeed|setWaypointStatements|setWaypointTimeout|setWaypointType|setWaypointVisible|setWeaponReloadingTime|setWind|setWindDir|setWindForce|setWindStr|setWingForceScaleRTD|setWPPos|show3DIcons|showChat|showCinemaBorder|showCommandingMenu|showCompass|showCuratorCompass|showGPS|showHUD|showLegend|showMap|shownArtilleryComputer|shownChat|shownCompass|shownCuratorCompass|showNewEditorObject|shownGPS|shownHUD|shownMap|shownPad|shownRadio|shownScoretable|shownUAVFeed|shownWarrant|shownWatch|showPad|showRadio|showScoretable|showSubtitles|showUAVFeed|showWarrant|showWatch|showWaypoint|showWaypoints|side|sideAmbientLife|sideChat|sideEmpty|sideEnemy|sideFriendly|sideLogic|sideRadio|sideUnknown|simpleTasks|simulationEnabled|simulCloudDensity|simulCloudOcclusion|simulInClouds|simulWeatherSync|sin|size|sizeOf|skill|skillFinal|skipTime|sleep|sliderPosition|sliderRange|sliderSetPosition|sliderSetRange|sliderSetSpeed|sliderSpeed|slingLoadAssistantShown|soldierMagazines|someAmmo|sort|soundVolume|speaker|speed|speedMode|splitString|sqrt|squadParams|stance|startLoadingScreen|stop|stopEngineRTD|stopped|str|sunOrMoon|supportInfo|suppressFor|surfaceIsWater|surfaceNormal|surfaceType|swimInDepth|switchableUnits|switchAction|switchCamera|switchGesture|switchLight|switchMove|synchronizedObjects|synchronizedTriggers|synchronizedWaypoints|synchronizeObjectsAdd|synchronizeObjectsRemove|synchronizeTrigger|synchronizeWaypoint|systemChat|systemOfUnits|tan|targetKnowledge|targets|targetsAggregate|targetsQuery|taskAlwaysVisible|taskChildren|taskCompleted|taskCustomData|taskDescription|taskDestination|taskHint|taskMarkerOffset|taskNull|taskParent|taskResult|taskState|taskType|teamMember|teamMemberNull|teamName|teams|teamSwitch|teamSwitchEnabled|teamType|terminate|terrainIntersect|terrainIntersectASL|terrainIntersectAtASL|text|textLog|textLogFormat|tg|time|timeMultiplier|titleCut|titleFadeOut|titleObj|titleRsc|titleText|toArray|toFixed|toLower|toString|toUpper|triggerActivated|triggerActivation|triggerArea|triggerAttachedVehicle|triggerAttachObject|triggerAttachVehicle|triggerDynamicSimulation|triggerStatements|triggerText|triggerTimeout|triggerTimeoutCurrent|triggerType|turretLocal|turretOwner|turretUnit|tvAdd|tvClear|tvCollapse|tvCollapseAll|tvCount|tvCurSel|tvData|tvDelete|tvExpand|tvExpandAll|tvPicture|tvPictureRight|tvSetColor|tvSetCurSel|tvSetData|tvSetPicture|tvSetPictureColor|tvSetPictureColorDisabled|tvSetPictureColorSelected|tvSetPictureRight|tvSetPictureRightColor|tvSetPictureRightColorDisabled|tvSetPictureRightColorSelected|tvSetSelectColor|tvSetText|tvSetTooltip|tvSetValue|tvSort|tvSortByValue|tvText|tvTooltip|tvValue|type|typeName|typeOf|UAVControl|uiNamespace|uiSleep|unassignCurator|unassignItem|unassignTeam|unassignVehicle|underwater|uniform|uniformContainer|uniformItems|uniformMagazines|unitAddons|unitAimPosition|unitAimPositionVisual|unitBackpack|unitIsUAV|unitPos|unitReady|unitRecoilCoefficient|units|unitsBelowHeight|unlinkItem|unlockAchievement|unregisterTask|updateDrawIcon|updateMenuItem|updateObjectTree|useAIOperMapObstructionTest|useAISteeringComponent|useAudioTimeForMoves|userInputDisabled|vectorAdd|vectorCos|vectorCrossProduct|vectorDiff|vectorDir|vectorDirVisual|vectorDistance|vectorDistanceSqr|vectorDotProduct|vectorFromTo|vectorMagnitude|vectorMagnitudeSqr|vectorModelToWorld|vectorModelToWorldVisual|vectorMultiply|vectorNormalized|vectorUp|vectorUpVisual|vectorWorldToModel|vectorWorldToModelVisual|vehicle|vehicleCargoEnabled|vehicleChat|vehicleRadio|vehicleReceiveRemoteTargets|vehicleReportOwnPosition|vehicleReportRemoteTargets|vehicles|vehicleVarName|velocity|velocityModelSpace|verifySignature|vest|vestContainer|vestItems|vestMagazines|viewDistance|visibleCompass|visibleGPS|visibleMap|visiblePosition|visiblePositionASL|visibleScoretable|visibleWatch|waitUntil|waves|waypointAttachedObject|waypointAttachedVehicle|waypointAttachObject|waypointAttachVehicle|waypointBehaviour|waypointCombatMode|waypointCompletionRadius|waypointDescription|waypointForceBehaviour|waypointFormation|waypointHousePosition|waypointLoiterRadius|waypointLoiterType|waypointName|waypointPosition|waypoints|waypointScript|waypointsEnabledUAV|waypointShow|waypointSpeed|waypointStatements|waypointTimeout|waypointTimeoutCurrent|waypointType|waypointVisible|weaponAccessories|weaponAccessoriesCargo|weaponCargo|weaponDirection|weaponInertia|weaponLowered|weapons|weaponsItems|weaponsItemsCargo|weaponState|weaponsTurret|weightRTD|west|WFSideText|wind|windDir|windRTD|windStr|wingsForcesRTD|worldName|worldSize|worldToModel|worldToModelVisual|worldToScreen)\b/i,
    number: /(?:\$|\b0x)[\da-f]+\b|(?:\B\.\d+|\b\d+(?:\.\d+)?)(?:e[+-]?\d+)?\b/i,
    operator: /##|>>|&&|\|\||[!=<>]=?|[-+*/%#^]|\b(?:and|mod|not|or)\b/i,
    'magic-variable': {
      pattern: /\b(?:_exception|_fnc_scriptName|_fnc_scriptNameParent|_forEachIndex|_this|_thisEventHandler|_thisFSM|_thisScript|_x|this|thisList|thisTrigger)\b/i,
      alias: 'keyword'
    },
    constant: /\bDIK(?:_[a-z\d]+)+\b/i
  });
  Prism.languages.insertBefore('sqf', 'string', {
    macro: {
      pattern: /(^[ \t]*)#[a-z](?:[^\r\n\\]|\\(?:\r\n|[\s\S]))*/im,
      lookbehind: true,
      greedy: true,
      alias: 'property',
      inside: {
        directive: {
          pattern: /#[a-z]+\b/i,
          alias: 'keyword'
        },
        comment: Prism.languages.sqf.comment
      }
    }
  });
  delete Prism.languages.sqf['class-name'];
}

/***/ }),

/***/ 8707:
/***/ ((module) => {



module.exports = sql;
sql.displayName = 'sql';
sql.aliases = [];

function sql(Prism) {
  Prism.languages.sql = {
    comment: {
      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
      lookbehind: true
    },
    variable: [{
      pattern: /@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,
      greedy: true
    }, /@[\w.$]+/],
    string: {
      pattern: /(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,
      greedy: true,
      lookbehind: true
    },
    "function": /\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,
    // Should we highlight user defined functions too?
    keyword: /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,
    "boolean": /\b(?:TRUE|FALSE|NULL)\b/i,
    number: /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,
    operator: /[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|IN|ILIKE|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,
    punctuation: /[;[\]()`,.]/
  };
}

/***/ }),

/***/ 5443:
/***/ ((module) => {



module.exports = squirrel;
squirrel.displayName = 'squirrel';
squirrel.aliases = [];

function squirrel(Prism) {
  Prism.languages.squirrel = Prism.languages.extend('clike', {
    comment: [Prism.languages.clike['comment'][0], {
      pattern: /(^|[^\\:])(?:\/\/|#).*/,
      lookbehind: true,
      greedy: true
    }],
    string: [{
      pattern: /(^|[^\\"'@])(?:@"(?:[^"]|"")*"(?!")|"(?:[^\\\r\n"]|\\.)*")/,
      lookbehind: true,
      greedy: true
    }, {
      pattern: /(^|[^\\"'])'(?:[^\\']|\\(?:[xuU][0-9a-fA-F]{0,8}|[\s\S]))'/,
      lookbehind: true,
      greedy: true
    }],
    'class-name': {
      pattern: /(\b(?:class|enum|extends|instanceof)\s+)\w+(?:\.\w+)*/,
      lookbehind: true,
      inside: {
        punctuation: /\./
      }
    },
    keyword: /\b(?:base|break|case|catch|class|clone|const|constructor|continue|default|delete|else|enum|extends|for|foreach|function|if|in|instanceof|local|null|resume|return|static|switch|this|throw|try|typeof|while|yield|__LINE__|__FILE__)\b/,
    number: /\b(?:0x[0-9a-fA-F]+|\d+(?:\.(?:\d+|[eE][+-]?\d+))?)\b/,
    operator: /\+\+|--|<=>|<[-<]|>>>?|&&?|\|\|?|[-+*/%!=<>]=?|[~^]|::?/,
    punctuation: /[(){}\[\],;.]/
  });
  Prism.languages.insertBefore('squirrel', 'operator', {
    'attribute-punctuation': {
      pattern: /<\/|\/>/,
      alias: 'important'
    },
    lambda: {
      pattern: /@(?=\()/,
      alias: 'operator'
    }
  });
}

/***/ }),

/***/ 1891:
/***/ ((module) => {



module.exports = stan;
stan.displayName = 'stan';
stan.aliases = [];

function stan(Prism) {
  // https://mc-stan.org/docs/2_24/reference-manual/bnf-grammars.html
  Prism.languages.stan = {
    comment: /\/\/.*|\/\*[\s\S]*?\*\/|#(?!include).*/,
    string: {
      // String literals can contain spaces and any printable ASCII characters except for " and \
      // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals
      pattern: /"[\x20\x21\x23-\x5B\x5D-\x7E]*"/,
      greedy: true
    },
    directive: {
      pattern: /^([ \t]*)#include\b.*/m,
      lookbehind: true,
      alias: 'property'
    },
    'function-arg': {
      pattern: /(\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\s*\(\s*)[a-zA-Z]\w*/,
      lookbehind: true,
      alias: 'function'
    },
    constraint: {
      pattern: /(\b(?:int|matrix|real|row_vector|vector)\s*)<[^<>]*>/,
      lookbehind: true,
      inside: {
        expression: {
          pattern: /(=\s*)\S(?:\S|\s+(?!\s))*?(?=\s*(?:>$|,\s*\w+\s*=))/,
          lookbehind: true,
          inside: null // see below

        },
        property: /\b[a-z]\w*(?=\s*=)/i,
        operator: /=/,
        punctuation: /^<|>$|,/
      }
    },
    keyword: [/\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\b/, // these are functions that are known to take another function as their first argument.
    /\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\b/],
    "function": /\b[a-z]\w*(?=\s*\()/i,
    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?\b/i,
    "boolean": /\b(?:false|true)\b/,
    operator: /<-|\.[*/]=?|\|\|?|&&|[!=<>+\-*/]=?|['^%~?:]/,
    punctuation: /[()\[\]{},;]/
  };
  Prism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;
}

/***/ }),

/***/ 9982:
/***/ ((module) => {



module.exports = stylus;
stylus.displayName = 'stylus';
stylus.aliases = [];

function stylus(Prism) {
  ;

  (function (Prism) {
    var unit = {
      pattern: /(\b\d+)(?:%|[a-z]+)/,
      lookbehind: true
    }; // 123 -123 .123 -.123 12.3 -12.3

    var number = {
      pattern: /(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,
      lookbehind: true
    };
    var inside = {
      comment: {
        pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
        lookbehind: true
      },
      url: {
        pattern: /\burl\((["']?).*?\1\)/i,
        greedy: true
      },
      string: {
        pattern: /("|')(?:(?!\1)[^\\\r\n]|\\(?:\r\n|[\s\S]))*\1/,
        greedy: true
      },
      interpolation: null,
      // See below
      func: null,
      // See below
      important: /\B!(?:important|optional)\b/i,
      keyword: {
        pattern: /(^|\s+)(?:(?:if|else|for|return|unless)(?=\s|$)|@[\w-]+)/,
        lookbehind: true
      },
      hexcode: /#[\da-f]{3,6}/i,
      color: [/\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\b/i, {
        pattern: /\b(?:rgb|hsl)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:rgb|hsl)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,
        inside: {
          unit: unit,
          number: number,
          "function": /[\w-]+(?=\()/,
          punctuation: /[(),]/
        }
      }],
      entity: /\\[\da-f]{1,8}/i,
      unit: unit,
      "boolean": /\b(?:true|false)\b/,
      operator: [// We want non-word chars around "-" because it is
      // accepted in property names.
      /~|[+!\/%<>?=]=?|[-:]=|\*[*=]?|\.{2,3}|&&|\|\||\B-\B|\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\b/],
      number: number,
      punctuation: /[{}()\[\];:,]/
    };
    inside['interpolation'] = {
      pattern: /\{[^\r\n}:]+\}/,
      alias: 'variable',
      inside: {
        delimiter: {
          pattern: /^\{|\}$/,
          alias: 'punctuation'
        },
        rest: inside
      }
    };
    inside['func'] = {
      pattern: /[\w-]+\([^)]*\).*/,
      inside: {
        "function": /^[^(]+/,
        rest: inside
      }
    };
    Prism.languages.stylus = {
      'atrule-declaration': {
        pattern: /(^[ \t]*)@.+/m,
        lookbehind: true,
        inside: {
          atrule: /^@[\w-]+/,
          rest: inside
        }
      },
      'variable-declaration': {
        pattern: /(^[ \t]*)[\w$-]+\s*.?=[ \t]*(?:\{[^{}]*\}|\S.*|$)/m,
        lookbehind: true,
        inside: {
          variable: /^\S+/,
          rest: inside
        }
      },
      statement: {
        pattern: /(^[ \t]*)(?:if|else|for|return|unless)[ \t].+/m,
        lookbehind: true,
        inside: {
          keyword: /^\S+/,
          rest: inside
        }
      },
      // A property/value pair cannot end with a comma or a brace
      // It cannot have indented content unless it ended with a semicolon
      'property-declaration': {
        pattern: /((?:^|\{)([ \t]*))(?:[\w-]|\{[^}\r\n]+\})+(?:\s*:\s*|[ \t]+)(?!\s)[^{\r\n]*(?:;|[^{\r\n,]$(?!(?:\r?\n|\r)(?:\{|\2[ \t])))/m,
        lookbehind: true,
        inside: {
          property: {
            pattern: /^[^\s:]+/,
            inside: {
              interpolation: inside.interpolation
            }
          },
          rest: inside
        }
      },
      // A selector can contain parentheses only as part of a pseudo-element
      // It can span multiple lines.
      // It must end with a comma or an accolade or have indented content.
      selector: {
        pattern: /(^[ \t]*)(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)(?:(?:\r?\n|\r)(?:\1(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)))*(?:,$|\{|(?=(?:\r?\n|\r)(?:\{|\1[ \t])))/m,
        lookbehind: true,
        inside: {
          interpolation: inside.interpolation,
          comment: inside.comment,
          punctuation: /[{},]/
        }
      },
      func: inside.func,
      string: inside.string,
      comment: {
        pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
        lookbehind: true,
        greedy: true
      },
      interpolation: inside.interpolation,
      punctuation: /[{}()\[\];:.]/
    };
  })(Prism);
}

/***/ }),

/***/ 610:
/***/ ((module) => {



module.exports = swift;
swift.displayName = 'swift';
swift.aliases = [];

function swift(Prism) {
  Prism.languages.swift = {
    comment: {
      // Nested comments are supported up to 2 levels
      pattern: /(^|[^\\:])(?:\/\/.*|\/\*(?:[^/*]|\/(?!\*)|\*(?!\/)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\/)/,
      lookbehind: true,
      greedy: true
    },
    'string-literal': [// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html
    {
      pattern: RegExp(/(^|[^"#])/.source + '(?:' + // single-line string
      /"(?:\\(?:\((?:[^()]|\([^()]*\))*\)|\r\n|[^(])|[^\\\r\n"])*"/.source + '|' + // multi-line string
      /"""(?:\\(?:\((?:[^()]|\([^()]*\))*\)|[^(])|[^\\"]|"(?!""))*"""/.source + ')' + /(?!["#])/.source),
      lookbehind: true,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /(\\\()(?:[^()]|\([^()]*\))*(?=\))/,
          lookbehind: true,
          inside: null // see below

        },
        'interpolation-punctuation': {
          pattern: /^\)|\\\($/,
          alias: 'punctuation'
        },
        punctuation: /\\(?=[\r\n])/,
        string: /[\s\S]+/
      }
    }, {
      pattern: RegExp(/(^|[^"#])(#+)/.source + '(?:' + // single-line string
      /"(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|\r\n|[^#])|[^\\\r\n])*?"/.source + '|' + // multi-line string
      /"""(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|[^#])|[^\\])*?"""/.source + ')' + '\\2'),
      lookbehind: true,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /(\\#+\()(?:[^()]|\([^()]*\))*(?=\))/,
          lookbehind: true,
          inside: null // see below

        },
        'interpolation-punctuation': {
          pattern: /^\)|\\#+\($/,
          alias: 'punctuation'
        },
        string: /[\s\S]+/
      }
    }],
    directive: {
      // directives with conditions
      pattern: RegExp(/#/.source + '(?:' + (/(?:elseif|if)\b/.source + '(?:[ \t]*' + // This regex is a little complex. It's equivalent to this:
      //   (?:![ \t]*)?(?:\b\w+\b(?:[ \t]*<round>)?|<round>)(?:[ \t]*(?:&&|\|\|))?
      // where <round> is a general parentheses expression.
      /(?:![ \t]*)?(?:\b\w+\b(?:[ \t]*\((?:[^()]|\([^()]*\))*\))?|\((?:[^()]|\([^()]*\))*\))(?:[ \t]*(?:&&|\|\|))?/.source + ')+') + '|' + /(?:else|endif)\b/.source + ')'),
      alias: 'property',
      inside: {
        'directive-name': /^#\w+/,
        "boolean": /\b(?:true|false)\b/,
        number: /\b\d+(?:\.\d+)*\b/,
        operator: /!|&&|\|\||[<>]=?/,
        punctuation: /[(),]/
      }
    },
    literal: {
      pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\b/,
      alias: 'constant'
    },
    'other-directive': {
      pattern: /#\w+\b/,
      alias: 'property'
    },
    attribute: {
      pattern: /@\w+/,
      alias: 'atrule'
    },
    'function-definition': {
      pattern: /(\bfunc\s+)\w+/,
      lookbehind: true,
      alias: 'function'
    },
    label: {
      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141
      pattern: /\b(break|continue)\s+\w+|\b[a-zA-Z_]\w*(?=\s*:\s*(?:for|repeat|while)\b)/,
      lookbehind: true,
      alias: 'important'
    },
    keyword: /\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\b/,
    "boolean": /\b(?:true|false)\b/,
    nil: {
      pattern: /\bnil\b/,
      alias: 'constant'
    },
    'short-argument': /\$\d+\b/,
    omit: {
      pattern: /\b_\b/,
      alias: 'keyword'
    },
    number: /\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,
    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.
    'class-name': /\b[A-Z](?:[A-Z_\d]*[a-z]\w*)?\b/,
    "function": /\b[a-z_]\w*(?=\s*\()/i,
    constant: /\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,
    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).
    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481
    // This regex only supports ASCII operators.
    operator: /[-+*/%=!<>&|^~?]+|\.[.\-+*/%=!<>&|^~?]+/,
    punctuation: /[{}[\]();,.:\\]/
  };
  Prism.languages.swift['string-literal'].forEach(function (rule) {
    rule.inside['interpolation'].inside = Prism.languages.swift;
  });
}

/***/ }),

/***/ 7731:
/***/ ((module) => {



module.exports = systemd;
systemd.displayName = 'systemd';
systemd.aliases = [];

function systemd(Prism) {
  // https://www.freedesktop.org/software/systemd/man/systemd.syntax.html
  ;

  (function (Prism) {
    var comment = {
      pattern: /^[;#].*/m,
      greedy: true
    };
    var quotesSource = /"(?:[^\r\n"\\]|\\(?:[^\r]|\r\n?))*"(?!\S)/.source;
    Prism.languages.systemd = {
      comment: comment,
      section: {
        pattern: /^\[[^\n\r\[\]]*\](?=[ \t]*$)/m,
        greedy: true,
        inside: {
          punctuation: /^\[|\]$/,
          'section-name': {
            pattern: /[\s\S]+/,
            alias: 'selector'
          }
        }
      },
      key: {
        pattern: /^[^\s=]+(?=[ \t]*=)/m,
        greedy: true,
        alias: 'attr-name'
      },
      value: {
        // This pattern is quite complex because of two properties:
        //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to "resolve"
        //     the lookbehind. You will see this in the main loop where spaces are handled separately.
        //  2) Line continuations.
        //     After line continuations, empty lines and comments are ignored so we have to consume them.
        pattern: RegExp(/(=[ \t]*(?!\s))/.source + // the value either starts with quotes or not
        '(?:' + quotesSource + '|(?=[^"\r\n]))' + // main loop
        '(?:' + (/[^\s\\]/.source + // handle spaces separately because of quotes
        '|' + '[ \t]+(?:(?![ \t"])|' + quotesSource + ')' + // line continuation
        '|' + /\\[\r\n]+(?:[#;].*[\r\n]+)*(?![#;])/.source) + ')*'),
        lookbehind: true,
        greedy: true,
        alias: 'attr-value',
        inside: {
          comment: comment,
          quoted: {
            pattern: RegExp(/(^|\s)/.source + quotesSource),
            lookbehind: true,
            greedy: true
          },
          punctuation: /\\$/m,
          "boolean": {
            pattern: /^(?:false|no|off|on|true|yes)$/,
            greedy: true
          }
        }
      },
      operator: /=/
    };
  })(Prism);
}

/***/ }),

/***/ 6156:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorT4Templating = __webpack_require__(6008);

var refractorCsharp = __webpack_require__(6854);

module.exports = t4Cs;
t4Cs.displayName = 't4Cs';
t4Cs.aliases = [];

function t4Cs(Prism) {
  Prism.register(refractorT4Templating);
  Prism.register(refractorCsharp);
  Prism.languages.t4 = Prism.languages['t4-cs'] = Prism.languages['t4-templating'].createT4('csharp');
}

/***/ }),

/***/ 6008:
/***/ ((module) => {



module.exports = t4Templating;
t4Templating.displayName = 't4Templating';
t4Templating.aliases = [];

function t4Templating(Prism) {
  ;

  (function (Prism) {
    function createBlock(prefix, inside, contentAlias) {
      return {
        pattern: RegExp('<#' + prefix + '[\\s\\S]*?#>'),
        alias: 'block',
        inside: {
          delimiter: {
            pattern: RegExp('^<#' + prefix + '|#>$'),
            alias: 'important'
          },
          content: {
            pattern: /[\s\S]+/,
            inside: inside,
            alias: contentAlias
          }
        }
      };
    }

    function createT4(insideLang) {
      var grammar = Prism.languages[insideLang];
      var className = 'language-' + insideLang;
      return {
        block: {
          pattern: /<#[\s\S]+?#>/,
          inside: {
            directive: createBlock('@', {
              'attr-value': {
                pattern: /=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+)/,
                inside: {
                  punctuation: /^=|^["']|["']$/
                }
              },
              keyword: /\b\w+(?=\s)/,
              'attr-name': /\b\w+/
            }),
            expression: createBlock('=', grammar, className),
            'class-feature': createBlock('\\+', grammar, className),
            standard: createBlock('', grammar, className)
          }
        }
      };
    }

    Prism.languages['t4-templating'] = Object.defineProperty({}, 'createT4', {
      value: createT4
    });
  })(Prism);
}

/***/ }),

/***/ 8757:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorT4Templating = __webpack_require__(6008);

var refractorVbnet = __webpack_require__(6921);

module.exports = t4Vb;
t4Vb.displayName = 't4Vb';
t4Vb.aliases = [];

function t4Vb(Prism) {
  Prism.register(refractorT4Templating);
  Prism.register(refractorVbnet);
  Prism.languages['t4-vb'] = Prism.languages['t4-templating'].createT4('vbnet');
}

/***/ }),

/***/ 3208:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorYaml = __webpack_require__(8464);

module.exports = tap;
tap.displayName = 'tap';
tap.aliases = [];

function tap(Prism) {
  Prism.register(refractorYaml);
  Prism.languages.tap = {
    fail: /not ok[^#{\n\r]*/,
    pass: /ok[^#{\n\r]*/,
    pragma: /pragma [+-][a-z]+/,
    bailout: /bail out!.*/i,
    version: /TAP version \d+/i,
    plan: /\b\d+\.\.\d+(?: +#.*)?/,
    subtest: {
      pattern: /# Subtest(?:: .*)?/,
      greedy: true
    },
    punctuation: /[{}]/,
    directive: /#.*/,
    yamlish: {
      pattern: /(^[ \t]*)---[\s\S]*?[\r\n][ \t]*\.\.\.$/m,
      lookbehind: true,
      inside: Prism.languages.yaml,
      alias: 'language-yaml'
    }
  };
}

/***/ }),

/***/ 6420:
/***/ ((module) => {



module.exports = tcl;
tcl.displayName = 'tcl';
tcl.aliases = [];

function tcl(Prism) {
  Prism.languages.tcl = {
    comment: {
      pattern: /(^|[^\\])#.*/,
      lookbehind: true
    },
    string: {
      pattern: /"(?:[^"\\\r\n]|\\(?:\r\n|[\s\S]))*"/,
      greedy: true
    },
    variable: [{
      pattern: /(\$)(?:::)?(?:[a-zA-Z0-9]+::)*\w+/,
      lookbehind: true
    }, {
      pattern: /(\$)\{[^}]+\}/,
      lookbehind: true
    }, {
      pattern: /(^[\t ]*set[ \t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\w+/m,
      lookbehind: true
    }],
    "function": {
      pattern: /(^[\t ]*proc[ \t]+)\S+/m,
      lookbehind: true
    },
    builtin: [{
      pattern: /(^[\t ]*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\b/m,
      lookbehind: true
    }, /\b(?:elseif|else)\b/],
    scope: {
      pattern: /(^[\t ]*)(?:global|upvar|variable)\b/m,
      lookbehind: true,
      alias: 'constant'
    },
    keyword: {
      pattern: /(^[\t ]*|\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\b/m,
      lookbehind: true
    },
    operator: /!=?|\*\*?|==|&&?|\|\|?|<[=<]?|>[=>]?|[-+~\/%?^]|\b(?:eq|ne|in|ni)\b/,
    punctuation: /[{}()\[\]]/
  };
}

/***/ }),

/***/ 1392:
/***/ ((module) => {



module.exports = textile;
textile.displayName = 'textile';
textile.aliases = [];

function textile(Prism) {
  ;

  (function (Prism) {
    // We don't allow for pipes inside parentheses
    // to not break table pattern |(. foo |). bar |
    var modifierRegex = /\([^|()\n]+\)|\[[^\]\n]+\]|\{[^}\n]+\}/.source; // Opening and closing parentheses which are not a modifier
    // This pattern is necessary to prevent exponential backtracking

    var parenthesesRegex = /\)|\((?![^|()\n]+\))/.source;
    /**
     * @param {string} source
     * @param {string} [flags]
     */

    function withModifier(source, flags) {
      return RegExp(source.replace(/<MOD>/g, function () {
        return '(?:' + modifierRegex + ')';
      }).replace(/<PAR>/g, function () {
        return '(?:' + parenthesesRegex + ')';
      }), flags || '');
    }

    var modifierTokens = {
      css: {
        pattern: /\{[^{}]+\}/,
        inside: {
          rest: Prism.languages.css
        }
      },
      'class-id': {
        pattern: /(\()[^()]+(?=\))/,
        lookbehind: true,
        alias: 'attr-value'
      },
      lang: {
        pattern: /(\[)[^\[\]]+(?=\])/,
        lookbehind: true,
        alias: 'attr-value'
      },
      // Anything else is punctuation (the first pattern is for row/col spans inside tables)
      punctuation: /[\\\/]\d+|\S/
    };
    var textile = Prism.languages.textile = Prism.languages.extend('markup', {
      phrase: {
        pattern: /(^|\r|\n)\S[\s\S]*?(?=$|\r?\n\r?\n|\r\r)/,
        lookbehind: true,
        inside: {
          // h1. Header 1
          'block-tag': {
            pattern: withModifier(/^[a-z]\w*(?:<MOD>|<PAR>|[<>=])*\./.source),
            inside: {
              modifier: {
                pattern: withModifier(/(^[a-z]\w*)(?:<MOD>|<PAR>|[<>=])+(?=\.)/.source),
                lookbehind: true,
                inside: modifierTokens
              },
              tag: /^[a-z]\w*/,
              punctuation: /\.$/
            }
          },
          // # List item
          // * List item
          list: {
            pattern: withModifier(/^[*#]+<MOD>*\s+\S.*/.source, 'm'),
            inside: {
              modifier: {
                pattern: withModifier(/(^[*#]+)<MOD>+/.source),
                lookbehind: true,
                inside: modifierTokens
              },
              punctuation: /^[*#]+/
            }
          },
          // | cell | cell | cell |
          table: {
            // Modifiers can be applied to the row: {color:red}.|1|2|3|
            // or the cell: |{color:red}.1|2|3|
            pattern: withModifier(/^(?:(?:<MOD>|<PAR>|[<>=^~])+\.\s*)?(?:\|(?:(?:<MOD>|<PAR>|[<>=^~_]|[\\/]\d+)+\.|(?!(?:<MOD>|<PAR>|[<>=^~_]|[\\/]\d+)+\.))[^|]*)+\|/.source, 'm'),
            inside: {
              modifier: {
                // Modifiers for rows after the first one are
                // preceded by a pipe and a line feed
                pattern: withModifier(/(^|\|(?:\r?\n|\r)?)(?:<MOD>|<PAR>|[<>=^~_]|[\\/]\d+)+(?=\.)/.source),
                lookbehind: true,
                inside: modifierTokens
              },
              punctuation: /\||^\./
            }
          },
          inline: {
            // eslint-disable-next-line regexp/no-super-linear-backtracking
            pattern: withModifier(/(^|[^a-zA-Z\d])(\*\*|__|\?\?|[*_%@+\-^~])<MOD>*.+?\2(?![a-zA-Z\d])/.source),
            lookbehind: true,
            inside: {
              // Note: superscripts and subscripts are not handled specifically
              // *bold*, **bold**
              bold: {
                // eslint-disable-next-line regexp/no-super-linear-backtracking
                pattern: withModifier(/(^(\*\*?)<MOD>*).+?(?=\2)/.source),
                lookbehind: true
              },
              // _italic_, __italic__
              italic: {
                // eslint-disable-next-line regexp/no-super-linear-backtracking
                pattern: withModifier(/(^(__?)<MOD>*).+?(?=\2)/.source),
                lookbehind: true
              },
              // ??cite??
              cite: {
                // eslint-disable-next-line regexp/no-super-linear-backtracking
                pattern: withModifier(/(^\?\?<MOD>*).+?(?=\?\?)/.source),
                lookbehind: true,
                alias: 'string'
              },
              // @code@
              code: {
                // eslint-disable-next-line regexp/no-super-linear-backtracking
                pattern: withModifier(/(^@<MOD>*).+?(?=@)/.source),
                lookbehind: true,
                alias: 'keyword'
              },
              // +inserted+
              inserted: {
                // eslint-disable-next-line regexp/no-super-linear-backtracking
                pattern: withModifier(/(^\+<MOD>*).+?(?=\+)/.source),
                lookbehind: true
              },
              // -deleted-
              deleted: {
                // eslint-disable-next-line regexp/no-super-linear-backtracking
                pattern: withModifier(/(^-<MOD>*).+?(?=-)/.source),
                lookbehind: true
              },
              // %span%
              span: {
                // eslint-disable-next-line regexp/no-super-linear-backtracking
                pattern: withModifier(/(^%<MOD>*).+?(?=%)/.source),
                lookbehind: true
              },
              modifier: {
                pattern: withModifier(/(^\*\*|__|\?\?|[*_%@+\-^~])<MOD>+/.source),
                lookbehind: true,
                inside: modifierTokens
              },
              punctuation: /[*_%?@+\-^~]+/
            }
          },
          // [alias]http://example.com
          'link-ref': {
            pattern: /^\[[^\]]+\]\S+$/m,
            inside: {
              string: {
                pattern: /(^\[)[^\]]+(?=\])/,
                lookbehind: true
              },
              url: {
                pattern: /(^\])\S+$/,
                lookbehind: true
              },
              punctuation: /[\[\]]/
            }
          },
          // "text":http://example.com
          // "text":link-ref
          link: {
            // eslint-disable-next-line regexp/no-super-linear-backtracking
            pattern: withModifier(/"<MOD>*[^"]+":.+?(?=[^\w/]?(?:\s|$))/.source),
            inside: {
              text: {
                // eslint-disable-next-line regexp/no-super-linear-backtracking
                pattern: withModifier(/(^"<MOD>*)[^"]+(?=")/.source),
                lookbehind: true
              },
              modifier: {
                pattern: withModifier(/(^")<MOD>+/.source),
                lookbehind: true,
                inside: modifierTokens
              },
              url: {
                pattern: /(:).+/,
                lookbehind: true
              },
              punctuation: /[":]/
            }
          },
          // !image.jpg!
          // !image.jpg(Title)!:http://example.com
          image: {
            pattern: withModifier(/!(?:<MOD>|<PAR>|[<>=])*(?![<>=])[^!\s()]+(?:\([^)]+\))?!(?::.+?(?=[^\w/]?(?:\s|$)))?/.source),
            inside: {
              source: {
                pattern: withModifier(/(^!(?:<MOD>|<PAR>|[<>=])*)(?![<>=])[^!\s()]+(?:\([^)]+\))?(?=!)/.source),
                lookbehind: true,
                alias: 'url'
              },
              modifier: {
                pattern: withModifier(/(^!)(?:<MOD>|<PAR>|[<>=])+/.source),
                lookbehind: true,
                inside: modifierTokens
              },
              url: {
                pattern: /(:).+/,
                lookbehind: true
              },
              punctuation: /[!:]/
            }
          },
          // Footnote[1]
          footnote: {
            pattern: /\b\[\d+\]/,
            alias: 'comment',
            inside: {
              punctuation: /\[|\]/
            }
          },
          // CSS(Cascading Style Sheet)
          acronym: {
            pattern: /\b[A-Z\d]+\([^)]+\)/,
            inside: {
              comment: {
                pattern: /(\()[^()]+(?=\))/,
                lookbehind: true
              },
              punctuation: /[()]/
            }
          },
          // Prism(C)
          mark: {
            pattern: /\b\((?:TM|R|C)\)/,
            alias: 'comment',
            inside: {
              punctuation: /[()]/
            }
          }
        }
      }
    });
    var phraseInside = textile['phrase'].inside;
    var nestedPatterns = {
      inline: phraseInside['inline'],
      link: phraseInside['link'],
      image: phraseInside['image'],
      footnote: phraseInside['footnote'],
      acronym: phraseInside['acronym'],
      mark: phraseInside['mark']
    }; // Only allow alpha-numeric HTML tags, not XML tags

    textile.tag.pattern = /<\/?(?!\d)[a-z0-9]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i; // Allow some nesting

    var phraseInlineInside = phraseInside['inline'].inside;
    phraseInlineInside['bold'].inside = nestedPatterns;
    phraseInlineInside['italic'].inside = nestedPatterns;
    phraseInlineInside['inserted'].inside = nestedPatterns;
    phraseInlineInside['deleted'].inside = nestedPatterns;
    phraseInlineInside['span'].inside = nestedPatterns; // Allow some styles inside table cells

    var phraseTableInside = phraseInside['table'].inside;
    phraseTableInside['inline'] = nestedPatterns['inline'];
    phraseTableInside['link'] = nestedPatterns['link'];
    phraseTableInside['image'] = nestedPatterns['image'];
    phraseTableInside['footnote'] = nestedPatterns['footnote'];
    phraseTableInside['acronym'] = nestedPatterns['acronym'];
    phraseTableInside['mark'] = nestedPatterns['mark'];
  })(Prism);
}

/***/ }),

/***/ 6958:
/***/ ((module) => {



module.exports = toml;
toml.displayName = 'toml';
toml.aliases = [];

function toml(Prism) {
  ;

  (function (Prism) {
    var key = /(?:[\w-]+|'[^'\n\r]*'|"(?:\\.|[^\\"\r\n])*")/.source;
    /**
     * @param {string} pattern
     */

    function insertKey(pattern) {
      return pattern.replace(/__/g, function () {
        return key;
      });
    }

    Prism.languages.toml = {
      comment: {
        pattern: /#.*/,
        greedy: true
      },
      table: {
        pattern: RegExp(insertKey(/(^[\t ]*\[\s*(?:\[\s*)?)__(?:\s*\.\s*__)*(?=\s*\])/.source), 'm'),
        lookbehind: true,
        greedy: true,
        alias: 'class-name'
      },
      key: {
        pattern: RegExp(insertKey(/(^[\t ]*|[{,]\s*)__(?:\s*\.\s*__)*(?=\s*=)/.source), 'm'),
        lookbehind: true,
        greedy: true,
        alias: 'property'
      },
      string: {
        pattern: /"""(?:\\[\s\S]|[^\\])*?"""|'''[\s\S]*?'''|'[^'\n\r]*'|"(?:\\.|[^\\"\r\n])*"/,
        greedy: true
      },
      date: [{
        // Offset Date-Time, Local Date-Time, Local Date
        pattern: /\b\d{4}-\d{2}-\d{2}(?:[T\s]\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|[+-]\d{2}:\d{2})?)?\b/i,
        alias: 'number'
      }, {
        // Local Time
        pattern: /\b\d{2}:\d{2}:\d{2}(?:\.\d+)?\b/,
        alias: 'number'
      }],
      number: /(?:\b0(?:x[\da-zA-Z]+(?:_[\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\b|[-+]?\b\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?(?:[eE][+-]?\d+(?:_\d+)*)?\b|[-+]?\b(?:inf|nan)\b/,
      "boolean": /\b(?:true|false)\b/,
      punctuation: /[.,=[\]{}]/
    };
  })(Prism);
}

/***/ }),

/***/ 6744:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorJsx = __webpack_require__(4369);

var refractorTypescript = __webpack_require__(2747);

module.exports = tsx;
tsx.displayName = 'tsx';
tsx.aliases = [];

function tsx(Prism) {
  Prism.register(refractorJsx);
  Prism.register(refractorTypescript);

  (function (Prism) {
    var typescript = Prism.util.clone(Prism.languages.typescript);
    Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // This will prevent collisions between TSX tags and TS generic types.
    // Idea by https://github.com/karlhorky
    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928

    var tag = Prism.languages.tsx.tag;
    tag.pattern = RegExp(/(^|[^\w$]|(?=<\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);
    tag.lookbehind = true;
  })(Prism);
}

/***/ }),

/***/ 215:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorMarkupTemplating = __webpack_require__(8083);

module.exports = tt2;
tt2.displayName = 'tt2';
tt2.aliases = [];

function tt2(Prism) {
  Prism.register(refractorMarkupTemplating);

  (function (Prism) {
    Prism.languages.tt2 = Prism.languages.extend('clike', {
      comment: /#.*|\[%#[\s\S]*?%\]/,
      keyword: /\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\b/,
      punctuation: /[[\]{},()]/
    });
    Prism.languages.insertBefore('tt2', 'number', {
      operator: /=[>=]?|!=?|<=?|>=?|&&|\|\|?|\b(?:and|or|not)\b/,
      variable: {
        pattern: /\b[a-z]\w*(?:\s*\.\s*(?:\d+|\$?[a-z]\w*))*\b/i
      }
    });
    Prism.languages.insertBefore('tt2', 'keyword', {
      delimiter: {
        pattern: /^(?:\[%|%%)-?|-?%\]$/,
        alias: 'punctuation'
      }
    });
    Prism.languages.insertBefore('tt2', 'string', {
      'single-quoted-string': {
        pattern: /'[^\\']*(?:\\[\s\S][^\\']*)*'/,
        greedy: true,
        alias: 'string'
      },
      'double-quoted-string': {
        pattern: /"[^\\"]*(?:\\[\s\S][^\\"]*)*"/,
        greedy: true,
        alias: 'string',
        inside: {
          variable: {
            pattern: /\$(?:[a-z]\w*(?:\.(?:\d+|\$?[a-z]\w*))*)/i
          }
        }
      }
    }); // The different types of TT2 strings "replace" the C-like standard string

    delete Prism.languages.tt2.string;
    Prism.hooks.add('before-tokenize', function (env) {
      var tt2Pattern = /\[%[\s\S]+?%\]/g;
      Prism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);
    });
    Prism.hooks.add('after-tokenize', function (env) {
      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');
    });
  })(Prism);
}

/***/ }),

/***/ 8330:
/***/ ((module) => {



module.exports = turtle;
turtle.displayName = 'turtle';
turtle.aliases = [];

function turtle(Prism) {
  Prism.languages.turtle = {
    comment: {
      pattern: /#.*/,
      greedy: true
    },
    'multiline-string': {
      pattern: /"""(?:(?:""?)?(?:[^"\\]|\\.))*"""|'''(?:(?:''?)?(?:[^'\\]|\\.))*'''/,
      greedy: true,
      alias: 'string',
      inside: {
        comment: /#.*/
      }
    },
    string: {
      pattern: /"(?:[^\\"\r\n]|\\.)*"|'(?:[^\\'\r\n]|\\.)*'/,
      greedy: true
    },
    url: {
      pattern: /<(?:[^\x00-\x20<>"{}|^`\\]|\\(?:u[\da-fA-F]{4}|U[\da-fA-F]{8}))*>/,
      greedy: true,
      inside: {
        punctuation: /[<>]/
      }
    },
    "function": {
      pattern: /(?:(?![-.\d\xB7])[-.\w\xB7\xC0-\uFFFD]+)?:(?:(?![-.])(?:[-.:\w\xC0-\uFFFD]|%[\da-f]{2}|\\.)+)?/i,
      inside: {
        'local-name': {
          pattern: /([^:]*:)[\s\S]+/,
          lookbehind: true
        },
        prefix: {
          pattern: /[\s\S]+/,
          inside: {
            punctuation: /:/
          }
        }
      }
    },
    number: /[+-]?\b\d+(?:\.\d*)?(?:e[+-]?\d+)?/i,
    punctuation: /[{}.,;()[\]]|\^\^/,
    "boolean": /\b(?:true|false)\b/,
    keyword: [/(?:\ba|@prefix|@base)\b|=/, /\b(?:graph|base|prefix)\b/i],
    tag: {
      pattern: /@[a-z]+(?:-[a-z\d]+)*/i,
      inside: {
        punctuation: /@/
      }
    }
  };
  Prism.languages.trig = Prism.languages['turtle'];
}

/***/ }),

/***/ 7053:
/***/ ((module) => {



module.exports = twig;
twig.displayName = 'twig';
twig.aliases = [];

function twig(Prism) {
  Prism.languages.twig = {
    comment: /\{#[\s\S]*?#\}/,
    tag: {
      pattern: /\{\{[\s\S]*?\}\}|\{%[\s\S]*?%\}/,
      inside: {
        ld: {
          pattern: /^(?:\{\{-?|\{%-?\s*\w+)/,
          inside: {
            punctuation: /^(?:\{\{|\{%)-?/,
            keyword: /\w+/
          }
        },
        rd: {
          pattern: /-?(?:%\}|\}\})$/,
          inside: {
            punctuation: /.+/
          }
        },
        string: {
          pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
          inside: {
            punctuation: /^['"]|['"]$/
          }
        },
        keyword: /\b(?:even|if|odd)\b/,
        "boolean": /\b(?:true|false|null)\b/,
        number: /\b0x[\dA-Fa-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][-+]?\d+)?/,
        operator: [{
          pattern: /(\s)(?:and|b-and|b-xor|b-or|ends with|in|is|matches|not|or|same as|starts with)(?=\s)/,
          lookbehind: true
        }, /[=<>]=?|!=|\*\*?|\/\/?|\?:?|[-+~%|]/],
        property: /\b[a-zA-Z_]\w*\b/,
        punctuation: /[()\[\]{}:.,]/
      }
    },
    // The rest can be parsed as HTML
    other: {
      // We want non-blank matches
      pattern: /\S(?:[\s\S]*\S)?/,
      inside: Prism.languages.markup
    }
  };
}

/***/ }),

/***/ 2747:
/***/ ((module) => {



module.exports = typescript;
typescript.displayName = 'typescript';
typescript.aliases = ['ts'];

function typescript(Prism) {
  ;

  (function (Prism) {
    Prism.languages.typescript = Prism.languages.extend('javascript', {
      'class-name': {
        pattern: /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
        lookbehind: true,
        greedy: true,
        inside: null // see below

      },
      builtin: /\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/
    }); // The keywords TypeScript adds to JavaScript

    Prism.languages.typescript.keyword.push(/\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\b/, // keywords that have to be followed by an identifier
    /\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/, // This is for `import type *, {}`
    /\btype\b(?=\s*(?:[\{*]|$))/); // doesn't work with TS because TS is too complex

    delete Prism.languages.typescript['parameter']; // a version of typescript specifically for highlighting types

    var typeInside = Prism.languages.extend('typescript', {});
    delete typeInside['class-name'];
    Prism.languages.typescript['class-name'].inside = typeInside;
    Prism.languages.insertBefore('typescript', 'function', {
      decorator: {
        pattern: /@[$\w\xA0-\uFFFF]+/,
        inside: {
          at: {
            pattern: /^@/,
            alias: 'operator'
          },
          "function": /^[\s\S]+/
        }
      },
      'generic-function': {
        // e.g. foo<T extends "bar" | "baz">( ...
        pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
        greedy: true,
        inside: {
          "function": /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
          generic: {
            pattern: /<[\s\S]+/,
            // everything after the first <
            alias: 'class-name',
            inside: typeInside
          }
        }
      }
    });
    Prism.languages.ts = Prism.languages.typescript;
  })(Prism);
}

/***/ }),

/***/ 9051:
/***/ ((module) => {



module.exports = typoscript;
typoscript.displayName = 'typoscript';
typoscript.aliases = ['tsconfig'];

function typoscript(Prism) {
  ;

  (function (Prism) {
    var keywords = /\b(?:ACT|ACTIFSUB|CARRAY|CASE|CLEARGIF|COA|COA_INT|CONSTANTS|CONTENT|CUR|EDITPANEL|EFFECT|EXT|FILE|FLUIDTEMPLATE|FORM|FRAME|FRAMESET|GIFBUILDER|GMENU|GMENU_FOLDOUT|GMENU_LAYERS|GP|HMENU|HRULER|HTML|IENV|IFSUB|IMAGE|IMGMENU|IMGMENUITEM|IMGTEXT|IMG_RESOURCE|INCLUDE_TYPOSCRIPT|JSMENU|JSMENUITEM|LLL|LOAD_REGISTER|NO|PAGE|RECORDS|RESTORE_REGISTER|TEMPLATE|TEXT|TMENU|TMENUITEM|TMENU_LAYERS|USER|USER_INT|_GIFBUILDER|global|globalString|globalVar)\b/;
    Prism.languages.typoscript = {
      comment: [{
        // multiline comments /* */
        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
        lookbehind: true
      }, {
        // double-slash comments - ignored when backslashes or colon is found in front
        // also ignored whenever directly after an equal-sign, because it would probably be an url without protocol
        pattern: /(^|[^\\:= \t]|(?:^|[^= \t])[ \t]+)\/\/.*/,
        lookbehind: true,
        greedy: true
      }, {
        // hash comments - ignored when leading quote is found for hex colors in strings
        pattern: /(^|[^"'])#.*/,
        lookbehind: true,
        greedy: true
      }],
      "function": [{
        // old include style
        pattern: /<INCLUDE_TYPOSCRIPT:\s*source\s*=\s*(?:"[^"\r\n]*"|'[^'\r\n]*')\s*>/,
        inside: {
          string: {
            pattern: /"[^"\r\n]*"|'[^'\r\n]*'/,
            inside: {
              keyword: keywords
            }
          },
          keyword: {
            pattern: /INCLUDE_TYPOSCRIPT/
          }
        }
      }, {
        // new include style
        pattern: /@import\s*(?:"[^"\r\n]*"|'[^'\r\n]*')/,
        inside: {
          string: /"[^"\r\n]*"|'[^'\r\n]*'/
        }
      }],
      string: {
        pattern: /^([^=]*=[< ]?)(?:(?!\]\n).)*/,
        lookbehind: true,
        inside: {
          "function": /\{\$.*\}/,
          // constants include
          keyword: keywords,
          number: /^[0-9]+$/,
          punctuation: /[,|:]/
        }
      },
      keyword: keywords,
      number: {
        // special highlighting for indexes of arrays in tags
        pattern: /\b[0-9]+\s*[.{=]/,
        inside: {
          operator: /[.{=]/
        }
      },
      tag: {
        pattern: /\.?[-\w\\]+\.?/,
        inside: {
          punctuation: /\./
        }
      },
      punctuation: /[{}[\];(),.:|]/,
      operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/
    };
    Prism.languages.tsconfig = Prism.languages.typoscript;
  })(Prism);
}

/***/ }),

/***/ 8287:
/***/ ((module) => {



module.exports = unrealscript;
unrealscript.displayName = 'unrealscript';
unrealscript.aliases = ['uc', 'uscript'];

function unrealscript(Prism) {
  Prism.languages.unrealscript = {
    comment: /\/\/.*|\/\*[\s\S]*?\*\//,
    string: {
      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    category: {
      pattern: /(\b(?:(?:autoexpand|hide|show)categories|var)\s*\()[^()]+(?=\))/,
      lookbehind: true,
      greedy: true,
      alias: 'property'
    },
    metadata: {
      pattern: /(\w\s*)<\s*\w+\s*=[^<>|=\r\n]+(?:\|\s*\w+\s*=[^<>|=\r\n]+)*>/,
      lookbehind: true,
      greedy: true,
      inside: {
        property: /\b\w+(?=\s*=)/,
        operator: /=/,
        punctuation: /[<>|]/
      }
    },
    macro: {
      pattern: /`\w+/,
      alias: 'property'
    },
    'class-name': {
      pattern: /(\b(?:class|enum|extends|interface|state(?:\(\))?|struct|within)\s+)\w+/,
      lookbehind: true
    },
    keyword: /\b(?:abstract|actor|array|auto|autoexpandcategories|bool|break|byte|case|class|classgroup|client|coerce|collapsecategories|config|const|continue|default|defaultproperties|delegate|dependson|deprecated|do|dontcollapsecategories|editconst|editinlinenew|else|enum|event|exec|export|extends|final|float|for|forcescriptorder|foreach|function|goto|guid|hidecategories|hidedropdown|if|ignores|implements|inherits|input|int|interface|iterator|latent|local|material|name|native|nativereplication|noexport|nontransient|noteditinlinenew|notplaceable|operator|optional|out|pawn|perobjectconfig|perobjectlocalized|placeable|postoperator|preoperator|private|protected|reliable|replication|return|server|showcategories|simulated|singular|state|static|string|struct|structdefault|structdefaultproperties|switch|texture|transient|travel|unreliable|until|var|vector|while|within)\b/,
    "function": /\b[a-z_]\w*(?=\s*\()/i,
    "boolean": /\b(?:false|true)\b/,
    number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
    // https://docs.unrealengine.com/udk/Three/UnrealScriptExpressions.html
    operator: />>|<<|--|\+\+|\*\*|[-+*/~!=<>$@]=?|&&?|\|\|?|\^\^?|[?:%]|\b(?:Cross|Dot|ClockwiseFrom)\b/,
    punctuation: /[()[\]{};,.]/
  };
  Prism.languages.uc = Prism.languages.uscript = Prism.languages.unrealscript;
}

/***/ }),

/***/ 4046:
/***/ ((module) => {



module.exports = uri;
uri.displayName = 'uri';
uri.aliases = ['url'];

function uri(Prism) {
  // https://tools.ietf.org/html/rfc3986#appendix-A
  Prism.languages.uri = {
    scheme: {
      pattern: /^[a-z][a-z0-9+.-]*:/im,
      greedy: true,
      inside: {
        'scheme-delimiter': /:$/
      }
    },
    fragment: {
      pattern: /#[\w\-.~!$&'()*+,;=%:@/?]*/,
      inside: {
        'fragment-delimiter': /^#/
      }
    },
    query: {
      pattern: /\?[\w\-.~!$&'()*+,;=%:@/?]*/,
      inside: {
        'query-delimiter': {
          pattern: /^\?/,
          greedy: true
        },
        'pair-delimiter': /[&;]/,
        pair: {
          pattern: /^[^=][\s\S]*/,
          inside: {
            key: /^[^=]+/,
            value: {
              pattern: /(^=)[\s\S]+/,
              lookbehind: true
            }
          }
        }
      }
    },
    authority: {
      pattern: RegExp(/^\/\//.source + // [ userinfo "@" ]
      /(?:[\w\-.~!$&'()*+,;=%:]*@)?/.source + ( // host
      '(?:' + // IP-literal
      /\[(?:[0-9a-fA-F:.]{2,48}|v[0-9a-fA-F]+\.[\w\-.~!$&'()*+,;=]+)\]/.source + '|' + // IPv4address or registered name
      /[\w\-.~!$&'()*+,;=%]*/.source + ')') + // [ ":" port ]
      /(?::\d*)?/.source, 'm'),
      inside: {
        'authority-delimiter': /^\/\//,
        'user-info-segment': {
          pattern: /^[\w\-.~!$&'()*+,;=%:]*@/,
          inside: {
            'user-info-delimiter': /@$/,
            'user-info': /^[\w\-.~!$&'()*+,;=%:]+/
          }
        },
        'port-segment': {
          pattern: /:\d*$/,
          inside: {
            'port-delimiter': /^:/,
            port: /^\d+/
          }
        },
        host: {
          pattern: /[\s\S]+/,
          inside: {
            'ip-literal': {
              pattern: /^\[[\s\S]+\]$/,
              inside: {
                'ip-literal-delimiter': /^\[|\]$/,
                'ipv-future': /^v[\s\S]+/,
                'ipv6-address': /^[\s\S]+/
              }
            },
            'ipv4-address': /^(?:(?:[03-9]\d?|[12]\d{0,2})\.){3}(?:[03-9]\d?|[12]{0,2})$/
          }
        }
      }
    },
    path: {
      pattern: /^[\w\-.~!$&'()*+,;=%:@/]+/m,
      inside: {
        'path-separator': /\//
      }
    }
  };
  Prism.languages.url = Prism.languages.uri;
}

/***/ }),

/***/ 7460:
/***/ ((module) => {



module.exports = v;
v.displayName = 'v';
v.aliases = [];

function v(Prism) {
  ;

  (function (Prism) {
    var interpolationExpr = {
      pattern: /[\s\S]+/,
      inside: null
    };
    Prism.languages.v = Prism.languages.extend('clike', {
      string: [{
        pattern: /`(?:\\`|\\?[^`]{1,2})`/,
        // using {1,2} instead of `u` flag for compatibility
        alias: 'rune'
      }, {
        pattern: /r?(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
        alias: 'quoted-string',
        greedy: true,
        inside: {
          interpolation: {
            pattern: /((?:^|[^\\])(?:\\{2})*)\$(?:\{[^{}]*\}|\w+(?:\.\w+(?:\([^\(\)]*\))?|\[[^\[\]]+\])*)/,
            lookbehind: true,
            inside: {
              'interpolation-variable': {
                pattern: /^\$\w[\s\S]*$/,
                alias: 'variable'
              },
              'interpolation-punctuation': {
                pattern: /^\$\{|\}$/,
                alias: 'punctuation'
              },
              'interpolation-expression': interpolationExpr
            }
          }
        }
      }],
      'class-name': {
        pattern: /(\b(?:enum|interface|struct|type)\s+)(?:C\.)?\w+/,
        lookbehind: true
      },
      keyword: /(?:\b(?:as|asm|assert|atomic|break|chan|const|continue|defer|else|embed|enum|fn|for|__global|go(?:to)?|if|import|in|interface|is|lock|match|module|mut|none|or|pub|return|rlock|select|shared|sizeof|static|struct|type(?:of)?|union|unsafe)|\$(?:if|else|for)|#(?:include|flag))\b/,
      number: /\b(?:0x[a-f\d]+(?:_[a-f\d]+)*|0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?)\b/i,
      operator: /~|\?|[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\.?/,
      builtin: /\b(?:any(?:_int|_float)?|bool|byte(?:ptr)?|charptr|f(?:32|64)|i(?:8|16|nt|64|128)|rune|size_t|string|u(?:16|32|64|128)|voidptr)\b/
    });
    interpolationExpr.inside = Prism.languages.v;
    Prism.languages.insertBefore('v', 'operator', {
      attribute: {
        pattern: /(^[\t ]*)\[(?:deprecated|unsafe_fn|typedef|live|inline|flag|ref_only|windows_stdcall|direct_array_access)\]/m,
        lookbehind: true,
        alias: 'annotation',
        inside: {
          punctuation: /[\[\]]/,
          keyword: /\w+/
        }
      },
      generic: {
        pattern: /<\w+>(?=\s*[\)\{])/,
        inside: {
          punctuation: /[<>]/,
          'class-name': /\w+/
        }
      }
    });
    Prism.languages.insertBefore('v', 'function', {
      'generic-function': {
        // e.g. foo<T>( ...
        pattern: /\b\w+\s*<\w+>(?=\()/,
        inside: {
          "function": /^\w+/,
          generic: {
            pattern: /<\w+>/,
            inside: Prism.languages.v.generic.inside
          }
        }
      }
    });
  })(Prism);
}

/***/ }),

/***/ 5906:
/***/ ((module) => {



module.exports = vala;
vala.displayName = 'vala';
vala.aliases = [];

function vala(Prism) {
  Prism.languages.vala = Prism.languages.extend('clike', {
    // Classes copied from prism-csharp
    'class-name': [{
      // (Foo bar, Bar baz)
      pattern: /\b[A-Z]\w*(?:\.\w+)*\b(?=(?:\?\s+|\*?\s+\*?)\w)/,
      inside: {
        punctuation: /\./
      }
    }, {
      // [Foo]
      pattern: /(\[)[A-Z]\w*(?:\.\w+)*\b/,
      lookbehind: true,
      inside: {
        punctuation: /\./
      }
    }, {
      // class Foo : Bar
      pattern: /(\b(?:class|interface)\s+[A-Z]\w*(?:\.\w+)*\s*:\s*)[A-Z]\w*(?:\.\w+)*\b/,
      lookbehind: true,
      inside: {
        punctuation: /\./
      }
    }, {
      // class Foo
      pattern: /((?:\b(?:class|interface|new|struct|enum)\s+)|(?:catch\s+\())[A-Z]\w*(?:\.\w+)*\b/,
      lookbehind: true,
      inside: {
        punctuation: /\./
      }
    }],
    keyword: /\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\b/i,
    "function": /\b\w+(?=\s*\()/,
    number: /(?:\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)(?:f|u?l?)?/i,
    operator: /\+\+|--|&&|\|\||<<=?|>>=?|=>|->|~|[+\-*\/%&^|=!<>]=?|\?\??|\.\.\./,
    punctuation: /[{}[\];(),.:]/,
    constant: /\b[A-Z0-9_]+\b/
  });
  Prism.languages.insertBefore('vala', 'string', {
    'raw-string': {
      pattern: /"""[\s\S]*?"""/,
      greedy: true,
      alias: 'string'
    },
    'template-string': {
      pattern: /@"[\s\S]*?"/,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /\$(?:\([^)]*\)|[a-zA-Z]\w*)/,
          inside: {
            delimiter: {
              pattern: /^\$\(?|\)$/,
              alias: 'punctuation'
            },
            rest: Prism.languages.vala
          }
        },
        string: /[\s\S]+/
      }
    }
  });
  Prism.languages.insertBefore('vala', 'keyword', {
    regex: {
      pattern: /\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[imsx]{0,4}(?=\s*(?:$|[\r\n,.;})\]]))/,
      greedy: true,
      inside: {
        'regex-source': {
          pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
          lookbehind: true,
          alias: 'language-regex',
          inside: Prism.languages.regex
        },
        'regex-delimiter': /^\//,
        'regex-flags': /^[a-z]+$/
      }
    }
  });
}

/***/ }),

/***/ 6921:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var refractorBasic = __webpack_require__(7573);

module.exports = vbnet;
vbnet.displayName = 'vbnet';
vbnet.aliases = [];

function vbnet(Prism) {
  Prism.register(refractorBasic);
  Prism.languages.vbnet = Prism.languages.extend('basic', {
    comment: [{
      pattern: /(?:!|REM\b).+/i,
      inside: {
        keyword: /^REM/i
      }
    }, {
      pattern: /(^|[^\\:])'.*/,
      lookbehind: true,
      greedy: true
    }],
    string: {
      pattern: /(^|[^"])"(?:""|[^"])*"(?!")/i,
      lookbehind: true,
      greedy: true
    },
    keyword: /(?:\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDEC|CDBL|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEFAULT|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LINE INPUT|LET|LIB|LIKE|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPERATOR|OPEN|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHORT|SINGLE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SYNCLOCK|SWAP|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\$|\b)/i,
    punctuation: /[,;:(){}]/
  });
}

/***/ }),

/***/ 7036:
/***/ ((module) => {



module.exports = velocity;
velocity.displayName = 'velocity';
velocity.aliases = [];

function velocity(Prism) {
  ;

  (function (Prism) {
    Prism.languages.velocity = Prism.languages.extend('markup', {});
    var velocity = {
      variable: {
        pattern: /(^|[^\\](?:\\\\)*)\$!?(?:[a-z][\w-]*(?:\([^)]*\))?(?:\.[a-z][\w-]*(?:\([^)]*\))?|\[[^\]]+\])*|\{[^}]+\})/i,
        lookbehind: true,
        inside: {} // See below

      },
      string: {
        pattern: /"[^"]*"|'[^']*'/,
        greedy: true
      },
      number: /\b\d+\b/,
      "boolean": /\b(?:true|false)\b/,
      operator: /[=!<>]=?|[+*/%-]|&&|\|\||\.\.|\b(?:eq|g[et]|l[et]|n(?:e|ot))\b/,
      punctuation: /[(){}[\]:,.]/
    };
    velocity.variable.inside = {
      string: velocity['string'],
      "function": {
        pattern: /([^\w-])[a-z][\w-]*(?=\()/,
        lookbehind: true
      },
      number: velocity['number'],
      "boolean": velocity['boolean'],
      punctuation: velocity['punctuation']
    };
    Prism.languages.insertBefore('velocity', 'comment', {
      unparsed: {
        pattern: /(^|[^\\])#\[\[[\s\S]*?\]\]#/,
        lookbehind: true,
        greedy: true,
        inside: {
          punctuation: /^#\[\[|\]\]#$/
        }
      },
      'velocity-comment': [{
        pattern: /(^|[^\\])#\*[\s\S]*?\*#/,
        lookbehind: true,
        greedy: true,
        alias: 'comment'
      }, {
        pattern: /(^|[^\\])##.*/,
        lookbehind: true,
        greedy: true,
        alias: 'comment'
      }],
      directive: {
        pattern: /(^|[^\\](?:\\\\)*)#@?(?:[a-z][\w-]*|\{[a-z][\w-]*\})(?:\s*\((?:[^()]|\([^()]*\))*\))?/i,
        lookbehind: true,
        inside: {
          keyword: {
            pattern: /^#@?(?:[a-z][\w-]*|\{[a-z][\w-]*\})|\bin\b/,
            inside: {
              punctuation: /[{}]/
            }
          },
          rest: velocity
        }
      },
      variable: velocity['variable']
    });
    Prism.languages.velocity['tag'].inside['attr-value'].inside.rest = Prism.languages.velocity;
  })(Prism);
}

/***/ }),

/***/ 3897:
/***/ ((module) => {



module.exports = verilog;
verilog.displayName = 'verilog';
verilog.aliases = [];

function verilog(Prism) {
  Prism.languages.verilog = {
    comment: /\/\/.*|\/\*[\s\S]*?\*\//,
    string: {
      pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
      greedy: true
    },
    // support for any kernel function (ex: $display())
    property: /\B\$\w+\b/,
    // support for user defined constants (ex: `define)
    constant: /\B`\w+\b/,
    "function": /\b\w+(?=\()/,
    // support for verilog and system verilog keywords
    keyword: /\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|class|case|casex|casez|cell|chandle|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endspecify|endsequence|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_onevent|pulsestyle_ondetect|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\b/,
    // bold highlighting for all verilog and system verilog logic blocks
    important: /\b(?:always_latch|always_comb|always_ff|always)\b ?@?/,
    // support for time ticks, vectors, and real numbers
    number: /\B##?\d+|(?:\b\d+)?'[odbh] ?[\da-fzx_?]+|\b(?:\d*[._])?\d+(?:e[-+]?\d+)?/i,
    operator: /[-+{}^~%*\/?=!<>&|]+/,
    punctuation: /[[\];(),.:]/
  };
}

/***/ }),

/***/ 687:
/***/ ((module) => {



module.exports = vhdl;
vhdl.displayName = 'vhdl';
vhdl.aliases = [];

function vhdl(Prism) {
  Prism.languages.vhdl = {
    comment: /--.+/,
    // support for all logic vectors
    'vhdl-vectors': {
      pattern: /\b[oxb]"[\da-f_]+"|"[01uxzwlh-]+"/i,
      alias: 'number'
    },
    // support for operator overloading included
    'quoted-function': {
      pattern: /"\S+?"(?=\()/,
      alias: 'function'
    },
    string: /"(?:[^\\"\r\n]|\\(?:\r\n|[\s\S]))*"/,
    constant: /\b(?:use|library)\b/i,
    // support for predefined attributes included
    keyword: /\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\b/i,
    "boolean": /\b(?:true|false)\b/i,
    "function": /\w+(?=\()/,
    // decimal, based, physical, and exponential numbers supported
    number: /'[01uxzwlh-]'|\b(?:\d+#[\da-f_.]+#|\d[\d_.]*)(?:e[-+]?\d+)?/i,
    operator: /[<>]=?|:=|[-+*/&=]|\b(?:abs|not|mod|rem|sll|srl|sla|sra|rol|ror|and|or|nand|xnor|xor|nor)\b/i,
    punctuation: /[{}[\];(),.:]/
  };
}

/***/ }),

/***/ 526:
/***/ ((module) => {



module.exports = vim;
vim.displayName = 'vim';
vim.aliases = [];

function vim(Prism) {
  Prism.languages.vim = {
    string: /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\r\n]|'')*'/,
    comment: /".*/,
    "function": /\b\w+(?=\()/,
    keyword: /\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\b/,
    builtin: /\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\b/,
    number: /\b(?:0x[\da-f]+|\d+(?:\.\d+)?)\b/i,
    operator: /\|\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\/%?]|\b(?:is(?:not)?)\b/,
    punctuation: /[{}[\](),;:]/
  };
}

/***/ }),

/***/ 2654:
/***/ ((module) => {



module.exports = visualBasic;
visualBasic.displayName = 'visualBasic';
visualBasic.aliases = [];

function visualBasic(Prism) {
  Prism.languages['visual-basic'] = {
    comment: {
      pattern: /(?:['‘’]|REM\b)(?:[^\r\n_]|_(?:\r\n?|\n)?)*/i,
      inside: {
        keyword: /^REM/i
      }
    },
    directive: {
      pattern: /#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\S\r\n]_[^\S\r\n]*(?:\r\n?|\n)|.)+/i,
      alias: 'comment',
      greedy: true
    },
    string: {
      pattern: /\$?["“”](?:["“”]{2}|[^"“”])*["“”]C?/i,
      greedy: true
    },
    date: {
      pattern: /#[^\S\r\n]*(?:\d+([/-])\d+\1\d+(?:[^\S\r\n]+(?:\d+[^\S\r\n]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[^\S\r\n]*(?:AM|PM))?))?|\d+[^\S\r\n]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[^\S\r\n]*(?:AM|PM))?)[^\S\r\n]*#/i,
      alias: 'builtin'
    },
    number: /(?:(?:\b\d+(?:\.\d+)?|\.\d+)(?:E[+-]?\d+)?|&[HO][\dA-F]+)(?:U?[ILS]|[FRD])?/i,
    "boolean": /\b(?:True|False|Nothing)\b/i,
    keyword: /\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Currency|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|Type|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Until|Xor)\b/i,
    operator: [/[+\-*/\\^<=>&#@$%!]/, {
      pattern: /([^\S\r\n])_(?=[^\S\r\n]*[\r\n])/,
      lookbehind: true
    }],
    punctuation: /[{}().,:?]/
  };
  Prism.languages.vb = Prism.languages['visual-basic'];
  Prism.languages.vba = Prism.languages['visual-basic'];
}

/***/ }),

/***/ 6629:
/***/ ((module) => {



module.exports = warpscript;
warpscript.displayName = 'warpscript';
warpscript.aliases = [];

function warpscript(Prism) {
  Prism.languages.warpscript = {
    comment: /#.*|\/\/.*|\/\*[\s\S]*?\*\//,
    string: {
      pattern: /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'|<'(?:[^\\']|'(?!>)|\\.)*'>/,
      greedy: true
    },
    variable: /\$\S+/,
    macro: {
      pattern: /@\S+/,
      alias: 'property'
    },
    // WarpScript doesn't have any keywords, these are all functions under the control category
    // https://www.warp10.io/tags/control
    keyword: /\b(?:BREAK|CHECKMACRO|CONTINUE|CUDF|DEFINED|DEFINEDMACRO|EVAL|FAIL|FOR|FOREACH|FORSTEP|IFT|IFTE|MSGFAIL|NRETURN|RETHROW|RETURN|SWITCH|TRY|UDF|UNTIL|WHILE)\b/,
    number: /[+-]?\b(?:NaN|Infinity|\d+(?:\.\d*)?(?:[Ee][+-]?\d+)?|0x[\da-fA-F]+|0b[01]+)\b/,
    "boolean": /\b(?:false|true|F|T)\b/,
    punctuation: /<%|%>|[{}[\]()]/,
    // Some operators from the "operators" category
    // https://www.warp10.io/tags/operators
    operator: /==|&&?|\|\|?|\*\*?|>>>?|<<|[<>!~]=?|[-/%^]|\+!?|\b(?:AND|NOT|OR)\b/
  };
}

/***/ }),

/***/ 6595:
/***/ ((module) => {



module.exports = wasm;
wasm.displayName = 'wasm';
wasm.aliases = [];

function wasm(Prism) {
  Prism.languages.wasm = {
    comment: [/\(;[\s\S]*?;\)/, {
      pattern: /;;.*/,
      greedy: true
    }],
    string: {
      pattern: /"(?:\\[\s\S]|[^"\\])*"/,
      greedy: true
    },
    keyword: [{
      pattern: /\b(?:align|offset)=/,
      inside: {
        operator: /=/
      }
    }, {
      pattern: /\b(?:(?:f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))?|memory\.(?:grow|size))\b/,
      inside: {
        punctuation: /\./
      }
    }, /\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\b/],
    variable: /\$[\w!#$%&'*+\-./:<=>?@\\^`|~]+/i,
    number: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/,
    punctuation: /[()]/
  };
}

/***/ }),

/***/ 5902:
/***/ ((module) => {



module.exports = wiki;
wiki.displayName = 'wiki';
wiki.aliases = [];

function wiki(Prism) {
  Prism.languages.wiki = Prism.languages.extend('markup', {
    'block-comment': {
      pattern: /(^|[^\\])\/\*[\s\S]*?\*\//,
      lookbehind: true,
      alias: 'comment'
    },
    heading: {
      pattern: /^(=+)[^=\r\n].*?\1/m,
      inside: {
        punctuation: /^=+|=+$/,
        important: /.+/
      }
    },
    emphasis: {
      // TODO Multi-line
      pattern: /('{2,5}).+?\1/,
      inside: {
        'bold-italic': {
          pattern: /(''''').+?(?=\1)/,
          lookbehind: true,
          alias: ['bold', 'italic']
        },
        bold: {
          pattern: /(''')[^'](?:.*?[^'])?(?=\1)/,
          lookbehind: true
        },
        italic: {
          pattern: /('')[^'](?:.*?[^'])?(?=\1)/,
          lookbehind: true
        },
        punctuation: /^''+|''+$/
      }
    },
    hr: {
      pattern: /^-{4,}/m,
      alias: 'punctuation'
    },
    url: [/ISBN +(?:97[89][ -]?)?(?:\d[ -]?){9}[\dx]\b|(?:RFC|PMID) +\d+/i, /\[\[.+?\]\]|\[.+?\]/],
    variable: [/__[A-Z]+__/, // FIXME Nested structures should be handled
    // {{formatnum:{{#expr:{{{3}}}}}}}
    /\{{3}.+?\}{3}/, /\{\{.+?\}\}/],
    symbol: [/^#redirect/im, /~{3,5}/],
    // Handle table attrs:
    // {|
    // ! style="text-align:left;"| Item
    // |}
    'table-tag': {
      pattern: /((?:^|[|!])[|!])[^|\r\n]+\|(?!\|)/m,
      lookbehind: true,
      inside: {
        'table-bar': {
          pattern: /\|$/,
          alias: 'punctuation'
        },
        rest: Prism.languages.markup['tag'].inside
      }
    },
    punctuation: /^(?:\{\||\|\}|\|-|[*#:;!|])|\|\||!!/m
  });
  Prism.languages.insertBefore('wiki', 'tag', {
    // Prevent highlighting inside <nowiki>, <source> and <pre> tags
    nowiki: {
      pattern: /<(nowiki|pre|source)\b[^>]*>[\s\S]*?<\/\1>/i,
      inside: {
        tag: {
          pattern: /<(?:nowiki|pre|source)\b[^>]*>|<\/(?:nowiki|pre|source)>/i,
          inside: Prism.languages.markup['tag'].inside
        }
      }
    }
  });
}

/***/ }),

/***/ 2702:
/***/ ((module) => {



module.exports = wolfram;
wolfram.displayName = 'wolfram';
wolfram.aliases = ['mathematica', 'wl', 'nb'];

function wolfram(Prism) {
  Prism.languages.wolfram = {
    // Allow one level of nesting - note: regex taken from applescipt
    comment: /\(\*(?:\(\*(?:[^*]|\*(?!\)))*\*\)|(?!\(\*)[\s\S])*?\*\)/,
    string: {
      pattern: /"(?:\\.|[^"\\\r\n])*"/,
      greedy: true
    },
    keyword: /\b(?:Abs|AbsArg|Accuracy|Block|Do|For|Function|If|Manipulate|Module|Nest|NestList|None|Return|Switch|Table|Which|While)\b/,
    context: {
      pattern: /\w+`+\w*/,
      alias: 'class-name'
    },
    blank: {
      pattern: /\b\w+_\b/,
      alias: 'regex'
    },
    'global-variable': {
      pattern: /\$\w+/,
      alias: 'variable'
    },
    "boolean": /\b(?:True|False)\b/,
    number: /(?:\b(?=\d)|\B(?=\.))(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?j?\b/i,
    operator: /\/\.|;|=\.|\^=|\^:=|:=|<<|>>|<\||\|>|:>|\|->|->|<-|@@@|@@|@|\/@|=!=|===|==|=|\+|-|\^|\[\/-+%=\]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
    punctuation: /[\|{}[\];(),.:]/
  };
  Prism.languages.mathematica = Prism.languages.wolfram;
  Prism.languages.wl = Prism.languages.wolfram;
  Prism.languages.nb = Prism.languages.wolfram;
}

/***/ }),

/***/ 6372:
/***/ ((module) => {



module.exports = wren;
wren.displayName = 'wren';
wren.aliases = [];

function wren(Prism) {
  // https://wren.io/
  Prism.languages.wren = {
    // Multiline comments in Wren can have nested multiline comments
    // Comments: // and /* */
    comment: [{
      // support 3 levels of nesting
      // regex: \/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|<self>)*\*\/
      pattern: /\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|\/\*(?:[^*/]|\*(?!\/)|\/(?!\*))*\*\/)*\*\/)*\*\//,
      greedy: true
    }, {
      pattern: /(^|[^\\:])\/\/.*/,
      lookbehind: true,
      greedy: true
    }],
    // Triple quoted strings are multiline but cannot have interpolation (raw strings)
    // Based on prism-python.js
    'triple-quoted-string': {
      pattern: /"""[\s\S]*?"""/,
      greedy: true,
      alias: 'string'
    },
    // see below
    'string-literal': null,
    // #!/usr/bin/env wren on the first line
    hashbang: {
      pattern: /^#!\/.+/,
      greedy: true,
      alias: 'comment'
    },
    // Attributes are special keywords to add meta data to classes
    attribute: {
      // #! attributes are stored in class properties
      // #!myvar = true
      // #attributes are not stored and dismissed at compilation
      pattern: /#!?[ \t\u3000]*\w+/,
      alias: 'keyword'
    },
    'class-name': [{
      // class definition
      // class Meta {}
      pattern: /(\bclass\s+)\w+/,
      lookbehind: true
    }, // A class must always start with an uppercase.
    // File.read
    /\b[A-Z][a-z\d_]*\b/],
    // A constant can be a variable, class, property or method. Just named in all uppercase letters
    constant: /\b[A-Z][A-Z\d_]*\b/,
    "null": {
      pattern: /\bnull\b/,
      alias: 'keyword'
    },
    keyword: /\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\b/,
    "boolean": /\b(?:true|false)\b/,
    number: /\b(?:0x[\da-f]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/i,
    // Functions can be Class.method()
    "function": /\b[a-z_]\w*(?=\s*[({])/i,
    operator: /<<|>>|[=!<>]=?|&&|\|\||[-+*/%~^&|?:]|\.{2,3}/,
    punctuation: /[\[\](){}.,;]/
  };
  Prism.languages.wren['string-literal'] = {
    // A single quote string is multiline and can have interpolation (similar to JS backticks ``)
    pattern: /(^|[^\\"])"(?:[^\\"%]|\\[\s\S]|%(?!\()|%\((?:[^()]|\((?:[^()]|\([^)]*\))*\))*\))*"/,
    lookbehind: true,
    greedy: true,
    inside: {
      interpolation: {
        // "%(interpolation)"
        pattern: /((?:^|[^\\])(?:\\{2})*)%\((?:[^()]|\((?:[^()]|\([^)]*\))*\))*\)/,
        lookbehind: true,
        inside: {
          expression: {
            pattern: /^(%\()[\s\S]+(?=\)$)/,
            lookbehind: true,
            inside: Prism.languages.wren
          },
          'interpolation-punctuation': {
            pattern: /^%\(|\)$/,
            alias: 'punctuation'
          }
        }
      },
      string: /[\s\S]+/
    }
  };
}

/***/ }),

/***/ 9925:
/***/ ((module) => {



module.exports = xeora;
xeora.displayName = 'xeora';
xeora.aliases = ['xeoracube'];

function xeora(Prism) {
  ;

  (function (Prism) {
    Prism.languages.xeora = Prism.languages.extend('markup', {
      constant: {
        pattern: /\$(?:DomainContents|PageRenderDuration)\$/,
        inside: {
          punctuation: {
            pattern: /\$/
          }
        }
      },
      variable: {
        pattern: /\$@?(?:#+|[-+*~=^])?[\w.]+\$/,
        inside: {
          punctuation: {
            pattern: /[$.]/
          },
          operator: {
            pattern: /#+|[-+*~=^@]/
          }
        }
      },
      'function-inline': {
        pattern: /\$F:[-\w.]+\?[-\w.]+(?:,(?:(?:@[-#]*\w+\.[\w+.]\.*)*\|)*(?:(?:[\w+]|[-#*.~^]+[\w+]|=\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\w+\.[\w+.]\.*)+(?:(?:[\w+]|[-#*~^][-#*.~^]*[\w+]|=\S)(?:[^$=]|=+[^=])*=*)?)?)?\$/,
        inside: {
          variable: {
            pattern: /(?:[,|])@?(?:#+|[-+*~=^])?[\w.]+/,
            inside: {
              punctuation: {
                pattern: /[,.|]/
              },
              operator: {
                pattern: /#+|[-+*~=^@]/
              }
            }
          },
          punctuation: {
            pattern: /\$\w:|[$:?.,|]/
          }
        },
        alias: 'function'
      },
      'function-block': {
        pattern: /\$XF:\{[-\w.]+\?[-\w.]+(?:,(?:(?:@[-#]*\w+\.[\w+.]\.*)*\|)*(?:(?:[\w+]|[-#*.~^]+[\w+]|=\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\w+\.[\w+.]\.*)+(?:(?:[\w+]|[-#*~^][-#*.~^]*[\w+]|=\S)(?:[^$=]|=+[^=])*=*)?)?)?\}:XF\$/,
        inside: {
          punctuation: {
            pattern: /[$:{}?.,|]/
          }
        },
        alias: 'function'
      },
      'directive-inline': {
        pattern: /\$\w(?:#\d+\+?)?(?:\[[-\w.]+\])?:[-\/\w.]+\$/,
        inside: {
          punctuation: {
            pattern: /\$(?:\w:|C(?:\[|#\d))?|[:{[\]]/,
            inside: {
              tag: {
                pattern: /#\d/
              }
            }
          }
        },
        alias: 'function'
      },
      'directive-block-open': {
        pattern: /\$\w+:\{|\$\w(?:#\d+\+?)?(?:\[[-\w.]+\])?:[-\w.]+:\{(?:![A-Z]+)?/,
        inside: {
          punctuation: {
            pattern: /\$(?:\w:|C(?:\[|#\d))?|[:{[\]]/,
            inside: {
              tag: {
                pattern: /#\d/
              }
            }
          },
          attribute: {
            pattern: /![A-Z]+$/,
            inside: {
              punctuation: {
                pattern: /!/
              }
            },
            alias: 'keyword'
          }
        },
        alias: 'function'
      },
      'directive-block-separator': {
        pattern: /\}:[-\w.]+:\{/,
        inside: {
          punctuation: {
            pattern: /[:{}]/
          }
        },
        alias: 'function'
      },
      'directive-block-close': {
        pattern: /\}:[-\w.]+\$/,
        inside: {
          punctuation: {
            pattern: /[:{}$]/
          }
        },
        alias: 'function'
      }
    });
    Prism.languages.insertBefore('inside', 'punctuation', {
      variable: Prism.languages.xeora['function-inline'].inside['variable']
    }, Prism.languages.xeora['function-block']);
    Prism.languages.xeoracube = Prism.languages.xeora;
  })(Prism);
}

/***/ }),

/***/ 9288:
/***/ ((module) => {



module.exports = xmlDoc;
xmlDoc.displayName = 'xmlDoc';
xmlDoc.aliases = [];

function xmlDoc(Prism) {
  ;

  (function (Prism) {
    /**
     * If the given language is present, it will insert the given doc comment grammar token into it.
     *
     * @param {string} lang
     * @param {any} docComment
     */
    function insertDocComment(lang, docComment) {
      if (Prism.languages[lang]) {
        Prism.languages.insertBefore(lang, 'comment', {
          'doc-comment': docComment
        });
      }
    }

    var tag = Prism.languages.markup.tag;
    var slashDocComment = {
      pattern: /\/\/\/.*/,
      greedy: true,
      alias: 'comment',
      inside: {
        tag: tag
      }
    };
    var tickDocComment = {
      pattern: /'''.*/,
      greedy: true,
      alias: 'comment',
      inside: {
        tag: tag
      }
    };
    insertDocComment('csharp', slashDocComment);
    insertDocComment('fsharp', slashDocComment);
    insertDocComment('vbnet', tickDocComment);
  })(Prism);
}

/***/ }),

/***/ 3136:
/***/ ((module) => {



module.exports = xojo;
xojo.displayName = 'xojo';
xojo.aliases = [];

function xojo(Prism) {
  Prism.languages.xojo = {
    comment: {
      pattern: /(?:'|\/\/|Rem\b).+/i
    },
    string: {
      pattern: /"(?:""|[^"])*"/,
      greedy: true
    },
    number: [/(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i, /&[bchou][a-z\d]+/i],
    symbol: /#(?:If|Else|ElseIf|Endif|Pragma)\b/i,
    keyword: /\b(?:AddHandler|App|Array|As(?:signs)?|Auto|By(?:Ref|Val)|Boolean|Break|Byte|Call|Case|Catch|CFStringRef|CGFloat|Class|Color|Const|Continue|CString|Currency|CurrentMethodName|Declare|Delegate|Dim|Do(?:uble|wnTo)?|Each|Else(?:If)?|End|Enumeration|Event|Exception|Exit|Extends|False|Finally|For|Function|Get|GetTypeInfo|Global|GOTO|If|Implements|In|Inherits|Int(?:erface|eger|8|16|32|64)?|Lib|Loop|Me|Module|Next|Nil|Object|Optional|OSType|ParamArray|Private|Property|Protected|PString|Ptr|Raise(?:Event)?|ReDim|RemoveHandler|Return|Select(?:or)?|Self|Set|Single|Shared|Short|Soft|Static|Step|String|Sub|Super|Text|Then|To|True|Try|Ubound|UInt(?:eger|8|16|32|64)?|Until|Using|Var(?:iant)?|Wend|While|WindowPtr|WString)\b/i,
    operator: /<[=>]?|>=?|[+\-*\/\\^=]|\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|Xor|WeakAddressOf)\b/i,
    punctuation: /[.,;:()]/
  };
}

/***/ }),

/***/ 3216:
/***/ ((module) => {



module.exports = xquery;
xquery.displayName = 'xquery';
xquery.aliases = [];

function xquery(Prism) {
  ;

  (function (Prism) {
    Prism.languages.xquery = Prism.languages.extend('markup', {
      'xquery-comment': {
        pattern: /\(:[\s\S]*?:\)/,
        greedy: true,
        alias: 'comment'
      },
      string: {
        pattern: /(["'])(?:\1\1|(?!\1)[\s\S])*\1/,
        greedy: true
      },
      extension: {
        pattern: /\(#.+?#\)/,
        alias: 'symbol'
      },
      variable: /\$[-\w:]+/,
      axis: {
        pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,
        lookbehind: true,
        alias: 'operator'
      },
      'keyword-operator': {
        pattern: /(^|[^:-])\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\b(?=$|[^:-])/,
        lookbehind: true,
        alias: 'operator'
      },
      keyword: {
        pattern: /(^|[^:-])\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\b(?=$|[^:-])/,
        lookbehind: true
      },
      "function": /[\w-]+(?::[\w-]+)*(?=\s*\()/,
      'xquery-element': {
        pattern: /(element\s+)[\w-]+(?::[\w-]+)*/,
        lookbehind: true,
        alias: 'tag'
      },
      'xquery-attribute': {
        pattern: /(attribute\s+)[\w-]+(?::[\w-]+)*/,
        lookbehind: true,
        alias: 'attr-name'
      },
      builtin: {
        pattern: /(^|[^:-])\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\b(?=$|[^:-])/,
        lookbehind: true
      },
      number: /\b\d+(?:\.\d+)?(?:E[+-]?\d+)?/,
      operator: [/[+*=?|@]|\.\.?|:=|!=|<[=<]?|>[=>]?/, {
        pattern: /(\s)-(?=\s)/,
        lookbehind: true
      }],
      punctuation: /[[\](){},;:/]/
    });
    Prism.languages.xquery.tag.pattern = /<\/?(?!\d)[^\s>\/=$<%]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|\{(?!\{)(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])+\}|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i;
    Prism.languages.xquery['tag'].inside['attr-value'].pattern = /=(?:("|')(?:\\[\s\S]|\{(?!\{)(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])+\}|(?!\1)[^\\])*\1|[^\s'">=]+)/i;
    Prism.languages.xquery['tag'].inside['attr-value'].inside['punctuation'] = /^="|"$/;
    Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {
      // Allow for two levels of nesting
      pattern: /\{(?!\{)(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])+\}/,
      inside: Prism.languages.xquery,
      alias: 'language-xquery'
    }; // The following will handle plain text inside tags

    var stringifyToken = function stringifyToken(token) {
      if (typeof token === 'string') {
        return token;
      }

      if (typeof token.content === 'string') {
        return token.content;
      }

      return token.content.map(stringifyToken).join('');
    };

    var walkTokens = function walkTokens(tokens) {
      var openedTags = [];

      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        var notTagNorBrace = false;

        if (typeof token !== 'string') {
          if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {
            // We found a tag, now find its kind
            if (token.content[0].content[0].content === '</') {
              // Closing tag
              if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {
                // Pop matching opening tag
                openedTags.pop();
              }
            } else {
              if (token.content[token.content.length - 1].content === '/>') {// Autoclosed tag, ignore
              } else {
                // Opening tag
                openedTags.push({
                  tagName: stringifyToken(token.content[0].content[1]),
                  openedBraces: 0
                });
              }
            }
          } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{' && ( // Ignore `{{`
          !tokens[i + 1] || tokens[i + 1].type !== 'punctuation' || tokens[i + 1].content !== '{') && (!tokens[i - 1] || tokens[i - 1].type !== 'plain-text' || tokens[i - 1].content !== '{')) {
            // Here we might have entered an XQuery expression inside a tag
            openedTags[openedTags.length - 1].openedBraces++;
          } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {
            // Here we might have left an XQuery expression inside a tag
            openedTags[openedTags.length - 1].openedBraces--;
          } else if (token.type !== 'comment') {
            notTagNorBrace = true;
          }
        }

        if (notTagNorBrace || typeof token === 'string') {
          if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {
            // Here we are inside a tag, and not inside an XQuery expression.
            // That's plain text: drop any tokens matched.
            var plainText = stringifyToken(token); // And merge text with adjacent text

            if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {
              plainText += stringifyToken(tokens[i + 1]);
              tokens.splice(i + 1, 1);
            }

            if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {
              plainText = stringifyToken(tokens[i - 1]) + plainText;
              tokens.splice(i - 1, 1);
              i--;
            }

            if (/^\s+$/.test(plainText)) {
              tokens[i] = plainText;
            } else {
              tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);
            }
          }
        }

        if (token.content && typeof token.content !== 'string') {
          walkTokens(token.content);
        }
      }
    };

    Prism.hooks.add('after-tokenize', function (env) {
      if (env.language !== 'xquery') {
        return;
      }

      walkTokens(env.tokens);
    });
  })(Prism);
}

/***/ }),

/***/ 8464:
/***/ ((module) => {



module.exports = yaml;
yaml.displayName = 'yaml';
yaml.aliases = ['yml'];

function yaml(Prism) {
  ;

  (function (Prism) {
    // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property
    // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node
    var anchorOrAlias = /[*&][^\s[\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property

    var tag = /!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)

    var properties = '(?:' + tag.source + '(?:[ \t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)
    // This is a simplified version that doesn't support "#" and multiline keys
    // All these long scarry character classes are simplified versions of YAML's characters

    var plainKey = /(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {
      return /[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source;
    });
    var string = /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;
    /**
     *
     * @param {string} value
     * @param {string} [flags]
     * @returns {RegExp}
     */

    function createValuePattern(value, flags) {
      flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag

      var pattern = /([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g, function () {
        return properties;
      }).replace(/<<value>>/g, function () {
        return value;
      });
      return RegExp(pattern, flags);
    }

    Prism.languages.yaml = {
      scalar: {
        pattern: RegExp(/([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(/<<prop>>/g, function () {
          return properties;
        })),
        lookbehind: true,
        alias: 'string'
      },
      comment: /#.*/,
      key: {
        pattern: RegExp(/((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g, function () {
          return properties;
        }).replace(/<<key>>/g, function () {
          return '(?:' + plainKey + '|' + string + ')';
        })),
        lookbehind: true,
        greedy: true,
        alias: 'atrule'
      },
      directive: {
        pattern: /(^[ \t]*)%.+/m,
        lookbehind: true,
        alias: 'important'
      },
      datetime: {
        pattern: createValuePattern(/\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source),
        lookbehind: true,
        alias: 'number'
      },
      "boolean": {
        pattern: createValuePattern(/true|false/.source, 'i'),
        lookbehind: true,
        alias: 'important'
      },
      "null": {
        pattern: createValuePattern(/null|~/.source, 'i'),
        lookbehind: true,
        alias: 'important'
      },
      string: {
        pattern: createValuePattern(string),
        lookbehind: true,
        greedy: true
      },
      number: {
        pattern: createValuePattern(/[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source, 'i'),
        lookbehind: true
      },
      tag: tag,
      important: anchorOrAlias,
      punctuation: /---|[:[\]{}\-,|>?]|\.\.\./
    };
    Prism.languages.yml = Prism.languages.yaml;
  })(Prism);
}

/***/ }),

/***/ 9145:
/***/ ((module) => {



module.exports = yang;
yang.displayName = 'yang';
yang.aliases = [];

function yang(Prism) {
  Prism.languages.yang = {
    // https://tools.ietf.org/html/rfc6020#page-34
    // http://www.yang-central.org/twiki/bin/view/Main/YangExamples
    comment: /\/\*[\s\S]*?\*\/|\/\/.*/,
    string: {
      pattern: /"(?:[^\\"]|\\.)*"|'[^']*'/,
      greedy: true
    },
    keyword: {
      pattern: /(^|[{};\r\n][ \t]*)[a-z_][\w.-]*/i,
      lookbehind: true
    },
    namespace: {
      pattern: /(\s)[a-z_][\w.-]*(?=:)/i,
      lookbehind: true
    },
    "boolean": /\b(?:false|true)\b/,
    operator: /\+/,
    punctuation: /[{};:]/
  };
}

/***/ }),

/***/ 3955:
/***/ ((module) => {



module.exports = zig;
zig.displayName = 'zig';
zig.aliases = [];

function zig(Prism) {
  ;

  (function (Prism) {
    function literal(str) {
      return function () {
        return str;
      };
    }

    var keyword = /\b(?:align|allowzero|and|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\b/;
    var IDENTIFIER = '\\b(?!' + keyword.source + ')(?!\\d)\\w+\\b';
    var ALIGN = /align\s*\((?:[^()]|\([^()]*\))*\)/.source;
    var PREFIX_TYPE_OP = /(?:\?|\bpromise->|(?:\[[^[\]]*\]|\*(?!\*)|\*\*)(?:\s*<ALIGN>|\s*const\b|\s*volatile\b|\s*allowzero\b)*)/.source.replace(/<ALIGN>/g, literal(ALIGN));
    var SUFFIX_EXPR = /(?:\bpromise\b|(?:\berror\.)?<ID>(?:\.<ID>)*(?!\s+<ID>))/.source.replace(/<ID>/g, literal(IDENTIFIER));
    var TYPE = '(?!\\s)(?:!?\\s*(?:' + PREFIX_TYPE_OP + '\\s*)*' + SUFFIX_EXPR + ')+';
    /*
     * A simplified grammar for Zig compile time type literals:
     *
     * TypeExpr = ( "!"? PREFIX_TYPE_OP* SUFFIX_EXPR )+
     *
     * SUFFIX_EXPR = ( \b "promise" \b | ( \b "error" "." )? IDENTIFIER ( "." IDENTIFIER )* (?! \s+ IDENTIFIER ) )
     *
     * PREFIX_TYPE_OP = "?"
     *                | \b "promise" "->"
     *                | ( "[" [^\[\]]* "]" | "*" | "**" ) ( ALIGN | "const" \b | "volatile" \b | "allowzero" \b )*
     *
     * ALIGN = "align" "(" ( [^()] | "(" [^()]* ")" )* ")"
     *
     * IDENTIFIER = \b (?! KEYWORD ) [a-zA-Z_] \w* \b
     *
     */

    Prism.languages.zig = {
      comment: [{
        pattern: /\/{3}.*/,
        alias: 'doc-comment'
      }, /\/{2}.*/],
      string: [{
        // "string" and c"string"
        pattern: /(^|[^\\@])c?"(?:[^"\\\r\n]|\\.)*"/,
        lookbehind: true,
        greedy: true
      }, {
        // multiline strings and c-strings
        pattern: /([\r\n])([ \t]+c?\\{2}).*(?:(?:\r\n?|\n)\2.*)*/,
        lookbehind: true,
        greedy: true
      }, {
        // characters 'a', '\n', '\xFF', '\u{10FFFF}'
        pattern: /(^|[^\\])'(?:[^'\\\r\n]|\\(?:.|x[a-fA-F\d]{2}|u\{[a-fA-F\d]{1,6}\}))'/,
        lookbehind: true,
        greedy: true
      }],
      builtin: /\B@(?!\d)\w+(?=\s*\()/,
      label: {
        pattern: /(\b(?:break|continue)\s*:\s*)\w+\b|\b(?!\d)\w+\b(?=\s*:\s*(?:\{|while\b))/,
        lookbehind: true
      },
      'class-name': [// const Foo = struct {};
      /\b(?!\d)\w+(?=\s*=\s*(?:(?:extern|packed)\s+)?(?:enum|struct|union)\s*[({])/, {
        // const x: i32 = 9;
        // var x: Bar;
        // fn foo(x: bool, y: f32) void {}
        pattern: RegExp(/(:\s*)<TYPE>(?=\s*(?:<ALIGN>\s*)?[=;,)])|<TYPE>(?=\s*(?:<ALIGN>\s*)?\{)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))),
        lookbehind: true,
        inside: null // see below

      }, {
        // extern fn foo(x: f64) f64; (optional alignment)
        pattern: RegExp(/(\)\s*)<TYPE>(?=\s*(?:<ALIGN>\s*)?;)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))),
        lookbehind: true,
        inside: null // see below

      }],
      'builtin-types': {
        pattern: /\b(?:anyerror|bool|c_u?(?:short|int|long|longlong)|c_longdouble|c_void|comptime_(?:float|int)|[iu](?:8|16|32|64|128|size)|f(?:16|32|64|128)|noreturn|type|void)\b/,
        alias: 'keyword'
      },
      keyword: keyword,
      "function": /\b(?!\d)\w+(?=\s*\()/,
      number: /\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\d]+(?:\.[a-fA-F\d]*)?(?:[pP][+-]?[a-fA-F\d]+)?|\d+(?:\.\d*)?(?:[eE][+-]?\d+)?)\b/,
      "boolean": /\b(?:false|true)\b/,
      operator: /\.[*?]|\.{2,3}|[-=]>|\*\*|\+\+|\|\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,
      punctuation: /[.:,;(){}[\]]/
    };
    Prism.languages.zig['class-name'].forEach(function (obj) {
      if (obj.inside === null) {
        obj.inside = Prism.languages.zig;
      }
    });
  })(Prism);
}

/***/ }),

/***/ 4961:
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }

  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  define(Gp, iteratorSymbol, function () {
    return this;
  });
  define(Gp, "toString", function () {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
 true ? module.exports : 0);

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

/***/ }),

/***/ 5192:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var has = __webpack_require__(1268);

var url = __webpack_require__(7310);

var opt = __webpack_require__(4607);

var visit = __webpack_require__(8158);

module.exports = function transform(fn) {
  fn = fn || function () {};

  return function transformer(tree) {
    visit(tree, 'element', function (node) {
      modify(node, 'href');
      modify(node, 'src');
    });
  };

  function modify(node, prop) {
    if (has(node, prop)) {
      var obj = url.parse(node.properties[prop]);
      var res = opt(fn(obj, node)).or(obj).value();
      node.properties[prop] = url.format(res);
    }
  }
};

/***/ }),

/***/ 1268:
/***/ ((module) => {



var own = {}.hasOwnProperty;
module.exports = hasProperty; // Check if `node` has a set `name` property.

function hasProperty(node, name) {
  var props;
  var value;

  if (!node || !name || typeof node !== 'object' || node.type !== 'element') {
    return false;
  }

  props = node.properties;
  value = props && own.call(props, name) && props[name];
  return value !== null && value !== undefined && value !== false;
}

/***/ }),

/***/ 9691:
/***/ ((module) => {



module.exports = convert;

function convert(test) {
  if (typeof test === 'string') {
    return typeFactory(test);
  }

  if (test === null || test === undefined) {
    return ok;
  }

  if (typeof test === 'object') {
    return ('length' in test ? anyFactory : matchesFactory)(test);
  }

  if (typeof test === 'function') {
    return test;
  }

  throw new Error('Expected function, string, or object as test');
}

function convertAll(tests) {
  var results = [];
  var length = tests.length;
  var index = -1;

  while (++index < length) {
    results[index] = convert(tests[index]);
  }

  return results;
} // Utility assert each property in `test` is represented in `node`, and each
// values are strictly equal.


function matchesFactory(test) {
  return matches;

  function matches(node) {
    var key;

    for (key in test) {
      if (node[key] !== test[key]) {
        return false;
      }
    }

    return true;
  }
}

function anyFactory(tests) {
  var checks = convertAll(tests);
  var length = checks.length;
  return matches;

  function matches() {
    var index = -1;

    while (++index < length) {
      if (checks[index].apply(this, arguments)) {
        return true;
      }
    }

    return false;
  }
} // Utility to convert a string into a function which checks a given node’s type
// for said string.


function typeFactory(test) {
  return type;

  function type(node) {
    return Boolean(node && node.type === test);
  }
} // Utility to return true.


function ok() {
  return true;
}

/***/ }),

/***/ 5452:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = visitParents;

var convert = __webpack_require__(9691);

var CONTINUE = true;
var SKIP = 'skip';
var EXIT = false;
visitParents.CONTINUE = CONTINUE;
visitParents.SKIP = SKIP;
visitParents.EXIT = EXIT;

function visitParents(tree, test, visitor, reverse) {
  var is;

  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  is = convert(test);
  one(tree, null, []); // Visit a single node.

  function one(node, index, parents) {
    var result = [];
    var subresult;

    if (!test || is(node, index, parents[parents.length - 1] || null)) {
      result = toResult(visitor(node, parents));

      if (result[0] === EXIT) {
        return result;
      }
    }

    if (node.children && result[0] !== SKIP) {
      subresult = toResult(all(node.children, parents.concat(node)));
      return subresult[0] === EXIT ? subresult : result;
    }

    return result;
  } // Visit children in `parent`.


  function all(children, parents) {
    var min = -1;
    var step = reverse ? -1 : 1;
    var index = (reverse ? children.length : min) + step;
    var result;

    while (index > min && index < children.length) {
      result = one(children[index], index, parents);

      if (result[0] === EXIT) {
        return result;
      }

      index = typeof result[1] === 'number' ? result[1] : index + step;
    }
  }
}

function toResult(value) {
  if (value !== null && typeof value === 'object' && 'length' in value) {
    return value;
  }

  if (typeof value === 'number') {
    return [CONTINUE, value];
  }

  return [value];
}

/***/ }),

/***/ 8158:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = visit;

var visitParents = __webpack_require__(5452);

var CONTINUE = visitParents.CONTINUE;
var SKIP = visitParents.SKIP;
var EXIT = visitParents.EXIT;
visit.CONTINUE = CONTINUE;
visit.SKIP = SKIP;
visit.EXIT = EXIT;

function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  visitParents(tree, test, overload, reverse);

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    var index = parent ? parent.children.indexOf(node) : null;
    return visitor(node, index, parent);
  }
}

/***/ }),

/***/ 7144:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/*
 * Dependencies
 */

var visit = __webpack_require__(9494);

var select = __webpack_require__(7549);

var parseSelector = __webpack_require__(1677);
/*
 * Attacher
 */


module.exports = function (options) {
  options = options || {};
  var selector = options.selector || options.select || 'body';
  var wrapper = options.wrapper || options.wrap;
  /*
   * Transformer
   */

  return function (tree) {
    if (typeof wrapper !== 'string') {
      throw new TypeError('Expected a `string` as wrapper');
    }

    if (typeof selector !== 'string') {
      throw new TypeError('Expected a `string` as selector');
    }

    var selected = select.select(selector, tree);
    var wrap = parseSelector(wrapper);

    if (selected) {
      visit(tree, selected, function (node, i, parent) {
        if (node.tagName === 'body') {
          wrap.children = node.children;
          node.children = [wrap];
        } else {
          wrap.children = [selected];
          parent.children[i] = wrap;
        }
      });
    } else {
      wrap.children = tree.children;
      tree.children = [wrap];
    }
  };
};

/***/ }),

/***/ 1961:
/***/ ((__unused_webpack_module, exports) => {

 // See https://tools.ietf.org/html/rfc4647#section-3.1
// for more information on the algorithms.

exports.basicFilter = factory(basic, true);
exports.extendedFilter = factory(extended, true);
exports.lookup = factory(lookup); // Basic Filtering (Section 3.3.1) matches a language priority list consisting
// of basic language ranges (Section 2.1) to sets of language tags.

function basic(tag, range) {
  return range === '*' || tag === range || tag.indexOf(range + '-') > -1;
} // Extended Filtering (Section 3.3.2) matches a language priority list
// consisting of extended language ranges (Section 2.2) to sets of language
// tags.


function extended(tag, range) {
  // 3.3.2.1
  var left = tag.split('-');
  var right = range.split('-');
  var leftIndex = 0;
  var rightIndex = 0; // 3.3.2.2

  if (right[rightIndex] !== '*' && left[leftIndex] !== right[rightIndex]) {
    return false;
  }

  leftIndex++;
  rightIndex++; // 3.3.2.3

  while (rightIndex < right.length) {
    // 3.3.2.3.A
    if (right[rightIndex] === '*') {
      rightIndex++;
      continue;
    } // 3.3.2.3.B


    if (!left[leftIndex]) return false; // 3.3.2.3.C

    if (left[leftIndex] === right[rightIndex]) {
      leftIndex++;
      rightIndex++;
      continue;
    } // 3.3.2.3.D


    if (left[leftIndex].length === 1) return false; // 3.3.2.3.E

    leftIndex++;
  } // 3.3.2.4


  return true;
} // Lookup (Section 3.4) matches a language priority list consisting of basic
// language ranges to sets of language tags to find the one exact language tag
// that best matches the range.


function lookup(tag, range) {
  var right = range;
  var index;
  /* eslint-disable-next-line no-constant-condition */

  while (true) {
    if (right === '*' || tag === right) return true;
    index = right.lastIndexOf('-');
    if (index < 0) return false;
    if (right.charAt(index - 2) === '-') index -= 2;
    right = right.slice(0, index);
  }
} // Factory to perform a filter or a lookup.
// This factory creates a function that accepts a list of tags and a list of
// ranges, and contains logic to exit early for lookups.
// `check` just has to deal with one tag and one range.
// This match function iterates over ranges, and for each range,
// iterates over tags.  That way, earlier ranges matching any tag have
// precedence over later ranges.


function factory(check, filter) {
  return match;

  function match(tags, ranges) {
    var left = cast(tags, 'tag');
    var right = cast(ranges == null ? '*' : ranges, 'range');
    var matches = [];
    var rightIndex = -1;
    var range;
    var leftIndex;
    var next;

    while (++rightIndex < right.length) {
      range = right[rightIndex].toLowerCase(); // Ignore wildcards in lookup mode.

      if (!filter && range === '*') continue;
      leftIndex = -1;
      next = [];

      while (++leftIndex < left.length) {
        if (check(left[leftIndex].toLowerCase(), range)) {
          // Exit if this is a lookup and we have a match.
          if (!filter) return left[leftIndex];
          matches.push(left[leftIndex]);
        } else {
          next.push(left[leftIndex]);
        }
      }

      left = next;
    } // If this is a filter, return the list.  If it’s a lookup, we didn’t find
    // a match, so return `undefined`.


    return filter ? matches : undefined;
  }
} // Validate tags or ranges, and cast them to arrays.


function cast(values, name) {
  var value = values && typeof values === 'string' ? [values] : values;

  if (!value || typeof value !== 'object' || !('length' in value)) {
    throw new Error('Invalid ' + name + ' `' + value + '`, expected non-empty string');
  }

  return value;
}

/***/ }),

/***/ 3255:
/***/ ((module) => {



module.exports = direction;
var RTL = "\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC";
var LTR = "A-Za-z\xC0-\xD6\xD8-\xF6" + "\xF8-\u02B8\u0300-\u0590\u0800-\u1FFF\u200E\u2C00-\uFB1C" + "\uFE00-\uFE6F\uFEFD-\uFFFF";
var rtl = new RegExp('^[^' + LTR + ']*[' + RTL + ']');
var ltr = new RegExp('^[^' + RTL + ']*[' + LTR + ']');

function direction(value) {
  value = String(value || '');

  if (rtl.test(value)) {
    return 'rtl';
  }

  if (ltr.test(value)) {
    return 'ltr';
  }

  return 'neutral';
}

/***/ }),

/***/ 3856:
/***/ ((module) => {



var own = {}.hasOwnProperty;
module.exports = hasProperty; // Check if `node` has a set `name` property.

function hasProperty(node, name) {
  var props;
  var value;

  if (!node || !name || typeof node !== 'object' || node.type !== 'element') {
    return false;
  }

  props = node.properties;
  value = props && own.call(props, name) && props[name];
  return value !== null && value !== undefined && value !== false;
}

/***/ }),

/***/ 2135:
/***/ ((module) => {



module.exports = convert;

function convert(test) {
  if (typeof test === 'string') {
    return tagNameFactory(test);
  }

  if (test === null || test === undefined) {
    return element;
  }

  if (typeof test === 'object') {
    return any(test);
  }

  if (typeof test === 'function') {
    return callFactory(test);
  }

  throw new Error('Expected function, string, or array as test');
}

function convertAll(tests) {
  var length = tests.length;
  var index = -1;
  var results = [];

  while (++index < length) {
    results[index] = convert(tests[index]);
  }

  return results;
}

function any(tests) {
  var checks = convertAll(tests);
  var length = checks.length;
  return matches;

  function matches() {
    var index = -1;

    while (++index < length) {
      if (checks[index].apply(this, arguments)) {
        return true;
      }
    }

    return false;
  }
} // Utility to convert a string a tag name check.


function tagNameFactory(test) {
  return tagName;

  function tagName(node) {
    return element(node) && node.tagName === test;
  }
} // Utility to convert a function check.


function callFactory(test) {
  return call;

  function call(node) {
    return element(node) && Boolean(test.apply(this, arguments));
  }
} // Utility to return true if this is an element.


function element(node) {
  return node && typeof node === 'object' && node.type === 'element' && typeof node.tagName === 'string';
}

/***/ }),

/***/ 9985:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var convert = __webpack_require__(2135);

module.exports = isElement;
isElement.convert = convert; // Check if if `node` is an `element` and whether it passes the given test.

function isElement(node, test, index, parent, context) {
  var hasParent = parent !== null && parent !== undefined;
  var hasIndex = index !== null && index !== undefined;
  var check = convert(test);

  if (hasIndex && (typeof index !== 'number' || index < 0 || index === Infinity)) {
    throw new Error('Expected positive finite index for child node');
  }

  if (hasParent && (!parent.type || !parent.children)) {
    throw new Error('Expected parent node');
  }

  if (!node || !node.type || typeof node.type !== 'string') {
    return false;
  }

  if (hasParent !== hasIndex) {
    throw new Error('Expected both parent and index');
  }

  return check.call(context, node, index, parent);
}

/***/ }),

/***/ 7549:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



exports.matches = matches;
exports.selectAll = selectAll;
exports.select = select;

var any = __webpack_require__(6861);

var parse = __webpack_require__(3785);

function matches(selector, node, space) {
  return Boolean(any(parse(selector), node, {
    space: space,
    one: true,
    shallow: true
  })[0]);
}

function select(selector, node, space) {
  return any(parse(selector), node, {
    space: space,
    one: true
  })[0] || null;
}

function selectAll(selector, node, space) {
  return any(parse(selector), node, {
    space: space
  });
}

/***/ }),

/***/ 6861:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = match;

var html = __webpack_require__(5073);

var svg = __webpack_require__(9484);

var zwitch = __webpack_require__(5544);

var enter = __webpack_require__(1673);

var nest = __webpack_require__(8510);

var pseudo = __webpack_require__(1647);

var test = __webpack_require__(8636);

var type = zwitch('type', {
  unknown: unknownType,
  invalid: invalidType,
  handlers: {
    selectors: selectors,
    ruleSet: ruleSet,
    rule: rule
  }
});

function match(query, node, state) {
  return query && node ? type(query, node, state) : [];
}

function selectors(query, node, state) {
  var collect = collector(state.one);
  var index = -1;

  while (++index < query.selectors.length) {
    collect(ruleSet(query.selectors[index], node, state));
  }

  return collect.result;
}

function ruleSet(query, node, state) {
  return rule(query.rule, node, state);
}

function rule(query, tree, state) {
  var collect = collector(state.one);

  if (state.shallow && query.rule) {
    throw new Error('Expected selector without nesting');
  }

  nest(query, tree, 0, null, configure(query, {
    schema: state.space === 'svg' ? svg : html,
    language: null,
    direction: 'ltr',
    editableOrEditingHost: false,
    scopeElements: tree.type === 'root' ? tree.children : [tree],
    iterator: iterator,
    one: state.one,
    shallow: state.shallow
  }));
  return collect.result;

  function iterator(query, node, index, parent, state) {
    var exit = enter(state, node);

    if (test(query, node, index, parent, state)) {
      if (query.rule) {
        nest(query.rule, node, index, parent, configure(query.rule, state));
      } else {
        collect(node);
        state.found = true;
      }
    }

    exit();
  }

  function configure(query, state) {
    var pseudos = query.pseudos || [];
    var index = -1;

    while (++index < pseudos.length) {
      if (pseudo.needsIndex.indexOf(pseudos[index].name) > -1) {
        state.index = true;
        break;
      }
    }

    return state;
  }
}
/* istanbul ignore next - Shouldn’t be invoked, all data is handled. */


function unknownType(query) {
  throw new Error('Unknown type `' + query.type + '`');
}
/* istanbul ignore next - Shouldn’t be invoked, parser gives correct data. */


function invalidType() {
  throw new Error('Invalid type');
}

function collector(one) {
  var result = [];
  var found;
  collect.result = result;
  return collect; // Append elements to array, filtering out duplicates.

  function collect(source) {
    var index = -1;

    if ('length' in source) {
      while (++index < source.length) {
        collectOne(source[index]);
      }
    } else {
      collectOne(source);
    }

    function collectOne(element) {
      if (one) {
        /* istanbul ignore if - shouldn’t happen, safeguards performance problems. */
        if (found) throw new Error('Cannot collect multiple nodes');
        found = true;
      }

      if (result.indexOf(element) < 0) result.push(element);
    }
  }
}

/***/ }),

/***/ 1230:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = match;

var commas = __webpack_require__(1297);

var has = __webpack_require__(3856);

var find = __webpack_require__(2334);

var spaces = __webpack_require__(6473);

var zwitch = __webpack_require__(5544);

var handle = zwitch('operator', {
  unknown: unknownOperator,
  invalid: exists,
  handlers: {
    '=': exact,
    '~=': spaceSeparatedList,
    '|=': exactOrPrefix,
    '^=': begins,
    '$=': ends,
    '*=': contains
  }
});

function match(query, node, schema) {
  var attrs = query.attrs;
  var index = -1;

  while (++index < attrs.length) {
    if (!handle(attrs[index], node, find(schema, attrs[index].name))) return;
  }

  return true;
} // `[attr]`


function exists(query, node, info) {
  return has(node, info.property);
} // `[attr=value]`


function exact(query, node, info) {
  return has(node, info.property) && normalizeValue(node.properties[info.property], info) === query.value;
} // `[attr~=value]`


function spaceSeparatedList(query, node, info) {
  var value = node.properties[info.property];
  return (// If this is a comma-separated list, and the query is contained in it, return
    // true.
    !info.commaSeparated && value && typeof value === 'object' && value.indexOf(query.value) > -1 || // For all other values (including comma-separated lists), return whether this
    // is an exact match.
    has(node, info.property) && normalizeValue(value, info) === query.value
  );
} // `[attr|=value]`


function exactOrPrefix(query, node, info) {
  var value = normalizeValue(node.properties[info.property], info);
  return has(node, info.property) && (value === query.value || value.slice(0, query.value.length) === query.value && value.charAt(query.value.length) === '-');
} // `[attr^=value]`


function begins(query, node, info) {
  return has(node, info.property) && normalizeValue(node.properties[info.property], info).slice(0, query.value.length) === query.value;
} // `[attr$=value]`


function ends(query, node, info) {
  return has(node, info.property) && normalizeValue(node.properties[info.property], info).slice(-query.value.length) === query.value;
} // `[attr*=value]`


function contains(query, node, info) {
  return has(node, info.property) && normalizeValue(node.properties[info.property], info).indexOf(query.value) > -1;
}
/* istanbul ignore next - Shouldn’t be invoked, Parser throws an error instead. */


function unknownOperator(query) {
  throw new Error('Unknown operator `' + query.operator + '`');
} // Stringify a hast value back to its HTML form.


function normalizeValue(value, info) {
  if (typeof value === 'number') {
    return String(value);
  }

  if (typeof value === 'boolean') {
    return info.attribute;
  }

  if (typeof value === 'object' && 'length' in value) {
    return (info.commaSeparated ? commas.stringify : spaces.stringify)(value);
  }

  return value;
}

/***/ }),

/***/ 5060:
/***/ ((module) => {



module.exports = match;

function match(query, node) {
  var value = node.properties.className || [];
  var index = -1;

  while (++index < query.classNames.length) {
    if (value.indexOf(query.classNames[index]) < 0) return;
  }

  return true;
}

/***/ }),

/***/ 1673:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = enter;

var direction = __webpack_require__(3255);

var is = __webpack_require__(9985);

var toString = __webpack_require__(3215);

var svg = __webpack_require__(9484);

var visit = __webpack_require__(9494); // eslint-disable-next-line complexity


function enter(state, node) {
  var schema = state.schema;
  var language = state.language;
  var currentDirection = state.direction;
  var editableOrEditingHost = state.editableOrEditingHost;
  var dirInferred;
  var type;
  var found;
  var lang;
  var dir;

  if (node.type === 'element') {
    lang = node.properties.xmlLang || node.properties.lang;
    type = node.properties.type || 'text';
    dir = dirProperty(node);

    if (lang != null) {
      state.language = lang;
      found = true;
    }

    if (schema.space === 'html') {
      if (node.properties.contentEditable === 'true') {
        state.editableOrEditingHost = true;
        found = true;
      }

      if (is(node, 'svg')) {
        state.schema = svg;
        found = true;
      } // See: <https://html.spec.whatwg.org/#the-directionality>.
      // Explicit `[dir=rtl]`.


      if (dir === 'rtl') {
        dirInferred = dir;
      } else if ( // Explicit `[dir=ltr]`.
      dir === 'ltr' || // HTML with an invalid or no `[dir]`.
      dir !== 'auto' && is(node, 'html') || // `input[type=tel]` with an invalid or no `[dir]`.
      dir !== 'auto' && is(node, 'input') && type === 'tel') {
        dirInferred = 'ltr'; // `[dir=auto]` or `bdi` with an invalid or no `[dir]`.
      } else if (dir === 'auto' || is(node, 'bdi')) {
        if (is(node, 'textarea')) {
          // Check contents of `<textarea>`.
          dirInferred = dirBidi(toString(node));
        } else if (is(node, 'input') && (type === 'email' || type === 'search' || type === 'tel' || type === 'text')) {
          // Check value of `<input>`.
          dirInferred = node.properties.value ? dirBidi(node.properties.value) : 'ltr';
        } else {
          // Check text nodes in `node`.
          visit(node, inferDirectionality);
        }
      }

      if (dirInferred) {
        state.direction = dirInferred;
        found = true;
      }
    } // Turn off editing mode in non-HTML spaces.
    else if (state.editableOrEditingHost) {
      state.editableOrEditingHost = false;
      found = true;
    }
  }

  return found ? reset : noop;

  function reset() {
    state.schema = schema;
    state.language = language;
    state.direction = currentDirection;
    state.editableOrEditingHost = editableOrEditingHost;
  }

  function inferDirectionality(child) {
    if (child.type === 'text') {
      dirInferred = dirBidi(child.value);
      return dirInferred ? visit.EXIT : null;
    }

    if (child !== node && (is(child, ['bdi', 'script', 'style', 'textare']) || dirProperty(child))) {
      return visit.SKIP;
    }
  }
}

function dirBidi(value) {
  var result = direction(value);
  return result === 'neutral' ? null : result;
}

function dirProperty(node) {
  var value = typeof node.properties.dir === 'string' ? node.properties.dir.toLowerCase() : null;
  return value === 'auto' || value === 'ltr' || value === 'rtl' ? value : null;
}

function noop() {}

/***/ }),

/***/ 593:
/***/ ((module) => {



module.exports = match;

function match(query, node) {
  return node.properties.id === query.id;
}

/***/ }),

/***/ 2629:
/***/ ((module) => {



module.exports = match;

function match(query, node) {
  return query.tagName === '*' || query.tagName === node.tagName;
}

/***/ }),

/***/ 8510:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = match;

var zwitch = __webpack_require__(5544);

var enter = __webpack_require__(1673);

var own = {}.hasOwnProperty;
var handle = zwitch('nestingOperator', {
  unknown: unknownNesting,
  invalid: topScan,
  // `undefined` is the top query selector.
  handlers: {
    "null": descendant,
    // `null` is the descendant combinator.
    '>': child,
    '+': nextSibling,
    '~': subsequentSibling
  }
});

function match(query, node, index, parent, state) {
  return handle(query, node, index, parent, state);
}
/* istanbul ignore next - Shouldn’t be invoked, parser gives correct data. */


function unknownNesting(query) {
  throw new Error('Unexpected nesting `' + query.nestingOperator + '`');
}

function topScan(query, node, index, parent, state) {
  /* istanbul ignore if - Shouldn’t happen. */
  if (parent) {
    throw new Error('topScan is supposed to be called from the root node');
  }

  state.iterator.apply(null, arguments);
  if (!state.shallow) descendant.apply(null, arguments);
}

function descendant(query, node, index, parent, state) {
  var previous = state.iterator;
  state.iterator = iterator;
  child.apply(this, arguments);

  function iterator(_, node, index, parent, state) {
    state.iterator = previous;
    previous.apply(this, arguments);
    state.iterator = iterator;
    if (state.one && state.found) return;
    child.call(this, query, node, index, parent, state);
  }
}

function child(query, node, index, parent, state) {
  if (!node.children || !node.children.length) return;
  indexedSearch(query, node, state);
}

function nextSibling(query, node, index, parent, state) {
  /* istanbul ignore if - Shouldn’t happen. */
  if (!parent) return;
  indexedSearch(query, parent, state, index + 1, true);
}

function subsequentSibling(query, node, index, parent, state) {
  /* istanbul ignore if - Shouldn’t happen. */
  if (!parent) return;
  indexedSearch(query, parent, state, index + 1);
} // Handles `typeIndex` and `typeCount` properties for every walker.


function indexedSearch(query, parent, state, from, firstElementOnly) {
  var handle = state.index ? delay : add;
  var children = parent.children;
  var types = {};
  var delayed = [];
  var elements = 0;
  var index = -1; // Start looking at `from`

  if (from == null) from = 0; // Exit if there are no further nodes.

  if (from >= children.length) return; // If we need to index for types, do so for all elements before `from`.

  if (state.index) {
    while (++index < from) {
      if (children[index].type === 'element') count(children[index].tagName);
    }
  }

  index = from - 1;

  while (++index < children.length) {
    // Only check elements.
    // Check either all elements, or only check the first sibling
    if (children[index].type === 'element') {
      handle(children[index], index); // Stop if we’re looking for one node and it’s already found.

      if (state.one && state.found) return;
      if (firstElementOnly) break;
    }
  }

  if (state.index) {
    index = -1;

    while (++index < delayed.length) {
      delayed[index]();
      if (state.one && state.found) return;
    }
  }

  function delay(node, childIndex) {
    var elementsBefore = elements;
    var elementsByTypeBefore = own.call(types, node.tagName) ? types[node.tagName] : 0;
    count(node.tagName);
    delayed.push(fn);

    function fn() {
      // Before counting further elements:
      state.elementIndex = elementsBefore;
      state.typeIndex = elementsByTypeBefore; // After counting all elements.

      state.elementCount = elements;
      state.typeCount = types[node.tagName];
      add(node, childIndex);
    }
  }

  function add(node, childIndex) {
    var exit = enter(state, node);
    state.iterator(query, node, childIndex, parent, state);
    exit();
  }

  function count(name) {
    if (!own.call(types, name)) types[name] = 0;
    elements++;
    types[name]++;
  }
}

/***/ }),

/***/ 3785:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = parse;

var Parser = (__webpack_require__(8743)/* .CssSelectorParser */ .N);

var nthCheck = (__webpack_require__(8728)/* ["default"] */ .ZP);

var zwitch = __webpack_require__(5544);

var nth = ['nth-child', 'nth-last-child', 'nth-of-type', 'nth-last-of-type'];
var parser = new Parser();
var compile = zwitch('type', {
  handlers: {
    selectors: selectors,
    ruleSet: ruleSet,
    rule: rule
  }
});
parser.registerAttrEqualityMods('~', '|', '^', '$', '*');
parser.registerSelectorPseudos('any', 'matches', 'not', 'has');
parser.registerNestingOperators('>', '+', '~');

function parse(selector) {
  if (typeof selector !== 'string') {
    throw new Error('Expected `string` as selector, not `' + selector + '`');
  }

  return compile(parser.parse(selector));
}

function selectors(query) {
  var selectors = query.selectors;
  var index = -1;

  while (++index < selectors.length) {
    compile(selectors[index]);
  }

  return query;
}

function ruleSet(query) {
  return rule(query.rule);
}

function rule(query) {
  var pseudos = query.pseudos || [];
  var index = -1;
  var pseudo;

  while (++index < pseudos.length) {
    pseudo = pseudos[index];

    if (nth.indexOf(pseudo.name) > -1) {
      pseudo.value = nthCheck(pseudo.value);
      pseudo.valueType = 'function';
    }
  }

  compile(query.rule);
  return query;
}

/***/ }),

/***/ 1647:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = match;

var bcp47Match = __webpack_require__(1961);

var commaSeparated = __webpack_require__(1297);

var has = __webpack_require__(3856);

var is = __webpack_require__(9985);

var whitespace = __webpack_require__(7861);

var not = __webpack_require__(4878);

var zwitch = __webpack_require__(5544);

var anything = __webpack_require__(6861);

var handle = zwitch('name', {
  unknown: unknownPseudo,
  invalid: invalidPseudo,
  handlers: {
    any: matches,
    'any-link': anyLink,
    blank: blank,
    checked: checked,
    dir: dir,
    disabled: disabled,
    empty: empty,
    enabled: not(disabled),
    'first-child': firstChild,
    'first-of-type': firstOfType,
    has: hasSelector,
    lang: lang,
    'last-child': lastChild,
    'last-of-type': lastOfType,
    matches: matches,
    not: not(matches),
    'nth-child': nthChild,
    'nth-last-child': nthLastChild,
    'nth-of-type': nthOfType,
    'nth-last-of-type': nthLastOfType,
    'only-child': onlyChild,
    'only-of-type': onlyOfType,
    optional: not(required),
    'read-only': not(readWrite),
    'read-write': readWrite,
    required: required,
    root: root,
    scope: scope
  }
});
match.needsIndex = ['first-child', 'first-of-type', 'last-child', 'last-of-type', 'nth-child', 'nth-last-child', 'nth-of-type', 'nth-last-of-type', 'only-child', 'only-of-type'];

function match(query, node, index, parent, state) {
  var pseudos = query.pseudos;
  var offset = -1;

  while (++offset < pseudos.length) {
    if (!handle(pseudos[offset], node, index, parent, state)) return;
  }

  return true;
}

function matches(query, node, index, parent, state) {
  var shallow = state.shallow;
  var one = state.one;
  var result;
  state.shallow = true;
  state.one = true;
  result = anything(query.value, node, state)[0] === node;
  state.shallow = shallow;
  state.one = one;
  return result;
}

function anyLink(query, node) {
  return is(node, ['a', 'area', 'link']) && has(node, 'href');
}

function checked(query, node) {
  if (is(node, ['input', 'menuitem'])) {
    return (node.properties.type === 'checkbox' || node.properties.type === 'radio') && has(node, 'checked');
  }

  if (is(node, 'option')) return has(node, 'selected');
}

function dir(query, node, index, parent, state) {
  return state.direction === query.value;
}

function disabled(query, node) {
  return is(node, ['button', 'input', 'select', 'textarea', 'optgroup', 'option', 'menuitem', 'fieldset']) && has(node, 'disabled');
}

function required(query, node) {
  return is(node, ['input', 'textarea', 'select']) && has(node, 'required');
}

function readWrite(query, node, index, parent, state) {
  return is(node, ['input', 'textarea']) ? !has(node, 'readOnly') && !has(node, 'disabled') : state.editableOrEditingHost;
}

function root(query, node, index, parent, state) {
  return (!parent || parent.type === 'root') && (state.schema.space === 'html' || state.schema.space === 'svg') && is(node, ['html', 'svg']);
}

function scope(query, node, index, parent, state) {
  return is(node) && state.scopeElements.indexOf(node) > -1;
}

function empty(query, node) {
  return !someChildren(node, check);

  function check(child) {
    return child.type === 'element' || child.type === 'text';
  }
}

function blank(query, node) {
  return !someChildren(node, check);

  function check(child) {
    return child.type === 'element' || child.type === 'text' && !whitespace(child);
  }
}

function firstChild(query, node, index, parent, state) {
  assertDeep(state, query);
  return state.elementIndex === 0;
}

function lang(query, node, index, parent, state) {
  return state.language !== '' && state.language != null && bcp47Match.extendedFilter(state.language, commaSeparated.parse(query.value)).length;
}

function lastChild(query, node, index, parent, state) {
  assertDeep(state, query);
  return state.elementIndex === state.elementCount - 1;
}

function onlyChild(query, node, index, parent, state) {
  assertDeep(state, query);
  return state.elementCount === 1;
}

function nthChild(query, node, index, parent, state) {
  assertDeep(state, query);
  return query.value(state.elementIndex);
}

function nthLastChild(query, node, index, parent, state) {
  assertDeep(state, query);
  return query.value(state.elementCount - state.elementIndex - 1);
}

function nthOfType(query, node, index, parent, state) {
  assertDeep(state, query);
  return query.value(state.typeIndex);
}

function nthLastOfType(query, node, index, parent, state) {
  assertDeep(state, query);
  return query.value(state.typeCount - 1 - state.typeIndex);
}

function firstOfType(query, node, index, parent, state) {
  assertDeep(state, query);
  return state.typeIndex === 0;
}

function lastOfType(query, node, index, parent, state) {
  assertDeep(state, query);
  return state.typeIndex === state.typeCount - 1;
}

function onlyOfType(query, node, index, parent, state) {
  assertDeep(state, query);
  return state.typeCount === 1;
}

function someChildren(node, check) {
  var children = node.children;
  var index = -1;

  while (++index < children.length) {
    if (check(children[index])) return true;
  }
}
/* istanbul ignore next - Shouldn’t be invoked, parser gives correct data. */


function invalidPseudo() {
  throw new Error('Invalid pseudo-selector');
}

function unknownPseudo(query) {
  if (query.name) {
    throw new Error('Unknown pseudo-selector `' + query.name + '`');
  }

  throw new Error('Unexpected pseudo-element or empty pseudo-class');
}

function assertDeep(state, query) {
  if (state.shallow) {
    throw new Error('Cannot use `:' + query.name + '` without parent');
  }
}

function hasSelector(query, node, index, parent, state) {
  var shallow = state.shallow;
  var one = state.one;
  var scopeElements = state.scopeElements;
  var value = appendScope(query.value);
  var result;
  state.shallow = false;
  state.one = true;
  state.scopeElements = [node];
  result = anything(value, node, state)[0];
  state.shallow = shallow;
  state.one = one;
  state.scopeElements = scopeElements;
  return result;
}

function appendScope(value) {
  var selector = value.type === 'ruleSet' ? {
    type: 'selectors',
    selectors: [value]
  } : value;
  var index = -1;
  var rule;

  while (++index < selector.selectors.length) {
    rule = selector.selectors[index].rule;
    rule.nestingOperator = null;

    if (!rule.pseudos || rule.pseudos.length !== 1 || rule.pseudos[0].name !== 'scope') {
      selector.selectors[index] = {
        type: 'rule',
        rule: rule,
        pseudos: [{
          name: 'scope'
        }]
      };
    }
  }

  return selector;
}

/***/ }),

/***/ 8636:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = test;

var attributes = __webpack_require__(1230);

var classNames = __webpack_require__(5060);

var id = __webpack_require__(593);

var name = __webpack_require__(2629);

var pseudos = __webpack_require__(1647);

function test(query, node, index, parent, state) {
  return node && node.type === 'element' && (!query.tagName || name(query, node)) && (!query.classNames || classNames(query, node)) && (!query.id || id(query, node)) && (!query.attrs || attributes(query, node, state.schema)) && (!query.pseudos || pseudos(query, node, index, parent, state));
}

/***/ }),

/***/ 7861:
/***/ ((module) => {



module.exports = interElementWhiteSpace; // HTML white-space expression.
// See <https://html.spec.whatwg.org/#space-character>.

var re = /[ \t\n\f\r]/g;

function interElementWhiteSpace(node) {
  var value;

  if (node && typeof node === 'object' && node.type === 'text') {
    value = node.value || '';
  } else if (typeof node === 'string') {
    value = node;
  } else {
    return false;
  }

  return value.replace(re, '') === '';
}

/***/ }),

/***/ 5544:
/***/ ((module) => {



module.exports = factory;
var noop = Function.prototype;
var own = {}.hasOwnProperty; // Handle values based on a property.

function factory(key, options) {
  var settings = options || {};

  function one(value) {
    var fn = one.invalid;
    var handlers = one.handlers;

    if (value && own.call(value, key)) {
      fn = own.call(handlers, value[key]) ? handlers[value[key]] : one.unknown;
    }

    return (fn || noop).apply(this, arguments);
  }

  one.handlers = settings.handlers || {};
  one.invalid = settings.invalid;
  one.unknown = settings.unknown;
  return one;
}

/***/ }),

/***/ 6473:
/***/ ((__unused_webpack_module, exports) => {



exports.parse = parse;
exports.stringify = stringify;
var empty = '';
var space = ' ';
var whiteSpace = /[ \t\n\r\f]+/g;

function parse(value) {
  var input = String(value || empty).trim();
  return input === empty ? [] : input.split(whiteSpace);
}

function stringify(values) {
  return values.join(space).trim();
}

/***/ }),

/***/ 7034:
/***/ ((module) => {

var NO_VALIDATOR = 'No validator for ';
var DESCRIPTION = Symbol('description');
var VALUE = Symbol('value');

function Base() {}

Base.implement = function (name) {
  function Opt(val) {
    if (!(this instanceof Opt)) return new Opt(val);
    this[VALUE] = val;
    this[DESCRIPTION] = name || 'stdopt';
  }

  Object.setPrototypeOf(Opt.prototype, Base.prototype);
  Object.defineProperty(Opt, 'super_', {
    value: Base,
    configurable: true,
    writable: true
  });
  return Opt;
};

Base.unwrap = function (opt) {
  return opt[VALUE];
};

Base.value = function (opt) {
  return Base.prototype.value.call(opt);
};

Base.prototype.or = function (fallback) {
  if (typeof this.constructor.isValid !== 'function') {
    throw new TypeError(NO_VALIDATOR + this[DESCRIPTION]);
  }

  return this.constructor.isValid(this[VALUE]) ? this : new this.constructor(fallback);
};

Base.prototype.value = function () {
  if (typeof this.constructor.isValid !== 'function') {
    throw new TypeError(NO_VALIDATOR + this[DESCRIPTION]);
  }

  if (this.constructor.isValid(this[VALUE])) {
    return this[VALUE];
  }

  throw new TypeError("Invalid value ".concat(this, " (should be ").concat(this[DESCRIPTION], ")"));
};

Base.prototype.list = function () {
  return [this.value()];
};

Base.prototype.toString = function () {
  var val = this[VALUE];
  var ellipsis = '';

  if (typeof val === 'string' || val instanceof String) {
    val = val.substring(0, 27);
    ellipsis = val.length > 27 ? '...' : '';
  } else if (Array.isArray(val)) {
    val = val.slice(0, 2);
    ellipsis = val.length > 2 ? ',...' : '';
  }

  return String(val) + ellipsis;
};

module.exports = Base;

/***/ }),

/***/ 7782:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Base = __webpack_require__(7034);

var Boolean = Base.implement('boolean');

Boolean.isValid = function (b) {
  if (typeof b !== 'string') {
    return b === false || b === true;
  }

  return b.toLowerCase() === 'false' || b.toLowerCase() === 'true';
};

Boolean.prototype.value = function () {
  var str = String(Base.value(this));

  switch (str.toLowerCase()) {
    case 'false':
      return false;

    case 'true':
      return true;

    default:
      throw new Error('Illegal state');
  }
};

module.exports = Boolean;

/***/ }),

/***/ 1210:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Base = __webpack_require__(7034);

var isArrayish = __webpack_require__(6002);

var Hash = Base.implement('hash');

Hash.isValid = function (o) {
  return typeof o === 'object' && !isArrayish(o);
};

module.exports = Hash;

/***/ }),

/***/ 4607:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(1571);
module.exports.boolean = __webpack_require__(7782);
module.exports.hash = __webpack_require__(1210);
module.exports.list = __webpack_require__(1329);
module.exports.number = __webpack_require__(5510);
module.exports.opt = __webpack_require__(1571);
module.exports.string = __webpack_require__(371);

/***/ }),

/***/ 1329:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Base = __webpack_require__(7034);

var isArrayish = __webpack_require__(6002);

var List = Base.implement('list');
List.isValid = isArrayish;

List.prototype.value = List.prototype.list = function () {
  var list = Base.value(this);
  return Array.isArray(list) ? list : Array.from(list);
};

module.exports = List;

/***/ }),

/***/ 5510:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Base = __webpack_require__(7034);

var Num = Base.implement('number');

Num.isValid = function (n) {
  return !Number.isNaN(Number(n));
};

Num.prototype.value = function () {
  return Number(Base.value(this));
};

module.exports = Num;

/***/ }),

/***/ 1571:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Base = __webpack_require__(7034);

var Opt = Base.implement('defined');

Opt.isValid = function (val) {
  return val !== undefined && val !== null;
};

module.exports = Opt;

/***/ }),

/***/ 371:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Base = __webpack_require__(7034);

var Str = Base.implement('string');

Str.isValid = function (s) {
  return typeof s === 'string' || typeof s === 'number' || s instanceof String;
};

Str.prototype.value = function () {
  return String(Base.value(this));
};

module.exports = Str;

/***/ }),

/***/ 2872:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var parse = __webpack_require__(7007);
/**
 * Parses inline style to object.
 *
 * @example
 * // returns { 'line-height': '42' }
 * StyleToObject('line-height: 42;');
 *
 * @param  {String}      style      - The inline style.
 * @param  {Function}    [iterator] - The iterator function.
 * @return {null|Object}
 */


function StyleToObject(style, iterator) {
  var output = null;

  if (!style || typeof style !== 'string') {
    return output;
  }

  var declaration;
  var declarations = parse(style);
  var hasIterator = typeof iterator === 'function';
  var property;
  var value;

  for (var i = 0, len = declarations.length; i < len; i++) {
    declaration = declarations[i];
    property = declaration.property;
    value = declaration.value;

    if (hasIterator) {
      iterator(property, value, declaration);
    } else if (value) {
      output || (output = {});
      output[property] = value;
    }
  }

  return output;
}

module.exports = StyleToObject;

/***/ }),

/***/ 8808:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(7938);

/***/ }),

/***/ 7938:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var net = __webpack_require__(1808);

var tls = __webpack_require__(4404);

var http = __webpack_require__(3685);

var https = __webpack_require__(5687);

var events = __webpack_require__(2361);

var assert = __webpack_require__(9491);

var util = __webpack_require__(3837);

exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;

function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];
  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);

    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];

      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }

    socket.destroy();
    self.removeSocket(socket);
  });
}

util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({
    request: req
  }, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  } // If we are under maxSockets create a new one.


  self.createSocket(options, function (socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);
  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });

  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }

  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' + new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6

  connectReq.once('response', onResponse); // for v0.6

  connectReq.once('upgrade', onUpgrade); // for v0.6

  connectReq.once('connect', onConnect); // for v0.7 or later

  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function () {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }

    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }

    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();
    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket);

  if (pos === -1) {
    return;
  }

  this.sockets.splice(pos, 1);
  var pending = this.requests.shift();

  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function (socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function (socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    }); // 0 is dummy port for v0.6

    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}

function toOptions(host, port, localAddress) {
  if (typeof host === 'string') {
    // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }

  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];

    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);

      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];

        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }

  return target;
}

var debug;

if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function debug() {
    var args = Array.prototype.slice.call(arguments);

    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }

    console.error.apply(console, args);
  };
} else {
  debug = function debug() {};
}

exports.debug = debug; // for test

/***/ }),

/***/ 9494:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = visit;

var visitParents = __webpack_require__(1963);

var CONTINUE = visitParents.CONTINUE;
var SKIP = visitParents.SKIP;
var EXIT = visitParents.EXIT;
visit.CONTINUE = CONTINUE;
visit.SKIP = SKIP;
visit.EXIT = EXIT;

function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  visitParents(tree, test, overload, reverse);

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    var index = parent ? parent.children.indexOf(node) : null;
    return visitor(node, index, parent);
  }
}

/***/ }),

/***/ 8275:
/***/ ((module) => {



module.exports = convert;

function convert(test) {
  if (test == null) {
    return ok;
  }

  if (typeof test === 'string') {
    return typeFactory(test);
  }

  if (typeof test === 'object') {
    return 'length' in test ? anyFactory(test) : allFactory(test);
  }

  if (typeof test === 'function') {
    return test;
  }

  throw new Error('Expected function, string, or object as test');
} // Utility assert each property in `test` is represented in `node`, and each
// values are strictly equal.


function allFactory(test) {
  return all;

  function all(node) {
    var key;

    for (key in test) {
      if (node[key] !== test[key]) return false;
    }

    return true;
  }
}

function anyFactory(tests) {
  var checks = [];
  var index = -1;

  while (++index < tests.length) {
    checks[index] = convert(tests[index]);
  }

  return any;

  function any() {
    var index = -1;

    while (++index < checks.length) {
      if (checks[index].apply(this, arguments)) {
        return true;
      }
    }

    return false;
  }
} // Utility to convert a string into a function which checks a given node’s type
// for said string.


function typeFactory(test) {
  return type;

  function type(node) {
    return Boolean(node && node.type === test);
  }
} // Utility to return true.


function ok() {
  return true;
}

/***/ }),

/***/ 7500:
/***/ ((module) => {

module.exports = color;

function color(d) {
  return "\x1B[33m" + d + "\x1B[39m";
}

/***/ }),

/***/ 1963:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = visitParents;

var convert = __webpack_require__(8275);

var color = __webpack_require__(7500);

var CONTINUE = true;
var SKIP = 'skip';
var EXIT = false;
visitParents.CONTINUE = CONTINUE;
visitParents.SKIP = SKIP;
visitParents.EXIT = EXIT;

function visitParents(tree, test, visitor, reverse) {
  var step;
  var is;

  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  is = convert(test);
  step = reverse ? -1 : 1;
  factory(tree, null, [])();

  function factory(node, index, parents) {
    var value = typeof node === 'object' && node !== null ? node : {};
    var name;

    if (typeof value.type === 'string') {
      name = typeof value.tagName === 'string' ? value.tagName : typeof value.name === 'string' ? value.name : undefined;
      visit.displayName = 'node (' + color(value.type + (name ? '<' + name + '>' : '')) + ')';
    }

    return visit;

    function visit() {
      var grandparents = parents.concat(node);
      var result = [];
      var subresult;
      var offset;

      if (!test || is(node, index, parents[parents.length - 1] || null)) {
        result = toResult(visitor(node, parents));

        if (result[0] === EXIT) {
          return result;
        }
      }

      if (node.children && result[0] !== SKIP) {
        offset = (reverse ? node.children.length : -1) + step;

        while (offset > -1 && offset < node.children.length) {
          subresult = factory(node.children[offset], offset, grandparents)();

          if (subresult[0] === EXIT) {
            return subresult;
          }

          offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;
        }
      }

      return result;
    }
  }
}

function toResult(value) {
  if (value !== null && typeof value === 'object' && 'length' in value) {
    return value;
  }

  if (typeof value === 'number') {
    return [CONTINUE, value];
  }

  return [value];
}

/***/ }),

/***/ 7385:
/***/ ((__unused_webpack_module, exports) => {



exports.fromCallback = function (fn) {
  return Object.defineProperty(function () {
    var _this = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (typeof args[args.length - 1] === 'function') fn.apply(this, args);else {
      return new Promise(function (resolve, reject) {
        fn.call.apply(fn, [_this].concat(args, [function (err, res) {
          return err != null ? reject(err) : resolve(res);
        }]));
      });
    }
  }, 'name', {
    value: fn.name
  });
};

exports.fromPromise = function (fn) {
  return Object.defineProperty(function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var cb = args[args.length - 1];
    if (typeof cb !== 'function') return fn.apply(this, args);else fn.apply(this, args.slice(0, -1)).then(function (r) {
      return cb(null, r);
    }, cb);
  }, 'name', {
    value: fn.name
  });
};

/***/ }),

/***/ 3450:
/***/ ((module) => {

module.exports = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
  var target = {};

  for (var i = 0; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
}

/***/ }),

/***/ 9491:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("assert");

/***/ }),

/***/ 2057:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("constants");

/***/ }),

/***/ 2361:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("events");

/***/ }),

/***/ 7147:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("fs");

/***/ }),

/***/ 3685:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("http");

/***/ }),

/***/ 5687:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("https");

/***/ }),

/***/ 1808:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("net");

/***/ }),

/***/ 2037:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("os");

/***/ }),

/***/ 1017:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("path");

/***/ }),

/***/ 2781:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("stream");

/***/ }),

/***/ 4404:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("tls");

/***/ }),

/***/ 7310:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("url");

/***/ }),

/***/ 3837:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("util");

/***/ }),

/***/ 7452:
/***/ ((module) => {

module.exports = JSON.parse('{"AElig":"Æ","AMP":"&","Aacute":"Á","Acirc":"Â","Agrave":"À","Aring":"Å","Atilde":"Ã","Auml":"Ä","COPY":"©","Ccedil":"Ç","ETH":"Ð","Eacute":"É","Ecirc":"Ê","Egrave":"È","Euml":"Ë","GT":">","Iacute":"Í","Icirc":"Î","Igrave":"Ì","Iuml":"Ï","LT":"<","Ntilde":"Ñ","Oacute":"Ó","Ocirc":"Ô","Ograve":"Ò","Oslash":"Ø","Otilde":"Õ","Ouml":"Ö","QUOT":"\\"","REG":"®","THORN":"Þ","Uacute":"Ú","Ucirc":"Û","Ugrave":"Ù","Uuml":"Ü","Yacute":"Ý","aacute":"á","acirc":"â","acute":"´","aelig":"æ","agrave":"à","amp":"&","aring":"å","atilde":"ã","auml":"ä","brvbar":"¦","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","curren":"¤","deg":"°","divide":"÷","eacute":"é","ecirc":"ê","egrave":"è","eth":"ð","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","iacute":"í","icirc":"î","iexcl":"¡","igrave":"ì","iquest":"¿","iuml":"ï","laquo":"«","lt":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","ntilde":"ñ","oacute":"ó","ocirc":"ô","ograve":"ò","ordf":"ª","ordm":"º","oslash":"ø","otilde":"õ","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","raquo":"»","reg":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","thorn":"þ","times":"×","uacute":"ú","ucirc":"û","ugrave":"ù","uml":"¨","uuml":"ü","yacute":"ý","yen":"¥","yuml":"ÿ"}');

/***/ }),

/***/ 2661:
/***/ ((module) => {

module.exports = JSON.parse('{"AEli":"Æ","AElig":"Æ","AM":"&","AMP":"&","Aacut":"Á","Aacute":"Á","Abreve":"Ă","Acir":"Â","Acirc":"Â","Acy":"А","Afr":"𝔄","Agrav":"À","Agrave":"À","Alpha":"Α","Amacr":"Ā","And":"⩓","Aogon":"Ą","Aopf":"𝔸","ApplyFunction":"⁡","Arin":"Å","Aring":"Å","Ascr":"𝒜","Assign":"≔","Atild":"Ã","Atilde":"Ã","Aum":"Ä","Auml":"Ä","Backslash":"∖","Barv":"⫧","Barwed":"⌆","Bcy":"Б","Because":"∵","Bernoullis":"ℬ","Beta":"Β","Bfr":"𝔅","Bopf":"𝔹","Breve":"˘","Bscr":"ℬ","Bumpeq":"≎","CHcy":"Ч","COP":"©","COPY":"©","Cacute":"Ć","Cap":"⋒","CapitalDifferentialD":"ⅅ","Cayleys":"ℭ","Ccaron":"Č","Ccedi":"Ç","Ccedil":"Ç","Ccirc":"Ĉ","Cconint":"∰","Cdot":"Ċ","Cedilla":"¸","CenterDot":"·","Cfr":"ℭ","Chi":"Χ","CircleDot":"⊙","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","Colon":"∷","Colone":"⩴","Congruent":"≡","Conint":"∯","ContourIntegral":"∮","Copf":"ℂ","Coproduct":"∐","CounterClockwiseContourIntegral":"∳","Cross":"⨯","Cscr":"𝒞","Cup":"⋓","CupCap":"≍","DD":"ⅅ","DDotrahd":"⤑","DJcy":"Ђ","DScy":"Ѕ","DZcy":"Џ","Dagger":"‡","Darr":"↡","Dashv":"⫤","Dcaron":"Ď","Dcy":"Д","Del":"∇","Delta":"Δ","Dfr":"𝔇","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","Diamond":"⋄","DifferentialD":"ⅆ","Dopf":"𝔻","Dot":"¨","DotDot":"⃜","DotEqual":"≐","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrow":"↓","DownArrowBar":"⤓","DownArrowUpArrow":"⇵","DownBreve":"̑","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVector":"↽","DownLeftVectorBar":"⥖","DownRightTeeVector":"⥟","DownRightVector":"⇁","DownRightVectorBar":"⥗","DownTee":"⊤","DownTeeArrow":"↧","Downarrow":"⇓","Dscr":"𝒟","Dstrok":"Đ","ENG":"Ŋ","ET":"Ð","ETH":"Ð","Eacut":"É","Eacute":"É","Ecaron":"Ě","Ecir":"Ê","Ecirc":"Ê","Ecy":"Э","Edot":"Ė","Efr":"𝔈","Egrav":"È","Egrave":"È","Element":"∈","Emacr":"Ē","EmptySmallSquare":"◻","EmptyVerySmallSquare":"▫","Eogon":"Ę","Eopf":"𝔼","Epsilon":"Ε","Equal":"⩵","EqualTilde":"≂","Equilibrium":"⇌","Escr":"ℰ","Esim":"⩳","Eta":"Η","Eum":"Ë","Euml":"Ë","Exists":"∃","ExponentialE":"ⅇ","Fcy":"Ф","Ffr":"𝔉","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","Fopf":"𝔽","ForAll":"∀","Fouriertrf":"ℱ","Fscr":"ℱ","GJcy":"Ѓ","G":">","GT":">","Gamma":"Γ","Gammad":"Ϝ","Gbreve":"Ğ","Gcedil":"Ģ","Gcirc":"Ĝ","Gcy":"Г","Gdot":"Ġ","Gfr":"𝔊","Gg":"⋙","Gopf":"𝔾","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","Gt":"≫","HARDcy":"Ъ","Hacek":"ˇ","Hat":"^","Hcirc":"Ĥ","Hfr":"ℌ","HilbertSpace":"ℋ","Hopf":"ℍ","HorizontalLine":"─","Hscr":"ℋ","Hstrok":"Ħ","HumpDownHump":"≎","HumpEqual":"≏","IEcy":"Е","IJlig":"Ĳ","IOcy":"Ё","Iacut":"Í","Iacute":"Í","Icir":"Î","Icirc":"Î","Icy":"И","Idot":"İ","Ifr":"ℑ","Igrav":"Ì","Igrave":"Ì","Im":"ℑ","Imacr":"Ī","ImaginaryI":"ⅈ","Implies":"⇒","Int":"∬","Integral":"∫","Intersection":"⋂","InvisibleComma":"⁣","InvisibleTimes":"⁢","Iogon":"Į","Iopf":"𝕀","Iota":"Ι","Iscr":"ℐ","Itilde":"Ĩ","Iukcy":"І","Ium":"Ï","Iuml":"Ï","Jcirc":"Ĵ","Jcy":"Й","Jfr":"𝔍","Jopf":"𝕁","Jscr":"𝒥","Jsercy":"Ј","Jukcy":"Є","KHcy":"Х","KJcy":"Ќ","Kappa":"Κ","Kcedil":"Ķ","Kcy":"К","Kfr":"𝔎","Kopf":"𝕂","Kscr":"𝒦","LJcy":"Љ","L":"<","LT":"<","Lacute":"Ĺ","Lambda":"Λ","Lang":"⟪","Laplacetrf":"ℒ","Larr":"↞","Lcaron":"Ľ","Lcedil":"Ļ","Lcy":"Л","LeftAngleBracket":"⟨","LeftArrow":"←","LeftArrowBar":"⇤","LeftArrowRightArrow":"⇆","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVector":"⇃","LeftDownVectorBar":"⥙","LeftFloor":"⌊","LeftRightArrow":"↔","LeftRightVector":"⥎","LeftTee":"⊣","LeftTeeArrow":"↤","LeftTeeVector":"⥚","LeftTriangle":"⊲","LeftTriangleBar":"⧏","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVector":"↿","LeftUpVectorBar":"⥘","LeftVector":"↼","LeftVectorBar":"⥒","Leftarrow":"⇐","Leftrightarrow":"⇔","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","LessLess":"⪡","LessSlantEqual":"⩽","LessTilde":"≲","Lfr":"𝔏","Ll":"⋘","Lleftarrow":"⇚","Lmidot":"Ŀ","LongLeftArrow":"⟵","LongLeftRightArrow":"⟷","LongRightArrow":"⟶","Longleftarrow":"⟸","Longleftrightarrow":"⟺","Longrightarrow":"⟹","Lopf":"𝕃","LowerLeftArrow":"↙","LowerRightArrow":"↘","Lscr":"ℒ","Lsh":"↰","Lstrok":"Ł","Lt":"≪","Map":"⤅","Mcy":"М","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","MinusPlus":"∓","Mopf":"𝕄","Mscr":"ℳ","Mu":"Μ","NJcy":"Њ","Nacute":"Ń","Ncaron":"Ň","Ncedil":"Ņ","Ncy":"Н","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","Nfr":"𝔑","NoBreak":"⁠","NonBreakingSpace":" ","Nopf":"ℕ","Not":"⫬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","NotLeftTriangle":"⋪","NotLeftTriangleBar":"⧏̸","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangle":"⋫","NotRightTriangleBar":"⧐̸","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","Nscr":"𝒩","Ntild":"Ñ","Ntilde":"Ñ","Nu":"Ν","OElig":"Œ","Oacut":"Ó","Oacute":"Ó","Ocir":"Ô","Ocirc":"Ô","Ocy":"О","Odblac":"Ő","Ofr":"𝔒","Ograv":"Ò","Ograve":"Ò","Omacr":"Ō","Omega":"Ω","Omicron":"Ο","Oopf":"𝕆","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","Or":"⩔","Oscr":"𝒪","Oslas":"Ø","Oslash":"Ø","Otild":"Õ","Otilde":"Õ","Otimes":"⨷","Oum":"Ö","Ouml":"Ö","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","PartialD":"∂","Pcy":"П","Pfr":"𝔓","Phi":"Φ","Pi":"Π","PlusMinus":"±","Poincareplane":"ℌ","Popf":"ℙ","Pr":"⪻","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","Prime":"″","Product":"∏","Proportion":"∷","Proportional":"∝","Pscr":"𝒫","Psi":"Ψ","QUO":"\\"","QUOT":"\\"","Qfr":"𝔔","Qopf":"ℚ","Qscr":"𝒬","RBarr":"⤐","RE":"®","REG":"®","Racute":"Ŕ","Rang":"⟫","Rarr":"↠","Rarrtl":"⤖","Rcaron":"Ř","Rcedil":"Ŗ","Rcy":"Р","Re":"ℜ","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","Rfr":"ℜ","Rho":"Ρ","RightAngleBracket":"⟩","RightArrow":"→","RightArrowBar":"⇥","RightArrowLeftArrow":"⇄","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVector":"⇂","RightDownVectorBar":"⥕","RightFloor":"⌋","RightTee":"⊢","RightTeeArrow":"↦","RightTeeVector":"⥛","RightTriangle":"⊳","RightTriangleBar":"⧐","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVector":"↾","RightUpVectorBar":"⥔","RightVector":"⇀","RightVectorBar":"⥓","Rightarrow":"⇒","Ropf":"ℝ","RoundImplies":"⥰","Rrightarrow":"⇛","Rscr":"ℛ","Rsh":"↱","RuleDelayed":"⧴","SHCHcy":"Щ","SHcy":"Ш","SOFTcy":"Ь","Sacute":"Ś","Sc":"⪼","Scaron":"Š","Scedil":"Ş","Scirc":"Ŝ","Scy":"С","Sfr":"𝔖","ShortDownArrow":"↓","ShortLeftArrow":"←","ShortRightArrow":"→","ShortUpArrow":"↑","Sigma":"Σ","SmallCircle":"∘","Sopf":"𝕊","Sqrt":"√","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","Sscr":"𝒮","Star":"⋆","Sub":"⋐","Subset":"⋐","SubsetEqual":"⊆","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","SuchThat":"∋","Sum":"∑","Sup":"⋑","Superset":"⊃","SupersetEqual":"⊇","Supset":"⋑","THOR":"Þ","THORN":"Þ","TRADE":"™","TSHcy":"Ћ","TScy":"Ц","Tab":"\\t","Tau":"Τ","Tcaron":"Ť","Tcedil":"Ţ","Tcy":"Т","Tfr":"𝔗","Therefore":"∴","Theta":"Θ","ThickSpace":"  ","ThinSpace":" ","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","Topf":"𝕋","TripleDot":"⃛","Tscr":"𝒯","Tstrok":"Ŧ","Uacut":"Ú","Uacute":"Ú","Uarr":"↟","Uarrocir":"⥉","Ubrcy":"Ў","Ubreve":"Ŭ","Ucir":"Û","Ucirc":"Û","Ucy":"У","Udblac":"Ű","Ufr":"𝔘","Ugrav":"Ù","Ugrave":"Ù","Umacr":"Ū","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","Uopf":"𝕌","UpArrow":"↑","UpArrowBar":"⤒","UpArrowDownArrow":"⇅","UpDownArrow":"↕","UpEquilibrium":"⥮","UpTee":"⊥","UpTeeArrow":"↥","Uparrow":"⇑","Updownarrow":"⇕","UpperLeftArrow":"↖","UpperRightArrow":"↗","Upsi":"ϒ","Upsilon":"Υ","Uring":"Ů","Uscr":"𝒰","Utilde":"Ũ","Uum":"Ü","Uuml":"Ü","VDash":"⊫","Vbar":"⫫","Vcy":"В","Vdash":"⊩","Vdashl":"⫦","Vee":"⋁","Verbar":"‖","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","Vopf":"𝕍","Vscr":"𝒱","Vvdash":"⊪","Wcirc":"Ŵ","Wedge":"⋀","Wfr":"𝔚","Wopf":"𝕎","Wscr":"𝒲","Xfr":"𝔛","Xi":"Ξ","Xopf":"𝕏","Xscr":"𝒳","YAcy":"Я","YIcy":"Ї","YUcy":"Ю","Yacut":"Ý","Yacute":"Ý","Ycirc":"Ŷ","Ycy":"Ы","Yfr":"𝔜","Yopf":"𝕐","Yscr":"𝒴","Yuml":"Ÿ","ZHcy":"Ж","Zacute":"Ź","Zcaron":"Ž","Zcy":"З","Zdot":"Ż","ZeroWidthSpace":"​","Zeta":"Ζ","Zfr":"ℨ","Zopf":"ℤ","Zscr":"𝒵","aacut":"á","aacute":"á","abreve":"ă","ac":"∾","acE":"∾̳","acd":"∿","acir":"â","acirc":"â","acut":"´","acute":"´","acy":"а","aeli":"æ","aelig":"æ","af":"⁡","afr":"𝔞","agrav":"à","agrave":"à","alefsym":"ℵ","aleph":"ℵ","alpha":"α","amacr":"ā","amalg":"⨿","am":"&","amp":"&","and":"∧","andand":"⩕","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsd":"∡","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","aogon":"ą","aopf":"𝕒","ap":"≈","apE":"⩰","apacir":"⩯","ape":"≊","apid":"≋","apos":"\'","approx":"≈","approxeq":"≊","arin":"å","aring":"å","ascr":"𝒶","ast":"*","asymp":"≈","asympeq":"≍","atild":"ã","atilde":"ã","aum":"ä","auml":"ä","awconint":"∳","awint":"⨑","bNot":"⫭","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","barvee":"⊽","barwed":"⌅","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","beta":"β","beth":"ℶ","between":"≬","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bnot":"⌐","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxDL":"╗","boxDR":"╔","boxDl":"╖","boxDr":"╓","boxH":"═","boxHD":"╦","boxHU":"╩","boxHd":"╤","boxHu":"╧","boxUL":"╝","boxUR":"╚","boxUl":"╜","boxUr":"╙","boxV":"║","boxVH":"╬","boxVL":"╣","boxVR":"╠","boxVh":"╫","boxVl":"╢","boxVr":"╟","boxbox":"⧉","boxdL":"╕","boxdR":"╒","boxdl":"┐","boxdr":"┌","boxh":"─","boxhD":"╥","boxhU":"╨","boxhd":"┬","boxhu":"┴","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxuL":"╛","boxuR":"╘","boxul":"┘","boxur":"└","boxv":"│","boxvH":"╪","boxvL":"╡","boxvR":"╞","boxvh":"┼","boxvl":"┤","boxvr":"├","bprime":"‵","breve":"˘","brvba":"¦","brvbar":"¦","bscr":"𝒷","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsol":"\\\\","bsolb":"⧅","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","bumpeq":"≏","cacute":"ć","cap":"∩","capand":"⩄","capbrcup":"⩉","capcap":"⩋","capcup":"⩇","capdot":"⩀","caps":"∩︀","caret":"⁁","caron":"ˇ","ccaps":"⩍","ccaron":"č","ccedi":"ç","ccedil":"ç","ccirc":"ĉ","ccups":"⩌","ccupssm":"⩐","cdot":"ċ","cedi":"¸","cedil":"¸","cemptyv":"⦲","cen":"¢","cent":"¢","centerdot":"·","cfr":"𝔠","chcy":"ч","check":"✓","checkmark":"✓","chi":"χ","cir":"○","cirE":"⧃","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledR":"®","circledS":"Ⓢ","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","clubs":"♣","clubsuit":"♣","colon":":","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","conint":"∮","copf":"𝕔","coprod":"∐","cop":"©","copy":"©","copysr":"℗","crarr":"↵","cross":"✗","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cup":"∪","cupbrcap":"⩈","cupcap":"⩆","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curre":"¤","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dArr":"⇓","dHar":"⥥","dagger":"†","daleth":"ℸ","darr":"↓","dash":"‐","dashv":"⊣","dbkarow":"⤏","dblac":"˝","dcaron":"ď","dcy":"д","dd":"ⅆ","ddagger":"‡","ddarr":"⇊","ddotseq":"⩷","de":"°","deg":"°","delta":"δ","demptyv":"⦱","dfisht":"⥿","dfr":"𝔡","dharl":"⇃","dharr":"⇂","diam":"⋄","diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","digamma":"ϝ","disin":"⋲","div":"÷","divid":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","dopf":"𝕕","dot":"˙","doteq":"≐","doteqdot":"≑","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","downarrow":"↓","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","dscr":"𝒹","dscy":"ѕ","dsol":"⧶","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","dzcy":"џ","dzigrarr":"⟿","eDDot":"⩷","eDot":"≑","eacut":"é","eacute":"é","easter":"⩮","ecaron":"ě","ecir":"ê","ecirc":"ê","ecolon":"≕","ecy":"э","edot":"ė","ee":"ⅇ","efDot":"≒","efr":"𝔢","eg":"⪚","egrav":"è","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","emacr":"ē","empty":"∅","emptyset":"∅","emptyv":"∅","emsp13":" ","emsp14":" ","emsp":" ","eng":"ŋ","ensp":" ","eogon":"ę","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","equals":"=","equest":"≟","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erDot":"≓","erarr":"⥱","escr":"ℯ","esdot":"≐","esim":"≂","eta":"η","et":"ð","eth":"ð","eum":"ë","euml":"ë","euro":"€","excl":"!","exist":"∃","expectation":"ℰ","exponentiale":"ⅇ","fallingdotseq":"≒","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","ffr":"𝔣","filig":"ﬁ","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","fopf":"𝕗","forall":"∀","fork":"⋔","forkv":"⫙","fpartint":"⨍","frac1":"¼","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac3":"¾","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","gE":"≧","gEl":"⪌","gacute":"ǵ","gamma":"γ","gammad":"ϝ","gap":"⪆","gbreve":"ğ","gcirc":"ĝ","gcy":"г","gdot":"ġ","ge":"≥","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","ges":"⩾","gescc":"⪩","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","gfr":"𝔤","gg":"≫","ggg":"⋙","gimel":"ℷ","gjcy":"ѓ","gl":"≷","glE":"⪒","gla":"⪥","glj":"⪤","gnE":"≩","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gneq":"⪈","gneqq":"≩","gnsim":"⋧","gopf":"𝕘","grave":"`","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","g":">","gt":">","gtcc":"⪧","gtcir":"⩺","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","hArr":"⇔","hairsp":" ","half":"½","hamilt":"ℋ","hardcy":"ъ","harr":"↔","harrcir":"⥈","harrw":"↭","hbar":"ℏ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","horbar":"―","hscr":"𝒽","hslash":"ℏ","hstrok":"ħ","hybull":"⁃","hyphen":"‐","iacut":"í","iacute":"í","ic":"⁣","icir":"î","icirc":"î","icy":"и","iecy":"е","iexc":"¡","iexcl":"¡","iff":"⇔","ifr":"𝔦","igrav":"ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","ijlig":"ĳ","imacr":"ī","image":"ℑ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","imof":"⊷","imped":"Ƶ","in":"∈","incare":"℅","infin":"∞","infintie":"⧝","inodot":"ı","int":"∫","intcal":"⊺","integers":"ℤ","intercal":"⊺","intlarhk":"⨗","intprod":"⨼","iocy":"ё","iogon":"į","iopf":"𝕚","iota":"ι","iprod":"⨼","iques":"¿","iquest":"¿","iscr":"𝒾","isin":"∈","isinE":"⋹","isindot":"⋵","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","itilde":"ĩ","iukcy":"і","ium":"ï","iuml":"ï","jcirc":"ĵ","jcy":"й","jfr":"𝔧","jmath":"ȷ","jopf":"𝕛","jscr":"𝒿","jsercy":"ј","jukcy":"є","kappa":"κ","kappav":"ϰ","kcedil":"ķ","kcy":"к","kfr":"𝔨","kgreen":"ĸ","khcy":"х","kjcy":"ќ","kopf":"𝕜","kscr":"𝓀","lAarr":"⇚","lArr":"⇐","lAtail":"⤛","lBarr":"⤎","lE":"≦","lEg":"⪋","lHar":"⥢","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","lambda":"λ","lang":"⟨","langd":"⦑","langle":"⟨","lap":"⪅","laqu":"«","laquo":"«","larr":"←","larrb":"⇤","larrbfs":"⤟","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","lat":"⪫","latail":"⤙","late":"⪭","lates":"⪭︀","lbarr":"⤌","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","lcaron":"ľ","lcedil":"ļ","lceil":"⌈","lcub":"{","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","leftarrow":"←","leftarrowtail":"↢","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","leftthreetimes":"⋋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","les":"⩽","lescc":"⪨","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","lessgtr":"≶","lesssim":"≲","lfisht":"⥼","lfloor":"⌊","lfr":"𝔩","lg":"≶","lgE":"⪑","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","ljcy":"љ","ll":"≪","llarr":"⇇","llcorner":"⌞","llhard":"⥫","lltri":"◺","lmidot":"ŀ","lmoust":"⎰","lmoustache":"⎰","lnE":"≨","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","longleftrightarrow":"⟷","longmapsto":"⟼","longrightarrow":"⟶","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","lstrok":"ł","l":"<","lt":"<","ltcc":"⪦","ltcir":"⩹","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltrPar":"⦖","ltri":"◃","ltrie":"⊴","ltrif":"◂","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","mDDot":"∺","mac":"¯","macr":"¯","male":"♂","malt":"✠","maltese":"✠","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","mcy":"м","mdash":"—","measuredangle":"∡","mfr":"𝔪","mho":"℧","micr":"µ","micro":"µ","mid":"∣","midast":"*","midcir":"⫰","middo":"·","middot":"·","minus":"−","minusb":"⊟","minusd":"∸","minusdu":"⨪","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","mopf":"𝕞","mp":"∓","mscr":"𝓂","mstpos":"∾","mu":"μ","multimap":"⊸","mumap":"⊸","nGg":"⋙̸","nGt":"≫⃒","nGtv":"≫̸","nLeftarrow":"⇍","nLeftrightarrow":"⇎","nLl":"⋘̸","nLt":"≪⃒","nLtv":"≪̸","nRightarrow":"⇏","nVDash":"⊯","nVdash":"⊮","nabla":"∇","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natur":"♮","natural":"♮","naturals":"ℕ","nbs":" ","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","ncaron":"ň","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","ncy":"н","ndash":"–","ne":"≠","neArr":"⇗","nearhk":"⤤","nearr":"↗","nearrow":"↗","nedot":"≐̸","nequiv":"≢","nesear":"⤨","nesim":"≂̸","nexist":"∄","nexists":"∄","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","ngsim":"≵","ngt":"≯","ngtr":"≯","nhArr":"⇎","nharr":"↮","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","njcy":"њ","nlArr":"⇍","nlE":"≦̸","nlarr":"↚","nldr":"‥","nle":"≰","nleftarrow":"↚","nleftrightarrow":"↮","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nlsim":"≴","nlt":"≮","nltri":"⋪","nltrie":"⋬","nmid":"∤","nopf":"𝕟","no":"¬","not":"¬","notin":"∉","notinE":"⋹̸","notindot":"⋵̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","npar":"∦","nparallel":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","npre":"⪯̸","nprec":"⊀","npreceq":"⪯̸","nrArr":"⇏","nrarr":"↛","nrarrc":"⤳̸","nrarrw":"↝̸","nrightarrow":"↛","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","ntild":"ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","nu":"ν","num":"#","numero":"№","numsp":" ","nvDash":"⊭","nvHarr":"⤄","nvap":"≍⃒","nvdash":"⊬","nvge":"≥⃒","nvgt":">⃒","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwArr":"⇖","nwarhk":"⤣","nwarr":"↖","nwarrow":"↖","nwnear":"⤧","oS":"Ⓢ","oacut":"ó","oacute":"ó","oast":"⊛","ocir":"ô","ocirc":"ô","ocy":"о","odash":"⊝","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","oelig":"œ","ofcir":"⦿","ofr":"𝔬","ogon":"˛","ograv":"ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","omacr":"ō","omega":"ω","omicron":"ο","omid":"⦶","ominus":"⊖","oopf":"𝕠","opar":"⦷","operp":"⦹","oplus":"⊕","or":"∨","orarr":"↻","ord":"º","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oscr":"ℴ","oslas":"ø","oslash":"ø","osol":"⊘","otild":"õ","otilde":"õ","otimes":"⊗","otimesas":"⨶","oum":"ö","ouml":"ö","ovbar":"⌽","par":"¶","para":"¶","parallel":"∥","parsim":"⫳","parsl":"⫽","part":"∂","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","pfr":"𝔭","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plus":"+","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plusdo":"∔","plusdu":"⨥","pluse":"⩲","plusm":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","pointint":"⨕","popf":"𝕡","poun":"£","pound":"£","pr":"≺","prE":"⪳","prap":"⪷","prcue":"≼","pre":"⪯","prec":"≺","precapprox":"⪷","preccurlyeq":"≼","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","precsim":"≾","prime":"′","primes":"ℙ","prnE":"⪵","prnap":"⪹","prnsim":"⋨","prod":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","propto":"∝","prsim":"≾","prurel":"⊰","pscr":"𝓅","psi":"ψ","puncsp":" ","qfr":"𝔮","qint":"⨌","qopf":"𝕢","qprime":"⁗","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quo":"\\"","quot":"\\"","rAarr":"⇛","rArr":"⇒","rAtail":"⤜","rBarr":"⤏","rHar":"⥤","race":"∽̱","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","rangd":"⦒","range":"⦥","rangle":"⟩","raqu":"»","raquo":"»","rarr":"→","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","rarrtl":"↣","rarrw":"↝","ratail":"⤚","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","rcaron":"ř","rcedil":"ŗ","rceil":"⌉","rcub":"}","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","rect":"▭","re":"®","reg":"®","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","rhard":"⇁","rharu":"⇀","rharul":"⥬","rho":"ρ","rhov":"ϱ","rightarrow":"→","rightarrowtail":"↣","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","rightthreetimes":"⋌","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoust":"⎱","rmoustache":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","roplus":"⨮","rotimes":"⨵","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","rsaquo":"›","rscr":"𝓇","rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","ruluhar":"⥨","rx":"℞","sacute":"ś","sbquo":"‚","sc":"≻","scE":"⪴","scap":"⪸","scaron":"š","sccue":"≽","sce":"⪰","scedil":"ş","scirc":"ŝ","scnE":"⪶","scnap":"⪺","scnsim":"⋩","scpolint":"⨓","scsim":"≿","scy":"с","sdot":"⋅","sdotb":"⊡","sdote":"⩦","seArr":"⇘","searhk":"⤥","searr":"↘","searrow":"↘","sec":"§","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","sfr":"𝔰","sfrown":"⌢","sharp":"♯","shchcy":"щ","shcy":"ш","shortmid":"∣","shortparallel":"∥","sh":"­","shy":"­","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","softcy":"ь","sol":"/","solb":"⧄","solbar":"⌿","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","squ":"□","square":"□","squarf":"▪","squf":"▪","srarr":"→","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","subE":"⫅","subdot":"⪽","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","subseteq":"⊆","subseteqq":"⫅","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succ":"≻","succapprox":"⪸","succcurlyeq":"≽","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","sum":"∑","sung":"♪","sup":"⊃","sup1":"¹","sup2":"²","sup3":"³","supE":"⫆","supdot":"⪾","supdsub":"⫘","supe":"⊇","supedot":"⫄","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swArr":"⇙","swarhk":"⤦","swarr":"↙","swarrow":"↙","swnwar":"⤪","szli":"ß","szlig":"ß","target":"⌖","tau":"τ","tbrk":"⎴","tcaron":"ť","tcedil":"ţ","tcy":"т","tdot":"⃛","telrec":"⌕","tfr":"𝔱","there4":"∴","therefore":"∴","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","thinsp":" ","thkap":"≈","thksim":"∼","thor":"þ","thorn":"þ","tilde":"˜","time":"×","times":"×","timesb":"⊠","timesbar":"⨱","timesd":"⨰","tint":"∭","toea":"⤨","top":"⊤","topbot":"⌶","topcir":"⫱","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","tscr":"𝓉","tscy":"ц","tshcy":"ћ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","uArr":"⇑","uHar":"⥣","uacut":"ú","uacute":"ú","uarr":"↑","ubrcy":"ў","ubreve":"ŭ","ucir":"û","ucirc":"û","ucy":"у","udarr":"⇅","udblac":"ű","udhar":"⥮","ufisht":"⥾","ufr":"𝔲","ugrav":"ù","ugrave":"ù","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","umacr":"ū","um":"¨","uml":"¨","uogon":"ų","uopf":"𝕦","uparrow":"↑","updownarrow":"↕","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","upsi":"υ","upsih":"ϒ","upsilon":"υ","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","uring":"ů","urtri":"◹","uscr":"𝓊","utdot":"⋰","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","uum":"ü","uuml":"ü","uwangle":"⦧","vArr":"⇕","vBar":"⫨","vBarv":"⫩","vDash":"⊨","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vcy":"в","vdash":"⊢","vee":"∨","veebar":"⊻","veeeq":"≚","vellip":"⋮","verbar":"|","vert":"|","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","vopf":"𝕧","vprop":"∝","vrtri":"⊳","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","vzigzag":"⦚","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","wedgeq":"≙","weierp":"℘","wfr":"𝔴","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","xfr":"𝔵","xhArr":"⟺","xharr":"⟷","xi":"ξ","xlArr":"⟸","xlarr":"⟵","xmap":"⟼","xnis":"⋻","xodot":"⨀","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrArr":"⟹","xrarr":"⟶","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","yacut":"ý","yacute":"ý","yacy":"я","ycirc":"ŷ","ycy":"ы","ye":"¥","yen":"¥","yfr":"𝔶","yicy":"ї","yopf":"𝕪","yscr":"𝓎","yucy":"ю","yum":"ÿ","yuml":"ÿ","zacute":"ź","zcaron":"ž","zcy":"з","zdot":"ż","zeetrf":"ℨ","zeta":"ζ","zfr":"𝔷","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","zscr":"𝓏","zwj":"‍","zwnj":"‌"}');

/***/ }),

/***/ 3580:
/***/ ((module) => {

module.exports = JSON.parse('{"0":"�","128":"€","130":"‚","131":"ƒ","132":"„","133":"…","134":"†","135":"‡","136":"ˆ","137":"‰","138":"Š","139":"‹","140":"Œ","142":"Ž","145":"‘","146":"’","147":"“","148":"”","149":"•","150":"–","151":"—","152":"˜","153":"™","154":"š","155":"›","156":"œ","158":"ž","159":"Ÿ"}');

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__webpack_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {

// NAMESPACE OBJECT: ./node_modules/rehype-document/node_modules/property-information/lib/util/types.js
var types_namespaceObject = {};
__webpack_require__.r(types_namespaceObject);
__webpack_require__.d(types_namespaceObject, {
  "boolean": () => (_boolean),
  "booleanish": () => (booleanish),
  "commaOrSpaceSeparated": () => (commaOrSpaceSeparated),
  "commaSeparated": () => (commaSeparated),
  "number": () => (number),
  "overloadedBoolean": () => (overloadedBoolean),
  "spaceSeparated": () => (spaceSeparated)
});

// NAMESPACE OBJECT: ./node_modules/hast-util-to-html/node_modules/property-information/lib/util/types.js
var util_types_namespaceObject = {};
__webpack_require__.r(util_types_namespaceObject);
__webpack_require__.d(util_types_namespaceObject, {
  "boolean": () => (types_boolean),
  "booleanish": () => (types_booleanish),
  "commaOrSpaceSeparated": () => (types_commaOrSpaceSeparated),
  "commaSeparated": () => (types_commaSeparated),
  "number": () => (types_number),
  "overloadedBoolean": () => (types_overloadedBoolean),
  "spaceSeparated": () => (types_spaceSeparated)
});

// NAMESPACE OBJECT: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/types.js
var lib_util_types_namespaceObject = {};
__webpack_require__.r(lib_util_types_namespaceObject);
__webpack_require__.d(lib_util_types_namespaceObject, {
  "boolean": () => (util_types_boolean),
  "booleanish": () => (util_types_booleanish),
  "commaOrSpaceSeparated": () => (util_types_commaOrSpaceSeparated),
  "commaSeparated": () => (util_types_commaSeparated),
  "number": () => (util_types_number),
  "overloadedBoolean": () => (util_types_overloadedBoolean),
  "spaceSeparated": () => (util_types_spaceSeparated)
});

// NAMESPACE OBJECT: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/types.js
var property_information_lib_util_types_namespaceObject = {};
__webpack_require__.r(property_information_lib_util_types_namespaceObject);
__webpack_require__.d(property_information_lib_util_types_namespaceObject, {
  "boolean": () => (lib_util_types_boolean),
  "booleanish": () => (lib_util_types_booleanish),
  "commaOrSpaceSeparated": () => (lib_util_types_commaOrSpaceSeparated),
  "commaSeparated": () => (lib_util_types_commaSeparated),
  "number": () => (lib_util_types_number),
  "overloadedBoolean": () => (lib_util_types_overloadedBoolean),
  "spaceSeparated": () => (lib_util_types_spaceSeparated)
});

// NAMESPACE OBJECT: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/util/types.js
var node_modules_property_information_lib_util_types_namespaceObject = {};
__webpack_require__.r(node_modules_property_information_lib_util_types_namespaceObject);
__webpack_require__.d(node_modules_property_information_lib_util_types_namespaceObject, {
  "boolean": () => (property_information_lib_util_types_boolean),
  "booleanish": () => (property_information_lib_util_types_booleanish),
  "commaOrSpaceSeparated": () => (property_information_lib_util_types_commaOrSpaceSeparated),
  "commaSeparated": () => (property_information_lib_util_types_commaSeparated),
  "number": () => (property_information_lib_util_types_number),
  "overloadedBoolean": () => (property_information_lib_util_types_overloadedBoolean),
  "spaceSeparated": () => (property_information_lib_util_types_spaceSeparated)
});

// NAMESPACE OBJECT: ./node_modules/hast-util-select/node_modules/property-information/lib/util/types.js
var hast_util_select_node_modules_property_information_lib_util_types_namespaceObject = {};
__webpack_require__.r(hast_util_select_node_modules_property_information_lib_util_types_namespaceObject);
__webpack_require__.d(hast_util_select_node_modules_property_information_lib_util_types_namespaceObject, {
  "boolean": () => (node_modules_property_information_lib_util_types_boolean),
  "booleanish": () => (node_modules_property_information_lib_util_types_booleanish),
  "commaOrSpaceSeparated": () => (node_modules_property_information_lib_util_types_commaOrSpaceSeparated),
  "commaSeparated": () => (node_modules_property_information_lib_util_types_commaSeparated),
  "number": () => (node_modules_property_information_lib_util_types_number),
  "overloadedBoolean": () => (node_modules_property_information_lib_util_types_overloadedBoolean),
  "spaceSeparated": () => (node_modules_property_information_lib_util_types_spaceSeparated)
});

// NAMESPACE OBJECT: ./node_modules/micromark/lib/constructs.js
var constructs_namespaceObject = {};
__webpack_require__.r(constructs_namespaceObject);
__webpack_require__.d(constructs_namespaceObject, {
  "attentionMarkers": () => (attentionMarkers),
  "contentInitial": () => (contentInitial),
  "disable": () => (disable),
  "document": () => (constructs_document),
  "flow": () => (constructs_flow),
  "flowInitial": () => (flowInitial),
  "insideSpan": () => (insideSpan),
  "string": () => (constructs_string),
  "text": () => (constructs_text)
});

;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js


function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}
// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(7757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);
// EXTERNAL MODULE: external "fs"
var external_fs_ = __webpack_require__(7147);
var external_fs_default = /*#__PURE__*/__webpack_require__.n(external_fs_);
// EXTERNAL MODULE: external "path"
var external_path_ = __webpack_require__(1017);
var external_path_default = /*#__PURE__*/__webpack_require__.n(external_path_);
// EXTERNAL MODULE: ./node_modules/@actions/core/lib/core.js
var lib_core = __webpack_require__(8397);
// EXTERNAL MODULE: ./node_modules/fs-extra/lib/index.js
var lib = __webpack_require__(5064);
var lib_default = /*#__PURE__*/__webpack_require__.n(lib);
;// CONCATENATED MODULE: ./src/utils.ts
function formatConfig(opts){var options=_objectSpread2(_objectSpread2({},opts),{},{document:{title:opts.title,meta:[],link:[]}});var projectPkg=external_path_default().resolve(process.cwd(),opts.config||'package.json');var pgkData={};if(lib_default().existsSync(projectPkg)){pgkData=lib_default().readJSONSync(projectPkg);if(pgkData.name&&!options.document.title){options.document.title=pgkData.name;}if(pgkData.repository&&!opts['github-corners']){opts['github-corners']=typeof pgkData.repository==='string'?pgkData.repository:pgkData.repository.url;}if(pgkData['markdown-to-html']){var mth=pgkData['markdown-to-html'];var _options$document=options.document,title=_options$document.title,meta=_options$document.meta,link=_options$document.link;options=_objectSpread2(_objectSpread2(_objectSpread2({},options),mth),{},{document:_objectSpread2({title:title,meta:meta,link:link},mth.document)});if(mth['github-corners']){opts['github-corners']=mth['github-corners'];}}}if(opts['github-corners']){opts['github-corners']=opts['github-corners'].replace(/^git[+]/,'');}if(Array.isArray(options.document.link)&&options.favicon){options.document.link.push({rel:'icon',href:options.favicon,type:'image/x-icon'});}if(Array.isArray(options.document.meta)){if(options.description){options.document.meta.push({description:options.description});}else if(pgkData.description){options.document.meta.push({description:pgkData.description});}if(options.keywords){options.document.meta.push({keywords:options.keywords});}else if(pgkData.keywords&&Array.isArray(pgkData.keywords)){options.document.meta.push({keywords:pgkData.keywords.join(',')});}if(typeof options.author==='string'){options.document.meta.push({author:options.author});}}return options;}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js




function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toArray.js




function _toArray(arr) {
  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
}
;// CONCATENATED MODULE: ./node_modules/bail/index.js
/**
 * Throw a given error.
 *
 * @param {Error|null|undefined} [error]
 *   Maybe error.
 * @returns {asserts error is null|undefined}
 */
function bail(error) {
  if (error) {
    throw error;
  }
}
// EXTERNAL MODULE: ./node_modules/is-buffer/index.js
var is_buffer = __webpack_require__(3888);
// EXTERNAL MODULE: ./node_modules/extend/index.js
var extend = __webpack_require__(3445);
;// CONCATENATED MODULE: ./node_modules/unified/node_modules/is-plain-obj/index.js
function isPlainObject(value) {
  if (Object.prototype.toString.call(value) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(value);
  return prototype === null || prototype === Object.prototype;
}
;// CONCATENATED MODULE: ./node_modules/trough/index.js


/**
 * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback
 * @typedef {(...input: Array<any>) => any} Middleware
 *
 * @typedef {(...input: Array<any>) => void} Run
 *   Call all middleware.
 * @typedef {(fn: Middleware) => Pipeline} Use
 *   Add `fn` (middleware) to the list.
 * @typedef {{run: Run, use: Use}} Pipeline
 *   Middleware.
 */

/**
 * Create new middleware.
 *
 * @returns {Pipeline}
 */
function trough() {
  /** @type {Array<Middleware>} */
  var fns = [];
  /** @type {Pipeline} */

  var pipeline = {
    run: run,
    use: use
  };
  return pipeline;
  /** @type {Run} */

  function run() {
    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
      values[_key] = arguments[_key];
    }

    var middlewareIndex = -1;
    /** @type {Callback} */

    var callback = values.pop();

    if (typeof callback !== 'function') {
      throw new TypeError('Expected function as last argument, not ' + callback);
    }

    next.apply(void 0, [null].concat(_toConsumableArray(values)));
    /**
     * Run the next `fn`, or we’re done.
     *
     * @param {Error|null|undefined} error
     * @param {Array<any>} output
     */

    function next(error) {
      var fn = fns[++middlewareIndex];
      var index = -1;

      if (error) {
        callback(error);
        return;
      } // Copy non-nullish input into values.


      for (var _len2 = arguments.length, output = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        output[_key2 - 1] = arguments[_key2];
      }

      while (++index < values.length) {
        if (output[index] === null || output[index] === undefined) {
          output[index] = values[index];
        }
      } // Save the newly created `output` for the next call.


      values = output; // Next or done.

      if (fn) {
        wrap(fn, next).apply(void 0, output);
      } else {
        callback.apply(void 0, [null].concat(output));
      }
    }
  }
  /** @type {Use} */


  function use(middelware) {
    if (typeof middelware !== 'function') {
      throw new TypeError('Expected `middelware` to be a function, not ' + middelware);
    }

    fns.push(middelware);
    return pipeline;
  }
}
/**
 * Wrap `middleware`.
 * Can be sync or async; return a promise, receive a callback, or return new
 * values and errors.
 *
 * @param {Middleware} middleware
 * @param {Callback} callback
 */

function wrap(middleware, callback) {
  /** @type {boolean} */
  var called;
  return wrapped;
  /**
   * Call `middleware`.
   * @this {any}
   * @param {Array<any>} parameters
   * @returns {void}
   */

  function wrapped() {
    for (var _len3 = arguments.length, parameters = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      parameters[_key3] = arguments[_key3];
    }

    var fnExpectsCallback = middleware.length > parameters.length;
    /** @type {any} */

    var result;

    if (fnExpectsCallback) {
      parameters.push(done);
    }

    try {
      result = middleware.apply(this, parameters);
    } catch (error) {
      var exception =
      /** @type {Error} */
      error; // Well, this is quite the pickle.
      // `middleware` received a callback and called it synchronously, but that
      // threw an error.
      // The only thing left to do is to throw the thing instead.

      if (fnExpectsCallback && called) {
        throw exception;
      }

      return done(exception);
    }

    if (!fnExpectsCallback) {
      if (result instanceof Promise) {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }
  /**
   * Call `callback`, only once.
   * @type {Callback}
   */


  function done(error) {
    if (!called) {
      called = true;

      for (var _len4 = arguments.length, output = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        output[_key4 - 1] = arguments[_key4];
      }

      callback.apply(void 0, [error].concat(output));
    }
  }
  /**
   * Call `done` with one value.
   *
   * @param {any} [value]
   */


  function then(value) {
    done(null, value);
  }
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js


function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js



function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/construct.js


function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js




function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}
;// CONCATENATED MODULE: ./node_modules/unist-util-stringify-position/index.js
var own = {}.hasOwnProperty;
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 */

/**
 * Stringify one point, a position (start and end points), or a node’s
 * positional information.
 *
 * @param {Node|Position|Point} [value]
 * @returns {string}
 */

function stringifyPosition(value) {
  // Nothing.
  if (!value || typeof value !== 'object') {
    return '';
  } // Node.


  if (own.call(value, 'position') || own.call(value, 'type')) {
    // @ts-ignore looks like a node.
    return position(value.position);
  } // Position.


  if (own.call(value, 'start') || own.call(value, 'end')) {
    // @ts-ignore looks like a position.
    return position(value);
  } // Point.


  if (own.call(value, 'line') || own.call(value, 'column')) {
    // @ts-ignore looks like a point.
    return point(value);
  } // ?


  return '';
}
/**
 * @param {Point} point
 * @returns {string}
 */

function point(point) {
  return index(point && point.line) + ':' + index(point && point.column);
}
/**
 * @param {Position} pos
 * @returns {string}
 */


function position(pos) {
  return point(pos && pos.start) + '-' + point(pos && pos.end);
}
/**
 * @param {number} value
 * @returns {number}
 */


function index(value) {
  return value && typeof value === 'number' ? value : 1;
}
;// CONCATENATED MODULE: ./node_modules/vfile-message/index.js






/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 */

var VFileMessage = /*#__PURE__*/function (_Error) {
  _inherits(VFileMessage, _Error);

  var _super = _createSuper(VFileMessage);

  /**
   * Constructor of a message for `reason` at `place` from `origin`.
   * When an error is passed in as `reason`, copies the `stack`.
   *
   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
   * @param {string} [origin] Place in code the message originates from (`string`, optional).
   */
  function VFileMessage(reason, place, origin) {
    var _this;

    _classCallCheck(this, VFileMessage);

    /** @type {[string?, string?]} */
    var parts = [null, null];
    /** @type {Position} */

    var position = {
      start: {
        line: null,
        column: null
      },
      end: {
        line: null,
        column: null
      }
    };
    /** @type {number} */

    var index;
    _this = _super.call(this);

    if (typeof place === 'string') {
      origin = place;
      place = null;
    }

    if (typeof origin === 'string') {
      index = origin.indexOf(':');

      if (index === -1) {
        parts[1] = origin;
      } else {
        parts[0] = origin.slice(0, index);
        parts[1] = origin.slice(index + 1);
      }
    }

    if (place) {
      // Node.
      if ('type' in place || 'position' in place) {
        if (place.position) {
          position = place.position;
        }
      } // Position.
      else if ('start' in place || 'end' in place) {
        // @ts-ignore Looks like a position.
        position = place;
      } // Point.
      else if ('line' in place || 'column' in place) {
        // @ts-ignore Looks like a point.
        position.start = place;
      }
    } // Fields from `Error`


    _this.name = stringifyPosition(place) || '1:1';
    _this.message = typeof reason === 'object' ? reason.message : reason;
    _this.stack = typeof reason === 'object' ? reason.stack : '';
    /**
     * Reason for message.
     * @type {string}
     */

    _this.reason = _this.message;
    /**
     * Starting line of error.
     * @type {number?}
     */

    _this.line = position.start.line;
    /**
     * Starting column of error.
     * @type {number?}
     */

    _this.column = position.start.column;
    /**
     * Namespace of warning.
     * @type {string?}
     */

    _this.source = parts[0];
    /**
     * Category of message.
     * @type {string?}
     */

    _this.ruleId = parts[1];
    /**
     * Full range information, when available.
     * Has start and end properties, both set to an object with line and column, set to number?.
     * @type {Position?}
     */

    _this.position = position; // The following fields are “well known”.
    // Not standard.
    // Feel free to add other non-standard fields to your messages.

    /* eslint-disable no-unused-expressions */

    /**
     * You may add a file property with a path of a file (used throughout the VFile ecosystem).
     * @type {string?}
     */

    _this.file;
    /**
     * If true, marks associated file as no longer processable.
     * @type {boolean?}
     */

    _this.fatal;
    /**
     * You may add a url property with a link to documentation for the message.
     * @type {string?}
     */

    _this.url;
    /**
     * You may add a note property with a long form description of the message (supported by vfile-reporter).
     * @type {string?}
     */

    _this.note;
    /* eslint-enable no-unused-expressions */

    return _this;
  }

  return _createClass(VFileMessage);
}( /*#__PURE__*/_wrapNativeSuper(Error));
VFileMessage.prototype.file = '';
VFileMessage.prototype.name = '';
VFileMessage.prototype.reason = '';
VFileMessage.prototype.message = '';
VFileMessage.prototype.stack = '';
VFileMessage.prototype.fatal = null;
VFileMessage.prototype.column = null;
VFileMessage.prototype.line = null;
VFileMessage.prototype.source = null;
VFileMessage.prototype.ruleId = null;
VFileMessage.prototype.position = null;
;// CONCATENATED MODULE: external "process"
const external_process_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("process");
;// CONCATENATED MODULE: ./node_modules/vfile/lib/minproc.js

var proc = external_process_namespaceObject;
;// CONCATENATED MODULE: ./node_modules/vfile/lib/minurl.shared.js
/**
 * @typedef URL
 * @property {string} hash
 * @property {string} host
 * @property {string} hostname
 * @property {string} href
 * @property {string} origin
 * @property {string} password
 * @property {string} pathname
 * @property {string} port
 * @property {string} protocol
 * @property {string} search
 * @property {any} searchParams
 * @property {string} username
 * @property {() => string} toString
 * @property {() => string} toJSON
 */

/**
 * @param {unknown} fileURLOrPath
 * @returns {fileURLOrPath is URL}
 */
// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>
function isUrl(fileURLOrPath) {
  return fileURLOrPath !== null && typeof fileURLOrPath === 'object' && // @ts-expect-error: indexable.
  fileURLOrPath.href && // @ts-expect-error: indexable.
  fileURLOrPath.origin;
}
// EXTERNAL MODULE: external "url"
var external_url_ = __webpack_require__(7310);
;// CONCATENATED MODULE: ./node_modules/vfile/lib/index.js




/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 * @typedef {import('./minurl.shared.js').URL} URL
 * @typedef {import('..').VFileData} VFileData
 *
 * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding
 *   Encodings supported by the buffer class.
 *   This is a copy of the typing from Node, copied to prevent Node globals from
 *   being needed.
 *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>
 *
 * @typedef {string|Uint8Array} VFileValue
 *   Contents of the file.
 *   Can either be text, or a Buffer like structure.
 *   This does not directly use type `Buffer`, because it can also be used in a
 *   browser context.
 *   Instead this leverages `Uint8Array` which is the base type for `Buffer`,
 *   and a native JavaScript construct.
 *
 * @typedef {VFileValue|VFileOptions|VFile|URL} VFileCompatible
 *   Things that can be passed to the constructor.
 *
 * @typedef VFileCoreOptions
 * @property {VFileValue} [value]
 * @property {string} [cwd]
 * @property {Array.<string>} [history]
 * @property {string|URL} [path]
 * @property {string} [basename]
 * @property {string} [stem]
 * @property {string} [extname]
 * @property {string} [dirname]
 * @property {VFileData} [data]
 *
 * @typedef {{[key: string]: unknown} & VFileCoreOptions} VFileOptions
 *   Configuration: a bunch of keys that will be shallow copied over to the new
 *   file.
 *
 * @typedef {Object.<string, unknown>} VFileReporterSettings
 * @typedef {<T = VFileReporterSettings>(files: VFile[], options: T) => string} VFileReporter
 */




 // Order of setting (least specific to most), we need this because otherwise
// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
// stem can be set.

var order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];
var VFile = /*#__PURE__*/function () {
  /**
   * Create a new virtual file.
   *
   * If `options` is `string` or `Buffer`, treats it as `{value: options}`.
   * If `options` is a `VFile`, shallow copies its data over to the new file.
   * All other given fields are set on the newly created `VFile`.
   *
   * Path related properties are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * It’s not possible to set either `dirname` or `extname` without setting
   * either `history`, `path`, `basename`, or `stem` as well.
   *
   * @param {VFileCompatible} [value]
   */
  function VFile(value) {
    _classCallCheck(this, VFile);

    /** @type {VFileOptions} */
    var options;

    if (!value) {
      options = {};
    } else if (typeof value === 'string' || is_buffer(value)) {
      // @ts-expect-error Looks like a buffer.
      options = {
        value: value
      };
    } else if (isUrl(value)) {
      options = {
        path: value
      };
    } else {
      // @ts-expect-error Looks like file or options.
      options = value;
    }
    /**
     * Place to store custom information.
     * It’s OK to store custom data directly on the file, moving it to `data`
     * gives a little more privacy.
     * @type {VFileData}
     */


    this.data = {};
    /**
     * List of messages associated with the file.
     * @type {Array.<VFileMessage>}
     */

    this.messages = [];
    /**
     * List of file paths the file moved between.
     * @type {Array.<string>}
     */

    this.history = [];
    /**
     * Base of `path`.
     * Defaults to `process.cwd()` (`/` in browsers).
     * @type {string}
     */

    this.cwd = proc.cwd();
    /* eslint-disable no-unused-expressions */

    /**
     * Raw value.
     * @type {VFileValue}
     */

    this.value; // The below are non-standard, they are “well-known”.
    // As in, used in several tools.

    /**
     * Whether a file was saved to disk.
     * This is used by vfile reporters.
     * @type {boolean}
     */

    this.stored;
    /**
     * Sometimes files have a non-string representation.
     * This can be stored in the `result` field.
     * One example is when turning markdown into React nodes.
     * This is used by unified to store non-string results.
     * @type {unknown}
     */

    this.result;
    /**
     * Sometimes files have a source map associated with them.
     * This can be stored in the `map` field.
     * This should be a `RawSourceMap` type from the `source-map` module.
     * @type {unknown}
     */

    this.map;
    /* eslint-enable no-unused-expressions */
    // Set path related properties in the correct order.

    var index = -1;

    while (++index < order.length) {
      var _prop = order[index]; // Note: we specifically use `in` instead of `hasOwnProperty` to accept
      // `vfile`s too.

      if (_prop in options && options[_prop] !== undefined) {
        // @ts-expect-error: TS is confused by the different types for `history`.
        this[_prop] = _prop === 'history' ? _toConsumableArray(options[_prop]) : options[_prop];
      }
    }
    /** @type {string} */


    var prop; // Set non-path related properties.

    for (prop in options) {
      // @ts-expect-error: fine to set other things.
      if (!order.includes(prop)) this[prop] = options[prop];
    }
  }
  /**
   * Access full path (`~/index.min.js`).
   *
   * @returns {string}
   */


  _createClass(VFile, [{
    key: "path",
    get: function get() {
      return this.history[this.history.length - 1];
    }
    /**
     * Set full path (`~/index.min.js`).
     * Cannot be nullified.
     *
     * @param {string|URL} path
     */
    ,
    set: function set(path) {
      if (isUrl(path)) {
        path = (0,external_url_.fileURLToPath)(path);
      }

      assertNonEmpty(path, 'path');

      if (this.path !== path) {
        this.history.push(path);
      }
    }
    /**
     * Access parent path (`~`).
     */

  }, {
    key: "dirname",
    get: function get() {
      return typeof this.path === 'string' ? external_path_.dirname(this.path) : undefined;
    }
    /**
     * Set parent path (`~`).
     * Cannot be set if there's no `path` yet.
     */
    ,
    set: function set(dirname) {
      assertPath(this.basename, 'dirname');
      this.path = external_path_.join(dirname || '', this.basename);
    }
    /**
     * Access basename (including extname) (`index.min.js`).
     */

  }, {
    key: "basename",
    get: function get() {
      return typeof this.path === 'string' ? external_path_.basename(this.path) : undefined;
    }
    /**
     * Set basename (`index.min.js`).
     * Cannot contain path separators.
     * Cannot be nullified either (use `file.path = file.dirname` instead).
     */
    ,
    set: function set(basename) {
      assertNonEmpty(basename, 'basename');
      assertPart(basename, 'basename');
      this.path = external_path_.join(this.dirname || '', basename);
    }
    /**
     * Access extname (including dot) (`.js`).
     */

  }, {
    key: "extname",
    get: function get() {
      return typeof this.path === 'string' ? external_path_.extname(this.path) : undefined;
    }
    /**
     * Set extname (including dot) (`.js`).
     * Cannot be set if there's no `path` yet and cannot contain path separators.
     */
    ,
    set: function set(extname) {
      assertPart(extname, 'extname');
      assertPath(this.dirname, 'extname');

      if (extname) {
        if (extname.charCodeAt(0) !== 46
        /* `.` */
        ) {
          throw new Error('`extname` must start with `.`');
        }

        if (extname.includes('.', 1)) {
          throw new Error('`extname` cannot contain multiple dots');
        }
      }

      this.path = external_path_.join(this.dirname, this.stem + (extname || ''));
    }
    /**
     * Access stem (w/o extname) (`index.min`).
     */

  }, {
    key: "stem",
    get: function get() {
      return typeof this.path === 'string' ? external_path_.basename(this.path, this.extname) : undefined;
    }
    /**
     * Set stem (w/o extname) (`index.min`).
     * Cannot be nullified, and cannot contain path separators.
     */
    ,
    set: function set(stem) {
      assertNonEmpty(stem, 'stem');
      assertPart(stem, 'stem');
      this.path = external_path_.join(this.dirname || '', stem + (this.extname || ''));
    }
    /**
     * Serialize the file.
     *
     * @param {BufferEncoding} [encoding='utf8'] If `file.value` is a buffer, `encoding` is used to serialize buffers.
     * @returns {string}
     */

  }, {
    key: "toString",
    value: function toString(encoding) {
      // @ts-expect-error string’s don’t accept the parameter, but buffers do.
      return (this.value || '').toString(encoding);
    }
    /**
     * Create a message and associates it w/ the file.
     *
     * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
     * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
     * @param {string} [origin] Place in code the message originates from (`string`, optional).
     * @returns {VFileMessage}
     */

  }, {
    key: "message",
    value: function message(reason, place, origin) {
      var message = new VFileMessage(reason, place, origin);

      if (this.path) {
        message.name = this.path + ':' + message.name;
        message.file = this.path;
      }

      message.fatal = false;
      this.messages.push(message);
      return message;
    }
    /**
     * Info: create a message, associate it with the file, and mark the fatality
     * as `null`.
     * Calls `message()` internally.
     *
     * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
     * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
     * @param {string} [origin] Place in code the message originates from (`string`, optional).
     * @returns {VFileMessage}
     */

  }, {
    key: "info",
    value: function info(reason, place, origin) {
      var message = this.message(reason, place, origin);
      message.fatal = null;
      return message;
    }
    /**
     * Fail: create a message, associate it with the file, mark the fatality as
     * `true`.
     * Note: fatal errors mean a file is no longer processable.
     * Calls `message()` internally.
     *
     * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.
     * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).
     * @param {string} [origin] Place in code the message originates from (`string`, optional).
     * @returns {never}
     */

  }, {
    key: "fail",
    value: function fail(reason, place, origin) {
      var message = this.message(reason, place, origin);
      message.fatal = true;
      throw message;
    }
  }]);

  return VFile;
}();
/**
 * Assert that `part` is not a path (as in, does not contain `path.sep`).
 *
 * @param {string|undefined} part
 * @param {string} name
 * @returns {void}
 */

function assertPart(part, name) {
  if (part && part.includes(external_path_.sep)) {
    throw new Error('`' + name + '` cannot be a path: did not expect `' + external_path_.sep + '`');
  }
}
/**
 * Assert that `part` is not empty.
 *
 * @param {string|undefined} part
 * @param {string} name
 * @returns {asserts part is string}
 */


function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error('`' + name + '` cannot be empty');
  }
}
/**
 * Assert `path` exists.
 *
 * @param {string|undefined} path
 * @param {string} name
 * @returns {asserts path is string}
 */


function assertPath(path, name) {
  if (!path) {
    throw new Error('Setting `' + name + '` requires `path` to be set too');
  }
}
;// CONCATENATED MODULE: ./node_modules/unified/lib/index.js



/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('vfile').VFileCompatible} VFileCompatible
 * @typedef {import('vfile').VFileValue} VFileValue
 * @typedef {import('..').Processor} Processor
 * @typedef {import('..').Plugin} Plugin
 * @typedef {import('..').Preset} Preset
 * @typedef {import('..').Pluggable} Pluggable
 * @typedef {import('..').PluggableList} PluggableList
 * @typedef {import('..').Transformer} Transformer
 * @typedef {import('..').Parser} Parser
 * @typedef {import('..').Compiler} Compiler
 * @typedef {import('..').RunCallback} RunCallback
 * @typedef {import('..').ProcessCallback} ProcessCallback
 *
 * @typedef Context
 * @property {Node} tree
 * @property {VFile} file
 */





 // Expose a frozen processor.

var unified = base().freeze();
var lib_own = {}.hasOwnProperty; // Function to create the first processor.

/**
 * @returns {Processor}
 */

function base() {
  var transformers = trough();
  /** @type {Processor['attachers']} */

  var attachers = [];
  /** @type {Record<string, unknown>} */

  var namespace = {};
  /** @type {boolean|undefined} */

  var frozen;
  var freezeIndex = -1; // Data management.
  // @ts-expect-error: overloads are handled.

  processor.data = data;
  processor.Parser = undefined;
  processor.Compiler = undefined; // Lock.

  processor.freeze = freeze; // Plugins.

  processor.attachers = attachers; // @ts-expect-error: overloads are handled.

  processor.use = use; // API.

  processor.parse = parse;
  processor.stringify = stringify; // @ts-expect-error: overloads are handled.

  processor.run = run;
  processor.runSync = runSync; // @ts-expect-error: overloads are handled.

  processor.process = process;
  processor.processSync = processSync; // Expose.

  return processor; // Create a new processor based on the processor in the current scope.

  /** @type {Processor} */

  function processor() {
    var destination = base();
    var index = -1;

    while (++index < attachers.length) {
      destination.use.apply(destination, _toConsumableArray(attachers[index]));
    }

    destination.data(extend(true, {}, namespace));
    return destination;
  }
  /**
   * @param {string|Record<string, unknown>} [key]
   * @param {unknown} [value]
   * @returns {unknown}
   */


  function data(key, value) {
    if (typeof key === 'string') {
      // Set `key`.
      if (arguments.length === 2) {
        assertUnfrozen('data', frozen);
        namespace[key] = value;
        return processor;
      } // Get `key`.


      return lib_own.call(namespace, key) && namespace[key] || null;
    } // Set space.


    if (key) {
      assertUnfrozen('data', frozen);
      namespace = key;
      return processor;
    } // Get space.


    return namespace;
  }
  /** @type {Processor['freeze']} */


  function freeze() {
    if (frozen) {
      return processor;
    }

    while (++freezeIndex < attachers.length) {
      var _attachers$freezeInde = _toArray(attachers[freezeIndex]),
          attacher = _attachers$freezeInde[0],
          options = _attachers$freezeInde.slice(1);

      if (options[0] === false) {
        continue;
      }

      if (options[0] === true) {
        options[1] = undefined;
      }
      /** @type {Transformer|void} */


      var transformer = attacher.call.apply(attacher, [processor].concat(_toConsumableArray(options)));

      if (typeof transformer === 'function') {
        transformers.use(transformer);
      }
    }

    frozen = true;
    freezeIndex = Number.POSITIVE_INFINITY;
    return processor;
  }
  /**
   * @param {Pluggable|null|undefined} [value]
   * @param {...unknown} options
   * @returns {Processor}
   */


  function use(value) {
    for (var _len = arguments.length, options = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      options[_key - 1] = arguments[_key];
    }

    /** @type {Record<string, unknown>|undefined} */
    var settings;
    assertUnfrozen('use', frozen);

    if (value === null || value === undefined) {// Empty.
    } else if (typeof value === 'function') {
      addPlugin.apply(void 0, [value].concat(options));
    } else if (typeof value === 'object') {
      if (Array.isArray(value)) {
        addList(value);
      } else {
        addPreset(value);
      }
    } else {
      throw new TypeError('Expected usable value, not `' + value + '`');
    }

    if (settings) {
      namespace.settings = Object.assign(namespace.settings || {}, settings);
    }

    return processor;
    /**
     * @param {import('..').Pluggable<unknown[]>} value
     * @returns {void}
     */

    function add(value) {
      if (typeof value === 'function') {
        addPlugin(value);
      } else if (typeof value === 'object') {
        if (Array.isArray(value)) {
          var _value = _toArray(value),
              plugin = _value[0],
              _options = _value.slice(1);

          addPlugin.apply(void 0, [plugin].concat(_toConsumableArray(_options)));
        } else {
          addPreset(value);
        }
      } else {
        throw new TypeError('Expected usable value, not `' + value + '`');
      }
    }
    /**
     * @param {Preset} result
     * @returns {void}
     */


    function addPreset(result) {
      addList(result.plugins);

      if (result.settings) {
        settings = Object.assign(settings || {}, result.settings);
      }
    }
    /**
     * @param {PluggableList|null|undefined} [plugins]
     * @returns {void}
     */


    function addList(plugins) {
      var index = -1;

      if (plugins === null || plugins === undefined) {// Empty.
      } else if (Array.isArray(plugins)) {
        while (++index < plugins.length) {
          var thing = plugins[index];
          add(thing);
        }
      } else {
        throw new TypeError('Expected a list of plugins, not `' + plugins + '`');
      }
    }
    /**
     * @param {Plugin} plugin
     * @param {...unknown} [value]
     * @returns {void}
     */


    function addPlugin(plugin, value) {
      var index = -1;
      /** @type {Processor['attachers'][number]|undefined} */

      var entry;

      while (++index < attachers.length) {
        if (attachers[index][0] === plugin) {
          entry = attachers[index];
          break;
        }
      }

      if (entry) {
        if (isPlainObject(entry[1]) && isPlainObject(value)) {
          value = extend(true, entry[1], value);
        }

        entry[1] = value;
      } else {
        // @ts-expect-error: fine.
        attachers.push(Array.prototype.slice.call(arguments));
      }
    }
  }
  /** @type {Processor['parse']} */


  function parse(doc) {
    processor.freeze();
    var file = vfile(doc);
    var Parser = processor.Parser;
    assertParser('parse', Parser);

    if (newable(Parser, 'parse')) {
      // @ts-expect-error: `newable` checks this.
      return new Parser(String(file), file).parse();
    } // @ts-expect-error: `newable` checks this.


    return Parser(String(file), file); // eslint-disable-line new-cap
  }
  /** @type {Processor['stringify']} */


  function stringify(node, doc) {
    processor.freeze();
    var file = vfile(doc);
    var Compiler = processor.Compiler;
    assertCompiler('stringify', Compiler);
    assertNode(node);

    if (newable(Compiler, 'compile')) {
      // @ts-expect-error: `newable` checks this.
      return new Compiler(node, file).compile();
    } // @ts-expect-error: `newable` checks this.


    return Compiler(node, file); // eslint-disable-line new-cap
  }
  /**
   * @param {Node} node
   * @param {VFileCompatible|RunCallback} [doc]
   * @param {RunCallback} [callback]
   * @returns {Promise<Node>|void}
   */


  function run(node, doc, callback) {
    assertNode(node);
    processor.freeze();

    if (!callback && typeof doc === 'function') {
      callback = doc;
      doc = undefined;
    }

    if (!callback) {
      return new Promise(executor);
    }

    executor(null, callback);
    /**
     * @param {null|((node: Node) => void)} resolve
     * @param {(error: Error) => void} reject
     * @returns {void}
     */

    function executor(resolve, reject) {
      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.
      transformers.run(node, vfile(doc), done);
      /**
       * @param {Error|null} error
       * @param {Node} tree
       * @param {VFile} file
       * @returns {void}
       */

      function done(error, tree, file) {
        tree = tree || node;

        if (error) {
          reject(error);
        } else if (resolve) {
          resolve(tree);
        } else {
          // @ts-expect-error: `callback` is defined if `resolve` is not.
          callback(null, tree, file);
        }
      }
    }
  }
  /** @type {Processor['runSync']} */


  function runSync(node, file) {
    /** @type {Node|undefined} */
    var result;
    /** @type {boolean|undefined} */

    var complete;
    processor.run(node, file, done);
    assertDone('runSync', 'run', complete); // @ts-expect-error: we either bailed on an error or have a tree.

    return result;
    /**
     * @param {Error|null} [error]
     * @param {Node} [tree]
     * @returns {void}
     */

    function done(error, tree) {
      bail(error);
      result = tree;
      complete = true;
    }
  }
  /**
   * @param {VFileCompatible} doc
   * @param {ProcessCallback} [callback]
   * @returns {Promise<VFile>|undefined}
   */


  function process(doc, callback) {
    processor.freeze();
    assertParser('process', processor.Parser);
    assertCompiler('process', processor.Compiler);

    if (!callback) {
      return new Promise(executor);
    }

    executor(null, callback);
    /**
     * @param {null|((file: VFile) => void)} resolve
     * @param {(error?: Error|null|undefined) => void} reject
     * @returns {void}
     */

    function executor(resolve, reject) {
      var file = vfile(doc);
      processor.run(processor.parse(file), file, function (error, tree, file) {
        if (error || !tree || !file) {
          done(error);
        } else {
          /** @type {unknown} */
          var result = processor.stringify(tree, file);

          if (result === undefined || result === null) {// Empty.
          } else if (looksLikeAVFileValue(result)) {
            file.value = result;
          } else {
            file.result = result;
          }

          done(error, file);
        }
      });
      /**
       * @param {Error|null|undefined} [error]
       * @param {VFile|undefined} [file]
       * @returns {void}
       */

      function done(error, file) {
        if (error || !file) {
          reject(error);
        } else if (resolve) {
          resolve(file);
        } else {
          // @ts-expect-error: `callback` is defined if `resolve` is not.
          callback(null, file);
        }
      }
    }
  }
  /** @type {Processor['processSync']} */


  function processSync(doc) {
    /** @type {boolean|undefined} */
    var complete;
    processor.freeze();
    assertParser('processSync', processor.Parser);
    assertCompiler('processSync', processor.Compiler);
    var file = vfile(doc);
    processor.process(file, done);
    assertDone('processSync', 'process', complete);
    return file;
    /**
     * @param {Error|null|undefined} [error]
     * @returns {void}
     */

    function done(error) {
      complete = true;
      bail(error);
    }
  }
}
/**
 * Check if `value` is a constructor.
 *
 * @param {unknown} value
 * @param {string} name
 * @returns {boolean}
 */


function newable(value, name) {
  return typeof value === 'function' && // Prototypes do exist.
  // type-coverage:ignore-next-line
  value.prototype && ( // A function with keys in its prototype is probably a constructor.
  // Classes’ prototype methods are not enumerable, so we check if some value
  // exists in the prototype.
  // type-coverage:ignore-next-line
  keys(value.prototype) || name in value.prototype);
}
/**
 * Check if `value` is an object with keys.
 *
 * @param {Record<string, unknown>} value
 * @returns {boolean}
 */


function keys(value) {
  /** @type {string} */
  var key;

  for (key in value) {
    if (lib_own.call(value, key)) {
      return true;
    }
  }

  return false;
}
/**
 * Assert a parser is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Parser}
 */


function assertParser(name, value) {
  if (typeof value !== 'function') {
    throw new TypeError('Cannot `' + name + '` without `Parser`');
  }
}
/**
 * Assert a compiler is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Compiler}
 */


function assertCompiler(name, value) {
  if (typeof value !== 'function') {
    throw new TypeError('Cannot `' + name + '` without `Compiler`');
  }
}
/**
 * Assert the processor is not frozen.
 *
 * @param {string} name
 * @param {unknown} frozen
 * @returns {asserts frozen is false}
 */


function assertUnfrozen(name, frozen) {
  if (frozen) {
    throw new Error('Cannot call `' + name + '` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.');
  }
}
/**
 * Assert `node` is a unist node.
 *
 * @param {unknown} node
 * @returns {asserts node is Node}
 */


function assertNode(node) {
  // `isPlainObj` unfortunately uses `any` instead of `unknown`.
  // type-coverage:ignore-next-line
  if (!isPlainObject(node) || typeof node.type !== 'string') {
    throw new TypeError('Expected node, got `' + node + '`'); // Fine.
  }
}
/**
 * Assert that `complete` is `true`.
 *
 * @param {string} name
 * @param {string} asyncName
 * @param {unknown} complete
 * @returns {asserts complete is true}
 */


function assertDone(name, asyncName, complete) {
  if (!complete) {
    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');
  }
}
/**
 * @param {VFileCompatible} [value]
 * @returns {VFile}
 */


function vfile(value) {
  return looksLikeAVFile(value) ? value : new VFile(value);
}
/**
 * @param {VFileCompatible} [value]
 * @returns {value is VFile}
 */


function looksLikeAVFile(value) {
  return Boolean(value && typeof value === 'object' && 'message' in value && 'messages' in value);
}
/**
 * @param {unknown} [value]
 * @returns {value is VFileValue}
 */


function looksLikeAVFileValue(value) {
  return typeof value === 'string' || is_buffer(value);
}
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/util/schema.js



/**
 * @typedef {import('./info.js').Info} Info
 * @typedef {Record<string, Info>} Properties
 * @typedef {Record<string, string>} Normal
 */
var Schema = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {Properties} property
 * @param {Normal} normal
 * @param {string} [space]
 */
function Schema(property, normal, space) {
  _classCallCheck(this, Schema);

  this.property = property;
  this.normal = normal;

  if (space) {
    this.space = space;
  }
});
/** @type {Properties} */

Schema.prototype.property = {};
/** @type {Normal} */

Schema.prototype.normal = {};
/** @type {string|null} */

Schema.prototype.space = null;
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/util/merge.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 */

/**
 * @param {Schema[]} definitions
 * @param {string} [space]
 * @returns {Schema}
 */

function merge(definitions, space) {
  /** @type {Properties} */
  var property = {};
  /** @type {Normal} */

  var normal = {};
  var index = -1;

  while (++index < definitions.length) {
    Object.assign(property, definitions[index].property);
    Object.assign(normal, definitions[index].normal);
  }

  return new Schema(property, normal, space);
}
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/normalize.js
/**
 * @param {string} value
 * @returns {string}
 */
function normalize(value) {
  return value.toLowerCase();
}
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/util/info.js


var Info = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {string} property
 * @param {string} attribute
 */
function Info(property, attribute) {
  _classCallCheck(this, Info);

  /** @type {string} */
  this.property = property;
  /** @type {string} */

  this.attribute = attribute;
});
/** @type {string|null} */

Info.prototype.space = null;
Info.prototype["boolean"] = false;
Info.prototype.booleanish = false;
Info.prototype.overloadedBoolean = false;
Info.prototype.number = false;
Info.prototype.commaSeparated = false;
Info.prototype.spaceSeparated = false;
Info.prototype.commaOrSpaceSeparated = false;
Info.prototype.mustUseProperty = false;
Info.prototype.defined = false;
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/util/types.js
var powers = 0;

var _boolean = increment();


var booleanish = increment();
var overloadedBoolean = increment();
var number = increment();
var spaceSeparated = increment();
var commaSeparated = increment();
var commaOrSpaceSeparated = increment();

function increment() {
  return Math.pow(2, ++powers);
}
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/util/defined-info.js







/** @type {Array<keyof types>} */
// @ts-expect-error: hush.

var checks = Object.keys(types_namespaceObject);
var DefinedInfo = /*#__PURE__*/function (_Info) {
  _inherits(DefinedInfo, _Info);

  var _super = _createSuper(DefinedInfo);

  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  function DefinedInfo(property, attribute, mask, space) {
    var _this;

    _classCallCheck(this, DefinedInfo);

    var index = -1;
    _this = _super.call(this, property, attribute);
    mark(_assertThisInitialized(_this), 'space', space);

    if (typeof mask === 'number') {
      while (++index < checks.length) {
        var check = checks[index];
        mark(_assertThisInitialized(_this), checks[index], (mask & types_namespaceObject[check]) === types_namespaceObject[check]);
      }
    }

    return _this;
  }

  return _createClass(DefinedInfo);
}(Info);
DefinedInfo.prototype.defined = true;
/**
 * @param {DefinedInfo} values
 * @param {string} key
 * @param {unknown} value
 */

function mark(values, key, value) {
  if (value) {
    // @ts-expect-error: assume `value` matches the expected value of `key`.
    values[key] = value;
  }
}
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/util/create.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 *
 * @typedef {Record<string, string>} Attributes
 *
 * @typedef {Object} Definition
 * @property {Record<string, number|null>} properties
 * @property {(attributes: Attributes, property: string) => string} transform
 * @property {string} [space]
 * @property {Attributes} [attributes]
 * @property {Array<string>} [mustUseProperty]
 */



var create_own = {}.hasOwnProperty;
/**
 * @param {Definition} definition
 * @returns {Schema}
 */

function create(definition) {
  /** @type {Properties} */
  var property = {};
  /** @type {Normal} */

  var normal = {};
  /** @type {string} */

  var prop;

  for (prop in definition.properties) {
    if (create_own.call(definition.properties, prop)) {
      var value = definition.properties[prop];
      var info = new DefinedInfo(prop, definition.transform(definition.attributes || {}, prop), value, definition.space);

      if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {
        info.mustUseProperty = true;
      }

      property[prop] = info;
      normal[normalize(prop)] = prop;
      normal[normalize(info.attribute)] = prop;
    }
  }

  return new Schema(property, normal, definition.space);
}
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/xlink.js

var xlink = create({
  space: 'xlink',
  transform: function transform(_, prop) {
    return 'xlink:' + prop.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/xml.js

var xml = create({
  space: 'xml',
  transform: function transform(_, prop) {
    return 'xml:' + prop.slice(3).toLowerCase();
  },
  properties: {
    xmlLang: null,
    xmlBase: null,
    xmlSpace: null
  }
});
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/util/case-sensitive-transform.js
/**
 * @param {Record<string, string>} attributes
 * @param {string} attribute
 * @returns {string}
 */
function caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/util/case-insensitive-transform.js

/**
 * @param {Record<string, string>} attributes
 * @param {string} property
 * @returns {string}
 */

function caseInsensitiveTransform(attributes, property) {
  return caseSensitiveTransform(attributes, property.toLowerCase());
}
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/xmlns.js


var xmlns = create({
  space: 'xmlns',
  attributes: {
    xmlnsxlink: 'xmlns:xlink'
  },
  transform: caseInsensitiveTransform,
  properties: {
    xmlns: null,
    xmlnsXLink: null
  }
});
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/aria.js


var aria = create({
  transform: function transform(_, prop) {
    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: booleanish,
    ariaAutoComplete: null,
    ariaBusy: booleanish,
    ariaChecked: booleanish,
    ariaColCount: number,
    ariaColIndex: number,
    ariaColSpan: number,
    ariaControls: spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: spaceSeparated,
    ariaDetails: null,
    ariaDisabled: booleanish,
    ariaDropEffect: spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: booleanish,
    ariaFlowTo: spaceSeparated,
    ariaGrabbed: booleanish,
    ariaHasPopup: null,
    ariaHidden: booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: spaceSeparated,
    ariaLevel: number,
    ariaLive: null,
    ariaModal: booleanish,
    ariaMultiLine: booleanish,
    ariaMultiSelectable: booleanish,
    ariaOrientation: null,
    ariaOwns: spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: number,
    ariaPressed: booleanish,
    ariaReadOnly: booleanish,
    ariaRelevant: null,
    ariaRequired: booleanish,
    ariaRoleDescription: spaceSeparated,
    ariaRowCount: number,
    ariaRowIndex: number,
    ariaRowSpan: number,
    ariaSelected: booleanish,
    ariaSetSize: number,
    ariaSort: null,
    ariaValueMax: number,
    ariaValueMin: number,
    ariaValueNow: number,
    ariaValueText: null,
    role: null
  }
});
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/html.js



var html = create({
  space: 'html',
  attributes: {
    acceptcharset: 'accept-charset',
    classname: 'class',
    htmlfor: 'for',
    httpequiv: 'http-equiv'
  },
  transform: caseInsensitiveTransform,
  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: commaSeparated,
    acceptCharset: spaceSeparated,
    accessKey: spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: _boolean,
    allowPaymentRequest: _boolean,
    allowUserMedia: _boolean,
    alt: null,
    as: null,
    async: _boolean,
    autoCapitalize: null,
    autoComplete: spaceSeparated,
    autoFocus: _boolean,
    autoPlay: _boolean,
    capture: _boolean,
    charSet: null,
    checked: _boolean,
    cite: null,
    className: spaceSeparated,
    cols: number,
    colSpan: null,
    content: null,
    contentEditable: booleanish,
    controls: _boolean,
    controlsList: spaceSeparated,
    coords: number | commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    "default": _boolean,
    defer: _boolean,
    dir: null,
    dirName: null,
    disabled: _boolean,
    download: overloadedBoolean,
    draggable: booleanish,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: _boolean,
    formTarget: null,
    headers: spaceSeparated,
    height: number,
    hidden: _boolean,
    high: number,
    href: null,
    hrefLang: null,
    htmlFor: spaceSeparated,
    httpEquiv: spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: _boolean,
    itemId: null,
    itemProp: spaceSeparated,
    itemRef: spaceSeparated,
    itemScope: _boolean,
    itemType: spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: _boolean,
    low: number,
    manifest: null,
    max: null,
    maxLength: number,
    media: null,
    method: null,
    min: null,
    minLength: number,
    multiple: _boolean,
    muted: _boolean,
    name: null,
    nonce: null,
    noModule: _boolean,
    noValidate: _boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: _boolean,
    optimum: number,
    pattern: null,
    ping: spaceSeparated,
    placeholder: null,
    playsInline: _boolean,
    poster: null,
    preload: null,
    readOnly: _boolean,
    referrerPolicy: null,
    rel: spaceSeparated,
    required: _boolean,
    reversed: _boolean,
    rows: number,
    rowSpan: number,
    sandbox: spaceSeparated,
    scope: null,
    scoped: _boolean,
    seamless: _boolean,
    selected: _boolean,
    shape: null,
    size: number,
    sizes: null,
    slot: null,
    span: number,
    spellCheck: booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: number,
    step: null,
    style: null,
    tabIndex: number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: _boolean,
    useMap: null,
    value: booleanish,
    width: number,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    "char": null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: _boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: _boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: number,
    // `<img>` and `<object>`
    leftMargin: number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: number,
    // `<body>`
    marginWidth: number,
    // `<body>`
    noResize: _boolean,
    // `<frame>`
    noHref: _boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: _boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: _boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: number,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: _boolean,
    disableRemotePlayback: _boolean,
    prefix: null,
    property: null,
    results: number,
    security: null,
    unselectable: null
  }
});
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/svg.js



var svg = create({
  space: 'svg',
  attributes: {
    accentHeight: 'accent-height',
    alignmentBaseline: 'alignment-baseline',
    arabicForm: 'arabic-form',
    baselineShift: 'baseline-shift',
    capHeight: 'cap-height',
    className: 'class',
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    crossOrigin: 'crossorigin',
    dataType: 'datatype',
    dominantBaseline: 'dominant-baseline',
    enableBackground: 'enable-background',
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    hrefLang: 'hreflang',
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    horizOriginY: 'horiz-origin-y',
    imageRendering: 'image-rendering',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    navDown: 'nav-down',
    navDownLeft: 'nav-down-left',
    navDownRight: 'nav-down-right',
    navLeft: 'nav-left',
    navNext: 'nav-next',
    navPrev: 'nav-prev',
    navRight: 'nav-right',
    navUp: 'nav-up',
    navUpLeft: 'nav-up-left',
    navUpRight: 'nav-up-right',
    onAbort: 'onabort',
    onActivate: 'onactivate',
    onAfterPrint: 'onafterprint',
    onBeforePrint: 'onbeforeprint',
    onBegin: 'onbegin',
    onCancel: 'oncancel',
    onCanPlay: 'oncanplay',
    onCanPlayThrough: 'oncanplaythrough',
    onChange: 'onchange',
    onClick: 'onclick',
    onClose: 'onclose',
    onCopy: 'oncopy',
    onCueChange: 'oncuechange',
    onCut: 'oncut',
    onDblClick: 'ondblclick',
    onDrag: 'ondrag',
    onDragEnd: 'ondragend',
    onDragEnter: 'ondragenter',
    onDragExit: 'ondragexit',
    onDragLeave: 'ondragleave',
    onDragOver: 'ondragover',
    onDragStart: 'ondragstart',
    onDrop: 'ondrop',
    onDurationChange: 'ondurationchange',
    onEmptied: 'onemptied',
    onEnd: 'onend',
    onEnded: 'onended',
    onError: 'onerror',
    onFocus: 'onfocus',
    onFocusIn: 'onfocusin',
    onFocusOut: 'onfocusout',
    onHashChange: 'onhashchange',
    onInput: 'oninput',
    onInvalid: 'oninvalid',
    onKeyDown: 'onkeydown',
    onKeyPress: 'onkeypress',
    onKeyUp: 'onkeyup',
    onLoad: 'onload',
    onLoadedData: 'onloadeddata',
    onLoadedMetadata: 'onloadedmetadata',
    onLoadStart: 'onloadstart',
    onMessage: 'onmessage',
    onMouseDown: 'onmousedown',
    onMouseEnter: 'onmouseenter',
    onMouseLeave: 'onmouseleave',
    onMouseMove: 'onmousemove',
    onMouseOut: 'onmouseout',
    onMouseOver: 'onmouseover',
    onMouseUp: 'onmouseup',
    onMouseWheel: 'onmousewheel',
    onOffline: 'onoffline',
    onOnline: 'ononline',
    onPageHide: 'onpagehide',
    onPageShow: 'onpageshow',
    onPaste: 'onpaste',
    onPause: 'onpause',
    onPlay: 'onplay',
    onPlaying: 'onplaying',
    onPopState: 'onpopstate',
    onProgress: 'onprogress',
    onRateChange: 'onratechange',
    onRepeat: 'onrepeat',
    onReset: 'onreset',
    onResize: 'onresize',
    onScroll: 'onscroll',
    onSeeked: 'onseeked',
    onSeeking: 'onseeking',
    onSelect: 'onselect',
    onShow: 'onshow',
    onStalled: 'onstalled',
    onStorage: 'onstorage',
    onSubmit: 'onsubmit',
    onSuspend: 'onsuspend',
    onTimeUpdate: 'ontimeupdate',
    onToggle: 'ontoggle',
    onUnload: 'onunload',
    onVolumeChange: 'onvolumechange',
    onWaiting: 'onwaiting',
    onZoom: 'onzoom',
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pointerEvents: 'pointer-events',
    referrerPolicy: 'referrerpolicy',
    renderingIntent: 'rendering-intent',
    shapeRendering: 'shape-rendering',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    strokeDashArray: 'stroke-dasharray',
    strokeDashOffset: 'stroke-dashoffset',
    strokeLineCap: 'stroke-linecap',
    strokeLineJoin: 'stroke-linejoin',
    strokeMiterLimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    tabIndex: 'tabindex',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    typeOf: 'typeof',
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    vectorEffect: 'vector-effect',
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    xHeight: 'x-height',
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: 'playbackorder',
    timelineBegin: 'timelinebegin'
  },
  transform: caseSensitiveTransform,
  properties: {
    about: commaOrSpaceSeparated,
    accentHeight: number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: number,
    amplitude: number,
    arabicForm: null,
    ascent: number,
    attributeName: null,
    attributeType: null,
    azimuth: number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: number,
    by: null,
    calcMode: null,
    capHeight: number,
    className: spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: number,
    diffuseConstant: number,
    direction: null,
    display: null,
    dur: null,
    divisor: number,
    dominantBaseline: null,
    download: _boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: commaSeparated,
    g2: commaSeparated,
    glyphName: commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: number,
    horizOriginX: number,
    horizOriginY: number,
    id: null,
    ideographic: number,
    imageRendering: null,
    initialVisibility: null,
    "in": null,
    in2: null,
    intercept: number,
    k: number,
    k1: number,
    k2: number,
    k3: number,
    k4: number,
    kernelMatrix: commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: number,
    overlineThickness: number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: number,
    pointsAtY: number,
    pointsAtZ: number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: commaOrSpaceSeparated,
    rev: commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: commaOrSpaceSeparated,
    requiredFeatures: commaOrSpaceSeparated,
    requiredFonts: commaOrSpaceSeparated,
    requiredFormats: commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: number,
    specularExponent: number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: number,
    strikethroughThickness: number,
    string: null,
    stroke: null,
    strokeDashArray: commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: number,
    strokeOpacity: number,
    strokeWidth: null,
    style: null,
    surfaceScale: number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: commaOrSpaceSeparated,
    tabIndex: number,
    tableValues: null,
    target: null,
    targetX: number,
    targetY: number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: commaOrSpaceSeparated,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: number,
    underlineThickness: number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: number,
    values: null,
    vAlphabetic: number,
    vMathematical: number,
    vectorEffect: null,
    vHanging: number,
    vIdeographic: number,
    version: null,
    vertAdvY: number,
    vertOriginX: number,
    vertOriginY: number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/index.js
/**
 * @typedef {import('./lib/util/info.js').Info} Info
 * @typedef {import('./lib/util/schema.js').Schema} Schema
 */










var property_information_html = merge([xml, xlink, xmlns, aria, html], 'html');
var property_information_svg = merge([xml, xlink, xmlns, aria, svg], 'svg');
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/property-information/lib/find.js
/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */



var valid = /^data[-\w.:]+$/i;
var dash = /-[a-z]/g;
var cap = /[A-Z]/g;
/**
 * @param {Schema} schema
 * @param {string} value
 * @returns {Info}
 */

function find(schema, value) {
  var normal = normalize(value);
  var prop = value;
  var Type = Info;

  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }

  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
    // Attribute or property.
    if (value.charAt(4) === '-') {
      // Turn it into a property.
      var rest = value.slice(5).replace(dash, camelcase);
      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      // Turn it into an attribute.
      var _rest = value.slice(4);

      if (!dash.test(_rest)) {
        var dashes = _rest.replace(cap, kebab);

        if (dashes.charAt(0) !== '-') {
          dashes = '-' + dashes;
        }

        value = 'data' + dashes;
      }
    }

    Type = DefinedInfo;
  }

  return new Type(prop, value);
}
/**
 * @param {string} $0
 * @returns {string}
 */

function kebab($0) {
  return '-' + $0.toLowerCase();
}
/**
 * @param {string} $0
 * @returns {string}
 */


function camelcase($0) {
  return $0.charAt(1).toUpperCase();
}
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/hast-util-parse-selector/index.js
/**
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('hast').Element} Element
 */
var search = /[#.]/g;
/**
 * Create a hast element from a simple CSS selector.
 *
 * @param selector A simple CSS selector.
 *   Can contain a tag-name (`foo`), classes (`.bar`), and an ID (`#baz`).
 *   Multiple classes are allowed.
 *   Uses the last ID if multiple IDs are found.
 * @param [defaultTagName='div'] Tag name to use if `selector` does not specify one.
 */

var parseSelector =
/**
 * @type {(
 *  <Selector extends string, DefaultTagName extends string = 'div'>(selector?: Selector, defaultTagName?: DefaultTagName) => Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}
 * )}
 */

/**
 * @param {string} [selector]
 * @param {string} [defaultTagName='div']
 * @returns {Element}
 */
function parseSelector(selector) {
  var defaultTagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';
  var value = selector || '';
  /** @type {Properties} */

  var props = {};
  var start = 0;
  /** @type {string} */

  var subvalue;
  /** @type {string} */

  var previous;
  /** @type {RegExpMatchArray} */

  var match;

  while (start < value.length) {
    search.lastIndex = start;
    match = search.exec(value);
    subvalue = value.slice(start, match ? match.index : value.length);

    if (subvalue) {
      if (!previous) {
        defaultTagName = subvalue;
      } else if (previous === '#') {
        props.id = subvalue;
      } else if (Array.isArray(props.className)) {
        props.className.push(subvalue);
      } else {
        props.className = [subvalue];
      }

      start += subvalue.length;
    }

    if (match) {
      previous = match[0];
      start++;
    }
  }

  return {
    type: 'element',
    tagName: defaultTagName,
    properties: props,
    children: []
  };
};
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/space-separated-tokens/index.js
/**
 * Parse space separated tokens to an array of strings.
 *
 * @param {string} value Space separated tokens
 * @returns {Array.<string>} Tokens
 */
function space_separated_tokens_parse(value) {
  var input = String(value || '').trim();
  return input ? input.split(/[ \t\n\r\f]+/g) : [];
}
/**
 * Serialize an array of strings as space separated tokens.
 *
 * @param {Array.<string|number>} values Tokens
 * @returns {string} Space separated tokens
 */

function stringify(values) {
  return values.join(' ').trim();
}
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/comma-separated-tokens/index.js
/**
 * @typedef {Object} StringifyOptions
 * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).
 * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).
 */

/**
 * Parse comma separated tokens to an array.
 *
 * @param {string} value
 * @returns {Array.<string>}
 */
function comma_separated_tokens_parse(value) {
  /** @type {Array.<string>} */
  var tokens = [];
  var input = String(value || '');
  var index = input.indexOf(',');
  var start = 0;
  /** @type {boolean} */

  var end;
  /** @type {string} */

  var token;

  while (!end) {
    if (index === -1) {
      index = input.length;
      end = true;
    }

    token = input.slice(start, index).trim();

    if (token || !end) {
      tokens.push(token);
    }

    start = index + 1;
    index = input.indexOf(',', start);
  }

  return tokens;
}
/**
 * Serialize an array of strings to comma separated tokens.
 *
 * @param {Array.<string|number>} values
 * @param {StringifyOptions} [options]
 * @returns {string}
 */

function comma_separated_tokens_stringify(values, options) {
  var settings = options || {}; // Ensure the last empty entry is seen.

  if (values[values.length - 1] === '') {
    values = values.concat('');
  }

  return values.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();
}
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/hastscript/lib/core.js
/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {Root['children'][number]} Child
 * @typedef {Child|Root} Node
 * @typedef {import('property-information').Info} Info
 * @typedef {import('property-information').Schema} Schema
 *
 * @typedef {Root|Element} HResult
 * @typedef {string|number} HStyleValue
 * @typedef {Object.<string, HStyleValue>} HStyle
 * @typedef {string|number|boolean|null|undefined} HPrimitiveValue
 * @typedef {Array.<string|number>} HArrayValue
 * @typedef {HPrimitiveValue|HArrayValue} HPropertyValue
 * @typedef {{[property: string]: HPropertyValue|HStyle}} HProperties
 *
 * @typedef {string|number|null|undefined} HPrimitiveChild
 * @typedef {Array.<Node|HPrimitiveChild>} HArrayChild
 * @typedef {Node|HPrimitiveChild|HArrayChild} HChild
 */




var buttonTypes = new Set(['menu', 'submit', 'reset', 'button']);
var core_own = {}.hasOwnProperty;
/**
 * @param {Schema} schema
 * @param {string} defaultTagName
 * @param {Array.<string>} [caseSensitive]
 */

function core_core(schema, defaultTagName, caseSensitive) {
  var adjust = caseSensitive && createAdjustMap(caseSensitive);

  var h =
  /**
   * @type {{
   *   (): Root
   *   (selector: null|undefined, ...children: HChild[]): Root
   *   (selector: string, properties?: HProperties, ...children: HChild[]): Element
   *   (selector: string, ...children: HChild[]): Element
   * }}
   */

  /**
   * Hyperscript compatible DSL for creating virtual hast trees.
   *
   * @param {string|null} [selector]
   * @param {HProperties|HChild} [properties]
   * @param {HChild[]} children
   * @returns {HResult}
   */
  function h(selector, properties) {
    var index = -1;
    /** @type {HResult} */

    var node;

    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    if (selector === undefined || selector === null) {
      node = {
        type: 'root',
        children: []
      }; // @ts-expect-error Properties are not supported for roots.

      children.unshift(properties);
    } else {
      node = parseSelector(selector, defaultTagName); // Normalize the name.

      node.tagName = node.tagName.toLowerCase();

      if (adjust && core_own.call(adjust, node.tagName)) {
        node.tagName = adjust[node.tagName];
      } // Handle props.


      if (isProperties(properties, node.tagName)) {
        /** @type {string} */
        var key;

        for (key in properties) {
          if (core_own.call(properties, key)) {
            // @ts-expect-error `node.properties` is set.
            addProperty(schema, node.properties, key, properties[key]);
          }
        }
      } else {
        children.unshift(properties);
      }
    } // Handle children.


    while (++index < children.length) {
      addChild(node.children, children[index]);
    }

    if (node.type === 'element' && node.tagName === 'template') {
      node.content = {
        type: 'root',
        children: node.children
      };
      node.children = [];
    }

    return node;
  };

  return h;
}
/**
 * @param {HProperties|HChild} value
 * @param {string} name
 * @returns {value is HProperties}
 */

function isProperties(value, name) {
  if (value === null || value === undefined || typeof value !== 'object' || Array.isArray(value)) {
    return false;
  }

  if (name === 'input' || !value.type || typeof value.type !== 'string') {
    return true;
  }

  if ('children' in value && Array.isArray(value.children)) {
    return false;
  }

  if (name === 'button') {
    return buttonTypes.has(value.type.toLowerCase());
  }

  return !('value' in value);
}
/**
 * @param {Schema} schema
 * @param {Properties} properties
 * @param {string} key
 * @param {HStyle|HPropertyValue} value
 * @returns {void}
 */


function addProperty(schema, properties, key, value) {
  var info = find(schema, key);
  var index = -1;
  /** @type {HPropertyValue} */

  var result; // Ignore nullish and NaN values.

  if (value === undefined || value === null) return;

  if (typeof value === 'number') {
    // Ignore NaN.
    if (Number.isNaN(value)) return;
    result = value;
  } // Booleans.
  else if (typeof value === 'boolean') {
    result = value;
  } // Handle list values.
  else if (typeof value === 'string') {
    if (info.spaceSeparated) {
      result = space_separated_tokens_parse(value);
    } else if (info.commaSeparated) {
      result = comma_separated_tokens_parse(value);
    } else if (info.commaOrSpaceSeparated) {
      result = space_separated_tokens_parse(comma_separated_tokens_parse(value).join(' '));
    } else {
      result = parsePrimitive(info, info.property, value);
    }
  } else if (Array.isArray(value)) {
    result = value.concat();
  } else {
    result = info.property === 'style' ? style(value) : String(value);
  }

  if (Array.isArray(result)) {
    /** @type {Array.<string|number>} */
    var finalResult = [];

    while (++index < result.length) {
      // @ts-expect-error Assume no booleans in array.
      finalResult[index] = parsePrimitive(info, info.property, result[index]);
    }

    result = finalResult;
  } // Class names (which can be added both on the `selector` and here).


  if (info.property === 'className' && Array.isArray(properties.className)) {
    // @ts-expect-error Assume no booleans in `className`.
    result = properties.className.concat(result);
  }

  properties[info.property] = result;
}
/**
 * @param {Array.<Child>} nodes
 * @param {HChild} value
 * @returns {void}
 */


function addChild(nodes, value) {
  var index = -1;

  if (value === undefined || value === null) {// Empty.
  } else if (typeof value === 'string' || typeof value === 'number') {
    nodes.push({
      type: 'text',
      value: String(value)
    });
  } else if (Array.isArray(value)) {
    while (++index < value.length) {
      addChild(nodes, value[index]);
    }
  } else if (typeof value === 'object' && 'type' in value) {
    if (value.type === 'root') {
      addChild(nodes, value.children);
    } else {
      nodes.push(value);
    }
  } else {
    throw new Error('Expected node, nodes, or string, got `' + value + '`');
  }
}
/**
 * Parse a single primitives.
 *
 * @param {Info} info
 * @param {string} name
 * @param {HPrimitiveValue} value
 * @returns {HPrimitiveValue}
 */


function parsePrimitive(info, name, value) {
  if (typeof value === 'string') {
    if (info.number && value && !Number.isNaN(Number(value))) {
      return Number(value);
    }

    if ((info["boolean"] || info.overloadedBoolean) && (value === '' || normalize(value) === normalize(name))) {
      return true;
    }
  }

  return value;
}
/**
 * @param {HStyle} value
 * @returns {string}
 */


function style(value) {
  /** @type {Array.<string>} */
  var result = [];
  /** @type {string} */

  var key;

  for (key in value) {
    if (core_own.call(value, key)) {
      result.push([key, value[key]].join(': '));
    }
  }

  return result.join('; ');
}
/**
 * @param {Array.<string>} values
 * @returns {Object.<string, string>}
 */


function createAdjustMap(values) {
  /** @type {Object.<string, string>} */
  var result = {};
  var index = -1;

  while (++index < values.length) {
    result[values[index].toLowerCase()] = values[index];
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/rehype-document/node_modules/hastscript/lib/html.js
/**
 * @typedef {import('./core.js').HChild} Child Acceptable child value
 * @typedef {import('./core.js').HProperties} Properties Acceptable properties value.
 *
 * @typedef {import('./jsx-classic').Element} h.JSX.Element
 * @typedef {import('./jsx-classic').IntrinsicAttributes} h.JSX.IntrinsicAttributes
 * @typedef {import('./jsx-classic').IntrinsicElements} h.JSX.IntrinsicElements
 * @typedef {import('./jsx-classic').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute
 */


var h = core_core(property_information_html, 'div');
;// CONCATENATED MODULE: ./node_modules/rehype-document/index.js
/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').DocType} DocType
 * @typedef {Root|Root['children'][number]} Node
 * @typedef {import('hast').Properties} Properties
 *
 * @typedef Options
 * @property {string|undefined} [title]
 *   Text to use as title.
 *   Defaults to name of file (if any).
 * @property {string|undefined} [language='en']
 *   Natural language of document.
 *   Should be a [BCP 47](https://tools.ietf.org/html/bcp47) language tag.
 * @property {boolean|undefined} [responsive=true]
 *   Whether to insert a `meta[viewport]`.
 * @property {string|Array<string>|undefined} [style=[]]
 *   CSS to include in `head` in `<style>` elements.
 * @property {string|Array<string>|undefined} [css=[]]
 *   Links to stylesheets to include in `head`.
 * @property {Properties|Array<Properties>|undefined} [meta=[]]
 *   Metadata to include in `head`.
 *
 *   Each object is passed as
 *   [`properties`](https://github.com/syntax-tree/hastscript#hselector-properties-children)
 *   to [`hastscript`](https://github.com/syntax-tree/hastscript) with a
 *   `meta` element.
 * @property {Properties|Array<Properties>|undefined} [link=[]]
 *   Link tags to include in `head`.
 *
 *   Each object is passed as
 *   [`properties`](https://github.com/syntax-tree/hastscript#hselector-properties-children)
 *   to [`hastscript`](https://github.com/syntax-tree/hastscript) with a `link`
 *   element.
 * @property {string|Array<string>|undefined} [script=[]]
 *   Inline scripts to include at end of `body` in `<script>`s.
 * @property {string|Array<string>|undefined} [js=[]]
 *   External scripts to include at end of `body` in `script[src]`s.
 */

/**
 * Wrap a document around a fragment.
 *
 * @type {import('unified').Plugin<[Options?] | Array<void>, Root>}
 */

function rehypeDocument() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var meta = cast(options.meta);
  var link = cast(options.link);
  var styles = cast(options.style);
  var css = cast(options.css);
  var scripts = cast(options.script);
  var js = cast(options.js);

  if (options.responsive !== false) {
    meta.unshift({
      name: 'viewport',
      content: 'width=device-width, initial-scale=1'
    });
  }

  return function (tree, file) {
    var title = options.title || file.stem;
    /** @type {Array<Node>} */

    var contents = tree.type === 'root' ? tree.children.concat() : [tree];
    /** @type {Array<Node>} */

    var head = [{
      type: 'text',
      value: '\n'
    }, h('meta', {
      charset: 'utf-8'
    })];
    var index = -1;

    if (contents.length > 0) {
      contents.unshift({
        type: 'text',
        value: '\n'
      });
    }

    if (title) {
      head.push({
        type: 'text',
        value: '\n'
      }, h('title', [title]));
    }

    while (++index < meta.length) {
      head.push({
        type: 'text',
        value: '\n'
      }, h('meta', meta[index]));
    }

    index = -1;

    while (++index < link.length) {
      head.push({
        type: 'text',
        value: '\n'
      }, h('link', link[index]));
    } // Inject style tags before linked CSS


    index = -1;

    while (++index < styles.length) {
      head.push({
        type: 'text',
        value: '\n'
      }, h('style', styles[index]));
    }

    index = -1;

    while (++index < css.length) {
      head.push({
        type: 'text',
        value: '\n'
      }, h('link', {
        rel: 'stylesheet',
        href: css[index]
      }));
    }

    head.push({
      type: 'text',
      value: '\n'
    }); // Inject script tags before linked JS

    index = -1;

    while (++index < scripts.length) {
      contents.push({
        type: 'text',
        value: '\n'
      }, h('script', scripts[index]));
    }

    index = -1;

    while (++index < js.length) {
      contents.push({
        type: 'text',
        value: '\n'
      }, h('script', {
        src: js[index]
      }));
    }

    contents.push({
      type: 'text',
      value: '\n'
    });
    /** @type {DocType} */
    // @ts-expect-error: `name` is no longer needed.

    var doctype = {
      type: 'doctype'
    };
    return {
      type: 'root',
      children: [doctype, {
        type: 'text',
        value: '\n'
      }, h('html', {
        lang: options.language || 'en'
      }, [{
        type: 'text',
        value: '\n'
      }, h('head', head), {
        type: 'text',
        value: '\n'
      }, h('body', contents), {
        type: 'text',
        value: '\n'
      }]), {
        type: 'text',
        value: '\n'
      }]
    };
  };
}
/**
 * @template Thing
 * @param {Thing|Array<Thing>|null|undefined} value
 * @returns {Array<Thing>}
 */

function cast(value) {
  return value === null || value === undefined ? [] : typeof value === 'string' || !Array.isArray(value) ? [value] : value;
}
// EXTERNAL MODULE: ./node_modules/@mapbox/rehype-prism/index.js
var rehype_prism = __webpack_require__(7958);
var rehype_prism_default = /*#__PURE__*/__webpack_require__.n(rehype_prism);
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/util/schema.js



/**
 * @typedef {import('./info.js').Info} Info
 * @typedef {Record<string, Info>} Properties
 * @typedef {Record<string, string>} Normal
 */
var schema_Schema = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {Properties} property
 * @param {Normal} normal
 * @param {string} [space]
 */
function Schema(property, normal, space) {
  _classCallCheck(this, Schema);

  this.property = property;
  this.normal = normal;

  if (space) {
    this.space = space;
  }
});
/** @type {Properties} */

schema_Schema.prototype.property = {};
/** @type {Normal} */

schema_Schema.prototype.normal = {};
/** @type {string|null} */

schema_Schema.prototype.space = null;
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/util/merge.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 */

/**
 * @param {Schema[]} definitions
 * @param {string} [space]
 * @returns {Schema}
 */

function merge_merge(definitions, space) {
  /** @type {Properties} */
  var property = {};
  /** @type {Normal} */

  var normal = {};
  var index = -1;

  while (++index < definitions.length) {
    Object.assign(property, definitions[index].property);
    Object.assign(normal, definitions[index].normal);
  }

  return new schema_Schema(property, normal, space);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/normalize.js
/**
 * @param {string} value
 * @returns {string}
 */
function normalize_normalize(value) {
  return value.toLowerCase();
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/util/info.js


var info_Info = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {string} property
 * @param {string} attribute
 */
function Info(property, attribute) {
  _classCallCheck(this, Info);

  /** @type {string} */
  this.property = property;
  /** @type {string} */

  this.attribute = attribute;
});
/** @type {string|null} */

info_Info.prototype.space = null;
info_Info.prototype["boolean"] = false;
info_Info.prototype.booleanish = false;
info_Info.prototype.overloadedBoolean = false;
info_Info.prototype.number = false;
info_Info.prototype.commaSeparated = false;
info_Info.prototype.spaceSeparated = false;
info_Info.prototype.commaOrSpaceSeparated = false;
info_Info.prototype.mustUseProperty = false;
info_Info.prototype.defined = false;
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/util/types.js
var types_powers = 0;

var types_boolean = types_increment();


var types_booleanish = types_increment();
var types_overloadedBoolean = types_increment();
var types_number = types_increment();
var types_spaceSeparated = types_increment();
var types_commaSeparated = types_increment();
var types_commaOrSpaceSeparated = types_increment();

function types_increment() {
  return Math.pow(2, ++types_powers);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/util/defined-info.js







/** @type {Array<keyof types>} */
// @ts-expect-error: hush.

var defined_info_checks = Object.keys(util_types_namespaceObject);
var defined_info_DefinedInfo = /*#__PURE__*/function (_Info) {
  _inherits(DefinedInfo, _Info);

  var _super = _createSuper(DefinedInfo);

  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  function DefinedInfo(property, attribute, mask, space) {
    var _this;

    _classCallCheck(this, DefinedInfo);

    var index = -1;
    _this = _super.call(this, property, attribute);
    defined_info_mark(_assertThisInitialized(_this), 'space', space);

    if (typeof mask === 'number') {
      while (++index < defined_info_checks.length) {
        var check = defined_info_checks[index];
        defined_info_mark(_assertThisInitialized(_this), defined_info_checks[index], (mask & util_types_namespaceObject[check]) === util_types_namespaceObject[check]);
      }
    }

    return _this;
  }

  return _createClass(DefinedInfo);
}(info_Info);
defined_info_DefinedInfo.prototype.defined = true;
/**
 * @param {DefinedInfo} values
 * @param {string} key
 * @param {unknown} value
 */

function defined_info_mark(values, key, value) {
  if (value) {
    // @ts-expect-error: assume `value` matches the expected value of `key`.
    values[key] = value;
  }
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/util/create.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 *
 * @typedef {Record<string, string>} Attributes
 *
 * @typedef {Object} Definition
 * @property {Record<string, number|null>} properties
 * @property {(attributes: Attributes, property: string) => string} transform
 * @property {string} [space]
 * @property {Attributes} [attributes]
 * @property {Array<string>} [mustUseProperty]
 */



var util_create_own = {}.hasOwnProperty;
/**
 * @param {Definition} definition
 * @returns {Schema}
 */

function create_create(definition) {
  /** @type {Properties} */
  var property = {};
  /** @type {Normal} */

  var normal = {};
  /** @type {string} */

  var prop;

  for (prop in definition.properties) {
    if (util_create_own.call(definition.properties, prop)) {
      var value = definition.properties[prop];
      var info = new defined_info_DefinedInfo(prop, definition.transform(definition.attributes || {}, prop), value, definition.space);

      if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {
        info.mustUseProperty = true;
      }

      property[prop] = info;
      normal[normalize_normalize(prop)] = prop;
      normal[normalize_normalize(info.attribute)] = prop;
    }
  }

  return new schema_Schema(property, normal, definition.space);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/xlink.js

var xlink_xlink = create_create({
  space: 'xlink',
  transform: function transform(_, prop) {
    return 'xlink:' + prop.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/xml.js

var xml_xml = create_create({
  space: 'xml',
  transform: function transform(_, prop) {
    return 'xml:' + prop.slice(3).toLowerCase();
  },
  properties: {
    xmlLang: null,
    xmlBase: null,
    xmlSpace: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/util/case-sensitive-transform.js
/**
 * @param {Record<string, string>} attributes
 * @param {string} attribute
 * @returns {string}
 */
function case_sensitive_transform_caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/util/case-insensitive-transform.js

/**
 * @param {Record<string, string>} attributes
 * @param {string} property
 * @returns {string}
 */

function case_insensitive_transform_caseInsensitiveTransform(attributes, property) {
  return case_sensitive_transform_caseSensitiveTransform(attributes, property.toLowerCase());
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/xmlns.js


var xmlns_xmlns = create_create({
  space: 'xmlns',
  attributes: {
    xmlnsxlink: 'xmlns:xlink'
  },
  transform: case_insensitive_transform_caseInsensitiveTransform,
  properties: {
    xmlns: null,
    xmlnsXLink: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/aria.js


var aria_aria = create_create({
  transform: function transform(_, prop) {
    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: types_booleanish,
    ariaAutoComplete: null,
    ariaBusy: types_booleanish,
    ariaChecked: types_booleanish,
    ariaColCount: types_number,
    ariaColIndex: types_number,
    ariaColSpan: types_number,
    ariaControls: types_spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: types_spaceSeparated,
    ariaDetails: null,
    ariaDisabled: types_booleanish,
    ariaDropEffect: types_spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: types_booleanish,
    ariaFlowTo: types_spaceSeparated,
    ariaGrabbed: types_booleanish,
    ariaHasPopup: null,
    ariaHidden: types_booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: types_spaceSeparated,
    ariaLevel: types_number,
    ariaLive: null,
    ariaModal: types_booleanish,
    ariaMultiLine: types_booleanish,
    ariaMultiSelectable: types_booleanish,
    ariaOrientation: null,
    ariaOwns: types_spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: types_number,
    ariaPressed: types_booleanish,
    ariaReadOnly: types_booleanish,
    ariaRelevant: null,
    ariaRequired: types_booleanish,
    ariaRoleDescription: types_spaceSeparated,
    ariaRowCount: types_number,
    ariaRowIndex: types_number,
    ariaRowSpan: types_number,
    ariaSelected: types_booleanish,
    ariaSetSize: types_number,
    ariaSort: null,
    ariaValueMax: types_number,
    ariaValueMin: types_number,
    ariaValueNow: types_number,
    ariaValueText: null,
    role: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/html.js



var html_html = create_create({
  space: 'html',
  attributes: {
    acceptcharset: 'accept-charset',
    classname: 'class',
    htmlfor: 'for',
    httpequiv: 'http-equiv'
  },
  transform: case_insensitive_transform_caseInsensitiveTransform,
  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: types_commaSeparated,
    acceptCharset: types_spaceSeparated,
    accessKey: types_spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: types_boolean,
    allowPaymentRequest: types_boolean,
    allowUserMedia: types_boolean,
    alt: null,
    as: null,
    async: types_boolean,
    autoCapitalize: null,
    autoComplete: types_spaceSeparated,
    autoFocus: types_boolean,
    autoPlay: types_boolean,
    capture: types_boolean,
    charSet: null,
    checked: types_boolean,
    cite: null,
    className: types_spaceSeparated,
    cols: types_number,
    colSpan: null,
    content: null,
    contentEditable: types_booleanish,
    controls: types_boolean,
    controlsList: types_spaceSeparated,
    coords: types_number | types_commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    "default": types_boolean,
    defer: types_boolean,
    dir: null,
    dirName: null,
    disabled: types_boolean,
    download: types_overloadedBoolean,
    draggable: types_booleanish,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: types_boolean,
    formTarget: null,
    headers: types_spaceSeparated,
    height: types_number,
    hidden: types_boolean,
    high: types_number,
    href: null,
    hrefLang: null,
    htmlFor: types_spaceSeparated,
    httpEquiv: types_spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: types_boolean,
    itemId: null,
    itemProp: types_spaceSeparated,
    itemRef: types_spaceSeparated,
    itemScope: types_boolean,
    itemType: types_spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: types_boolean,
    low: types_number,
    manifest: null,
    max: null,
    maxLength: types_number,
    media: null,
    method: null,
    min: null,
    minLength: types_number,
    multiple: types_boolean,
    muted: types_boolean,
    name: null,
    nonce: null,
    noModule: types_boolean,
    noValidate: types_boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: types_boolean,
    optimum: types_number,
    pattern: null,
    ping: types_spaceSeparated,
    placeholder: null,
    playsInline: types_boolean,
    poster: null,
    preload: null,
    readOnly: types_boolean,
    referrerPolicy: null,
    rel: types_spaceSeparated,
    required: types_boolean,
    reversed: types_boolean,
    rows: types_number,
    rowSpan: types_number,
    sandbox: types_spaceSeparated,
    scope: null,
    scoped: types_boolean,
    seamless: types_boolean,
    selected: types_boolean,
    shape: null,
    size: types_number,
    sizes: null,
    slot: null,
    span: types_number,
    spellCheck: types_booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: types_number,
    step: null,
    style: null,
    tabIndex: types_number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: types_boolean,
    useMap: null,
    value: types_booleanish,
    width: types_number,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: types_spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: types_number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: types_number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    "char": null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: types_boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: types_boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: types_number,
    // `<img>` and `<object>`
    leftMargin: types_number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: types_number,
    // `<body>`
    marginWidth: types_number,
    // `<body>`
    noResize: types_boolean,
    // `<frame>`
    noHref: types_boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: types_boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: types_boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: types_number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: types_booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: types_number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: types_number,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: types_boolean,
    disableRemotePlayback: types_boolean,
    prefix: null,
    property: null,
    results: types_number,
    security: null,
    unselectable: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/svg.js



var svg_svg = create_create({
  space: 'svg',
  attributes: {
    accentHeight: 'accent-height',
    alignmentBaseline: 'alignment-baseline',
    arabicForm: 'arabic-form',
    baselineShift: 'baseline-shift',
    capHeight: 'cap-height',
    className: 'class',
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    crossOrigin: 'crossorigin',
    dataType: 'datatype',
    dominantBaseline: 'dominant-baseline',
    enableBackground: 'enable-background',
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    hrefLang: 'hreflang',
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    horizOriginY: 'horiz-origin-y',
    imageRendering: 'image-rendering',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    navDown: 'nav-down',
    navDownLeft: 'nav-down-left',
    navDownRight: 'nav-down-right',
    navLeft: 'nav-left',
    navNext: 'nav-next',
    navPrev: 'nav-prev',
    navRight: 'nav-right',
    navUp: 'nav-up',
    navUpLeft: 'nav-up-left',
    navUpRight: 'nav-up-right',
    onAbort: 'onabort',
    onActivate: 'onactivate',
    onAfterPrint: 'onafterprint',
    onBeforePrint: 'onbeforeprint',
    onBegin: 'onbegin',
    onCancel: 'oncancel',
    onCanPlay: 'oncanplay',
    onCanPlayThrough: 'oncanplaythrough',
    onChange: 'onchange',
    onClick: 'onclick',
    onClose: 'onclose',
    onCopy: 'oncopy',
    onCueChange: 'oncuechange',
    onCut: 'oncut',
    onDblClick: 'ondblclick',
    onDrag: 'ondrag',
    onDragEnd: 'ondragend',
    onDragEnter: 'ondragenter',
    onDragExit: 'ondragexit',
    onDragLeave: 'ondragleave',
    onDragOver: 'ondragover',
    onDragStart: 'ondragstart',
    onDrop: 'ondrop',
    onDurationChange: 'ondurationchange',
    onEmptied: 'onemptied',
    onEnd: 'onend',
    onEnded: 'onended',
    onError: 'onerror',
    onFocus: 'onfocus',
    onFocusIn: 'onfocusin',
    onFocusOut: 'onfocusout',
    onHashChange: 'onhashchange',
    onInput: 'oninput',
    onInvalid: 'oninvalid',
    onKeyDown: 'onkeydown',
    onKeyPress: 'onkeypress',
    onKeyUp: 'onkeyup',
    onLoad: 'onload',
    onLoadedData: 'onloadeddata',
    onLoadedMetadata: 'onloadedmetadata',
    onLoadStart: 'onloadstart',
    onMessage: 'onmessage',
    onMouseDown: 'onmousedown',
    onMouseEnter: 'onmouseenter',
    onMouseLeave: 'onmouseleave',
    onMouseMove: 'onmousemove',
    onMouseOut: 'onmouseout',
    onMouseOver: 'onmouseover',
    onMouseUp: 'onmouseup',
    onMouseWheel: 'onmousewheel',
    onOffline: 'onoffline',
    onOnline: 'ononline',
    onPageHide: 'onpagehide',
    onPageShow: 'onpageshow',
    onPaste: 'onpaste',
    onPause: 'onpause',
    onPlay: 'onplay',
    onPlaying: 'onplaying',
    onPopState: 'onpopstate',
    onProgress: 'onprogress',
    onRateChange: 'onratechange',
    onRepeat: 'onrepeat',
    onReset: 'onreset',
    onResize: 'onresize',
    onScroll: 'onscroll',
    onSeeked: 'onseeked',
    onSeeking: 'onseeking',
    onSelect: 'onselect',
    onShow: 'onshow',
    onStalled: 'onstalled',
    onStorage: 'onstorage',
    onSubmit: 'onsubmit',
    onSuspend: 'onsuspend',
    onTimeUpdate: 'ontimeupdate',
    onToggle: 'ontoggle',
    onUnload: 'onunload',
    onVolumeChange: 'onvolumechange',
    onWaiting: 'onwaiting',
    onZoom: 'onzoom',
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pointerEvents: 'pointer-events',
    referrerPolicy: 'referrerpolicy',
    renderingIntent: 'rendering-intent',
    shapeRendering: 'shape-rendering',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    strokeDashArray: 'stroke-dasharray',
    strokeDashOffset: 'stroke-dashoffset',
    strokeLineCap: 'stroke-linecap',
    strokeLineJoin: 'stroke-linejoin',
    strokeMiterLimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    tabIndex: 'tabindex',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    typeOf: 'typeof',
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    vectorEffect: 'vector-effect',
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    xHeight: 'x-height',
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: 'playbackorder',
    timelineBegin: 'timelinebegin'
  },
  transform: case_sensitive_transform_caseSensitiveTransform,
  properties: {
    about: types_commaOrSpaceSeparated,
    accentHeight: types_number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: types_number,
    amplitude: types_number,
    arabicForm: null,
    ascent: types_number,
    attributeName: null,
    attributeType: null,
    azimuth: types_number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: types_number,
    by: null,
    calcMode: null,
    capHeight: types_number,
    className: types_spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: types_number,
    diffuseConstant: types_number,
    direction: null,
    display: null,
    dur: null,
    divisor: types_number,
    dominantBaseline: null,
    download: types_boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: types_number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: types_number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: types_number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: types_commaSeparated,
    g2: types_commaSeparated,
    glyphName: types_commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: types_number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: types_number,
    horizOriginX: types_number,
    horizOriginY: types_number,
    id: null,
    ideographic: types_number,
    imageRendering: null,
    initialVisibility: null,
    "in": null,
    in2: null,
    intercept: types_number,
    k: types_number,
    k1: types_number,
    k2: types_number,
    k3: types_number,
    k4: types_number,
    kernelMatrix: types_commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: types_number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: types_number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: types_number,
    overlineThickness: types_number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: types_number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: types_spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: types_number,
    pointsAtY: types_number,
    pointsAtZ: types_number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: types_commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: types_commaOrSpaceSeparated,
    rev: types_commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: types_commaOrSpaceSeparated,
    requiredFeatures: types_commaOrSpaceSeparated,
    requiredFonts: types_commaOrSpaceSeparated,
    requiredFormats: types_commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: types_number,
    specularExponent: types_number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: types_number,
    strikethroughThickness: types_number,
    string: null,
    stroke: null,
    strokeDashArray: types_commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: types_number,
    strokeOpacity: types_number,
    strokeWidth: null,
    style: null,
    surfaceScale: types_number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: types_commaOrSpaceSeparated,
    tabIndex: types_number,
    tableValues: null,
    target: null,
    targetX: types_number,
    targetY: types_number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: types_commaOrSpaceSeparated,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: types_number,
    underlineThickness: types_number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: types_number,
    values: null,
    vAlphabetic: types_number,
    vMathematical: types_number,
    vectorEffect: null,
    vHanging: types_number,
    vIdeographic: types_number,
    version: null,
    vertAdvY: types_number,
    vertOriginX: types_number,
    vertOriginY: types_number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: types_number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/index.js
/**
 * @typedef {import('./lib/util/info.js').Info} Info
 * @typedef {import('./lib/util/schema.js').Schema} Schema
 */










var node_modules_property_information_html = merge_merge([xml_xml, xlink_xlink, xmlns_xmlns, aria_aria, html_html], 'html');
var node_modules_property_information_svg = merge_merge([xml_xml, xlink_xlink, xmlns_xmlns, aria_aria, svg_svg], 'svg');
;// CONCATENATED MODULE: ./node_modules/html-void-elements/index.js
/**
 * List of HTML void tag names.
 *
 * @type {Array<string>}
 */
var htmlVoidElements = ['area', 'base', 'basefont', 'bgsound', 'br', 'col', 'command', 'embed', 'frame', 'hr', 'image', 'img', 'input', 'isindex', 'keygen', 'link', 'menuitem', 'meta', 'nextid', 'param', 'source', 'track', 'wbr'];
;// CONCATENATED MODULE: ./node_modules/hast-util-is-element/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('hast').Element} Element
 *
 * @typedef {string} TagName
 * @typedef {null|undefined|TagName|TestFunctionAnything|Array.<TagName|TestFunctionAnything>} Test
 */

/**
 * Check if an element passes a test
 *
 * @callback TestFunctionAnything
 * @param {Element} element
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {boolean|void}
 */

/**
 * Check if an element passes a certain node test
 *
 * @template {Element} X
 * @callback TestFunctionPredicate
 * @param {X} element
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {element is X}
 */

/**
 * Check if a node is an element and passes a certain node test
 *
 * @callback AssertAnything
 * @param {unknown} [node]
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {boolean}
 */

/**
 * Check if a node is an element and passes a certain node test
 *
 * @template {Element} Y
 * @callback AssertPredicate
 * @param {unknown} [node]
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {node is Y}
 */
// Check if `node` is an `element` and whether it passes the given test.
var isElement =
/**
 * Check if a node is an element and passes a test.
 * When a `parent` node is known the `index` of node should also be given.
 *
 * @type {(
 *   (<T extends Element>(node: unknown, test: T['tagName']|TestFunctionPredicate<T>|Array.<T['tagName']|TestFunctionPredicate<T>>, index?: number, parent?: Parent, context?: unknown) => node is T) &
 *   ((node?: unknown, test?: Test, index?: number, parent?: Parent, context?: unknown) => boolean)
 * )}
 */

/**
 * Check if a node passes a test.
 * When a `parent` node is known the `index` of node should also be given.
 *
 * @param {unknown} [node] Node to check
 * @param {Test} [test] When nullish, checks if `node` is a `Node`.
 * When `string`, works like passing `function (node) {return node.type === test}`.
 * When `function` checks if function passed the node is true.
 * When `array`, checks any one of the subtests pass.
 * @param {number} [index] Position of `node` in `parent`
 * @param {Parent} [parent] Parent of `node`
 * @param {unknown} [context] Context object to invoke `test` with
 * @returns {boolean} Whether test passed and `node` is an `Element` (object with `type` set to `element` and `tagName` set to a non-empty string).
 */
// eslint-disable-next-line max-params
function isElement(node, test, index, parent, context) {
  var check = convertElement(test);

  if (index !== undefined && index !== null && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {
    throw new Error('Expected positive finite index for child node');
  }

  if (parent !== undefined && parent !== null && (!parent.type || !parent.children)) {
    throw new Error('Expected parent node');
  } // @ts-expect-error Looks like a node.


  if (!node || !node.type || typeof node.type !== 'string') {
    return false;
  }

  if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {
    throw new Error('Expected both parent and index');
  }

  return check.call(context, node, index, parent);
};
var convertElement =
/**
 * @type {(
 *   (<T extends Element>(test: T['tagName']|TestFunctionPredicate<T>) => AssertPredicate<T>) &
 *   ((test?: Test) => AssertAnything)
 * )}
 */

/**
 * Generate an assertion from a check.
 * @param {Test} [test]
 * When nullish, checks if `node` is a `Node`.
 * When `string`, works like passing `function (node) {return node.type === test}`.
 * When `function` checks if function passed the node is true.
 * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
 * When `array`, checks any one of the subtests pass.
 * @returns {AssertAnything}
 */
function convertElement(test) {
  if (test === undefined || test === null) {
    return hast_util_is_element_element;
  }

  if (typeof test === 'string') {
    return tagNameFactory(test);
  }

  if (typeof test === 'object') {
    return anyFactory(test);
  }

  if (typeof test === 'function') {
    return castFactory(test);
  }

  throw new Error('Expected function, string, or array as test');
};
/**
 * @param {Array.<TagName|TestFunctionAnything>} tests
 * @returns {AssertAnything}
 */

function anyFactory(tests) {
  /** @type {Array.<AssertAnything>} */
  var checks = [];
  var index = -1;

  while (++index < tests.length) {
    checks[index] = convertElement(tests[index]);
  }

  return castFactory(any);
  /**
   * @this {unknown}
   * @param {unknown[]} parameters
   * @returns {boolean}
   */

  function any() {
    var index = -1;

    for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {
      parameters[_key] = arguments[_key];
    }

    while (++index < checks.length) {
      var _checks$index;

      if ((_checks$index = checks[index]).call.apply(_checks$index, [this].concat(parameters))) {
        return true;
      }
    }

    return false;
  }
}
/**
 * Utility to convert a string into a function which checks a given node’s tag
 * name for said string.
 *
 * @param {TagName} check
 * @returns {AssertAnything}
 */


function tagNameFactory(check) {
  return tagName;
  /**
   * @param {unknown} node
   * @returns {boolean}
   */

  function tagName(node) {
    return hast_util_is_element_element(node) && node.tagName === check;
  }
}
/**
 * @param {TestFunctionAnything} check
 * @returns {AssertAnything}
 */


function castFactory(check) {
  return assertion;
  /**
   * @this {unknown}
   * @param {unknown} node
   * @param {Array.<unknown>} parameters
   * @returns {boolean}
   */

  function assertion(node) {
    for (var _len2 = arguments.length, parameters = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      parameters[_key2 - 1] = arguments[_key2];
    }

    // @ts-expect-error: fine.
    return hast_util_is_element_element(node) && Boolean(check.call.apply(check, [this, node].concat(parameters)));
  }
}
/**
 * Utility to return true if this is an element.
 * @param {unknown} node
 * @returns {node is Element}
 */


function hast_util_is_element_element(node) {
  return Boolean(node && typeof node === 'object' && // @ts-expect-error Looks like a node.
  node.type === 'element' && // @ts-expect-error Looks like an element.
  typeof node.tagName === 'string');
}
;// CONCATENATED MODULE: ./node_modules/unist-util-is/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 *
 * @typedef {string} Type
 * @typedef {Object<string, unknown>} Props
 *
 * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test
 */

/**
 * Check if a node passes a test
 *
 * @callback TestFunctionAnything
 * @param {Node} node
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {boolean|void}
 */

/**
 * Check if a node passes a certain node test
 *
 * @template {Node} X
 * @callback TestFunctionPredicate
 * @param {Node} node
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {node is X}
 */

/**
 * @callback AssertAnything
 * @param {unknown} [node]
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {boolean}
 */

/**
 * Check if a node passes a certain node test
 *
 * @template {Node} Y
 * @callback AssertPredicate
 * @param {unknown} [node]
 * @param {number|null|undefined} [index]
 * @param {Parent|null|undefined} [parent]
 * @returns {node is Y}
 */
var is =
/**
 * Check if a node passes a test.
 * When a `parent` node is known the `index` of node should also be given.
 *
 * @type {(
 *   (<T extends Node>(node: unknown, test: T['type']|Partial<T>|TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|TestFunctionPredicate<T>>, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => node is T) &
 *   ((node?: unknown, test?: Test, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => boolean)
 * )}
 */

/**
 * Check if a node passes a test.
 * When a `parent` node is known the `index` of node should also be given.
 *
 * @param {unknown} [node] Node to check
 * @param {Test} [test]
 * When nullish, checks if `node` is a `Node`.
 * When `string`, works like passing `function (node) {return node.type === test}`.
 * When `function` checks if function passed the node is true.
 * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
 * When `array`, checks any one of the subtests pass.
 * @param {number|null|undefined} [index] Position of `node` in `parent`
 * @param {Parent|null|undefined} [parent] Parent of `node`
 * @param {unknown} [context] Context object to invoke `test` with
 * @returns {boolean} Whether test passed and `node` is a `Node` (object with `type` set to non-empty `string`).
 */
// eslint-disable-next-line max-params
function is(node, test, index, parent, context) {
  var check = convert(test);

  if (index !== undefined && index !== null && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {
    throw new Error('Expected positive finite index');
  }

  if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {
    throw new Error('Expected parent node');
  }

  if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {
    throw new Error('Expected both parent and index');
  } // @ts-expect-error Looks like a node.


  return node && node.type && typeof node.type === 'string' ? Boolean(check.call(context, node, index, parent)) : false;
};
var convert =
/**
 * @type {(
 *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &
 *   ((test?: Test) => AssertAnything)
 * )}
 */

/**
 * Generate an assertion from a check.
 * @param {Test} [test]
 * When nullish, checks if `node` is a `Node`.
 * When `string`, works like passing `function (node) {return node.type === test}`.
 * When `function` checks if function passed the node is true.
 * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
 * When `array`, checks any one of the subtests pass.
 * @returns {AssertAnything}
 */
function convert(test) {
  if (test === undefined || test === null) {
    return ok;
  }

  if (typeof test === 'string') {
    return typeFactory(test);
  }

  if (typeof test === 'object') {
    return Array.isArray(test) ? unist_util_is_anyFactory(test) : propsFactory(test);
  }

  if (typeof test === 'function') {
    return unist_util_is_castFactory(test);
  }

  throw new Error('Expected function, string, or object as test');
};
/**
 * @param {Array.<Type|Props|TestFunctionAnything>} tests
 * @returns {AssertAnything}
 */

function unist_util_is_anyFactory(tests) {
  /** @type {Array.<AssertAnything>} */
  var checks = [];
  var index = -1;

  while (++index < tests.length) {
    checks[index] = convert(tests[index]);
  }

  return unist_util_is_castFactory(any);
  /**
   * @this {unknown}
   * @param {unknown[]} parameters
   * @returns {boolean}
   */

  function any() {
    var index = -1;

    for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {
      parameters[_key] = arguments[_key];
    }

    while (++index < checks.length) {
      var _checks$index;

      if ((_checks$index = checks[index]).call.apply(_checks$index, [this].concat(parameters))) return true;
    }

    return false;
  }
}
/**
 * Utility to assert each property in `test` is represented in `node`, and each
 * values are strictly equal.
 *
 * @param {Props} check
 * @returns {AssertAnything}
 */


function propsFactory(check) {
  return unist_util_is_castFactory(all);
  /**
   * @param {Node} node
   * @returns {boolean}
   */

  function all(node) {
    /** @type {string} */
    var key;

    for (key in check) {
      // @ts-expect-error: hush, it sure works as an index.
      if (node[key] !== check[key]) return false;
    }

    return true;
  }
}
/**
 * Utility to convert a string into a function which checks a given node’s type
 * for said string.
 *
 * @param {Type} check
 * @returns {AssertAnything}
 */


function typeFactory(check) {
  return unist_util_is_castFactory(type);
  /**
   * @param {Node} node
   */

  function type(node) {
    return node && node.type === check;
  }
}
/**
 * Utility to convert a string into a function which checks a given node’s type
 * for said string.
 * @param {TestFunctionAnything} check
 * @returns {AssertAnything}
 */


function unist_util_is_castFactory(check) {
  return assertion;
  /**
   * @this {unknown}
   * @param {Array.<unknown>} parameters
   * @returns {boolean}
   */

  function assertion() {
    for (var _len2 = arguments.length, parameters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      parameters[_key2] = arguments[_key2];
    }

    // @ts-expect-error: spreading is fine.
    return Boolean(check.call.apply(check, [this].concat(parameters)));
  }
} // Utility to return true.


function ok() {
  return true;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/omission/util/comment.js
/**
 * @typedef {import('../../types.js').Comment} Comment
 */

/** @type {import('unist-util-is').AssertPredicate<Comment>} */
// @ts-ignore

var comment = convert('comment');
;// CONCATENATED MODULE: ./node_modules/hast-util-whitespace/index.js
/**
 * @param {unknown} thing
 * @returns {boolean}
 */
function whitespace(thing) {
  /** @type {string} */
  var value = // @ts-ignore looks like a node.
  thing && typeof thing === 'object' && thing.type === 'text' ? // @ts-ignore looks like a text.
  thing.value || '' : thing; // HTML whitespace expression.
  // See <https://html.spec.whatwg.org/#space-character>.

  return typeof value === 'string' && value.replace(/[ \t\n\f\r]/g, '') === '';
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/omission/util/siblings.js
/**
 * @typedef {import('../../types.js').Parent} Parent
 * @typedef {import('../../types.js').Child} Child
 */

var siblingAfter = siblings(1);
var siblingBefore = siblings(-1);
/**
 * Factory to check siblings in a direction.
 *
 * @param {number} increment
 */

function siblings(increment) {
  return sibling;
  /**
   * Find applicable siblings in a direction.
   *
   * @param {Parent} parent
   * @param {number} index
   * @param {boolean} [includeWhitespace=false]
   * @returns {Child}
   */

  function sibling(parent, index, includeWhitespace) {
    var siblings = parent && parent.children;
    var offset = index + increment;
    var next = siblings && siblings[offset];

    if (!includeWhitespace) {
      while (next && whitespace(next)) {
        offset += increment;
        next = siblings[offset];
      }
    }

    return next;
  }
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/omission/util/whitespace-start.js
/**
 * @typedef {import('../../types.js').Node} Node
 * @typedef {import('../../types.js').Text} Text
 */


/** @type {import('unist-util-is').AssertPredicate<Text>} */
// @ts-ignore

var isText = convert('text');
/**
 * Check if `node` starts with whitespace.
 *
 * @param {Node} node
 * @returns {boolean}
 */

function whitespaceStart(node) {
  return isText(node) && whitespace(node.value.charAt(0));
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/omission/omission.js
/**
 * @typedef {import('../types.js').OmitHandle} OmitHandle
 */
var omission_own = {}.hasOwnProperty;
/**
 * Factory to check if a given node can have a tag omitted.
 *
 * @param {Object.<string, OmitHandle>} handlers
 * @returns {OmitHandle}
 */

function omission(handlers) {
  return omit;
  /**
   * Check if a given node can have a tag omitted.
   *
   * @type {OmitHandle}
   */

  function omit(node, index, parent) {
    return omission_own.call(handlers, node.tagName) && handlers[node.tagName](node, index, parent);
  }
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/omission/closing.js
/**
 * @typedef {import('../types.js').OmitHandle} OmitHandle
 */





var closing = omission({
  html: closing_html,
  head: headOrColgroupOrCaption,
  body: body,
  p: p,
  li: li,
  dt: dt,
  dd: dd,
  rt: rubyElement,
  rp: rubyElement,
  optgroup: optgroup,
  option: closing_option,
  menuitem: menuitem,
  colgroup: headOrColgroupOrCaption,
  caption: headOrColgroupOrCaption,
  thead: thead,
  tbody: tbody,
  tfoot: tfoot,
  tr: tr,
  td: cells,
  th: cells
});
/**
 * Macro for `</head>`, `</colgroup>`, and `</caption>`.
 *
 * @type {OmitHandle}
 */

function headOrColgroupOrCaption(_, index, parent) {
  var next = siblingAfter(parent, index, true);
  return !next || !comment(next) && !whitespaceStart(next);
}
/**
 * Whether to omit `</html>`.
 *
 * @type {OmitHandle}
 */


function closing_html(_, index, parent) {
  var next = siblingAfter(parent, index);
  return !next || !comment(next);
}
/**
 * Whether to omit `</body>`.
 *
 * @type {OmitHandle}
 */


function body(_, index, parent) {
  var next = siblingAfter(parent, index);
  return !next || !comment(next);
}
/**
 * Whether to omit `</p>`.
 *
 * @type {OmitHandle}
 */


function p(_, index, parent) {
  var next = siblingAfter(parent, index);
  return next ? isElement(next, ['address', 'article', 'aside', 'blockquote', 'details', 'div', 'dl', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'menu', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul']) : !parent || // Confusing parent.
  !isElement(parent, ['a', 'audio', 'del', 'ins', 'map', 'noscript', 'video']);
}
/**
 * Whether to omit `</li>`.
 *
 * @type {OmitHandle}
 */


function li(_, index, parent) {
  var next = siblingAfter(parent, index);
  return !next || isElement(next, 'li');
}
/**
 * Whether to omit `</dt>`.
 *
 * @type {OmitHandle}
 */


function dt(_, index, parent) {
  var next = siblingAfter(parent, index);
  return next && isElement(next, ['dt', 'dd']);
}
/**
 * Whether to omit `</dd>`.
 *
 * @type {OmitHandle}
 */


function dd(_, index, parent) {
  var next = siblingAfter(parent, index);
  return !next || isElement(next, ['dt', 'dd']);
}
/**
 * Whether to omit `</rt>` or `</rp>`.
 *
 * @type {OmitHandle}
 */


function rubyElement(_, index, parent) {
  var next = siblingAfter(parent, index);
  return !next || isElement(next, ['rp', 'rt']);
}
/**
 * Whether to omit `</optgroup>`.
 *
 * @type {OmitHandle}
 */


function optgroup(_, index, parent) {
  var next = siblingAfter(parent, index);
  return !next || isElement(next, 'optgroup');
}
/**
 * Whether to omit `</option>`.
 *
 * @type {OmitHandle}
 */


function closing_option(_, index, parent) {
  var next = siblingAfter(parent, index);
  return !next || isElement(next, ['option', 'optgroup']);
}
/**
 * Whether to omit `</menuitem>`.
 *
 * @type {OmitHandle}
 */


function menuitem(_, index, parent) {
  var next = siblingAfter(parent, index);
  return !next || isElement(next, ['menuitem', 'hr', 'menu']);
}
/**
 * Whether to omit `</thead>`.
 *
 * @type {OmitHandle}
 */


function thead(_, index, parent) {
  var next = siblingAfter(parent, index);
  return next && isElement(next, ['tbody', 'tfoot']);
}
/**
 * Whether to omit `</tbody>`.
 *
 * @type {OmitHandle}
 */


function tbody(_, index, parent) {
  var next = siblingAfter(parent, index);
  return !next || isElement(next, ['tbody', 'tfoot']);
}
/**
 * Whether to omit `</tfoot>`.
 *
 * @type {OmitHandle}
 */


function tfoot(_, index, parent) {
  return !siblingAfter(parent, index);
}
/**
 * Whether to omit `</tr>`.
 *
 * @type {OmitHandle}
 */


function tr(_, index, parent) {
  var next = siblingAfter(parent, index);
  return !next || isElement(next, 'tr');
}
/**
 * Whether to omit `</td>` or `</th>`.
 *
 * @type {OmitHandle}
 */


function cells(_, index, parent) {
  var next = siblingAfter(parent, index);
  return !next || isElement(next, ['td', 'th']);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/omission/opening.js
/**
 * @typedef {import('../types.js').OmitHandle} OmitHandle
 * @typedef {import('../types.js').Child} Child
 */






var opening = omission({
  html: opening_html,
  head: head,
  body: opening_body,
  colgroup: colgroup,
  tbody: opening_tbody
});
/**
 * Whether to omit `<html>`.
 *
 * @type {OmitHandle}
 */

function opening_html(node) {
  var head = siblingAfter(node, -1);
  return !head || !comment(head);
}
/**
 * Whether to omit `<head>`.
 *
 * @type {OmitHandle}
 */


function head(node) {
  var children = node.children;
  /** @type {Array.<string>} */

  var seen = [];
  var index = -1;
  /** @type {Child} */

  var child;

  while (++index < children.length) {
    child = children[index];

    if (isElement(child, ['title', 'base'])) {
      if (seen.includes(child.tagName)) return false;
      seen.push(child.tagName);
    }
  }

  return children.length > 0;
}
/**
 * Whether to omit `<body>`.
 *
 * @type {OmitHandle}
 */


function opening_body(node) {
  var head = siblingAfter(node, -1, true);
  return !head || !comment(head) && !whitespaceStart(head) && !isElement(head, ['meta', 'link', 'script', 'style', 'template']);
}
/**
 * Whether to omit `<colgroup>`.
 * The spec describes some logic for the opening tag, but it’s easier to
 * implement in the closing tag, to the same effect, so we handle it there
 * instead.
 *
 * @type {OmitHandle}
 */


function colgroup(node, index, parent) {
  var previous = siblingBefore(parent, index);
  var head = siblingAfter(node, -1, true); // Previous colgroup was already omitted.

  if (isElement(previous, 'colgroup') && closing(previous, parent.children.indexOf(previous), parent)) {
    return false;
  }

  return head && isElement(head, 'col');
}
/**
 * Whether to omit `<tbody>`.
 *
 * @type {OmitHandle}
 */


function opening_tbody(node, index, parent) {
  var previous = siblingBefore(parent, index);
  var head = siblingAfter(node, -1); // Previous table section was already omitted.

  if (isElement(previous, ['thead', 'tbody']) && closing(previous, parent.children.indexOf(previous), parent)) {
    return false;
  }

  return head && isElement(head, 'tr');
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/omission/index.js
/**
 * @typedef {import('../types.js').Omission} Omission
 */


/** @type {Omission} */

var omission_omission = {
  opening: opening,
  closing: closing
};
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/property-information/lib/find.js
/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */



var find_valid = /^data[-\w.:]+$/i;
var find_dash = /-[a-z]/g;
var find_cap = /[A-Z]/g;
/**
 * @param {Schema} schema
 * @param {string} value
 * @returns {Info}
 */

function find_find(schema, value) {
  var normal = normalize_normalize(value);
  var prop = value;
  var Type = info_Info;

  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }

  if (normal.length > 4 && normal.slice(0, 4) === 'data' && find_valid.test(value)) {
    // Attribute or property.
    if (value.charAt(4) === '-') {
      // Turn it into a property.
      var rest = value.slice(5).replace(find_dash, find_camelcase);
      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      // Turn it into an attribute.
      var _rest = value.slice(4);

      if (!find_dash.test(_rest)) {
        var dashes = _rest.replace(find_cap, find_kebab);

        if (dashes.charAt(0) !== '-') {
          dashes = '-' + dashes;
        }

        value = 'data' + dashes;
      }
    }

    Type = defined_info_DefinedInfo;
  }

  return new Type(prop, value);
}
/**
 * @param {string} $0
 * @returns {string}
 */

function find_kebab($0) {
  return '-' + $0.toLowerCase();
}
/**
 * @param {string} $0
 * @returns {string}
 */


function find_camelcase($0) {
  return $0.charAt(1).toUpperCase();
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/space-separated-tokens/index.js
/**
 * Parse space separated tokens to an array of strings.
 *
 * @param {string} value Space separated tokens
 * @returns {Array.<string>} Tokens
 */
function node_modules_space_separated_tokens_parse(value) {
  var input = String(value || '').trim();
  return input ? input.split(/[ \t\n\r\f]+/g) : [];
}
/**
 * Serialize an array of strings as space separated tokens.
 *
 * @param {Array.<string|number>} values Tokens
 * @returns {string} Space separated tokens
 */

function space_separated_tokens_stringify(values) {
  return values.join(' ').trim();
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/node_modules/comma-separated-tokens/index.js
/**
 * @typedef {Object} StringifyOptions
 * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).
 * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).
 */

/**
 * Parse comma separated tokens to an array.
 *
 * @param {string} value
 * @returns {Array.<string>}
 */
function node_modules_comma_separated_tokens_parse(value) {
  /** @type {Array.<string>} */
  var tokens = [];
  var input = String(value || '');
  var index = input.indexOf(',');
  var start = 0;
  /** @type {boolean} */

  var end;
  /** @type {string} */

  var token;

  while (!end) {
    if (index === -1) {
      index = input.length;
      end = true;
    }

    token = input.slice(start, index).trim();

    if (token || !end) {
      tokens.push(token);
    }

    start = index + 1;
    index = input.indexOf(',', start);
  }

  return tokens;
}
/**
 * Serialize an array of strings to comma separated tokens.
 *
 * @param {Array.<string|number>} values
 * @param {StringifyOptions} [options]
 * @returns {string}
 */

function node_modules_comma_separated_tokens_stringify(values, options) {
  var settings = options || {}; // Ensure the last empty entry is seen.

  if (values[values.length - 1] === '') {
    values = values.concat('');
  }

  return values.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();
}
;// CONCATENATED MODULE: ./node_modules/stringify-entities/lib/core.js
/**
 * @typedef {Object} CoreOptions
 * @property {string[]} [subset=[]]
 *   Whether to only escape the given subset of characters.
 * @property {boolean} [escapeOnly=false]
 *   Whether to only escape possibly dangerous characters.
 *   Those characters are `"`, `&`, `'`, `<`, `>`, and `` ` ``.
 *
 * @typedef {Object} FormatOptions
 * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format
 *   Format strategy.
 *
 * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions
 */

/**
 * Encode certain characters in `value`.
 *
 * @param {string} value
 * @param {CoreWithFormatOptions} options
 * @returns {string}
 */
function lib_core_core(value, options) {
  value = value.replace(options.subset ? charactersToExpression(options.subset) : /["&'<>`]/g, basic);

  if (options.subset || options.escapeOnly) {
    return value;
  }

  return value // Surrogate pairs.
  .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, surrogate) // BMP control characters (C0 except for LF, CR, SP; DEL; and some more
  // non-ASCII ones).
  .replace( // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
  /[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g, basic);
  /**
   * @param {string} pair
   * @param {number} index
   * @param {string} all
   */

  function surrogate(pair, index, all) {
    return options.format((pair.charCodeAt(0) - 0xd800) * 0x400 + pair.charCodeAt(1) - 0xdc00 + 0x10000, all.charCodeAt(index + 2), options);
  }
  /**
   * @param {string} character
   * @param {number} index
   * @param {string} all
   */


  function basic(character, index, all) {
    return options.format(character.charCodeAt(0), all.charCodeAt(index + 1), options);
  }
}
/**
 * @param {string[]} subset
 * @returns {RegExp}
 */

function charactersToExpression(subset) {
  /** @type {string[]} */
  var groups = [];
  var index = -1;

  while (++index < subset.length) {
    groups.push(subset[index].replace(/[|\\{}()[\]^$+*?.]/g, '\\$&'));
  }

  return new RegExp('(?:' + groups.join('|') + ')', 'g');
}
;// CONCATENATED MODULE: ./node_modules/stringify-entities/lib/util/to-hexadecimal.js
/**
 * Configurable ways to encode characters as hexadecimal references.
 *
 * @param {number} code
 * @param {number} next
 * @param {boolean|undefined} omit
 * @returns {string}
 */
function toHexadecimal(code, next, omit) {
  var value = '&#x' + code.toString(16).toUpperCase();
  return omit && next && !/[\dA-Fa-f]/.test(String.fromCharCode(next)) ? value : value + ';';
}
;// CONCATENATED MODULE: ./node_modules/stringify-entities/lib/util/to-decimal.js
/**
 * Configurable ways to encode characters as decimal references.
 *
 * @param {number} code
 * @param {number} next
 * @param {boolean|undefined} omit
 * @returns {string}
 */
function toDecimal(code, next, omit) {
  var value = '&#' + String(code);
  return omit && next && !/\d/.test(String.fromCharCode(next)) ? value : value + ';';
}
;// CONCATENATED MODULE: ./node_modules/stringify-entities/node_modules/character-entities-legacy/index.js
/**
 * List of legacy HTML named character references that don’t need a trailing semicolon.
 *
 * @type {Array<string>}
 */
var characterEntitiesLegacy = ['AElig', 'AMP', 'Aacute', 'Acirc', 'Agrave', 'Aring', 'Atilde', 'Auml', 'COPY', 'Ccedil', 'ETH', 'Eacute', 'Ecirc', 'Egrave', 'Euml', 'GT', 'Iacute', 'Icirc', 'Igrave', 'Iuml', 'LT', 'Ntilde', 'Oacute', 'Ocirc', 'Ograve', 'Oslash', 'Otilde', 'Ouml', 'QUOT', 'REG', 'THORN', 'Uacute', 'Ucirc', 'Ugrave', 'Uuml', 'Yacute', 'aacute', 'acirc', 'acute', 'aelig', 'agrave', 'amp', 'aring', 'atilde', 'auml', 'brvbar', 'ccedil', 'cedil', 'cent', 'copy', 'curren', 'deg', 'divide', 'eacute', 'ecirc', 'egrave', 'eth', 'euml', 'frac12', 'frac14', 'frac34', 'gt', 'iacute', 'icirc', 'iexcl', 'igrave', 'iquest', 'iuml', 'laquo', 'lt', 'macr', 'micro', 'middot', 'nbsp', 'not', 'ntilde', 'oacute', 'ocirc', 'ograve', 'ordf', 'ordm', 'oslash', 'otilde', 'ouml', 'para', 'plusmn', 'pound', 'quot', 'raquo', 'reg', 'sect', 'shy', 'sup1', 'sup2', 'sup3', 'szlig', 'thorn', 'times', 'uacute', 'ucirc', 'ugrave', 'uml', 'uuml', 'yacute', 'yen', 'yuml'];
;// CONCATENATED MODULE: ./node_modules/character-entities-html4/index.js
/**
 * Map of named character references from HTML 4.
 *
 * @type {Record<string, string>}
 */
var characterEntitiesHtml4 = {
  nbsp: ' ',
  iexcl: '¡',
  cent: '¢',
  pound: '£',
  curren: '¤',
  yen: '¥',
  brvbar: '¦',
  sect: '§',
  uml: '¨',
  copy: '©',
  ordf: 'ª',
  laquo: '«',
  not: '¬',
  shy: '­',
  reg: '®',
  macr: '¯',
  deg: '°',
  plusmn: '±',
  sup2: '²',
  sup3: '³',
  acute: '´',
  micro: 'µ',
  para: '¶',
  middot: '·',
  cedil: '¸',
  sup1: '¹',
  ordm: 'º',
  raquo: '»',
  frac14: '¼',
  frac12: '½',
  frac34: '¾',
  iquest: '¿',
  Agrave: 'À',
  Aacute: 'Á',
  Acirc: 'Â',
  Atilde: 'Ã',
  Auml: 'Ä',
  Aring: 'Å',
  AElig: 'Æ',
  Ccedil: 'Ç',
  Egrave: 'È',
  Eacute: 'É',
  Ecirc: 'Ê',
  Euml: 'Ë',
  Igrave: 'Ì',
  Iacute: 'Í',
  Icirc: 'Î',
  Iuml: 'Ï',
  ETH: 'Ð',
  Ntilde: 'Ñ',
  Ograve: 'Ò',
  Oacute: 'Ó',
  Ocirc: 'Ô',
  Otilde: 'Õ',
  Ouml: 'Ö',
  times: '×',
  Oslash: 'Ø',
  Ugrave: 'Ù',
  Uacute: 'Ú',
  Ucirc: 'Û',
  Uuml: 'Ü',
  Yacute: 'Ý',
  THORN: 'Þ',
  szlig: 'ß',
  agrave: 'à',
  aacute: 'á',
  acirc: 'â',
  atilde: 'ã',
  auml: 'ä',
  aring: 'å',
  aelig: 'æ',
  ccedil: 'ç',
  egrave: 'è',
  eacute: 'é',
  ecirc: 'ê',
  euml: 'ë',
  igrave: 'ì',
  iacute: 'í',
  icirc: 'î',
  iuml: 'ï',
  eth: 'ð',
  ntilde: 'ñ',
  ograve: 'ò',
  oacute: 'ó',
  ocirc: 'ô',
  otilde: 'õ',
  ouml: 'ö',
  divide: '÷',
  oslash: 'ø',
  ugrave: 'ù',
  uacute: 'ú',
  ucirc: 'û',
  uuml: 'ü',
  yacute: 'ý',
  thorn: 'þ',
  yuml: 'ÿ',
  fnof: 'ƒ',
  Alpha: 'Α',
  Beta: 'Β',
  Gamma: 'Γ',
  Delta: 'Δ',
  Epsilon: 'Ε',
  Zeta: 'Ζ',
  Eta: 'Η',
  Theta: 'Θ',
  Iota: 'Ι',
  Kappa: 'Κ',
  Lambda: 'Λ',
  Mu: 'Μ',
  Nu: 'Ν',
  Xi: 'Ξ',
  Omicron: 'Ο',
  Pi: 'Π',
  Rho: 'Ρ',
  Sigma: 'Σ',
  Tau: 'Τ',
  Upsilon: 'Υ',
  Phi: 'Φ',
  Chi: 'Χ',
  Psi: 'Ψ',
  Omega: 'Ω',
  alpha: 'α',
  beta: 'β',
  gamma: 'γ',
  delta: 'δ',
  epsilon: 'ε',
  zeta: 'ζ',
  eta: 'η',
  theta: 'θ',
  iota: 'ι',
  kappa: 'κ',
  lambda: 'λ',
  mu: 'μ',
  nu: 'ν',
  xi: 'ξ',
  omicron: 'ο',
  pi: 'π',
  rho: 'ρ',
  sigmaf: 'ς',
  sigma: 'σ',
  tau: 'τ',
  upsilon: 'υ',
  phi: 'φ',
  chi: 'χ',
  psi: 'ψ',
  omega: 'ω',
  thetasym: 'ϑ',
  upsih: 'ϒ',
  piv: 'ϖ',
  bull: '•',
  hellip: '…',
  prime: '′',
  Prime: '″',
  oline: '‾',
  frasl: '⁄',
  weierp: '℘',
  image: 'ℑ',
  real: 'ℜ',
  trade: '™',
  alefsym: 'ℵ',
  larr: '←',
  uarr: '↑',
  rarr: '→',
  darr: '↓',
  harr: '↔',
  crarr: '↵',
  lArr: '⇐',
  uArr: '⇑',
  rArr: '⇒',
  dArr: '⇓',
  hArr: '⇔',
  forall: '∀',
  part: '∂',
  exist: '∃',
  empty: '∅',
  nabla: '∇',
  isin: '∈',
  notin: '∉',
  ni: '∋',
  prod: '∏',
  sum: '∑',
  minus: '−',
  lowast: '∗',
  radic: '√',
  prop: '∝',
  infin: '∞',
  ang: '∠',
  and: '∧',
  or: '∨',
  cap: '∩',
  cup: '∪',
  "int": '∫',
  there4: '∴',
  sim: '∼',
  cong: '≅',
  asymp: '≈',
  ne: '≠',
  equiv: '≡',
  le: '≤',
  ge: '≥',
  sub: '⊂',
  sup: '⊃',
  nsub: '⊄',
  sube: '⊆',
  supe: '⊇',
  oplus: '⊕',
  otimes: '⊗',
  perp: '⊥',
  sdot: '⋅',
  lceil: '⌈',
  rceil: '⌉',
  lfloor: '⌊',
  rfloor: '⌋',
  lang: '〈',
  rang: '〉',
  loz: '◊',
  spades: '♠',
  clubs: '♣',
  hearts: '♥',
  diams: '♦',
  quot: '"',
  amp: '&',
  lt: '<',
  gt: '>',
  OElig: 'Œ',
  oelig: 'œ',
  Scaron: 'Š',
  scaron: 'š',
  Yuml: 'Ÿ',
  circ: 'ˆ',
  tilde: '˜',
  ensp: ' ',
  emsp: ' ',
  thinsp: ' ',
  zwnj: '‌',
  zwj: '‍',
  lrm: '‎',
  rlm: '‏',
  ndash: '–',
  mdash: '—',
  lsquo: '‘',
  rsquo: '’',
  sbquo: '‚',
  ldquo: '“',
  rdquo: '”',
  bdquo: '„',
  dagger: '†',
  Dagger: '‡',
  permil: '‰',
  lsaquo: '‹',
  rsaquo: '›',
  euro: '€'
};
;// CONCATENATED MODULE: ./node_modules/stringify-entities/lib/constant/dangerous.js
/**
 * List of legacy (that don’t need a trailing `;`) named references which could,
 * depending on what follows them, turn into a different meaning
 *
 * @type {Array.<string>}
 */
var dangerous = ['cent', 'copy', 'divide', 'gt', 'lt', 'not', 'para', 'times'];
;// CONCATENATED MODULE: ./node_modules/stringify-entities/lib/util/to-named.js



var to_named_own = {}.hasOwnProperty;
/**
 * `characterEntitiesHtml4` but inverted.
 *
 * @type {Object.<string, string>}
 */

var characters = {};
/** @type {string} */

var key;

for (key in characterEntitiesHtml4) {
  if (to_named_own.call(characterEntitiesHtml4, key)) {
    characters[characterEntitiesHtml4[key]] = key;
  }
}
/**
 * Configurable ways to encode characters as named references.
 *
 * @param {number} code
 * @param {number} next
 * @param {boolean|undefined} omit
 * @param {boolean|undefined} attribute
 * @returns {string}
 */


function toNamed(code, next, omit, attribute) {
  var character = String.fromCharCode(code);

  if (to_named_own.call(characters, character)) {
    var name = characters[character];
    var value = '&' + name;

    if (omit && characterEntitiesLegacy.includes(name) && !dangerous.includes(name) && (!attribute || next && next !== 61
    /* `=` */
    && /[^\da-z]/i.test(String.fromCharCode(next)))) {
      return value;
    }

    return value + ';';
  }

  return '';
}
;// CONCATENATED MODULE: ./node_modules/stringify-entities/lib/util/format-smart.js
/**
 * @typedef {Object} FormatSmartOptions
 * @property {boolean} [useNamedReferences=false]
 *   Prefer named character references (`&amp;`) where possible.
 * @property {boolean} [useShortestReferences=false]
 *   Prefer the shortest possible reference, if that results in less bytes.
 *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.
 * @property {boolean} [omitOptionalSemicolons=false]
 *   Whether to omit semicolons when possible.
 *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.
 *   Omitting semicolons is possible for certain named and numeric references in some cases.
 * @property {boolean} [attribute=false]
 *   Create character references which don’t fail in attributes.
 *   **Note**: `attribute` only applies when operating dangerously with
 *   `omitOptionalSemicolons: true`.
 */



/**
 * Configurable ways to encode a character yielding pretty or small results.
 *
 * @param {number} code
 * @param {number} next
 * @param {FormatSmartOptions} options
 * @returns {string}
 */

function formatSmart(code, next, options) {
  var numeric = toHexadecimal(code, next, options.omitOptionalSemicolons);
  /** @type {string|undefined} */

  var named;

  if (options.useNamedReferences || options.useShortestReferences) {
    named = toNamed(code, next, options.omitOptionalSemicolons, options.attribute);
  } // Use the shortest numeric reference when requested.
  // A simple algorithm would use decimal for all code points under 100, as
  // those are shorter than hexadecimal:
  //
  // * `&#99;` vs `&#x63;` (decimal shorter)
  // * `&#100;` vs `&#x64;` (equal)
  //
  // However, because we take `next` into consideration when `omit` is used,
  // And it would be possible that decimals are shorter on bigger values as
  // well if `next` is hexadecimal but not decimal, we instead compare both.


  if ((options.useShortestReferences || !named) && options.useShortestReferences) {
    var decimal = toDecimal(code, next, options.omitOptionalSemicolons);

    if (decimal.length < numeric.length) {
      numeric = decimal;
    }
  }

  return named && (!options.useShortestReferences || named.length < numeric.length) ? named : numeric;
}
;// CONCATENATED MODULE: ./node_modules/stringify-entities/lib/index.js
/**
 * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options
 * @typedef {import('./core.js').CoreOptions} LightOptions
 */



/**
 * Encode special characters in `value`.
 *
 * @param {string} value
 *   Value to encode.
 * @param {Options} [options]
 *   Configuration.
 * @returns {string}
 *   Encoded value.
 */

function stringifyEntities(value, options) {
  return lib_core_core(value, Object.assign({
    format: formatSmart
  }, options));
}
/**
 * Encode special characters in `value` as hexadecimals.
 *
 * @param {string} value
 *   Value to encode.
 * @param {LightOptions} [options]
 *   Configuration.
 * @returns {string}
 *   Encoded value.
 */

function stringifyEntitiesLight(value, options) {
  return core(value, Object.assign({
    format: formatBasic
  }, options));
}
;// CONCATENATED MODULE: ./node_modules/ccount/index.js
/**
 * Count how often a character (or substring) is used in a string.
 *
 * @param {string} value
 *   Value to search in.
 * @param {string} character
 *   Character (or substring) to look for.
 * @return {number}
 *   Number of times `character` occurred in `value`.
 */
function ccount(value, character) {
  var source = String(value);

  if (typeof character !== 'string') {
    throw new TypeError('Expected character');
  }

  var count = 0;
  var index = source.indexOf(character);

  while (index !== -1) {
    count++;
    index = source.indexOf(character, index + character.length);
  }

  return count;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/constants.js
// Maps of subsets.
// Each value is a matrix of tuples.
// The first value causes parse errors, the second is valid.
// Of both values, the first value is unsafe, and the second is safe.
var constants = {
  // See: <https://html.spec.whatwg.org/#attribute-name-state>.
  name: [['\t\n\f\r &/=>'.split(''), '\t\n\f\r "&\'/=>`'.split('')], ['\0\t\n\f\r "&\'/<=>'.split(''), '\0\t\n\f\r "&\'/<=>`'.split('')]],
  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.
  unquoted: [['\t\n\f\r &>'.split(''), '\0\t\n\f\r "&\'<=>`'.split('')], ['\0\t\n\f\r "&\'<=>`'.split(''), '\0\t\n\f\r "&\'<=>`'.split('')]],
  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.
  single: [["&'".split(''), '"&\'`'.split('')], ["\0&'".split(''), '\0"&\'`'.split('')]],
  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.
  "double": [['"&'.split(''), '"&\'`'.split('')], ['\0"&'.split(''), '\0"&\'`'.split('')]]
};
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/comment.js
/**
 * @typedef {import('./types.js').Handle} Handle
 * @typedef {import('./types.js').Comment} Comment
 */

/**
 * @type {Handle}
 * @param {Comment} node
 */

function comment_comment(ctx, node) {
  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>
  return ctx.bogusComments ? '<?' + stringifyEntities(node.value, Object.assign({}, ctx.entities, {
    subset: ['>']
  })) + '>' : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->';
  /**
   * @param {string} $0
   */

  function encode($0) {
    return stringifyEntities($0, Object.assign({}, ctx.entities, {
      subset: ['<', '>']
    }));
  }
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/doctype.js
/**
 * @typedef {import('./types.js').Handle} Handle
 */

/**
 * @type {Handle}
 */
function doctype(ctx) {
  return '<!' + (ctx.upperDoctype ? 'DOCTYPE' : 'doctype') + (ctx.tightDoctype ? '' : ' ') + 'html>';
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/text.js
/**
 * @typedef {import('./types.js').Handle} Handle
 * @typedef {import('./types.js').Text} Text
 */

/**
 * @type {Handle}
 * @param {Text} node
 */

function text_text(ctx, node, _, parent) {
  // Check if content of `node` should be escaped.
  return parent && parent.type === 'element' && ( // @ts-expect-error: hush.
  parent.tagName === 'script' || parent.tagName === 'style') ? node.value : stringifyEntities(node.value, Object.assign({}, ctx.entities, {
    subset: ['<', '&']
  }));
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/raw.js
/**
 * @typedef {import('./types.js').Handle} Handle
 * @typedef {import('./types.js').Raw} Raw
 */

/**
 * @type {Handle}
 * @param {Raw} node
 */

function raw(ctx, node, index, parent) {
  // @ts-ignore Hush.
  return ctx.dangerous ? node.value : text_text(ctx, node, index, parent);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/tree.js
/**
 * @typedef {import('./types.js').Handle} Handle
 * @typedef {import('./types.js').Element} Element
 * @typedef {import('./types.js').Context} Context
 * @typedef {import('./types.js').Properties} Properties
 * @typedef {import('./types.js').PropertyValue} PropertyValue
 * @typedef {import('./types.js').Parent} Parent
 */










/**
 * @type {Object.<string, Handle>}
 */

var handlers = {
  comment: comment_comment,
  doctype: doctype,
  element: tree_element,
  // @ts-ignore `raw` is nonstandard
  raw: raw,
  // @ts-ignore `root` is a parent.
  root: tree_all,
  text: text_text
};
var tree_own = {}.hasOwnProperty;
/**
 * @type {Handle}
 */

function one(ctx, node, index, parent) {
  if (!node || !node.type) {
    throw new Error('Expected node, not `' + node + '`');
  }

  if (!tree_own.call(handlers, node.type)) {
    throw new Error('Cannot compile unknown node `' + node.type + '`');
  }

  return handlers[node.type](ctx, node, index, parent);
}
/**
 * Serialize all children of `parent`.
 *
 * @type {Handle}
 * @param {Parent} parent
 */

function tree_all(ctx, parent) {
  /** @type {Array.<string>} */
  var results = [];
  var children = parent && parent.children || [];
  var index = -1;

  while (++index < children.length) {
    results[index] = one(ctx, children[index], index, parent);
  }

  return results.join('');
}
/**
 * @type {Handle}
 * @param {Element} node
 */
// eslint-disable-next-line complexity

function tree_element(ctx, node, index, parent) {
  var schema = ctx.schema;
  var omit = schema.space === 'svg' ? undefined : ctx.omit;
  var selfClosing = schema.space === 'svg' ? ctx.closeEmpty : ctx.voids.includes(node.tagName.toLowerCase());
  /** @type {Array.<string>} */

  var parts = [];
  /** @type {string} */

  var last;

  if (schema.space === 'html' && node.tagName === 'svg') {
    ctx.schema = node_modules_property_information_svg;
  }

  var attrs = serializeAttributes(ctx, node.properties);
  var content = tree_all(ctx, schema.space === 'html' && node.tagName === 'template' ? node.content : node);
  ctx.schema = schema; // If the node is categorised as void, but it has children, remove the
  // categorisation.
  // This enables for example `menuitem`s, which are void in W3C HTML but not
  // void in WHATWG HTML, to be stringified properly.

  if (content) selfClosing = false;

  if (attrs || !omit || !omit.opening(node, index, parent)) {
    parts.push('<', node.tagName, attrs ? ' ' + attrs : '');

    if (selfClosing && (schema.space === 'svg' || ctx.close)) {
      last = attrs.charAt(attrs.length - 1);

      if (!ctx.tightClose || last === '/' || last && last !== '"' && last !== "'") {
        parts.push(' ');
      }

      parts.push('/');
    }

    parts.push('>');
  }

  parts.push(content);

  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {
    parts.push('</' + node.tagName + '>');
  }

  return parts.join('');
}
/**
 * @param {Context} ctx
 * @param {Properties} props
 * @returns {string}
 */

function serializeAttributes(ctx, props) {
  /** @type {Array.<string>} */
  var values = [];
  var index = -1;
  /** @type {string} */

  var key;
  /** @type {string} */

  var value;
  /** @type {string} */

  var last;

  for (key in props) {
    if (props[key] !== undefined && props[key] !== null) {
      value = serializeAttribute(ctx, key, props[key]);
      if (value) values.push(value);
    }
  }

  while (++index < values.length) {
    last = ctx.tight ? values[index].charAt(values[index].length - 1) : null; // In tight mode, don’t add a space after quoted attributes.

    if (index !== values.length - 1 && last !== '"' && last !== "'") {
      values[index] += ' ';
    }
  }

  return values.join('');
}
/**
 * @param {Context} ctx
 * @param {string} key
 * @param {PropertyValue} value
 * @returns {string}
 */
// eslint-disable-next-line complexity


function serializeAttribute(ctx, key, value) {
  var info = find_find(ctx.schema, key);
  var quote = ctx.quote;
  /** @type {string} */

  var result;

  if (info.overloadedBoolean && (value === info.attribute || value === '')) {
    value = true;
  } else if (info["boolean"] || info.overloadedBoolean && typeof value !== 'string') {
    value = Boolean(value);
  }

  if (value === undefined || value === null || value === false || typeof value === 'number' && Number.isNaN(value)) {
    return '';
  }

  var name = stringifyEntities(info.attribute, Object.assign({}, ctx.entities, {
    // Always encode without parse errors in non-HTML.
    subset: constants.name[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe]
  })); // No value.
  // There is currently only one boolean property in SVG: `[download]` on
  // `<a>`.
  // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t
  // test if dropping the value works.
  // But I assume that it should:
  //
  // ```html
  // <!doctype html>
  // <svg viewBox="0 0 100 100">
  //   <a href=https://example.com download>
  //     <circle cx=50 cy=40 r=35 />
  //   </a>
  // </svg>
  // ```
  //
  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>

  if (value === true) return name;
  value = typeof value === 'object' && 'length' in value ? // `spaces` doesn’t accept a second argument, but it’s given here just to
  // keep the code cleaner.
  (info.commaSeparated ? node_modules_comma_separated_tokens_stringify : space_separated_tokens_stringify)(value, {
    padLeft: !ctx.tightLists
  }) : String(value);
  if (ctx.collapseEmpty && !value) return name; // Check unquoted value.

  if (ctx.unquoted) {
    result = stringifyEntities(value, Object.assign({}, ctx.entities, {
      subset: constants.unquoted[ctx.valid][ctx.safe],
      attribute: true
    }));
  } // If we don’t want unquoted, or if `value` contains character references when
  // unquoted…


  if (result !== value) {
    // If the alternative is less common than `quote`, switch.
    if (ctx.smart && ccount(value, quote) > ccount(value, ctx.alternative)) {
      quote = ctx.alternative;
    }

    result = quote + stringifyEntities(value, Object.assign({}, ctx.entities, {
      // Always encode without parse errors in non-HTML.
      subset: (quote === "'" ? constants.single : constants.double)[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe],
      attribute: true
    })) + quote;
  } // Don’t add a `=` for unquoted empties.


  return name + (result ? '=' + result : result);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-html/lib/index.js
/**
 * @typedef {import('./types.js').Node} Node
 * @typedef {import('./types.js').Options} Options
 * @typedef {import('./types.js').Context} Context
 * @typedef {import('./types.js').Quote} Quote
 */




/**
 * @param {Node|Array.<Node>} node
 * @param {Options} [options]
 * @returns {string}
 */

function toHtml(node) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var quote = options.quote || '"';
  /** @type {Quote} */

  var alternative = quote === '"' ? "'" : '"';

  if (quote !== '"' && quote !== "'") {
    throw new Error('Invalid quote `' + quote + '`, expected `\'` or `"`');
  }
  /** @type {Context} */


  var context = {
    valid: options.allowParseErrors ? 0 : 1,
    safe: options.allowDangerousCharacters ? 0 : 1,
    schema: options.space === 'svg' ? node_modules_property_information_svg : node_modules_property_information_html,
    omit: options.omitOptionalTags ? omission_omission : undefined,
    quote: quote,
    alternative: alternative,
    smart: options.quoteSmart,
    unquoted: options.preferUnquoted,
    tight: options.tightAttributes,
    upperDoctype: options.upperDoctype,
    tightDoctype: options.tightDoctype,
    bogusComments: options.bogusComments,
    tightLists: options.tightCommaSeparatedLists,
    tightClose: options.tightSelfClosing,
    collapseEmpty: options.collapseEmptyAttributes,
    dangerous: options.allowDangerousHtml,
    voids: options.voids || htmlVoidElements.concat(),
    entities: options.entities || {},
    close: options.closeSelfClosing,
    closeEmpty: options.closeEmptyElements
  };
  return one(context, // @ts-ignore Assume `node` does not contain a root.
  Array.isArray(node) ? {
    type: 'root',
    children: node
  } : node, null, null);
}
;// CONCATENATED MODULE: ./node_modules/rehype-stringify/lib/index.js
/**
 * @typedef {import('hast').Root} Root
 * @typedef {Root|Root['children'][number]} Node
 * @typedef {import('hast-util-to-html').Options} Options
 */

/** @type {import('unified').Plugin<[Options]|void[], Node, string>} */

function rehypeStringify(config) {
  var processorSettings =
  /** @type {Options} */
  this.data('settings');
  var settings = Object.assign({}, processorSettings, config);
  Object.assign(this, {
    Compiler: compiler
  });
  /**
   * @type {import('unified').CompilerFunction<Node, string>}
   */

  function compiler(tree) {
    return toHtml(tree, settings);
  }
}
;// CONCATENATED MODULE: ./node_modules/rehype-stringify/index.js

/* harmony default export */ const rehype_stringify = (rehypeStringify);
// EXTERNAL MODULE: ./node_modules/github-slugger/index.js
var github_slugger = __webpack_require__(4144);
;// CONCATENATED MODULE: ./node_modules/hast-util-has-property/index.js
var hast_util_has_property_own = {}.hasOwnProperty;
/**
 * Check if `node` has a set `name` property.
 *
 * @param {unknown} node
 * @param {string} name
 * @returns {boolean}
 */

function hasProperty(node, name) {
  /** @type {unknown} */
  var value = name && node && typeof node === 'object' && // @ts-ignore Looks like a node.
  node.type === 'element' && // @ts-ignore Looks like an element.
  node.properties && // @ts-ignore Looks like an element.
  hast_util_has_property_own.call(node.properties, name) && // @ts-ignore Looks like an element.
  node.properties[name];
  return value !== null && value !== undefined && value !== false;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-heading-rank/index.js
/**
 * @typedef {import('hast').Parent} Parent
 * @typedef {import('hast').Root} Root
 * @typedef {Root|Parent['children'][number]} Node
 */

/**
 * Rank of a heading: H1 -> 1, H2 -> 2, etc.
 *
 * @param {Node} node
 * @returns {number|null}
 */
function headingRank(node) {
  var name = node && node.type === 'element' && node.tagName.toLowerCase() || '';
  var code = name.length === 2 && name.charCodeAt(0) === 104
  /* `h` */
  ? name.charCodeAt(1) : 0;
  return code > 48
  /* `0` */
  && code < 55
  /* `7` */
  ? code - 48
  /* `0` */
  : null;
}
;// CONCATENATED MODULE: ./node_modules/rehype-slug/node_modules/hast-util-to-string/index.js
/**
 * @fileoverview
 *   Get the plain-text value of a hast node.
 * @longdescription
 *   ## Use
 *
 *   ```js
 *   import {h} from 'hastscript'
 *   import {toString} from 'hast-util-to-string'
 *
 *   toString(h('p', 'Alpha'))
 *   //=> 'Alpha'
 *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))
 *   //=> 'Bold and italic.'
 *   ```
 *
 *   ## API
 *
 *   ### `toString(node)`
 *
 *   Transform a node to a string.
 */

/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Element} Element
 * @typedef {Root|Root['children'][number]} Node
 */

/**
 * Get the plain-text value of a hast node.
 *
 * @param {Node} node
 * @returns {string}
 */
function hast_util_to_string_toString(node) {
  // “The concatenation of data of all the Text node descendants of the context
  // object, in tree order.”
  if ('children' in node) {
    return hast_util_to_string_all(node);
  } // “Context object’s data.”


  return 'value' in node ? node.value : '';
}
/**
 * @param {Node} node
 * @returns {string}
 */

function hast_util_to_string_one(node) {
  if (node.type === 'text') {
    return node.value;
  }

  return 'children' in node ? hast_util_to_string_all(node) : '';
}
/**
 * @param {Root|Element} node
 * @returns {string}
 */


function hast_util_to_string_all(node) {
  var index = -1;
  /** @type {string[]} */

  var result = [];

  while (++index < node.children.length) {
    result[index] = hast_util_to_string_one(node.children[index]);
  }

  return result.join('');
}
;// CONCATENATED MODULE: ./node_modules/unist-util-visit-parents/color.js
/**
 * @param {string} d
 * @returns {string}
 */
function color(d) {
  return "\x1B[33m" + d + "\x1B[39m";
}
;// CONCATENATED MODULE: ./node_modules/unist-util-visit-parents/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('./complex-types').Action} Action
 * @typedef {import('./complex-types').Index} Index
 * @typedef {import('./complex-types').ActionTuple} ActionTuple
 * @typedef {import('./complex-types').VisitorResult} VisitorResult
 * @typedef {import('./complex-types').Visitor} Visitor
 */


/**
 * Continue traversing as normal
 */

var CONTINUE = true;
/**
 * Do not traverse this node’s children
 */

var SKIP = 'skip';
/**
 * Stop traversing immediately
 */

var EXIT = false;
/**
 * Visit children of tree which pass a test
 *
 * @param tree Abstract syntax tree to walk
 * @param test Test node, optional
 * @param visitor Function to run for each node
 * @param reverse Visit the tree in reverse order, defaults to false
 */

var visitParents =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {import('./complex-types').Visitor<Node>} visitor
 * @param {boolean} [reverse]
 */
function visitParents(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor; // @ts-expect-error no visitor given, so `visitor` is test.

    visitor = test;
    test = null;
  }

  var is = convert(test);
  var step = reverse ? -1 : 1;
  factory(tree, null, [])();
  /**
   * @param {Node} node
   * @param {number?} index
   * @param {Array.<Parent>} parents
   */

  function factory(node, index, parents) {
    /** @type {Object.<string, unknown>} */
    // @ts-expect-error: hush
    var value = typeof node === 'object' && node !== null ? node : {};
    /** @type {string|undefined} */

    var name;

    if (typeof value.type === 'string') {
      name = typeof value.tagName === 'string' ? value.tagName : typeof value.name === 'string' ? value.name : undefined;
      Object.defineProperty(visit, 'name', {
        value: 'node (' + color(value.type + (name ? '<' + name + '>' : '')) + ')'
      });
    }

    return visit;

    function visit() {
      /** @type {ActionTuple} */
      var result = [];
      /** @type {ActionTuple} */

      var subresult;
      /** @type {number} */

      var offset;
      /** @type {Array.<Parent>} */

      var grandparents;

      if (!test || is(node, index, parents[parents.length - 1] || null)) {
        result = toResult(visitor(node, parents));

        if (result[0] === EXIT) {
          return result;
        }
      } // @ts-expect-error looks like a parent.


      if (node.children && result[0] !== SKIP) {
        // @ts-expect-error looks like a parent.
        offset = (reverse ? node.children.length : -1) + step; // @ts-expect-error looks like a parent.

        grandparents = parents.concat(node); // @ts-expect-error looks like a parent.

        while (offset > -1 && offset < node.children.length) {
          // @ts-expect-error looks like a parent.
          subresult = factory(node.children[offset], offset, grandparents)();

          if (subresult[0] === EXIT) {
            return subresult;
          }

          offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;
        }
      }

      return result;
    }
  }
};
/**
 * @param {VisitorResult} value
 * @returns {ActionTuple}
 */

function toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }

  if (typeof value === 'number') {
    return [CONTINUE, value];
  }

  return [value];
}
;// CONCATENATED MODULE: ./node_modules/rehype-slug/node_modules/unist-util-visit/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 * @typedef {import('./complex-types').Visitor} Visitor
 */


/**
 * Visit children of tree which pass a test
 *
 * @param tree Abstract syntax tree to walk
 * @param test Test, optional
 * @param visitor Function to run for each node
 * @param reverse Fisit the tree in reverse, defaults to false
 */

var visit =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {import('./complex-types').Visitor} visitor
 * @param {boolean} [reverse]
 */
function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  visitParents(tree, test, overload, reverse);
  /**
   * @param {Node} node
   * @param {Array.<Parent>} parents
   */

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};
;// CONCATENATED MODULE: ./node_modules/rehype-slug/index.js
/**
 * @typedef {import('hast').Root} Root
 */





var slugs = new github_slugger();
/**
 * Plugin to add `id`s to headings.
 *
 * @type {import('unified').Plugin<[], Root>}
 */

function rehypeSlug() {
  return function (tree) {
    slugs.reset();
    visit(tree, 'element', function (node) {
      if (headingRank(node) && node.properties && !hasProperty(node, 'id')) {
        node.properties.id = slugs.slug(hast_util_to_string_toString(node));
      }
    });
  };
}
;// CONCATENATED MODULE: ./node_modules/hast-util-embedded/index.js
/**
 * @typedef {import('hast').Element & {tagName: 'audio'|'canvas'|'embed'|'iframe'|'img'|'math'|'object'|'picture'|'svg'|'video'}} Embedded
 * @typedef {import('hast-util-is-element').AssertPredicate<Embedded>} AssertEmbedded
 */

/**
 * Check if a node is an embedded element.
 * @type {AssertEmbedded}
 */
// @ts-ignore Sure, the assertion matches.

var embedded = convertElement(['audio', 'canvas', 'embed', 'iframe', 'img', 'math', 'object', 'picture', 'svg', 'video']);
;// CONCATENATED MODULE: ./node_modules/rehype-minify-whitespace/block.js
// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
var blocks = ['address', // Flow content.
'article', // Sections and headings.
'aside', // Sections and headings.
'blockquote', // Flow content.
'body', // Page.
'br', // Contribute whitespace intrinsically.
'caption', // Similar to block.
'center', // Flow content, legacy.
'col', // Similar to block.
'colgroup', // Similar to block.
'dd', // Lists.
'dialog', // Flow content.
'dir', // Lists, legacy.
'div', // Flow content.
'dl', // Lists.
'dt', // Lists.
'figcaption', // Flow content.
'figure', // Flow content.
'footer', // Flow content.
'form', // Flow content.
'h1', // Sections and headings.
'h2', // Sections and headings.
'h3', // Sections and headings.
'h4', // Sections and headings.
'h5', // Sections and headings.
'h6', // Sections and headings.
'head', // Page.
'header', // Flow content.
'hgroup', // Sections and headings.
'hr', // Flow content.
'html', // Page.
'legend', // Flow content.
'li', // Block-like.
'li', // Similar to block.
'listing', // Flow content, legacy
'main', // Flow content.
'menu', // Lists.
'nav', // Sections and headings.
'ol', // Lists.
'optgroup', // Similar to block.
'option', // Similar to block.
'p', // Flow content.
'plaintext', // Flow content, legacy
'pre', // Flow content.
'section', // Sections and headings.
'summary', // Similar to block.
'table', // Similar to block.
'tbody', // Similar to block.
'td', // Block-like.
'td', // Similar to block.
'tfoot', // Similar to block.
'th', // Block-like.
'th', // Similar to block.
'thead', // Similar to block.
'tr', // Similar to block.
'ul', // Lists.
'wbr', // Contribute whitespace intrinsically.
'xmp' // Flow content, legacy
];
;// CONCATENATED MODULE: ./node_modules/rehype-minify-whitespace/content.js
var content = [// Form.
'button', 'input', 'select', 'textarea'];
;// CONCATENATED MODULE: ./node_modules/rehype-minify-whitespace/skippable.js
var skippable = ['area', 'base', 'basefont', 'dialog', 'datalist', 'head', 'link', 'meta', 'noembed', 'noframes', 'param', 'rp', 'script', 'source', 'style', 'template', 'track', 'title'];
;// CONCATENATED MODULE: ./node_modules/rehype-minify-whitespace/index.js
/**
 * @fileoverview
 *   Collapse whitespace.
 *
 *   Normally, collapses to a single space.
 *   If `newlines: true`, collapses whitespace containing newlines to `'\n'`
 *   instead of `' '`.
 * @example
 *   <h1>Heading</h1>
 *   <p><strong>This</strong> and <em>that</em></p>
 */

/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Text} Text
 * @typedef {Root|Root['children'][number]} Node
 *
 * @typedef Options
 * @property {boolean} [newlines=false]
 *   If `newlines: true`, collapses whitespace containing newlines to `'\n'`
 *   instead of `' '`.
 *   The default is to collapse to a single space.
 *
 * @typedef {'pre'|'nowrap'|'pre-wrap'|'normal'} Whitespace
 *
 * @typedef Context
 * @property {ReturnType<collapseFactory>} collapse
 * @property {Whitespace} whitespace
 * @property {boolean} [before]
 * @property {boolean} [after]
 *
 * @typedef Result
 * @property {boolean} remove
 * @property {boolean} ignore
 * @property {boolean} stripAtStart
 */







var ignorableNode = convert(['doctype', 'comment']);
/**
 * Collapse whitespace.
 *
 * Normally, collapses to a single space.
 * If `newlines: true`, collapses whitespace containing newlines to `'\n'`
 * instead of `' '`.
 *
 * @type {import('unified').Plugin<[Options?] | void[], Root>}
 */

function rehypeMinifyWhitespace() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var collapse = collapseFactory(options.newlines ? replaceNewlines : replaceWhitespace);
  return function (tree) {
    minify(tree, {
      collapse: collapse,
      whitespace: 'normal'
    });
  };
}
/**
 * @param {Node} node
 * @param {Context} context
 * @returns {Result}
 */

function minify(node, context) {
  if ('children' in node) {
    var settings = Object.assign({}, context);

    if (node.type === 'root' || blocklike(node)) {
      settings.before = true;
      settings.after = true;
    }

    settings.whitespace = inferWhiteSpace(node, context);
    return rehype_minify_whitespace_all(node, settings);
  }

  if (node.type === 'text') {
    if (context.whitespace === 'normal') {
      return minifyText(node, context);
    } // Naïve collapse, but no trimming:


    if (context.whitespace === 'nowrap') {
      node.value = context.collapse(node.value);
    } // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor
    // trimmed.

  }

  return {
    remove: false,
    ignore: ignorableNode(node),
    stripAtStart: false
  };
}
/**
 * @param {Text} node
 * @param {Context} context
 * @returns {Result}
 */


function minifyText(node, context) {
  var value = context.collapse(node.value);
  var result = {
    remove: false,
    ignore: false,
    stripAtStart: false
  };
  var start = 0;
  var end = value.length;

  if (context.before && removable(value.charAt(0))) {
    start++;
  }

  if (start !== end && removable(value.charAt(end - 1))) {
    if (context.after) {
      end--;
    } else {
      result.stripAtStart = true;
    }
  }

  if (start === end) {
    result.remove = true;
  } else {
    node.value = value.slice(start, end);
  }

  return result;
}
/**
 * @param {Root|Element} parent
 * @param {Context} context
 * @returns {Result}
 */


function rehype_minify_whitespace_all(parent, context) {
  var before = context.before;
  var after = context.after;
  var children = parent.children;
  var length = children.length;
  var index = -1;

  while (++index < length) {
    var result = minify(children[index], Object.assign({}, context, {
      before: before,
      after: collapsableAfter(children, index, after)
    }));

    if (result.remove) {
      children.splice(index, 1);
      index--;
      length--;
    } else if (!result.ignore) {
      before = result.stripAtStart;
    } // If this element, such as a `<select>` or `<img>`, contributes content
    // somehow, allow whitespace again.


    if (rehype_minify_whitespace_content(children[index])) {
      before = false;
    }
  }

  return {
    remove: false,
    ignore: false,
    stripAtStart: Boolean(before || after)
  };
}
/**
 * @param {Node[]} nodes
 * @param {number} index
 * @param {boolean|undefined} [after]
 * @returns {boolean|undefined}
 */


function collapsableAfter(nodes, index, after) {
  while (++index < nodes.length) {
    var node = nodes[index];
    var result = inferBoundary(node);

    if (result === undefined && 'children' in node && !rehype_minify_whitespace_skippable(node)) {
      result = collapsableAfter(node.children, -1);
    }

    if (typeof result === 'boolean') {
      return result;
    }
  }

  return after;
}
/**
 * Infer two types of boundaries:
 *
 * 1. `true` — boundary for which whitespace around it does not contribute
 *    anything
 * 2. `false` — boundary for which whitespace around it *does* contribute
 *
 * No result (`undefined`) is returned if it is unknown.
 *
 * @param {Node} node
 * @returns {boolean|undefined}
 */


function inferBoundary(node) {
  if (node.type === 'element') {
    if (rehype_minify_whitespace_content(node)) {
      return false;
    }

    if (blocklike(node)) {
      return true;
    } // Unknown: either depends on siblings if embedded or metadata, or on
    // children.

  } else if (node.type === 'text') {
    if (!whitespace(node)) {
      return false;
    }
  } else if (!ignorableNode(node)) {
    return false;
  }
}
/**
 * Infer whether a node is skippable.
 *
 * @param {Node} node
 * @returns {boolean}
 */


function rehype_minify_whitespace_content(node) {
  return embedded(node) || isElement(node, content);
}
/**
 * See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
 *
 * @param {Element} node
 * @returns {boolean}
 */


function blocklike(node) {
  return isElement(node, blocks);
}
/**
 * @param {Element|Root} node
 * @returns {boolean}
 */


function rehype_minify_whitespace_skippable(node) {
  return Boolean('properties' in node && node.properties && node.properties.hidden) || ignorableNode(node) || isElement(node, skippable);
}
/**
 * @param {string} character
 * @returns {boolean}
 */


function removable(character) {
  return character === ' ' || character === '\n';
}
/**
 * @param {string} value
 * @returns {string}
 */


function replaceNewlines(value) {
  var match = /\r?\n|\r/.exec(value);
  return match ? match[0] : ' ';
}
/**
 * @returns {string}
 */


function replaceWhitespace() {
  return ' ';
}
/**
 * @param {(value: string) => string} replace
 */


function collapseFactory(replace) {
  return collapse;
  /**
   * @param {string} value
   * @returns {string}
   */

  function collapse(value) {
    return String(value).replace(/[\t\n\v\f\r ]+/g, replace);
  }
}
/**
 * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).
 *
 * @param {Root|Element} node
 * @param {Context} context
 * @returns {Whitespace}
 */


function inferWhiteSpace(node, context) {
  if ('tagName' in node && node.properties) {
    switch (node.tagName) {
      case 'listing':
      case 'plaintext':
      case 'xmp':
        return 'pre';

      case 'nobr':
        return 'nowrap';

      case 'pre':
        return node.properties.wrap ? 'pre-wrap' : 'pre';

      case 'td':
      case 'th':
        return node.properties.noWrap ? 'nowrap' : context.whitespace;

      case 'textarea':
        return 'pre-wrap';

      default:
    }
  }

  return context.whitespace;
}
// EXTERNAL MODULE: ./node_modules/hast-util-is-body-ok-link/index.js
var hast_util_is_body_ok_link = __webpack_require__(63);
;// CONCATENATED MODULE: ./node_modules/hast-util-phrasing/index.js




var basic = convertElement(['a', 'abbr', // `area` is in fact only phrasing if it is inside a `map` element.
// However, since `area`s are required to be inside a `map` element, and it’s
// a rather involved check, it’s ignored here for now.
'area', 'b', 'bdi', 'bdo', 'br', 'button', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'i', 'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'meter', 'noscript', 'output', 'progress', 'q', 'ruby', 's', 'samp', 'script', 'select', 'small', 'span', 'strong', 'sub', 'sup', 'template', 'textarea', 'time', 'u', 'var', 'wbr']);
var meta = convertElement('meta');
/**
 * @param {unknown} node
 * @returns {boolean}
 */

function phrasing(node) {
  return (// @ts-ignore Looks like a text.
    node && node.type === 'text' || basic(node) || embedded(node) || hast_util_is_body_ok_link(node) || meta(node) && hasProperty(node, 'itemProp')
  );
}
;// CONCATENATED MODULE: ./node_modules/html-whitespace-sensitive-tag-names/index.js
/**
 * @fileoverview
 *   List of whitespace sensitive HTML tag names
 * @longdescription
 *   ## Use
 *
 *   ```js
 *   import {whitespaceSensitiveTagNames} from 'html-whitespace-sensitive-tag-names'
 *
 *   whitespaceSensitiveTagNames
 *   //=> ['pre', 'script', 'style', 'textarea']
 *   ```
 *
 *   ## API
 *
 *   ### `whitespaceSensitiveTagNames`
 *
 *   List of whitespace sensitive HTML tag names (`string[]`).
 */
var whitespaceSensitiveTagNames = ['pre', 'script', 'style', 'textarea'];
;// CONCATENATED MODULE: ./node_modules/rehype-format/index.js
/**
 * @typedef {import('hast').Root} Root
 * @typedef {Root['children'][number]} Child
 * @typedef {import('hast').Element} Element
 * @typedef {Root|Child} Node
 *
 * @typedef Options
 *   Configuration.
 * @property {number|string} [indent=2]
 *   Indentation per level (`number`, `string`, default: `2`).
 *   When number, uses that amount of spaces.
 *   When `string`, uses that per indentation level.
 * @property {boolean} [indentInitial=true]
 *   Whether to indent the first level (`boolean`, default: `true`).
 *   This is usually the `<html>`, thus not indenting `head` and `body`.
 * @property {Array<string>} [blanks=[]]
 *   List of tag names to join with a blank line (`Array<string>`, default:
 *   `[]`).
 *   These tags, when next to each other, are joined by a blank line (`\n\n`).
 *   For example, when `['head', 'body']` is given, a blank line is added
 *   between these two.
 */







var rehype_format_minify = rehypeMinifyWhitespace({
  newlines: true
});
/**
 * Format whitespace in HTML.
 *
 * @type {import('unified').Plugin<[Options?] | Array<void>, Root>}
 */

function rehypeFormat() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var indent = options.indent || 2;
  var indentInitial = options.indentInitial;

  if (typeof indent === 'number') {
    indent = ' '.repeat(indent);
  } // Default to indenting the initial level.


  if (indentInitial === null || indentInitial === undefined) {
    indentInitial = true;
  }

  return function (tree) {
    /** @type {boolean|undefined} */
    var head; // @ts-expect-error: fine, it’s a sync transformer.

    rehype_format_minify(tree); // eslint-disable-next-line complexity

    visitParents(tree, function (node, parents) {
      var index = -1;

      if (!('children' in node)) {
        return;
      }

      if (isElement(node, 'head')) {
        head = true;
      }

      if (head && isElement(node, 'body')) {
        head = undefined;
      }

      if (isElement(node, whitespaceSensitiveTagNames)) {
        return SKIP;
      }

      var children = node.children;
      var level = parents.length; // Don’t indent content of whitespace-sensitive nodes / inlines.

      if (children.length === 0 || !padding(node, head)) {
        return;
      }

      if (!indentInitial) {
        level--;
      }
      /** @type {boolean|undefined} */


      var eol; // Indent newlines in `text`.

      while (++index < children.length) {
        var child = children[index];

        if (child.type === 'text' || child.type === 'comment') {
          if (child.value.includes('\n')) {
            eol = true;
          }

          child.value = child.value.replace(/ *\n/g, '$&' + String(indent).repeat(level));
        }
      }
      /** @type {Array<Child>} */


      var result = [];
      /** @type {Child|undefined} */

      var previous;
      index = -1;

      while (++index < children.length) {
        var _child = children[index];

        if (padding(_child, head) || eol && !index) {
          addBreak(result, level, _child);
          eol = true;
        }

        previous = _child;
        result.push(_child);
      }

      if (previous && (eol || padding(previous, head))) {
        // Ignore trailing whitespace (if that already existed), as we’ll add
        // properly indented whitespace.
        if (whitespace(previous)) {
          result.pop();
          previous = result[result.length - 1];
        }

        addBreak(result, level - 1);
      }

      node.children = result;
    });
  };
  /**
   * @param {Array<Child>} list
   * @param {number} level
   * @param {Child} [next]
   * @returns {void}
   */

  function addBreak(list, level, next) {
    var tail = list[list.length - 1];
    var previous = whitespace(tail) ? list[list.length - 2] : tail;
    var replace = (blank(previous) && blank(next) ? '\n\n' : '\n') + String(indent).repeat(Math.max(level, 0));

    if (tail && tail.type === 'text') {
      tail.value = whitespace(tail) ? replace : tail.value + replace;
    } else {
      list.push({
        type: 'text',
        value: replace
      });
    }
  }
  /**
   * @param {Node|undefined} node
   * @returns {boolean}
   */


  function blank(node) {
    return Boolean(node && node.type === 'element' && options.blanks && options.blanks.length > 0 && options.blanks.includes(node.tagName));
  }
}
/**
 * @param {Node} node
 * @param {boolean|undefined} head
 * @returns {boolean}
 */

function padding(node, head) {
  return node.type === 'root' || (node.type === 'element' ? head || isElement(node, 'script') || embedded(node) || !phrasing(node) : false);
}
;// CONCATENATED MODULE: ./node_modules/rehype-autolink-headings/node_modules/unist-util-visit/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 * @typedef {import('./complex-types').Visitor} Visitor
 */


/**
 * Visit children of tree which pass a test
 *
 * @param tree Abstract syntax tree to walk
 * @param test Test, optional
 * @param visitor Function to run for each node
 * @param reverse Fisit the tree in reverse, defaults to false
 */

var unist_util_visit_visit =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {import('./complex-types').Visitor} visitor
 * @param {boolean} [reverse]
 */
function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  visitParents(tree, test, overload, reverse);
  /**
   * @param {Node} node
   * @param {Array.<Parent>} parents
   */

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};
;// CONCATENATED MODULE: ./node_modules/rehype-autolink-headings/index.js


/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Parent} Parent
 * @typedef {import('hast').Element} Element
 * @typedef {Element['children'][number]} ElementChild
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('hast-util-is-element').Test} Test
 *
 * @typedef {'prepend'|'append'|'wrap'|'before'|'after'} Behavior
 *
 * @callback Build
 * @param {Element} node
 * @returns {ElementChild|ElementChild[]}
 *
 * @typedef Options
 *   Configuration.
 * @property {Behavior} [behavior='prepend']
 *   How to create links.
 * @property {Behavior} [behaviour]
 *   Please use `behavior` instead
 * @property {Properties} [properties]
 *   Extra properties to set on the link when injecting.
 *   Defaults to `{ariaHidden: true, tabIndex: -1}` when `'prepend'` or
 *   `'append'`.
 * @property {ElementChild|ElementChild[]|Build} [content={type: 'element', tagName: 'span', properties: {className: ['icon', 'icon-link']}, children: []}]
 *   hast nodes to insert in the link.
 * @property {ElementChild|ElementChild[]|Build} [group]
 *   hast node to wrap the heading and link with, if `behavior` is `'before'` or
 *   `'after'`.
 *   There is no default.
 * @property {Test} [test]
 *   Test to define which heading elements are linked.
 *   Any test that can be given to `hast-util-is-element` is supported.
 *   The default (no test) is to link all headings.
 *   Can be used to link only h1-h3, or for example all except h1.
 */





/** @type {Element} */

var contentDefaults = {
  type: 'element',
  tagName: 'span',
  properties: {
    className: ['icon', 'icon-link']
  },
  children: []
};
/**
 * Plugin to automatically add links to headings (h1-h6).
 *
 * @type {import('unified').Plugin<[Options?]|void[], Root>}
 */

function rehypeAutolinkHeadings() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var props = options.properties;
  var behavior = options.behaviour || options.behavior || 'prepend';
  var content = options.content || contentDefaults;
  var group = options.group;
  var is = convertElement(options.test);
  /** @type {import('unist-util-visit').Visitor<Element>} */

  var method;

  if (behavior === 'wrap') {
    method = wrap;
  } else if (behavior === 'before' || behavior === 'after') {
    method = around;
  } else {
    if (!props) {
      props = {
        ariaHidden: 'true',
        tabIndex: -1
      };
    }

    method = inject;
  }

  return function (tree) {
    unist_util_visit_visit(tree, 'element', function (node, index, parent) {
      if (headingRank(node) && hasProperty(node, 'id') && is(node, index, parent)) {
        return method(node, index, parent);
      }
    });
  };
  /** @type {import('unist-util-visit').Visitor<Element>} */

  function inject(node) {
    node.children[behavior === 'prepend' ? 'unshift' : 'push'](create(node, extend(true, {}, props), toChildren(content, node)));
    return [SKIP];
  }
  /** @type {import('unist-util-visit').Visitor<Element>} */


  function around(node, index, parent) {
    var _parent$children;

    // Uncommon.

    /* c8 ignore next */
    if (typeof index !== 'number' || !parent) return;
    var link = create(node, extend(true, {}, props), toChildren(content, node));
    var nodes = behavior === 'before' ? [link, node] : [node, link];

    if (group) {
      var grouping = toNode(group, node);

      if (grouping && !Array.isArray(grouping) && grouping.type === 'element') {
        grouping.children = nodes;
        nodes = [grouping];
      }
    }

    (_parent$children = parent.children).splice.apply(_parent$children, [index, 1].concat(_toConsumableArray(nodes)));

    return [SKIP, index + nodes.length];
  }
  /** @type {import('unist-util-visit').Visitor<Element>} */


  function wrap(node) {
    node.children = [create(node, extend(true, {}, props), node.children)];
    return [SKIP];
  }
  /**
   * @param {ElementChild|ElementChild[]|Build} value
   * @param {Element} node
   * @returns {ElementChild[]}
   */


  function toChildren(value, node) {
    var result = toNode(value, node);
    return Array.isArray(result) ? result : [result];
  }
  /**
   * @param {ElementChild|ElementChild[]|Build} value
   * @param {Element} node
   * @returns {ElementChild|ElementChild[]}
   */


  function toNode(value, node) {
    if (typeof value === 'function') return value(node);
    return extend(true, Array.isArray(value) ? [] : {}, value);
  }
  /**
   * @param {Element} node
   * @param {Properties} props
   * @param {ElementChild[]} children
   * @returns {Element}
   */


  function create(node, props, children) {
    return {
      type: 'element',
      tagName: 'a',
      properties: Object.assign({}, props, {
        // Fix hast types and make them required.

        /* c8 ignore next */
        href: '#' + (node.properties || {}).id
      }),
      children: children
    };
  }
}
// EXTERNAL MODULE: ./node_modules/rehype-urls/index.js
var rehype_urls = __webpack_require__(5192);
var rehype_urls_default = /*#__PURE__*/__webpack_require__.n(rehype_urls);
// EXTERNAL MODULE: ./node_modules/rehype-wrap/index.js
var rehype_wrap = __webpack_require__(7144);
var rehype_wrap_default = /*#__PURE__*/__webpack_require__.n(rehype_wrap);
// EXTERNAL MODULE: ./node_modules/parse5/lib/parser/index.js
var lib_parser = __webpack_require__(4016);
;// CONCATENATED MODULE: ./node_modules/unist-util-position/index.js
/**
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 *
 * @typedef {Partial<Point>} PointLike
 *
 * @typedef {Object} PositionLike
 * @property {PointLike} [start]
 * @property {PointLike} [end]
 *
 * @typedef {Object} NodeLike
 * @property {PositionLike} [position]
 */
var pointStart = unist_util_position_point('start');
var pointEnd = unist_util_position_point('end');
/**
 * Get the positional info of `node`.
 *
 * @param {NodeLike} [node]
 * @returns {Position}
 */

function unist_util_position_position(node) {
  return {
    start: pointStart(node),
    end: pointEnd(node)
  };
}
/**
 * Get the positional info of `node`.
 *
 * @param {'start'|'end'} type
 */

function unist_util_position_point(type) {
  return point;
  /**
   * Get the positional info of `node`.
   *
   * @param {NodeLike} [node]
   * @returns {Point}
   */

  function point(node) {
    /** @type {Point} */
    // @ts-ignore looks like a point
    var point = node && node.position && node.position[type] || {};
    return {
      line: point.line || null,
      column: point.column || null,
      offset: point.offset > -1 ? point.offset : null
    };
  }
}
;// CONCATENATED MODULE: ./node_modules/hast-util-raw/node_modules/unist-util-visit/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 * @typedef {import('./complex-types').Visitor} Visitor
 */


/**
 * Visit children of tree which pass a test
 *
 * @param tree Abstract syntax tree to walk
 * @param test Test, optional
 * @param visitor Function to run for each node
 * @param reverse Fisit the tree in reverse, defaults to false
 */

var node_modules_unist_util_visit_visit =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {import('./complex-types').Visitor} visitor
 * @param {boolean} [reverse]
 */
function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  visitParents(tree, test, overload, reverse);
  /**
   * @param {Node} node
   * @param {Array.<Parent>} parents
   */

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/schema.js



/**
 * @typedef {import('./info.js').Info} Info
 * @typedef {Record<string, Info>} Properties
 * @typedef {Record<string, string>} Normal
 */
var util_schema_Schema = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {Properties} property
 * @param {Normal} normal
 * @param {string} [space]
 */
function Schema(property, normal, space) {
  _classCallCheck(this, Schema);

  this.property = property;
  this.normal = normal;

  if (space) {
    this.space = space;
  }
});
/** @type {Properties} */

util_schema_Schema.prototype.property = {};
/** @type {Normal} */

util_schema_Schema.prototype.normal = {};
/** @type {string|null} */

util_schema_Schema.prototype.space = null;
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/merge.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 */

/**
 * @param {Schema[]} definitions
 * @param {string} [space]
 * @returns {Schema}
 */

function util_merge_merge(definitions, space) {
  /** @type {Properties} */
  var property = {};
  /** @type {Normal} */

  var normal = {};
  var index = -1;

  while (++index < definitions.length) {
    Object.assign(property, definitions[index].property);
    Object.assign(normal, definitions[index].normal);
  }

  return new util_schema_Schema(property, normal, space);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/normalize.js
/**
 * @param {string} value
 * @returns {string}
 */
function lib_normalize_normalize(value) {
  return value.toLowerCase();
}
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/info.js


var util_info_Info = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {string} property
 * @param {string} attribute
 */
function Info(property, attribute) {
  _classCallCheck(this, Info);

  /** @type {string} */
  this.property = property;
  /** @type {string} */

  this.attribute = attribute;
});
/** @type {string|null} */

util_info_Info.prototype.space = null;
util_info_Info.prototype["boolean"] = false;
util_info_Info.prototype.booleanish = false;
util_info_Info.prototype.overloadedBoolean = false;
util_info_Info.prototype.number = false;
util_info_Info.prototype.commaSeparated = false;
util_info_Info.prototype.spaceSeparated = false;
util_info_Info.prototype.commaOrSpaceSeparated = false;
util_info_Info.prototype.mustUseProperty = false;
util_info_Info.prototype.defined = false;
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/types.js
var util_types_powers = 0;

var util_types_boolean = util_types_increment();


var util_types_booleanish = util_types_increment();
var util_types_overloadedBoolean = util_types_increment();
var util_types_number = util_types_increment();
var util_types_spaceSeparated = util_types_increment();
var util_types_commaSeparated = util_types_increment();
var util_types_commaOrSpaceSeparated = util_types_increment();

function util_types_increment() {
  return Math.pow(2, ++util_types_powers);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/defined-info.js







/** @type {Array<keyof types>} */
// @ts-expect-error: hush.

var util_defined_info_checks = Object.keys(lib_util_types_namespaceObject);
var util_defined_info_DefinedInfo = /*#__PURE__*/function (_Info) {
  _inherits(DefinedInfo, _Info);

  var _super = _createSuper(DefinedInfo);

  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  function DefinedInfo(property, attribute, mask, space) {
    var _this;

    _classCallCheck(this, DefinedInfo);

    var index = -1;
    _this = _super.call(this, property, attribute);
    util_defined_info_mark(_assertThisInitialized(_this), 'space', space);

    if (typeof mask === 'number') {
      while (++index < util_defined_info_checks.length) {
        var check = util_defined_info_checks[index];
        util_defined_info_mark(_assertThisInitialized(_this), util_defined_info_checks[index], (mask & lib_util_types_namespaceObject[check]) === lib_util_types_namespaceObject[check]);
      }
    }

    return _this;
  }

  return _createClass(DefinedInfo);
}(util_info_Info);
util_defined_info_DefinedInfo.prototype.defined = true;
/**
 * @param {DefinedInfo} values
 * @param {string} key
 * @param {unknown} value
 */

function util_defined_info_mark(values, key, value) {
  if (value) {
    // @ts-expect-error: assume `value` matches the expected value of `key`.
    values[key] = value;
  }
}
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/create.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 *
 * @typedef {Record<string, string>} Attributes
 *
 * @typedef {Object} Definition
 * @property {Record<string, number|null>} properties
 * @property {(attributes: Attributes, property: string) => string} transform
 * @property {string} [space]
 * @property {Attributes} [attributes]
 * @property {Array<string>} [mustUseProperty]
 */



var lib_util_create_own = {}.hasOwnProperty;
/**
 * @param {Definition} definition
 * @returns {Schema}
 */

function util_create_create(definition) {
  /** @type {Properties} */
  var property = {};
  /** @type {Normal} */

  var normal = {};
  /** @type {string} */

  var prop;

  for (prop in definition.properties) {
    if (lib_util_create_own.call(definition.properties, prop)) {
      var value = definition.properties[prop];
      var info = new util_defined_info_DefinedInfo(prop, definition.transform(definition.attributes || {}, prop), value, definition.space);

      if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {
        info.mustUseProperty = true;
      }

      property[prop] = info;
      normal[lib_normalize_normalize(prop)] = prop;
      normal[lib_normalize_normalize(info.attribute)] = prop;
    }
  }

  return new util_schema_Schema(property, normal, definition.space);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/xlink.js

var lib_xlink_xlink = util_create_create({
  space: 'xlink',
  transform: function transform(_, prop) {
    return 'xlink:' + prop.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/xml.js

var lib_xml_xml = util_create_create({
  space: 'xml',
  transform: function transform(_, prop) {
    return 'xml:' + prop.slice(3).toLowerCase();
  },
  properties: {
    xmlLang: null,
    xmlBase: null,
    xmlSpace: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/case-sensitive-transform.js
/**
 * @param {Record<string, string>} attributes
 * @param {string} attribute
 * @returns {string}
 */
function util_case_sensitive_transform_caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/case-insensitive-transform.js

/**
 * @param {Record<string, string>} attributes
 * @param {string} property
 * @returns {string}
 */

function util_case_insensitive_transform_caseInsensitiveTransform(attributes, property) {
  return util_case_sensitive_transform_caseSensitiveTransform(attributes, property.toLowerCase());
}
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/xmlns.js


var lib_xmlns_xmlns = util_create_create({
  space: 'xmlns',
  attributes: {
    xmlnsxlink: 'xmlns:xlink'
  },
  transform: util_case_insensitive_transform_caseInsensitiveTransform,
  properties: {
    xmlns: null,
    xmlnsXLink: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/aria.js


var lib_aria_aria = util_create_create({
  transform: function transform(_, prop) {
    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: util_types_booleanish,
    ariaAutoComplete: null,
    ariaBusy: util_types_booleanish,
    ariaChecked: util_types_booleanish,
    ariaColCount: util_types_number,
    ariaColIndex: util_types_number,
    ariaColSpan: util_types_number,
    ariaControls: util_types_spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: util_types_spaceSeparated,
    ariaDetails: null,
    ariaDisabled: util_types_booleanish,
    ariaDropEffect: util_types_spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: util_types_booleanish,
    ariaFlowTo: util_types_spaceSeparated,
    ariaGrabbed: util_types_booleanish,
    ariaHasPopup: null,
    ariaHidden: util_types_booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: util_types_spaceSeparated,
    ariaLevel: util_types_number,
    ariaLive: null,
    ariaModal: util_types_booleanish,
    ariaMultiLine: util_types_booleanish,
    ariaMultiSelectable: util_types_booleanish,
    ariaOrientation: null,
    ariaOwns: util_types_spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: util_types_number,
    ariaPressed: util_types_booleanish,
    ariaReadOnly: util_types_booleanish,
    ariaRelevant: null,
    ariaRequired: util_types_booleanish,
    ariaRoleDescription: util_types_spaceSeparated,
    ariaRowCount: util_types_number,
    ariaRowIndex: util_types_number,
    ariaRowSpan: util_types_number,
    ariaSelected: util_types_booleanish,
    ariaSetSize: util_types_number,
    ariaSort: null,
    ariaValueMax: util_types_number,
    ariaValueMin: util_types_number,
    ariaValueNow: util_types_number,
    ariaValueText: null,
    role: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/html.js



var lib_html_html = util_create_create({
  space: 'html',
  attributes: {
    acceptcharset: 'accept-charset',
    classname: 'class',
    htmlfor: 'for',
    httpequiv: 'http-equiv'
  },
  transform: util_case_insensitive_transform_caseInsensitiveTransform,
  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: util_types_commaSeparated,
    acceptCharset: util_types_spaceSeparated,
    accessKey: util_types_spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: util_types_boolean,
    allowPaymentRequest: util_types_boolean,
    allowUserMedia: util_types_boolean,
    alt: null,
    as: null,
    async: util_types_boolean,
    autoCapitalize: null,
    autoComplete: util_types_spaceSeparated,
    autoFocus: util_types_boolean,
    autoPlay: util_types_boolean,
    capture: util_types_boolean,
    charSet: null,
    checked: util_types_boolean,
    cite: null,
    className: util_types_spaceSeparated,
    cols: util_types_number,
    colSpan: null,
    content: null,
    contentEditable: util_types_booleanish,
    controls: util_types_boolean,
    controlsList: util_types_spaceSeparated,
    coords: util_types_number | util_types_commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    "default": util_types_boolean,
    defer: util_types_boolean,
    dir: null,
    dirName: null,
    disabled: util_types_boolean,
    download: util_types_overloadedBoolean,
    draggable: util_types_booleanish,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: util_types_boolean,
    formTarget: null,
    headers: util_types_spaceSeparated,
    height: util_types_number,
    hidden: util_types_boolean,
    high: util_types_number,
    href: null,
    hrefLang: null,
    htmlFor: util_types_spaceSeparated,
    httpEquiv: util_types_spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: util_types_boolean,
    itemId: null,
    itemProp: util_types_spaceSeparated,
    itemRef: util_types_spaceSeparated,
    itemScope: util_types_boolean,
    itemType: util_types_spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: util_types_boolean,
    low: util_types_number,
    manifest: null,
    max: null,
    maxLength: util_types_number,
    media: null,
    method: null,
    min: null,
    minLength: util_types_number,
    multiple: util_types_boolean,
    muted: util_types_boolean,
    name: null,
    nonce: null,
    noModule: util_types_boolean,
    noValidate: util_types_boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: util_types_boolean,
    optimum: util_types_number,
    pattern: null,
    ping: util_types_spaceSeparated,
    placeholder: null,
    playsInline: util_types_boolean,
    poster: null,
    preload: null,
    readOnly: util_types_boolean,
    referrerPolicy: null,
    rel: util_types_spaceSeparated,
    required: util_types_boolean,
    reversed: util_types_boolean,
    rows: util_types_number,
    rowSpan: util_types_number,
    sandbox: util_types_spaceSeparated,
    scope: null,
    scoped: util_types_boolean,
    seamless: util_types_boolean,
    selected: util_types_boolean,
    shape: null,
    size: util_types_number,
    sizes: null,
    slot: null,
    span: util_types_number,
    spellCheck: util_types_booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: util_types_number,
    step: null,
    style: null,
    tabIndex: util_types_number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: util_types_boolean,
    useMap: null,
    value: util_types_booleanish,
    width: util_types_number,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: util_types_spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: util_types_number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: util_types_number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    "char": null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: util_types_boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: util_types_boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: util_types_number,
    // `<img>` and `<object>`
    leftMargin: util_types_number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: util_types_number,
    // `<body>`
    marginWidth: util_types_number,
    // `<body>`
    noResize: util_types_boolean,
    // `<frame>`
    noHref: util_types_boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: util_types_boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: util_types_boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: util_types_number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: util_types_booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: util_types_number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: util_types_number,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: util_types_boolean,
    disableRemotePlayback: util_types_boolean,
    prefix: null,
    property: null,
    results: util_types_number,
    security: null,
    unselectable: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/svg.js



var lib_svg_svg = util_create_create({
  space: 'svg',
  attributes: {
    accentHeight: 'accent-height',
    alignmentBaseline: 'alignment-baseline',
    arabicForm: 'arabic-form',
    baselineShift: 'baseline-shift',
    capHeight: 'cap-height',
    className: 'class',
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    crossOrigin: 'crossorigin',
    dataType: 'datatype',
    dominantBaseline: 'dominant-baseline',
    enableBackground: 'enable-background',
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    hrefLang: 'hreflang',
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    horizOriginY: 'horiz-origin-y',
    imageRendering: 'image-rendering',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    navDown: 'nav-down',
    navDownLeft: 'nav-down-left',
    navDownRight: 'nav-down-right',
    navLeft: 'nav-left',
    navNext: 'nav-next',
    navPrev: 'nav-prev',
    navRight: 'nav-right',
    navUp: 'nav-up',
    navUpLeft: 'nav-up-left',
    navUpRight: 'nav-up-right',
    onAbort: 'onabort',
    onActivate: 'onactivate',
    onAfterPrint: 'onafterprint',
    onBeforePrint: 'onbeforeprint',
    onBegin: 'onbegin',
    onCancel: 'oncancel',
    onCanPlay: 'oncanplay',
    onCanPlayThrough: 'oncanplaythrough',
    onChange: 'onchange',
    onClick: 'onclick',
    onClose: 'onclose',
    onCopy: 'oncopy',
    onCueChange: 'oncuechange',
    onCut: 'oncut',
    onDblClick: 'ondblclick',
    onDrag: 'ondrag',
    onDragEnd: 'ondragend',
    onDragEnter: 'ondragenter',
    onDragExit: 'ondragexit',
    onDragLeave: 'ondragleave',
    onDragOver: 'ondragover',
    onDragStart: 'ondragstart',
    onDrop: 'ondrop',
    onDurationChange: 'ondurationchange',
    onEmptied: 'onemptied',
    onEnd: 'onend',
    onEnded: 'onended',
    onError: 'onerror',
    onFocus: 'onfocus',
    onFocusIn: 'onfocusin',
    onFocusOut: 'onfocusout',
    onHashChange: 'onhashchange',
    onInput: 'oninput',
    onInvalid: 'oninvalid',
    onKeyDown: 'onkeydown',
    onKeyPress: 'onkeypress',
    onKeyUp: 'onkeyup',
    onLoad: 'onload',
    onLoadedData: 'onloadeddata',
    onLoadedMetadata: 'onloadedmetadata',
    onLoadStart: 'onloadstart',
    onMessage: 'onmessage',
    onMouseDown: 'onmousedown',
    onMouseEnter: 'onmouseenter',
    onMouseLeave: 'onmouseleave',
    onMouseMove: 'onmousemove',
    onMouseOut: 'onmouseout',
    onMouseOver: 'onmouseover',
    onMouseUp: 'onmouseup',
    onMouseWheel: 'onmousewheel',
    onOffline: 'onoffline',
    onOnline: 'ononline',
    onPageHide: 'onpagehide',
    onPageShow: 'onpageshow',
    onPaste: 'onpaste',
    onPause: 'onpause',
    onPlay: 'onplay',
    onPlaying: 'onplaying',
    onPopState: 'onpopstate',
    onProgress: 'onprogress',
    onRateChange: 'onratechange',
    onRepeat: 'onrepeat',
    onReset: 'onreset',
    onResize: 'onresize',
    onScroll: 'onscroll',
    onSeeked: 'onseeked',
    onSeeking: 'onseeking',
    onSelect: 'onselect',
    onShow: 'onshow',
    onStalled: 'onstalled',
    onStorage: 'onstorage',
    onSubmit: 'onsubmit',
    onSuspend: 'onsuspend',
    onTimeUpdate: 'ontimeupdate',
    onToggle: 'ontoggle',
    onUnload: 'onunload',
    onVolumeChange: 'onvolumechange',
    onWaiting: 'onwaiting',
    onZoom: 'onzoom',
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pointerEvents: 'pointer-events',
    referrerPolicy: 'referrerpolicy',
    renderingIntent: 'rendering-intent',
    shapeRendering: 'shape-rendering',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    strokeDashArray: 'stroke-dasharray',
    strokeDashOffset: 'stroke-dashoffset',
    strokeLineCap: 'stroke-linecap',
    strokeLineJoin: 'stroke-linejoin',
    strokeMiterLimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    tabIndex: 'tabindex',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    typeOf: 'typeof',
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    vectorEffect: 'vector-effect',
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    xHeight: 'x-height',
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: 'playbackorder',
    timelineBegin: 'timelinebegin'
  },
  transform: util_case_sensitive_transform_caseSensitiveTransform,
  properties: {
    about: util_types_commaOrSpaceSeparated,
    accentHeight: util_types_number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: util_types_number,
    amplitude: util_types_number,
    arabicForm: null,
    ascent: util_types_number,
    attributeName: null,
    attributeType: null,
    azimuth: util_types_number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: util_types_number,
    by: null,
    calcMode: null,
    capHeight: util_types_number,
    className: util_types_spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: util_types_number,
    diffuseConstant: util_types_number,
    direction: null,
    display: null,
    dur: null,
    divisor: util_types_number,
    dominantBaseline: null,
    download: util_types_boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: util_types_number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: util_types_number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: util_types_number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: util_types_commaSeparated,
    g2: util_types_commaSeparated,
    glyphName: util_types_commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: util_types_number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: util_types_number,
    horizOriginX: util_types_number,
    horizOriginY: util_types_number,
    id: null,
    ideographic: util_types_number,
    imageRendering: null,
    initialVisibility: null,
    "in": null,
    in2: null,
    intercept: util_types_number,
    k: util_types_number,
    k1: util_types_number,
    k2: util_types_number,
    k3: util_types_number,
    k4: util_types_number,
    kernelMatrix: util_types_commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: util_types_number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: util_types_number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: util_types_number,
    overlineThickness: util_types_number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: util_types_number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: util_types_spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: util_types_number,
    pointsAtY: util_types_number,
    pointsAtZ: util_types_number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: util_types_commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: util_types_commaOrSpaceSeparated,
    rev: util_types_commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: util_types_commaOrSpaceSeparated,
    requiredFeatures: util_types_commaOrSpaceSeparated,
    requiredFonts: util_types_commaOrSpaceSeparated,
    requiredFormats: util_types_commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: util_types_number,
    specularExponent: util_types_number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: util_types_number,
    strikethroughThickness: util_types_number,
    string: null,
    stroke: null,
    strokeDashArray: util_types_commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: util_types_number,
    strokeOpacity: util_types_number,
    strokeWidth: null,
    style: null,
    surfaceScale: util_types_number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: util_types_commaOrSpaceSeparated,
    tabIndex: util_types_number,
    tableValues: null,
    target: null,
    targetX: util_types_number,
    targetY: util_types_number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: util_types_commaOrSpaceSeparated,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: util_types_number,
    underlineThickness: util_types_number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: util_types_number,
    values: null,
    vAlphabetic: util_types_number,
    vMathematical: util_types_number,
    vectorEffect: null,
    vHanging: util_types_number,
    vIdeographic: util_types_number,
    version: null,
    vertAdvY: util_types_number,
    vertOriginX: util_types_number,
    vertOriginY: util_types_number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: util_types_number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/index.js
/**
 * @typedef {import('./lib/util/info.js').Info} Info
 * @typedef {import('./lib/util/schema.js').Schema} Schema
 */










var hast_util_from_parse5_node_modules_property_information_html = util_merge_merge([lib_xml_xml, lib_xlink_xlink, lib_xmlns_xmlns, lib_aria_aria, lib_html_html], 'html');
var hast_util_from_parse5_node_modules_property_information_svg = util_merge_merge([lib_xml_xml, lib_xlink_xlink, lib_xmlns_xmlns, lib_aria_aria, lib_svg_svg], 'svg');
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/property-information/lib/find.js
/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */



var lib_find_valid = /^data[-\w.:]+$/i;
var lib_find_dash = /-[a-z]/g;
var lib_find_cap = /[A-Z]/g;
/**
 * @param {Schema} schema
 * @param {string} value
 * @returns {Info}
 */

function lib_find_find(schema, value) {
  var normal = lib_normalize_normalize(value);
  var prop = value;
  var Type = util_info_Info;

  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }

  if (normal.length > 4 && normal.slice(0, 4) === 'data' && lib_find_valid.test(value)) {
    // Attribute or property.
    if (value.charAt(4) === '-') {
      // Turn it into a property.
      var rest = value.slice(5).replace(lib_find_dash, lib_find_camelcase);
      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      // Turn it into an attribute.
      var _rest = value.slice(4);

      if (!lib_find_dash.test(_rest)) {
        var dashes = _rest.replace(lib_find_cap, lib_find_kebab);

        if (dashes.charAt(0) !== '-') {
          dashes = '-' + dashes;
        }

        value = 'data' + dashes;
      }
    }

    Type = util_defined_info_DefinedInfo;
  }

  return new Type(prop, value);
}
/**
 * @param {string} $0
 * @returns {string}
 */

function lib_find_kebab($0) {
  return '-' + $0.toLowerCase();
}
/**
 * @param {string} $0
 * @returns {string}
 */


function lib_find_camelcase($0) {
  return $0.charAt(1).toUpperCase();
}
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/hast-util-parse-selector/index.js
/**
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('hast').Element} Element
 */
var hast_util_parse_selector_search = /[#.]/g;
/**
 * Create a hast element from a simple CSS selector.
 *
 * @param selector A simple CSS selector.
 *   Can contain a tag-name (`foo`), classes (`.bar`), and an ID (`#baz`).
 *   Multiple classes are allowed.
 *   Uses the last ID if multiple IDs are found.
 * @param [defaultTagName='div'] Tag name to use if `selector` does not specify one.
 */

var hast_util_parse_selector_parseSelector =
/**
 * @type {(
 *  <Selector extends string, DefaultTagName extends string = 'div'>(selector?: Selector, defaultTagName?: DefaultTagName) => Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}
 * )}
 */

/**
 * @param {string} [selector]
 * @param {string} [defaultTagName='div']
 * @returns {Element}
 */
function parseSelector(selector) {
  var defaultTagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';
  var value = selector || '';
  /** @type {Properties} */

  var props = {};
  var start = 0;
  /** @type {string} */

  var subvalue;
  /** @type {string} */

  var previous;
  /** @type {RegExpMatchArray} */

  var match;

  while (start < value.length) {
    hast_util_parse_selector_search.lastIndex = start;
    match = hast_util_parse_selector_search.exec(value);
    subvalue = value.slice(start, match ? match.index : value.length);

    if (subvalue) {
      if (!previous) {
        defaultTagName = subvalue;
      } else if (previous === '#') {
        props.id = subvalue;
      } else if (Array.isArray(props.className)) {
        props.className.push(subvalue);
      } else {
        props.className = [subvalue];
      }

      start += subvalue.length;
    }

    if (match) {
      previous = match[0];
      start++;
    }
  }

  return {
    type: 'element',
    tagName: defaultTagName,
    properties: props,
    children: []
  };
};
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/space-separated-tokens/index.js
/**
 * Parse space separated tokens to an array of strings.
 *
 * @param {string} value Space separated tokens
 * @returns {Array.<string>} Tokens
 */
function hast_util_from_parse5_node_modules_space_separated_tokens_parse(value) {
  var input = String(value || '').trim();
  return input ? input.split(/[ \t\n\r\f]+/g) : [];
}
/**
 * Serialize an array of strings as space separated tokens.
 *
 * @param {Array.<string|number>} values Tokens
 * @returns {string} Space separated tokens
 */

function node_modules_space_separated_tokens_stringify(values) {
  return values.join(' ').trim();
}
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/comma-separated-tokens/index.js
/**
 * @typedef {Object} StringifyOptions
 * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).
 * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).
 */

/**
 * Parse comma separated tokens to an array.
 *
 * @param {string} value
 * @returns {Array.<string>}
 */
function hast_util_from_parse5_node_modules_comma_separated_tokens_parse(value) {
  /** @type {Array.<string>} */
  var tokens = [];
  var input = String(value || '');
  var index = input.indexOf(',');
  var start = 0;
  /** @type {boolean} */

  var end;
  /** @type {string} */

  var token;

  while (!end) {
    if (index === -1) {
      index = input.length;
      end = true;
    }

    token = input.slice(start, index).trim();

    if (token || !end) {
      tokens.push(token);
    }

    start = index + 1;
    index = input.indexOf(',', start);
  }

  return tokens;
}
/**
 * Serialize an array of strings to comma separated tokens.
 *
 * @param {Array.<string|number>} values
 * @param {StringifyOptions} [options]
 * @returns {string}
 */

function hast_util_from_parse5_node_modules_comma_separated_tokens_stringify(values, options) {
  var settings = options || {}; // Ensure the last empty entry is seen.

  if (values[values.length - 1] === '') {
    values = values.concat('');
  }

  return values.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();
}
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/hastscript/lib/core.js
/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {Root['children'][number]} Child
 * @typedef {Child|Root} Node
 * @typedef {import('property-information').Info} Info
 * @typedef {import('property-information').Schema} Schema
 *
 * @typedef {Root|Element} HResult
 * @typedef {string|number} HStyleValue
 * @typedef {Object.<string, HStyleValue>} HStyle
 * @typedef {string|number|boolean|null|undefined} HPrimitiveValue
 * @typedef {Array.<string|number>} HArrayValue
 * @typedef {HPrimitiveValue|HArrayValue} HPropertyValue
 * @typedef {{[property: string]: HPropertyValue|HStyle}} HProperties
 *
 * @typedef {string|number|null|undefined} HPrimitiveChild
 * @typedef {Array.<Node|HPrimitiveChild>} HArrayChild
 * @typedef {Node|HPrimitiveChild|HArrayChild} HChild
 */




var core_buttonTypes = new Set(['menu', 'submit', 'reset', 'button']);
var lib_core_own = {}.hasOwnProperty;
/**
 * @param {Schema} schema
 * @param {string} defaultTagName
 * @param {Array.<string>} [caseSensitive]
 */

function hastscript_lib_core_core(schema, defaultTagName, caseSensitive) {
  var adjust = caseSensitive && core_createAdjustMap(caseSensitive);

  var h =
  /**
   * @type {{
   *   (): Root
   *   (selector: null|undefined, ...children: HChild[]): Root
   *   (selector: string, properties?: HProperties, ...children: HChild[]): Element
   *   (selector: string, ...children: HChild[]): Element
   * }}
   */

  /**
   * Hyperscript compatible DSL for creating virtual hast trees.
   *
   * @param {string|null} [selector]
   * @param {HProperties|HChild} [properties]
   * @param {HChild[]} children
   * @returns {HResult}
   */
  function h(selector, properties) {
    var index = -1;
    /** @type {HResult} */

    var node;

    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    if (selector === undefined || selector === null) {
      node = {
        type: 'root',
        children: []
      }; // @ts-expect-error Properties are not supported for roots.

      children.unshift(properties);
    } else {
      node = hast_util_parse_selector_parseSelector(selector, defaultTagName); // Normalize the name.

      node.tagName = node.tagName.toLowerCase();

      if (adjust && lib_core_own.call(adjust, node.tagName)) {
        node.tagName = adjust[node.tagName];
      } // Handle props.


      if (core_isProperties(properties, node.tagName)) {
        /** @type {string} */
        var key;

        for (key in properties) {
          if (lib_core_own.call(properties, key)) {
            // @ts-expect-error `node.properties` is set.
            core_addProperty(schema, node.properties, key, properties[key]);
          }
        }
      } else {
        children.unshift(properties);
      }
    } // Handle children.


    while (++index < children.length) {
      core_addChild(node.children, children[index]);
    }

    if (node.type === 'element' && node.tagName === 'template') {
      node.content = {
        type: 'root',
        children: node.children
      };
      node.children = [];
    }

    return node;
  };

  return h;
}
/**
 * @param {HProperties|HChild} value
 * @param {string} name
 * @returns {value is HProperties}
 */

function core_isProperties(value, name) {
  if (value === null || value === undefined || typeof value !== 'object' || Array.isArray(value)) {
    return false;
  }

  if (name === 'input' || !value.type || typeof value.type !== 'string') {
    return true;
  }

  if ('children' in value && Array.isArray(value.children)) {
    return false;
  }

  if (name === 'button') {
    return core_buttonTypes.has(value.type.toLowerCase());
  }

  return !('value' in value);
}
/**
 * @param {Schema} schema
 * @param {Properties} properties
 * @param {string} key
 * @param {HStyle|HPropertyValue} value
 * @returns {void}
 */


function core_addProperty(schema, properties, key, value) {
  var info = lib_find_find(schema, key);
  var index = -1;
  /** @type {HPropertyValue} */

  var result; // Ignore nullish and NaN values.

  if (value === undefined || value === null) return;

  if (typeof value === 'number') {
    // Ignore NaN.
    if (Number.isNaN(value)) return;
    result = value;
  } // Booleans.
  else if (typeof value === 'boolean') {
    result = value;
  } // Handle list values.
  else if (typeof value === 'string') {
    if (info.spaceSeparated) {
      result = hast_util_from_parse5_node_modules_space_separated_tokens_parse(value);
    } else if (info.commaSeparated) {
      result = hast_util_from_parse5_node_modules_comma_separated_tokens_parse(value);
    } else if (info.commaOrSpaceSeparated) {
      result = hast_util_from_parse5_node_modules_space_separated_tokens_parse(hast_util_from_parse5_node_modules_comma_separated_tokens_parse(value).join(' '));
    } else {
      result = core_parsePrimitive(info, info.property, value);
    }
  } else if (Array.isArray(value)) {
    result = value.concat();
  } else {
    result = info.property === 'style' ? core_style(value) : String(value);
  }

  if (Array.isArray(result)) {
    /** @type {Array.<string|number>} */
    var finalResult = [];

    while (++index < result.length) {
      // @ts-expect-error Assume no booleans in array.
      finalResult[index] = core_parsePrimitive(info, info.property, result[index]);
    }

    result = finalResult;
  } // Class names (which can be added both on the `selector` and here).


  if (info.property === 'className' && Array.isArray(properties.className)) {
    // @ts-expect-error Assume no booleans in `className`.
    result = properties.className.concat(result);
  }

  properties[info.property] = result;
}
/**
 * @param {Array.<Child>} nodes
 * @param {HChild} value
 * @returns {void}
 */


function core_addChild(nodes, value) {
  var index = -1;

  if (value === undefined || value === null) {// Empty.
  } else if (typeof value === 'string' || typeof value === 'number') {
    nodes.push({
      type: 'text',
      value: String(value)
    });
  } else if (Array.isArray(value)) {
    while (++index < value.length) {
      core_addChild(nodes, value[index]);
    }
  } else if (typeof value === 'object' && 'type' in value) {
    if (value.type === 'root') {
      core_addChild(nodes, value.children);
    } else {
      nodes.push(value);
    }
  } else {
    throw new Error('Expected node, nodes, or string, got `' + value + '`');
  }
}
/**
 * Parse a single primitives.
 *
 * @param {Info} info
 * @param {string} name
 * @param {HPrimitiveValue} value
 * @returns {HPrimitiveValue}
 */


function core_parsePrimitive(info, name, value) {
  if (typeof value === 'string') {
    if (info.number && value && !Number.isNaN(Number(value))) {
      return Number(value);
    }

    if ((info["boolean"] || info.overloadedBoolean) && (value === '' || lib_normalize_normalize(value) === lib_normalize_normalize(name))) {
      return true;
    }
  }

  return value;
}
/**
 * @param {HStyle} value
 * @returns {string}
 */


function core_style(value) {
  /** @type {Array.<string>} */
  var result = [];
  /** @type {string} */

  var key;

  for (key in value) {
    if (lib_core_own.call(value, key)) {
      result.push([key, value[key]].join(': '));
    }
  }

  return result.join('; ');
}
/**
 * @param {Array.<string>} values
 * @returns {Object.<string, string>}
 */


function core_createAdjustMap(values) {
  /** @type {Object.<string, string>} */
  var result = {};
  var index = -1;

  while (++index < values.length) {
    result[values[index].toLowerCase()] = values[index];
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/hastscript/lib/svg-case-sensitive-tag-names.js
var svgCaseSensitiveTagNames = ['altGlyph', 'altGlyphDef', 'altGlyphItem', 'animateColor', 'animateMotion', 'animateTransform', 'clipPath', 'feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence', 'foreignObject', 'glyphRef', 'linearGradient', 'radialGradient', 'solidColor', 'textArea', 'textPath'];
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/hastscript/lib/svg.js
/**
 * @typedef {import('./core.js').HChild} Child Acceptable child value
 * @typedef {import('./core.js').HProperties} Properties Acceptable properties value.
 *
 * @typedef {import('./jsx-classic').Element} s.JSX.Element
 * @typedef {import('./jsx-classic').IntrinsicAttributes} s.JSX.IntrinsicAttributes
 * @typedef {import('./jsx-classic').IntrinsicElements} s.JSX.IntrinsicElements
 * @typedef {import('./jsx-classic').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute
 */



var s = hastscript_lib_core_core(hast_util_from_parse5_node_modules_property_information_svg, 'g', svgCaseSensitiveTagNames);
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/node_modules/hastscript/lib/html.js
/**
 * @typedef {import('./core.js').HChild} Child Acceptable child value
 * @typedef {import('./core.js').HProperties} Properties Acceptable properties value.
 *
 * @typedef {import('./jsx-classic').Element} h.JSX.Element
 * @typedef {import('./jsx-classic').IntrinsicAttributes} h.JSX.IntrinsicAttributes
 * @typedef {import('./jsx-classic').IntrinsicElements} h.JSX.IntrinsicElements
 * @typedef {import('./jsx-classic').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute
 */


var html_h = hastscript_lib_core_core(hast_util_from_parse5_node_modules_property_information_html, 'div');
;// CONCATENATED MODULE: ./node_modules/vfile-location/index.js
/**
 * @typedef {import('unist').Point} Point
 * @typedef {import('vfile').VFile} VFile
 *
 * @typedef {Pick<Point, 'line'|'column'>} PositionalPoint
 * @typedef {Required<Point>} FullPoint
 * @typedef {NonNullable<Point['offset']>} Offset
 */

/**
 * Get transform functions for the given `document`.
 *
 * @param {string|Uint8Array|VFile} file
 */
function vfile_location_location(file) {
  var value = String(file);
  /** @type {Array.<number>} */

  var indices = [];
  var search = /\r?\n|\r/g;

  while (search.test(value)) {
    indices.push(search.lastIndex);
  }

  indices.push(value.length + 1);
  return {
    toPoint: toPoint,
    toOffset: toOffset
  };
  /**
   * Get the line and column-based `point` for `offset` in the bound indices.
   * Returns a point with `undefined` values when given invalid or out of bounds
   * input.
   *
   * @param {Offset} offset
   * @returns {FullPoint}
   */

  function toPoint(offset) {
    var index = -1;

    if (offset > -1 && offset < indices[indices.length - 1]) {
      while (++index < indices.length) {
        if (indices[index] > offset) {
          return {
            line: index + 1,
            column: offset - (indices[index - 1] || 0) + 1,
            offset: offset
          };
        }
      }
    }

    return {
      line: undefined,
      column: undefined,
      offset: undefined
    };
  }
  /**
   * Get the `offset` for a line and column-based `point` in the bound indices.
   * Returns `-1` when given invalid or out of bounds input.
   *
   * @param {PositionalPoint} point
   * @returns {Offset}
   */


  function toOffset(point) {
    var line = point && point.line;
    var column = point && point.column;
    /** @type {number} */

    var offset;

    if (typeof line === 'number' && typeof column === 'number' && !Number.isNaN(line) && !Number.isNaN(column) && line - 1 in indices) {
      offset = (indices[line - 2] || 0) + column - 1 || 0;
    }

    return offset > -1 && offset < indices[indices.length - 1] ? offset : -1;
  }
}
;// CONCATENATED MODULE: ./node_modules/web-namespaces/index.js
/**
 * Map of web namespaces.
 *
 * @type {Record<string, string>}
 */
var webNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg',
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace',
  xmlns: 'http://www.w3.org/2000/xmlns/'
};
;// CONCATENATED MODULE: ./node_modules/hast-util-from-parse5/lib/index.js
/**
 * @typedef {import('vfile').VFile} VFile
 * @typedef {import('property-information').Schema} Schema
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 * @typedef {import('hast').Parent} Parent
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Text} Text
 * @typedef {import('hast').Comment} Comment
 * @typedef {import('hast').DocType} Doctype
 * @typedef {Parent['children'][number]} Child
 * @typedef {Element['children'][number]} ElementChild
 * @typedef {Child|Root} Node
 * @typedef {import('parse5').Document} P5Document
 * @typedef {import('parse5').DocumentType} P5Doctype
 * @typedef {import('parse5').CommentNode} P5Comment
 * @typedef {import('parse5').TextNode} P5Text
 * @typedef {import('parse5').Element} P5Element
 * @typedef {import('parse5').ElementLocation} P5ElementLocation
 * @typedef {import('parse5').Location} P5Location
 * @typedef {import('parse5').Attribute} P5Attribute
 * @typedef {import('parse5').Node} P5Node
 *
 * @typedef {'html'|'svg'} Space
 *
 * @callback Handler
 * @param {Context} ctx
 * @param {P5Node} node
 * @param {Array.<Child>} [children]
 * @returns {Node}
 *
 * @typedef Options
 * @property {Space} [space='html'] Whether the root of the tree is in the `'html'` or `'svg'` space. If an element in with the SVG namespace is found in `ast`, `fromParse5` automatically switches to the SVG space when entering the element, and switches back when leaving
 * @property {VFile} [file] `VFile`, used to add positional information to nodes. If given, the file should have the original HTML source as its contents
 * @property {boolean} [verbose=false] Whether to add extra positional information about starting tags, closing tags, and attributes to elements. Note: not used without `file`
 *
 * @typedef Context
 * @property {Schema} schema
 * @property {VFile|undefined} file
 * @property {boolean|undefined} verbose
 * @property {boolean} location
 */




var hast_util_from_parse5_lib_own = {}.hasOwnProperty; // Handlers.

var map = {
  '#document': root,
  '#document-fragment': root,
  '#text': lib_text,
  '#comment': lib_comment,
  '#documentType': lib_doctype
};
/**
 * Transform Parse5’s AST to a hast tree.
 *
 * @param {P5Node} ast
 * @param {Options|VFile} [options]
 */

function fromParse5(ast) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  /** @type {Options} */
  var settings;
  /** @type {VFile|undefined} */

  var file;

  if (isFile(options)) {
    file = options;
    settings = {};
  } else {
    file = options.file;
    settings = options;
  }

  return transform({
    schema: settings.space === 'svg' ? hast_util_from_parse5_node_modules_property_information_svg : hast_util_from_parse5_node_modules_property_information_html,
    file: file,
    verbose: settings.verbose,
    location: false
  }, ast);
}
/**
 * Transform children.
 *
 * @param {Context} ctx
 * @param {P5Node} ast
 * @returns {Node}
 */

function transform(ctx, ast) {
  var schema = ctx.schema;
  /** @type {Handler} */
  // @ts-expect-error: index is fine.

  var fn = hast_util_from_parse5_lib_own.call(map, ast.nodeName) ? map[ast.nodeName] : lib_element;
  /** @type {Array.<Child>|undefined} */

  var children; // Element.

  if ('tagName' in ast) {
    ctx.schema = ast.namespaceURI === webNamespaces.svg ? hast_util_from_parse5_node_modules_property_information_svg : hast_util_from_parse5_node_modules_property_information_html;
  }

  if ('childNodes' in ast) {
    children = nodes(ctx, ast.childNodes);
  }

  var result = fn(ctx, ast, children);

  if ('sourceCodeLocation' in ast && ast.sourceCodeLocation && ctx.file) {
    // @ts-expect-error It’s fine.
    var _position = createLocation(ctx, result, ast.sourceCodeLocation);

    if (_position) {
      ctx.location = true;
      result.position = _position;
    }
  }

  ctx.schema = schema;
  return result;
}
/**
 * Transform children.
 *
 * @param {Context} ctx
 * @param {Array.<P5Node>} children
 * @returns {Array.<Child>}
 */


function nodes(ctx, children) {
  var index = -1;
  /** @type {Array.<Child>} */

  var result = [];

  while (++index < children.length) {
    // @ts-expect-error Assume no roots in children.
    result[index] = transform(ctx, children[index]);
  }

  return result;
}
/**
 * Transform a document.
 * Stores `ast.quirksMode` in `node.data.quirksMode`.
 *
 * @type {Handler}
 * @param {P5Document} ast
 * @param {Array.<Child>} children
 * @returns {Root}
 */


function root(ctx, ast, children) {
  /** @type {Root} */
  var result = {
    type: 'root',
    children: children,
    data: {
      quirksMode: ast.mode === 'quirks' || ast.mode === 'limited-quirks'
    }
  };

  if (ctx.file && ctx.location) {
    var doc = String(ctx.file);
    var loc = vfile_location_location(doc);
    result.position = {
      start: loc.toPoint(0),
      end: loc.toPoint(doc.length)
    };
  }

  return result;
}
/**
 * Transform a doctype.
 *
 * @type {Handler}
 * @returns {Doctype}
 */


function lib_doctype() {
  // @ts-expect-error Types are out of date.
  return {
    type: 'doctype'
  };
}
/**
 * Transform a text.
 *
 * @type {Handler}
 * @param {P5Text} ast
 * @returns {Text}
 */


function lib_text(_, ast) {
  return {
    type: 'text',
    value: ast.value
  };
}
/**
 * Transform a comment.
 *
 * @type {Handler}
 * @param {P5Comment} ast
 * @returns {Comment}
 */


function lib_comment(_, ast) {
  return {
    type: 'comment',
    value: ast.data
  };
}
/**
 * Transform an element.
 *
 * @type {Handler}
 * @param {P5Element} ast
 * @param {Array.<ElementChild>} children
 * @returns {Element}
 */


function lib_element(ctx, ast, children) {
  var fn = ctx.schema.space === 'svg' ? s : html_h;
  var index = -1;
  /** @type {Object.<string, string>} */

  var props = {};

  while (++index < ast.attrs.length) {
    var attribute = ast.attrs[index];
    props[(attribute.prefix ? attribute.prefix + ':' : '') + attribute.name] = attribute.value;
  }

  var result = fn(ast.tagName, props, children);

  if (result.tagName === 'template' && 'content' in ast) {
    var pos = ast.sourceCodeLocation;
    var startTag = pos && pos.startTag && lib_position(pos.startTag);
    var endTag = pos && pos.endTag && lib_position(pos.endTag);
    /** @type {Root} */
    // @ts-expect-error Types are wrong.

    var content = transform(ctx, ast.content);

    if (startTag && endTag && ctx.file) {
      content.position = {
        start: startTag.end,
        end: endTag.start
      };
    }

    result.content = content;
  }

  return result;
}
/**
 * Create clean positional information.
 *
 * @param {Context} ctx
 * @param {Node} node
 * @param {P5ElementLocation} location
 * @returns {Position|null}
 */


function createLocation(ctx, node, location) {
  var result = lib_position(location);

  if (node.type === 'element') {
    var tail = node.children[node.children.length - 1]; // Bug for unclosed with children.
    // See: <https://github.com/inikulin/parse5/issues/109>.

    if (result && !location.endTag && tail && tail.position && tail.position.end) {
      result.end = Object.assign({}, tail.position.end);
    }

    if (ctx.verbose) {
      /** @type {Object.<string, Position|null>} */
      var props = {};
      /** @type {string} */

      var key;

      for (key in location.attrs) {
        if (hast_util_from_parse5_lib_own.call(location.attrs, key)) {
          props[lib_find_find(ctx.schema, key).property] = lib_position(location.attrs[key]);
        }
      }

      node.data = {
        position: {
          opening: lib_position(location.startTag),
          closing: location.endTag ? lib_position(location.endTag) : null,
          properties: props
        }
      };
    }
  }

  return result;
}
/**
 * @param {P5Location} loc
 * @returns {Position|null}
 */


function lib_position(loc) {
  var start = lib_point({
    line: loc.startLine,
    column: loc.startCol,
    offset: loc.startOffset
  });
  var end = lib_point({
    line: loc.endLine,
    column: loc.endCol,
    offset: loc.endOffset
  }); // @ts-expect-error `null` is fine.

  return start || end ? {
    start: start,
    end: end
  } : null;
}
/**
 * @param {Point} point
 * @returns {Point|null}
 */


function lib_point(point) {
  return point.line && point.column ? point : null;
}
/**
 * @param {VFile|Options} value
 * @returns {value is VFile}
 */


function isFile(value) {
  return 'messages' in value;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/schema.js



/**
 * @typedef {import('./info.js').Info} Info
 * @typedef {Record<string, Info>} Properties
 * @typedef {Record<string, string>} Normal
 */
var lib_util_schema_Schema = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {Properties} property
 * @param {Normal} normal
 * @param {string} [space]
 */
function Schema(property, normal, space) {
  _classCallCheck(this, Schema);

  this.property = property;
  this.normal = normal;

  if (space) {
    this.space = space;
  }
});
/** @type {Properties} */

lib_util_schema_Schema.prototype.property = {};
/** @type {Normal} */

lib_util_schema_Schema.prototype.normal = {};
/** @type {string|null} */

lib_util_schema_Schema.prototype.space = null;
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/merge.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 */

/**
 * @param {Schema[]} definitions
 * @param {string} [space]
 * @returns {Schema}
 */

function lib_util_merge_merge(definitions, space) {
  /** @type {Properties} */
  var property = {};
  /** @type {Normal} */

  var normal = {};
  var index = -1;

  while (++index < definitions.length) {
    Object.assign(property, definitions[index].property);
    Object.assign(normal, definitions[index].normal);
  }

  return new lib_util_schema_Schema(property, normal, space);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/normalize.js
/**
 * @param {string} value
 * @returns {string}
 */
function property_information_lib_normalize_normalize(value) {
  return value.toLowerCase();
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/info.js


var lib_util_info_Info = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {string} property
 * @param {string} attribute
 */
function Info(property, attribute) {
  _classCallCheck(this, Info);

  /** @type {string} */
  this.property = property;
  /** @type {string} */

  this.attribute = attribute;
});
/** @type {string|null} */

lib_util_info_Info.prototype.space = null;
lib_util_info_Info.prototype["boolean"] = false;
lib_util_info_Info.prototype.booleanish = false;
lib_util_info_Info.prototype.overloadedBoolean = false;
lib_util_info_Info.prototype.number = false;
lib_util_info_Info.prototype.commaSeparated = false;
lib_util_info_Info.prototype.spaceSeparated = false;
lib_util_info_Info.prototype.commaOrSpaceSeparated = false;
lib_util_info_Info.prototype.mustUseProperty = false;
lib_util_info_Info.prototype.defined = false;
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/types.js
var lib_util_types_powers = 0;

var lib_util_types_boolean = lib_util_types_increment();


var lib_util_types_booleanish = lib_util_types_increment();
var lib_util_types_overloadedBoolean = lib_util_types_increment();
var lib_util_types_number = lib_util_types_increment();
var lib_util_types_spaceSeparated = lib_util_types_increment();
var lib_util_types_commaSeparated = lib_util_types_increment();
var lib_util_types_commaOrSpaceSeparated = lib_util_types_increment();

function lib_util_types_increment() {
  return Math.pow(2, ++lib_util_types_powers);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/defined-info.js







/** @type {Array<keyof types>} */
// @ts-expect-error: hush.

var lib_util_defined_info_checks = Object.keys(property_information_lib_util_types_namespaceObject);
var lib_util_defined_info_DefinedInfo = /*#__PURE__*/function (_Info) {
  _inherits(DefinedInfo, _Info);

  var _super = _createSuper(DefinedInfo);

  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  function DefinedInfo(property, attribute, mask, space) {
    var _this;

    _classCallCheck(this, DefinedInfo);

    var index = -1;
    _this = _super.call(this, property, attribute);
    lib_util_defined_info_mark(_assertThisInitialized(_this), 'space', space);

    if (typeof mask === 'number') {
      while (++index < lib_util_defined_info_checks.length) {
        var check = lib_util_defined_info_checks[index];
        lib_util_defined_info_mark(_assertThisInitialized(_this), lib_util_defined_info_checks[index], (mask & property_information_lib_util_types_namespaceObject[check]) === property_information_lib_util_types_namespaceObject[check]);
      }
    }

    return _this;
  }

  return _createClass(DefinedInfo);
}(lib_util_info_Info);
lib_util_defined_info_DefinedInfo.prototype.defined = true;
/**
 * @param {DefinedInfo} values
 * @param {string} key
 * @param {unknown} value
 */

function lib_util_defined_info_mark(values, key, value) {
  if (value) {
    // @ts-expect-error: assume `value` matches the expected value of `key`.
    values[key] = value;
  }
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/create.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 *
 * @typedef {Record<string, string>} Attributes
 *
 * @typedef {Object} Definition
 * @property {Record<string, number|null>} properties
 * @property {(attributes: Attributes, property: string) => string} transform
 * @property {string} [space]
 * @property {Attributes} [attributes]
 * @property {Array<string>} [mustUseProperty]
 */



var property_information_lib_util_create_own = {}.hasOwnProperty;
/**
 * @param {Definition} definition
 * @returns {Schema}
 */

function lib_util_create_create(definition) {
  /** @type {Properties} */
  var property = {};
  /** @type {Normal} */

  var normal = {};
  /** @type {string} */

  var prop;

  for (prop in definition.properties) {
    if (property_information_lib_util_create_own.call(definition.properties, prop)) {
      var value = definition.properties[prop];
      var info = new lib_util_defined_info_DefinedInfo(prop, definition.transform(definition.attributes || {}, prop), value, definition.space);

      if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {
        info.mustUseProperty = true;
      }

      property[prop] = info;
      normal[property_information_lib_normalize_normalize(prop)] = prop;
      normal[property_information_lib_normalize_normalize(info.attribute)] = prop;
    }
  }

  return new lib_util_schema_Schema(property, normal, definition.space);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/xlink.js

var property_information_lib_xlink_xlink = lib_util_create_create({
  space: 'xlink',
  transform: function transform(_, prop) {
    return 'xlink:' + prop.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/xml.js

var property_information_lib_xml_xml = lib_util_create_create({
  space: 'xml',
  transform: function transform(_, prop) {
    return 'xml:' + prop.slice(3).toLowerCase();
  },
  properties: {
    xmlLang: null,
    xmlBase: null,
    xmlSpace: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/case-sensitive-transform.js
/**
 * @param {Record<string, string>} attributes
 * @param {string} attribute
 * @returns {string}
 */
function lib_util_case_sensitive_transform_caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/case-insensitive-transform.js

/**
 * @param {Record<string, string>} attributes
 * @param {string} property
 * @returns {string}
 */

function lib_util_case_insensitive_transform_caseInsensitiveTransform(attributes, property) {
  return lib_util_case_sensitive_transform_caseSensitiveTransform(attributes, property.toLowerCase());
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/xmlns.js


var property_information_lib_xmlns_xmlns = lib_util_create_create({
  space: 'xmlns',
  attributes: {
    xmlnsxlink: 'xmlns:xlink'
  },
  transform: lib_util_case_insensitive_transform_caseInsensitiveTransform,
  properties: {
    xmlns: null,
    xmlnsXLink: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/aria.js


var property_information_lib_aria_aria = lib_util_create_create({
  transform: function transform(_, prop) {
    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: lib_util_types_booleanish,
    ariaAutoComplete: null,
    ariaBusy: lib_util_types_booleanish,
    ariaChecked: lib_util_types_booleanish,
    ariaColCount: lib_util_types_number,
    ariaColIndex: lib_util_types_number,
    ariaColSpan: lib_util_types_number,
    ariaControls: lib_util_types_spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: lib_util_types_spaceSeparated,
    ariaDetails: null,
    ariaDisabled: lib_util_types_booleanish,
    ariaDropEffect: lib_util_types_spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: lib_util_types_booleanish,
    ariaFlowTo: lib_util_types_spaceSeparated,
    ariaGrabbed: lib_util_types_booleanish,
    ariaHasPopup: null,
    ariaHidden: lib_util_types_booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: lib_util_types_spaceSeparated,
    ariaLevel: lib_util_types_number,
    ariaLive: null,
    ariaModal: lib_util_types_booleanish,
    ariaMultiLine: lib_util_types_booleanish,
    ariaMultiSelectable: lib_util_types_booleanish,
    ariaOrientation: null,
    ariaOwns: lib_util_types_spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: lib_util_types_number,
    ariaPressed: lib_util_types_booleanish,
    ariaReadOnly: lib_util_types_booleanish,
    ariaRelevant: null,
    ariaRequired: lib_util_types_booleanish,
    ariaRoleDescription: lib_util_types_spaceSeparated,
    ariaRowCount: lib_util_types_number,
    ariaRowIndex: lib_util_types_number,
    ariaRowSpan: lib_util_types_number,
    ariaSelected: lib_util_types_booleanish,
    ariaSetSize: lib_util_types_number,
    ariaSort: null,
    ariaValueMax: lib_util_types_number,
    ariaValueMin: lib_util_types_number,
    ariaValueNow: lib_util_types_number,
    ariaValueText: null,
    role: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/html.js



var property_information_lib_html_html = lib_util_create_create({
  space: 'html',
  attributes: {
    acceptcharset: 'accept-charset',
    classname: 'class',
    htmlfor: 'for',
    httpequiv: 'http-equiv'
  },
  transform: lib_util_case_insensitive_transform_caseInsensitiveTransform,
  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: lib_util_types_commaSeparated,
    acceptCharset: lib_util_types_spaceSeparated,
    accessKey: lib_util_types_spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: lib_util_types_boolean,
    allowPaymentRequest: lib_util_types_boolean,
    allowUserMedia: lib_util_types_boolean,
    alt: null,
    as: null,
    async: lib_util_types_boolean,
    autoCapitalize: null,
    autoComplete: lib_util_types_spaceSeparated,
    autoFocus: lib_util_types_boolean,
    autoPlay: lib_util_types_boolean,
    capture: lib_util_types_boolean,
    charSet: null,
    checked: lib_util_types_boolean,
    cite: null,
    className: lib_util_types_spaceSeparated,
    cols: lib_util_types_number,
    colSpan: null,
    content: null,
    contentEditable: lib_util_types_booleanish,
    controls: lib_util_types_boolean,
    controlsList: lib_util_types_spaceSeparated,
    coords: lib_util_types_number | lib_util_types_commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    "default": lib_util_types_boolean,
    defer: lib_util_types_boolean,
    dir: null,
    dirName: null,
    disabled: lib_util_types_boolean,
    download: lib_util_types_overloadedBoolean,
    draggable: lib_util_types_booleanish,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: lib_util_types_boolean,
    formTarget: null,
    headers: lib_util_types_spaceSeparated,
    height: lib_util_types_number,
    hidden: lib_util_types_boolean,
    high: lib_util_types_number,
    href: null,
    hrefLang: null,
    htmlFor: lib_util_types_spaceSeparated,
    httpEquiv: lib_util_types_spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: lib_util_types_boolean,
    itemId: null,
    itemProp: lib_util_types_spaceSeparated,
    itemRef: lib_util_types_spaceSeparated,
    itemScope: lib_util_types_boolean,
    itemType: lib_util_types_spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: lib_util_types_boolean,
    low: lib_util_types_number,
    manifest: null,
    max: null,
    maxLength: lib_util_types_number,
    media: null,
    method: null,
    min: null,
    minLength: lib_util_types_number,
    multiple: lib_util_types_boolean,
    muted: lib_util_types_boolean,
    name: null,
    nonce: null,
    noModule: lib_util_types_boolean,
    noValidate: lib_util_types_boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: lib_util_types_boolean,
    optimum: lib_util_types_number,
    pattern: null,
    ping: lib_util_types_spaceSeparated,
    placeholder: null,
    playsInline: lib_util_types_boolean,
    poster: null,
    preload: null,
    readOnly: lib_util_types_boolean,
    referrerPolicy: null,
    rel: lib_util_types_spaceSeparated,
    required: lib_util_types_boolean,
    reversed: lib_util_types_boolean,
    rows: lib_util_types_number,
    rowSpan: lib_util_types_number,
    sandbox: lib_util_types_spaceSeparated,
    scope: null,
    scoped: lib_util_types_boolean,
    seamless: lib_util_types_boolean,
    selected: lib_util_types_boolean,
    shape: null,
    size: lib_util_types_number,
    sizes: null,
    slot: null,
    span: lib_util_types_number,
    spellCheck: lib_util_types_booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: lib_util_types_number,
    step: null,
    style: null,
    tabIndex: lib_util_types_number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: lib_util_types_boolean,
    useMap: null,
    value: lib_util_types_booleanish,
    width: lib_util_types_number,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: lib_util_types_spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: lib_util_types_number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: lib_util_types_number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    "char": null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: lib_util_types_boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: lib_util_types_boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: lib_util_types_number,
    // `<img>` and `<object>`
    leftMargin: lib_util_types_number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: lib_util_types_number,
    // `<body>`
    marginWidth: lib_util_types_number,
    // `<body>`
    noResize: lib_util_types_boolean,
    // `<frame>`
    noHref: lib_util_types_boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: lib_util_types_boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: lib_util_types_boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: lib_util_types_number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: lib_util_types_booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: lib_util_types_number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: lib_util_types_number,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: lib_util_types_boolean,
    disableRemotePlayback: lib_util_types_boolean,
    prefix: null,
    property: null,
    results: lib_util_types_number,
    security: null,
    unselectable: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/svg.js



var property_information_lib_svg_svg = lib_util_create_create({
  space: 'svg',
  attributes: {
    accentHeight: 'accent-height',
    alignmentBaseline: 'alignment-baseline',
    arabicForm: 'arabic-form',
    baselineShift: 'baseline-shift',
    capHeight: 'cap-height',
    className: 'class',
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    crossOrigin: 'crossorigin',
    dataType: 'datatype',
    dominantBaseline: 'dominant-baseline',
    enableBackground: 'enable-background',
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    hrefLang: 'hreflang',
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    horizOriginY: 'horiz-origin-y',
    imageRendering: 'image-rendering',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    navDown: 'nav-down',
    navDownLeft: 'nav-down-left',
    navDownRight: 'nav-down-right',
    navLeft: 'nav-left',
    navNext: 'nav-next',
    navPrev: 'nav-prev',
    navRight: 'nav-right',
    navUp: 'nav-up',
    navUpLeft: 'nav-up-left',
    navUpRight: 'nav-up-right',
    onAbort: 'onabort',
    onActivate: 'onactivate',
    onAfterPrint: 'onafterprint',
    onBeforePrint: 'onbeforeprint',
    onBegin: 'onbegin',
    onCancel: 'oncancel',
    onCanPlay: 'oncanplay',
    onCanPlayThrough: 'oncanplaythrough',
    onChange: 'onchange',
    onClick: 'onclick',
    onClose: 'onclose',
    onCopy: 'oncopy',
    onCueChange: 'oncuechange',
    onCut: 'oncut',
    onDblClick: 'ondblclick',
    onDrag: 'ondrag',
    onDragEnd: 'ondragend',
    onDragEnter: 'ondragenter',
    onDragExit: 'ondragexit',
    onDragLeave: 'ondragleave',
    onDragOver: 'ondragover',
    onDragStart: 'ondragstart',
    onDrop: 'ondrop',
    onDurationChange: 'ondurationchange',
    onEmptied: 'onemptied',
    onEnd: 'onend',
    onEnded: 'onended',
    onError: 'onerror',
    onFocus: 'onfocus',
    onFocusIn: 'onfocusin',
    onFocusOut: 'onfocusout',
    onHashChange: 'onhashchange',
    onInput: 'oninput',
    onInvalid: 'oninvalid',
    onKeyDown: 'onkeydown',
    onKeyPress: 'onkeypress',
    onKeyUp: 'onkeyup',
    onLoad: 'onload',
    onLoadedData: 'onloadeddata',
    onLoadedMetadata: 'onloadedmetadata',
    onLoadStart: 'onloadstart',
    onMessage: 'onmessage',
    onMouseDown: 'onmousedown',
    onMouseEnter: 'onmouseenter',
    onMouseLeave: 'onmouseleave',
    onMouseMove: 'onmousemove',
    onMouseOut: 'onmouseout',
    onMouseOver: 'onmouseover',
    onMouseUp: 'onmouseup',
    onMouseWheel: 'onmousewheel',
    onOffline: 'onoffline',
    onOnline: 'ononline',
    onPageHide: 'onpagehide',
    onPageShow: 'onpageshow',
    onPaste: 'onpaste',
    onPause: 'onpause',
    onPlay: 'onplay',
    onPlaying: 'onplaying',
    onPopState: 'onpopstate',
    onProgress: 'onprogress',
    onRateChange: 'onratechange',
    onRepeat: 'onrepeat',
    onReset: 'onreset',
    onResize: 'onresize',
    onScroll: 'onscroll',
    onSeeked: 'onseeked',
    onSeeking: 'onseeking',
    onSelect: 'onselect',
    onShow: 'onshow',
    onStalled: 'onstalled',
    onStorage: 'onstorage',
    onSubmit: 'onsubmit',
    onSuspend: 'onsuspend',
    onTimeUpdate: 'ontimeupdate',
    onToggle: 'ontoggle',
    onUnload: 'onunload',
    onVolumeChange: 'onvolumechange',
    onWaiting: 'onwaiting',
    onZoom: 'onzoom',
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pointerEvents: 'pointer-events',
    referrerPolicy: 'referrerpolicy',
    renderingIntent: 'rendering-intent',
    shapeRendering: 'shape-rendering',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    strokeDashArray: 'stroke-dasharray',
    strokeDashOffset: 'stroke-dashoffset',
    strokeLineCap: 'stroke-linecap',
    strokeLineJoin: 'stroke-linejoin',
    strokeMiterLimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    tabIndex: 'tabindex',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    typeOf: 'typeof',
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    vectorEffect: 'vector-effect',
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    xHeight: 'x-height',
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: 'playbackorder',
    timelineBegin: 'timelinebegin'
  },
  transform: lib_util_case_sensitive_transform_caseSensitiveTransform,
  properties: {
    about: lib_util_types_commaOrSpaceSeparated,
    accentHeight: lib_util_types_number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: lib_util_types_number,
    amplitude: lib_util_types_number,
    arabicForm: null,
    ascent: lib_util_types_number,
    attributeName: null,
    attributeType: null,
    azimuth: lib_util_types_number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: lib_util_types_number,
    by: null,
    calcMode: null,
    capHeight: lib_util_types_number,
    className: lib_util_types_spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: lib_util_types_number,
    diffuseConstant: lib_util_types_number,
    direction: null,
    display: null,
    dur: null,
    divisor: lib_util_types_number,
    dominantBaseline: null,
    download: lib_util_types_boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: lib_util_types_number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: lib_util_types_number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: lib_util_types_number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: lib_util_types_commaSeparated,
    g2: lib_util_types_commaSeparated,
    glyphName: lib_util_types_commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: lib_util_types_number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: lib_util_types_number,
    horizOriginX: lib_util_types_number,
    horizOriginY: lib_util_types_number,
    id: null,
    ideographic: lib_util_types_number,
    imageRendering: null,
    initialVisibility: null,
    "in": null,
    in2: null,
    intercept: lib_util_types_number,
    k: lib_util_types_number,
    k1: lib_util_types_number,
    k2: lib_util_types_number,
    k3: lib_util_types_number,
    k4: lib_util_types_number,
    kernelMatrix: lib_util_types_commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: lib_util_types_number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: lib_util_types_number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: lib_util_types_number,
    overlineThickness: lib_util_types_number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: lib_util_types_number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: lib_util_types_spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: lib_util_types_number,
    pointsAtY: lib_util_types_number,
    pointsAtZ: lib_util_types_number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: lib_util_types_commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: lib_util_types_commaOrSpaceSeparated,
    rev: lib_util_types_commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: lib_util_types_commaOrSpaceSeparated,
    requiredFeatures: lib_util_types_commaOrSpaceSeparated,
    requiredFonts: lib_util_types_commaOrSpaceSeparated,
    requiredFormats: lib_util_types_commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: lib_util_types_number,
    specularExponent: lib_util_types_number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: lib_util_types_number,
    strikethroughThickness: lib_util_types_number,
    string: null,
    stroke: null,
    strokeDashArray: lib_util_types_commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: lib_util_types_number,
    strokeOpacity: lib_util_types_number,
    strokeWidth: null,
    style: null,
    surfaceScale: lib_util_types_number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: lib_util_types_commaOrSpaceSeparated,
    tabIndex: lib_util_types_number,
    tableValues: null,
    target: null,
    targetX: lib_util_types_number,
    targetY: lib_util_types_number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: lib_util_types_commaOrSpaceSeparated,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: lib_util_types_number,
    underlineThickness: lib_util_types_number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: lib_util_types_number,
    values: null,
    vAlphabetic: lib_util_types_number,
    vMathematical: lib_util_types_number,
    vectorEffect: null,
    vHanging: lib_util_types_number,
    vIdeographic: lib_util_types_number,
    version: null,
    vertAdvY: lib_util_types_number,
    vertOriginX: lib_util_types_number,
    vertOriginY: lib_util_types_number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: lib_util_types_number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/index.js
/**
 * @typedef {import('./lib/util/info.js').Info} Info
 * @typedef {import('./lib/util/schema.js').Schema} Schema
 */










var hast_util_to_parse5_node_modules_property_information_html = lib_util_merge_merge([property_information_lib_xml_xml, property_information_lib_xlink_xlink, property_information_lib_xmlns_xmlns, property_information_lib_aria_aria, property_information_lib_html_html], 'html');
var hast_util_to_parse5_node_modules_property_information_svg = lib_util_merge_merge([property_information_lib_xml_xml, property_information_lib_xlink_xlink, property_information_lib_xmlns_xmlns, property_information_lib_aria_aria, property_information_lib_svg_svg], 'svg');
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/node_modules/property-information/lib/find.js
/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */



var property_information_lib_find_valid = /^data[-\w.:]+$/i;
var property_information_lib_find_dash = /-[a-z]/g;
var property_information_lib_find_cap = /[A-Z]/g;
/**
 * @param {Schema} schema
 * @param {string} value
 * @returns {Info}
 */

function property_information_lib_find_find(schema, value) {
  var normal = property_information_lib_normalize_normalize(value);
  var prop = value;
  var Type = lib_util_info_Info;

  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }

  if (normal.length > 4 && normal.slice(0, 4) === 'data' && property_information_lib_find_valid.test(value)) {
    // Attribute or property.
    if (value.charAt(4) === '-') {
      // Turn it into a property.
      var rest = value.slice(5).replace(property_information_lib_find_dash, property_information_lib_find_camelcase);
      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      // Turn it into an attribute.
      var _rest = value.slice(4);

      if (!property_information_lib_find_dash.test(_rest)) {
        var dashes = _rest.replace(property_information_lib_find_cap, property_information_lib_find_kebab);

        if (dashes.charAt(0) !== '-') {
          dashes = '-' + dashes;
        }

        value = 'data' + dashes;
      }
    }

    Type = lib_util_defined_info_DefinedInfo;
  }

  return new Type(prop, value);
}
/**
 * @param {string} $0
 * @returns {string}
 */

function property_information_lib_find_kebab($0) {
  return '-' + $0.toLowerCase();
}
/**
 * @param {string} $0
 * @returns {string}
 */


function property_information_lib_find_camelcase($0) {
  return $0.charAt(1).toUpperCase();
}
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/util/schema.js



/**
 * @typedef {import('./info.js').Info} Info
 * @typedef {Record<string, Info>} Properties
 * @typedef {Record<string, string>} Normal
 */
var property_information_lib_util_schema_Schema = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {Properties} property
 * @param {Normal} normal
 * @param {string} [space]
 */
function Schema(property, normal, space) {
  _classCallCheck(this, Schema);

  this.property = property;
  this.normal = normal;

  if (space) {
    this.space = space;
  }
});
/** @type {Properties} */

property_information_lib_util_schema_Schema.prototype.property = {};
/** @type {Normal} */

property_information_lib_util_schema_Schema.prototype.normal = {};
/** @type {string|null} */

property_information_lib_util_schema_Schema.prototype.space = null;
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/util/merge.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 */

/**
 * @param {Schema[]} definitions
 * @param {string} [space]
 * @returns {Schema}
 */

function property_information_lib_util_merge_merge(definitions, space) {
  /** @type {Properties} */
  var property = {};
  /** @type {Normal} */

  var normal = {};
  var index = -1;

  while (++index < definitions.length) {
    Object.assign(property, definitions[index].property);
    Object.assign(normal, definitions[index].normal);
  }

  return new property_information_lib_util_schema_Schema(property, normal, space);
}
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/normalize.js
/**
 * @param {string} value
 * @returns {string}
 */
function node_modules_property_information_lib_normalize_normalize(value) {
  return value.toLowerCase();
}
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/util/info.js


var property_information_lib_util_info_Info = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {string} property
 * @param {string} attribute
 */
function Info(property, attribute) {
  _classCallCheck(this, Info);

  /** @type {string} */
  this.property = property;
  /** @type {string} */

  this.attribute = attribute;
});
/** @type {string|null} */

property_information_lib_util_info_Info.prototype.space = null;
property_information_lib_util_info_Info.prototype["boolean"] = false;
property_information_lib_util_info_Info.prototype.booleanish = false;
property_information_lib_util_info_Info.prototype.overloadedBoolean = false;
property_information_lib_util_info_Info.prototype.number = false;
property_information_lib_util_info_Info.prototype.commaSeparated = false;
property_information_lib_util_info_Info.prototype.spaceSeparated = false;
property_information_lib_util_info_Info.prototype.commaOrSpaceSeparated = false;
property_information_lib_util_info_Info.prototype.mustUseProperty = false;
property_information_lib_util_info_Info.prototype.defined = false;
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/util/types.js
var property_information_lib_util_types_powers = 0;

var property_information_lib_util_types_boolean = property_information_lib_util_types_increment();


var property_information_lib_util_types_booleanish = property_information_lib_util_types_increment();
var property_information_lib_util_types_overloadedBoolean = property_information_lib_util_types_increment();
var property_information_lib_util_types_number = property_information_lib_util_types_increment();
var property_information_lib_util_types_spaceSeparated = property_information_lib_util_types_increment();
var property_information_lib_util_types_commaSeparated = property_information_lib_util_types_increment();
var property_information_lib_util_types_commaOrSpaceSeparated = property_information_lib_util_types_increment();

function property_information_lib_util_types_increment() {
  return Math.pow(2, ++property_information_lib_util_types_powers);
}
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/util/defined-info.js







/** @type {Array<keyof types>} */
// @ts-expect-error: hush.

var property_information_lib_util_defined_info_checks = Object.keys(node_modules_property_information_lib_util_types_namespaceObject);
var property_information_lib_util_defined_info_DefinedInfo = /*#__PURE__*/function (_Info) {
  _inherits(DefinedInfo, _Info);

  var _super = _createSuper(DefinedInfo);

  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  function DefinedInfo(property, attribute, mask, space) {
    var _this;

    _classCallCheck(this, DefinedInfo);

    var index = -1;
    _this = _super.call(this, property, attribute);
    property_information_lib_util_defined_info_mark(_assertThisInitialized(_this), 'space', space);

    if (typeof mask === 'number') {
      while (++index < property_information_lib_util_defined_info_checks.length) {
        var check = property_information_lib_util_defined_info_checks[index];
        property_information_lib_util_defined_info_mark(_assertThisInitialized(_this), property_information_lib_util_defined_info_checks[index], (mask & node_modules_property_information_lib_util_types_namespaceObject[check]) === node_modules_property_information_lib_util_types_namespaceObject[check]);
      }
    }

    return _this;
  }

  return _createClass(DefinedInfo);
}(property_information_lib_util_info_Info);
property_information_lib_util_defined_info_DefinedInfo.prototype.defined = true;
/**
 * @param {DefinedInfo} values
 * @param {string} key
 * @param {unknown} value
 */

function property_information_lib_util_defined_info_mark(values, key, value) {
  if (value) {
    // @ts-expect-error: assume `value` matches the expected value of `key`.
    values[key] = value;
  }
}
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/util/create.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 *
 * @typedef {Record<string, string>} Attributes
 *
 * @typedef {Object} Definition
 * @property {Record<string, number|null>} properties
 * @property {(attributes: Attributes, property: string) => string} transform
 * @property {string} [space]
 * @property {Attributes} [attributes]
 * @property {Array<string>} [mustUseProperty]
 */



var node_modules_property_information_lib_util_create_own = {}.hasOwnProperty;
/**
 * @param {Definition} definition
 * @returns {Schema}
 */

function property_information_lib_util_create_create(definition) {
  /** @type {Properties} */
  var property = {};
  /** @type {Normal} */

  var normal = {};
  /** @type {string} */

  var prop;

  for (prop in definition.properties) {
    if (node_modules_property_information_lib_util_create_own.call(definition.properties, prop)) {
      var value = definition.properties[prop];
      var info = new property_information_lib_util_defined_info_DefinedInfo(prop, definition.transform(definition.attributes || {}, prop), value, definition.space);

      if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {
        info.mustUseProperty = true;
      }

      property[prop] = info;
      normal[node_modules_property_information_lib_normalize_normalize(prop)] = prop;
      normal[node_modules_property_information_lib_normalize_normalize(info.attribute)] = prop;
    }
  }

  return new property_information_lib_util_schema_Schema(property, normal, definition.space);
}
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/xlink.js

var node_modules_property_information_lib_xlink_xlink = property_information_lib_util_create_create({
  space: 'xlink',
  transform: function transform(_, prop) {
    return 'xlink:' + prop.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/xml.js

var node_modules_property_information_lib_xml_xml = property_information_lib_util_create_create({
  space: 'xml',
  transform: function transform(_, prop) {
    return 'xml:' + prop.slice(3).toLowerCase();
  },
  properties: {
    xmlLang: null,
    xmlBase: null,
    xmlSpace: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/util/case-sensitive-transform.js
/**
 * @param {Record<string, string>} attributes
 * @param {string} attribute
 * @returns {string}
 */
function property_information_lib_util_case_sensitive_transform_caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/util/case-insensitive-transform.js

/**
 * @param {Record<string, string>} attributes
 * @param {string} property
 * @returns {string}
 */

function property_information_lib_util_case_insensitive_transform_caseInsensitiveTransform(attributes, property) {
  return property_information_lib_util_case_sensitive_transform_caseSensitiveTransform(attributes, property.toLowerCase());
}
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/xmlns.js


var node_modules_property_information_lib_xmlns_xmlns = property_information_lib_util_create_create({
  space: 'xmlns',
  attributes: {
    xmlnsxlink: 'xmlns:xlink'
  },
  transform: property_information_lib_util_case_insensitive_transform_caseInsensitiveTransform,
  properties: {
    xmlns: null,
    xmlnsXLink: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/aria.js


var node_modules_property_information_lib_aria_aria = property_information_lib_util_create_create({
  transform: function transform(_, prop) {
    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: property_information_lib_util_types_booleanish,
    ariaAutoComplete: null,
    ariaBusy: property_information_lib_util_types_booleanish,
    ariaChecked: property_information_lib_util_types_booleanish,
    ariaColCount: property_information_lib_util_types_number,
    ariaColIndex: property_information_lib_util_types_number,
    ariaColSpan: property_information_lib_util_types_number,
    ariaControls: property_information_lib_util_types_spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: property_information_lib_util_types_spaceSeparated,
    ariaDetails: null,
    ariaDisabled: property_information_lib_util_types_booleanish,
    ariaDropEffect: property_information_lib_util_types_spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: property_information_lib_util_types_booleanish,
    ariaFlowTo: property_information_lib_util_types_spaceSeparated,
    ariaGrabbed: property_information_lib_util_types_booleanish,
    ariaHasPopup: null,
    ariaHidden: property_information_lib_util_types_booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: property_information_lib_util_types_spaceSeparated,
    ariaLevel: property_information_lib_util_types_number,
    ariaLive: null,
    ariaModal: property_information_lib_util_types_booleanish,
    ariaMultiLine: property_information_lib_util_types_booleanish,
    ariaMultiSelectable: property_information_lib_util_types_booleanish,
    ariaOrientation: null,
    ariaOwns: property_information_lib_util_types_spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: property_information_lib_util_types_number,
    ariaPressed: property_information_lib_util_types_booleanish,
    ariaReadOnly: property_information_lib_util_types_booleanish,
    ariaRelevant: null,
    ariaRequired: property_information_lib_util_types_booleanish,
    ariaRoleDescription: property_information_lib_util_types_spaceSeparated,
    ariaRowCount: property_information_lib_util_types_number,
    ariaRowIndex: property_information_lib_util_types_number,
    ariaRowSpan: property_information_lib_util_types_number,
    ariaSelected: property_information_lib_util_types_booleanish,
    ariaSetSize: property_information_lib_util_types_number,
    ariaSort: null,
    ariaValueMax: property_information_lib_util_types_number,
    ariaValueMin: property_information_lib_util_types_number,
    ariaValueNow: property_information_lib_util_types_number,
    ariaValueText: null,
    role: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/html.js



var node_modules_property_information_lib_html_html = property_information_lib_util_create_create({
  space: 'html',
  attributes: {
    acceptcharset: 'accept-charset',
    classname: 'class',
    htmlfor: 'for',
    httpequiv: 'http-equiv'
  },
  transform: property_information_lib_util_case_insensitive_transform_caseInsensitiveTransform,
  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: property_information_lib_util_types_commaSeparated,
    acceptCharset: property_information_lib_util_types_spaceSeparated,
    accessKey: property_information_lib_util_types_spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: property_information_lib_util_types_boolean,
    allowPaymentRequest: property_information_lib_util_types_boolean,
    allowUserMedia: property_information_lib_util_types_boolean,
    alt: null,
    as: null,
    async: property_information_lib_util_types_boolean,
    autoCapitalize: null,
    autoComplete: property_information_lib_util_types_spaceSeparated,
    autoFocus: property_information_lib_util_types_boolean,
    autoPlay: property_information_lib_util_types_boolean,
    capture: property_information_lib_util_types_boolean,
    charSet: null,
    checked: property_information_lib_util_types_boolean,
    cite: null,
    className: property_information_lib_util_types_spaceSeparated,
    cols: property_information_lib_util_types_number,
    colSpan: null,
    content: null,
    contentEditable: property_information_lib_util_types_booleanish,
    controls: property_information_lib_util_types_boolean,
    controlsList: property_information_lib_util_types_spaceSeparated,
    coords: property_information_lib_util_types_number | property_information_lib_util_types_commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    "default": property_information_lib_util_types_boolean,
    defer: property_information_lib_util_types_boolean,
    dir: null,
    dirName: null,
    disabled: property_information_lib_util_types_boolean,
    download: property_information_lib_util_types_overloadedBoolean,
    draggable: property_information_lib_util_types_booleanish,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: property_information_lib_util_types_boolean,
    formTarget: null,
    headers: property_information_lib_util_types_spaceSeparated,
    height: property_information_lib_util_types_number,
    hidden: property_information_lib_util_types_boolean,
    high: property_information_lib_util_types_number,
    href: null,
    hrefLang: null,
    htmlFor: property_information_lib_util_types_spaceSeparated,
    httpEquiv: property_information_lib_util_types_spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: property_information_lib_util_types_boolean,
    itemId: null,
    itemProp: property_information_lib_util_types_spaceSeparated,
    itemRef: property_information_lib_util_types_spaceSeparated,
    itemScope: property_information_lib_util_types_boolean,
    itemType: property_information_lib_util_types_spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: property_information_lib_util_types_boolean,
    low: property_information_lib_util_types_number,
    manifest: null,
    max: null,
    maxLength: property_information_lib_util_types_number,
    media: null,
    method: null,
    min: null,
    minLength: property_information_lib_util_types_number,
    multiple: property_information_lib_util_types_boolean,
    muted: property_information_lib_util_types_boolean,
    name: null,
    nonce: null,
    noModule: property_information_lib_util_types_boolean,
    noValidate: property_information_lib_util_types_boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: property_information_lib_util_types_boolean,
    optimum: property_information_lib_util_types_number,
    pattern: null,
    ping: property_information_lib_util_types_spaceSeparated,
    placeholder: null,
    playsInline: property_information_lib_util_types_boolean,
    poster: null,
    preload: null,
    readOnly: property_information_lib_util_types_boolean,
    referrerPolicy: null,
    rel: property_information_lib_util_types_spaceSeparated,
    required: property_information_lib_util_types_boolean,
    reversed: property_information_lib_util_types_boolean,
    rows: property_information_lib_util_types_number,
    rowSpan: property_information_lib_util_types_number,
    sandbox: property_information_lib_util_types_spaceSeparated,
    scope: null,
    scoped: property_information_lib_util_types_boolean,
    seamless: property_information_lib_util_types_boolean,
    selected: property_information_lib_util_types_boolean,
    shape: null,
    size: property_information_lib_util_types_number,
    sizes: null,
    slot: null,
    span: property_information_lib_util_types_number,
    spellCheck: property_information_lib_util_types_booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: property_information_lib_util_types_number,
    step: null,
    style: null,
    tabIndex: property_information_lib_util_types_number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: property_information_lib_util_types_boolean,
    useMap: null,
    value: property_information_lib_util_types_booleanish,
    width: property_information_lib_util_types_number,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: property_information_lib_util_types_spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: property_information_lib_util_types_number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: property_information_lib_util_types_number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    "char": null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: property_information_lib_util_types_boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: property_information_lib_util_types_boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: property_information_lib_util_types_number,
    // `<img>` and `<object>`
    leftMargin: property_information_lib_util_types_number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: property_information_lib_util_types_number,
    // `<body>`
    marginWidth: property_information_lib_util_types_number,
    // `<body>`
    noResize: property_information_lib_util_types_boolean,
    // `<frame>`
    noHref: property_information_lib_util_types_boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: property_information_lib_util_types_boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: property_information_lib_util_types_boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: property_information_lib_util_types_number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: property_information_lib_util_types_booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: property_information_lib_util_types_number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: property_information_lib_util_types_number,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: property_information_lib_util_types_boolean,
    disableRemotePlayback: property_information_lib_util_types_boolean,
    prefix: null,
    property: null,
    results: property_information_lib_util_types_number,
    security: null,
    unselectable: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/svg.js



var node_modules_property_information_lib_svg_svg = property_information_lib_util_create_create({
  space: 'svg',
  attributes: {
    accentHeight: 'accent-height',
    alignmentBaseline: 'alignment-baseline',
    arabicForm: 'arabic-form',
    baselineShift: 'baseline-shift',
    capHeight: 'cap-height',
    className: 'class',
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    crossOrigin: 'crossorigin',
    dataType: 'datatype',
    dominantBaseline: 'dominant-baseline',
    enableBackground: 'enable-background',
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    hrefLang: 'hreflang',
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    horizOriginY: 'horiz-origin-y',
    imageRendering: 'image-rendering',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    navDown: 'nav-down',
    navDownLeft: 'nav-down-left',
    navDownRight: 'nav-down-right',
    navLeft: 'nav-left',
    navNext: 'nav-next',
    navPrev: 'nav-prev',
    navRight: 'nav-right',
    navUp: 'nav-up',
    navUpLeft: 'nav-up-left',
    navUpRight: 'nav-up-right',
    onAbort: 'onabort',
    onActivate: 'onactivate',
    onAfterPrint: 'onafterprint',
    onBeforePrint: 'onbeforeprint',
    onBegin: 'onbegin',
    onCancel: 'oncancel',
    onCanPlay: 'oncanplay',
    onCanPlayThrough: 'oncanplaythrough',
    onChange: 'onchange',
    onClick: 'onclick',
    onClose: 'onclose',
    onCopy: 'oncopy',
    onCueChange: 'oncuechange',
    onCut: 'oncut',
    onDblClick: 'ondblclick',
    onDrag: 'ondrag',
    onDragEnd: 'ondragend',
    onDragEnter: 'ondragenter',
    onDragExit: 'ondragexit',
    onDragLeave: 'ondragleave',
    onDragOver: 'ondragover',
    onDragStart: 'ondragstart',
    onDrop: 'ondrop',
    onDurationChange: 'ondurationchange',
    onEmptied: 'onemptied',
    onEnd: 'onend',
    onEnded: 'onended',
    onError: 'onerror',
    onFocus: 'onfocus',
    onFocusIn: 'onfocusin',
    onFocusOut: 'onfocusout',
    onHashChange: 'onhashchange',
    onInput: 'oninput',
    onInvalid: 'oninvalid',
    onKeyDown: 'onkeydown',
    onKeyPress: 'onkeypress',
    onKeyUp: 'onkeyup',
    onLoad: 'onload',
    onLoadedData: 'onloadeddata',
    onLoadedMetadata: 'onloadedmetadata',
    onLoadStart: 'onloadstart',
    onMessage: 'onmessage',
    onMouseDown: 'onmousedown',
    onMouseEnter: 'onmouseenter',
    onMouseLeave: 'onmouseleave',
    onMouseMove: 'onmousemove',
    onMouseOut: 'onmouseout',
    onMouseOver: 'onmouseover',
    onMouseUp: 'onmouseup',
    onMouseWheel: 'onmousewheel',
    onOffline: 'onoffline',
    onOnline: 'ononline',
    onPageHide: 'onpagehide',
    onPageShow: 'onpageshow',
    onPaste: 'onpaste',
    onPause: 'onpause',
    onPlay: 'onplay',
    onPlaying: 'onplaying',
    onPopState: 'onpopstate',
    onProgress: 'onprogress',
    onRateChange: 'onratechange',
    onRepeat: 'onrepeat',
    onReset: 'onreset',
    onResize: 'onresize',
    onScroll: 'onscroll',
    onSeeked: 'onseeked',
    onSeeking: 'onseeking',
    onSelect: 'onselect',
    onShow: 'onshow',
    onStalled: 'onstalled',
    onStorage: 'onstorage',
    onSubmit: 'onsubmit',
    onSuspend: 'onsuspend',
    onTimeUpdate: 'ontimeupdate',
    onToggle: 'ontoggle',
    onUnload: 'onunload',
    onVolumeChange: 'onvolumechange',
    onWaiting: 'onwaiting',
    onZoom: 'onzoom',
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pointerEvents: 'pointer-events',
    referrerPolicy: 'referrerpolicy',
    renderingIntent: 'rendering-intent',
    shapeRendering: 'shape-rendering',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    strokeDashArray: 'stroke-dasharray',
    strokeDashOffset: 'stroke-dashoffset',
    strokeLineCap: 'stroke-linecap',
    strokeLineJoin: 'stroke-linejoin',
    strokeMiterLimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    tabIndex: 'tabindex',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    typeOf: 'typeof',
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    vectorEffect: 'vector-effect',
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    xHeight: 'x-height',
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: 'playbackorder',
    timelineBegin: 'timelinebegin'
  },
  transform: property_information_lib_util_case_sensitive_transform_caseSensitiveTransform,
  properties: {
    about: property_information_lib_util_types_commaOrSpaceSeparated,
    accentHeight: property_information_lib_util_types_number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: property_information_lib_util_types_number,
    amplitude: property_information_lib_util_types_number,
    arabicForm: null,
    ascent: property_information_lib_util_types_number,
    attributeName: null,
    attributeType: null,
    azimuth: property_information_lib_util_types_number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: property_information_lib_util_types_number,
    by: null,
    calcMode: null,
    capHeight: property_information_lib_util_types_number,
    className: property_information_lib_util_types_spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: property_information_lib_util_types_number,
    diffuseConstant: property_information_lib_util_types_number,
    direction: null,
    display: null,
    dur: null,
    divisor: property_information_lib_util_types_number,
    dominantBaseline: null,
    download: property_information_lib_util_types_boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: property_information_lib_util_types_number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: property_information_lib_util_types_number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: property_information_lib_util_types_number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: property_information_lib_util_types_commaSeparated,
    g2: property_information_lib_util_types_commaSeparated,
    glyphName: property_information_lib_util_types_commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: property_information_lib_util_types_number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: property_information_lib_util_types_number,
    horizOriginX: property_information_lib_util_types_number,
    horizOriginY: property_information_lib_util_types_number,
    id: null,
    ideographic: property_information_lib_util_types_number,
    imageRendering: null,
    initialVisibility: null,
    "in": null,
    in2: null,
    intercept: property_information_lib_util_types_number,
    k: property_information_lib_util_types_number,
    k1: property_information_lib_util_types_number,
    k2: property_information_lib_util_types_number,
    k3: property_information_lib_util_types_number,
    k4: property_information_lib_util_types_number,
    kernelMatrix: property_information_lib_util_types_commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: property_information_lib_util_types_number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: property_information_lib_util_types_number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: property_information_lib_util_types_number,
    overlineThickness: property_information_lib_util_types_number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: property_information_lib_util_types_number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: property_information_lib_util_types_spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: property_information_lib_util_types_number,
    pointsAtY: property_information_lib_util_types_number,
    pointsAtZ: property_information_lib_util_types_number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: property_information_lib_util_types_commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: property_information_lib_util_types_commaOrSpaceSeparated,
    rev: property_information_lib_util_types_commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: property_information_lib_util_types_commaOrSpaceSeparated,
    requiredFeatures: property_information_lib_util_types_commaOrSpaceSeparated,
    requiredFonts: property_information_lib_util_types_commaOrSpaceSeparated,
    requiredFormats: property_information_lib_util_types_commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: property_information_lib_util_types_number,
    specularExponent: property_information_lib_util_types_number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: property_information_lib_util_types_number,
    strikethroughThickness: property_information_lib_util_types_number,
    string: null,
    stroke: null,
    strokeDashArray: property_information_lib_util_types_commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: property_information_lib_util_types_number,
    strokeOpacity: property_information_lib_util_types_number,
    strokeWidth: null,
    style: null,
    surfaceScale: property_information_lib_util_types_number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: property_information_lib_util_types_commaOrSpaceSeparated,
    tabIndex: property_information_lib_util_types_number,
    tableValues: null,
    target: null,
    targetX: property_information_lib_util_types_number,
    targetY: property_information_lib_util_types_number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: property_information_lib_util_types_commaOrSpaceSeparated,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: property_information_lib_util_types_number,
    underlineThickness: property_information_lib_util_types_number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: property_information_lib_util_types_number,
    values: null,
    vAlphabetic: property_information_lib_util_types_number,
    vMathematical: property_information_lib_util_types_number,
    vectorEffect: null,
    vHanging: property_information_lib_util_types_number,
    vIdeographic: property_information_lib_util_types_number,
    version: null,
    vertAdvY: property_information_lib_util_types_number,
    vertOriginX: property_information_lib_util_types_number,
    vertOriginY: property_information_lib_util_types_number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: property_information_lib_util_types_number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/index.js
/**
 * @typedef {import('./lib/util/info.js').Info} Info
 * @typedef {import('./lib/util/schema.js').Schema} Schema
 */










var hast_to_hyperscript_node_modules_property_information_html = property_information_lib_util_merge_merge([node_modules_property_information_lib_xml_xml, node_modules_property_information_lib_xlink_xlink, node_modules_property_information_lib_xmlns_xmlns, node_modules_property_information_lib_aria_aria, node_modules_property_information_lib_html_html], 'html');
var hast_to_hyperscript_node_modules_property_information_svg = property_information_lib_util_merge_merge([node_modules_property_information_lib_xml_xml, node_modules_property_information_lib_xlink_xlink, node_modules_property_information_lib_xmlns_xmlns, node_modules_property_information_lib_aria_aria, node_modules_property_information_lib_svg_svg], 'svg');
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/hast-to-react.js
var hastToReact = {
  classId: 'classID',
  dataType: 'datatype',
  itemId: 'itemID',
  strokeDashArray: 'strokeDasharray',
  strokeDashOffset: 'strokeDashoffset',
  strokeLineCap: 'strokeLinecap',
  strokeLineJoin: 'strokeLinejoin',
  strokeMiterLimit: 'strokeMiterlimit',
  typeOf: 'typeof',
  xLinkActuate: 'xlinkActuate',
  xLinkArcRole: 'xlinkArcrole',
  xLinkHref: 'xlinkHref',
  xLinkRole: 'xlinkRole',
  xLinkShow: 'xlinkShow',
  xLinkTitle: 'xlinkTitle',
  xLinkType: 'xlinkType',
  xmlnsXLink: 'xmlnsXlink'
};
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/property-information/lib/find.js
/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */



var node_modules_property_information_lib_find_valid = /^data[-\w.:]+$/i;
var node_modules_property_information_lib_find_dash = /-[a-z]/g;
var node_modules_property_information_lib_find_cap = /[A-Z]/g;
/**
 * @param {Schema} schema
 * @param {string} value
 * @returns {Info}
 */

function node_modules_property_information_lib_find_find(schema, value) {
  var normal = node_modules_property_information_lib_normalize_normalize(value);
  var prop = value;
  var Type = property_information_lib_util_info_Info;

  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }

  if (normal.length > 4 && normal.slice(0, 4) === 'data' && node_modules_property_information_lib_find_valid.test(value)) {
    // Attribute or property.
    if (value.charAt(4) === '-') {
      // Turn it into a property.
      var rest = value.slice(5).replace(node_modules_property_information_lib_find_dash, node_modules_property_information_lib_find_camelcase);
      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      // Turn it into an attribute.
      var _rest = value.slice(4);

      if (!node_modules_property_information_lib_find_dash.test(_rest)) {
        var dashes = _rest.replace(node_modules_property_information_lib_find_cap, node_modules_property_information_lib_find_kebab);

        if (dashes.charAt(0) !== '-') {
          dashes = '-' + dashes;
        }

        value = 'data' + dashes;
      }
    }

    Type = property_information_lib_util_defined_info_DefinedInfo;
  }

  return new Type(prop, value);
}
/**
 * @param {string} $0
 * @returns {string}
 */

function node_modules_property_information_lib_find_kebab($0) {
  return '-' + $0.toLowerCase();
}
/**
 * @param {string} $0
 * @returns {string}
 */


function node_modules_property_information_lib_find_camelcase($0) {
  return $0.charAt(1).toUpperCase();
}
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/space-separated-tokens/index.js
/**
 * Parse space separated tokens to an array of strings.
 *
 * @param {string} value Space separated tokens
 * @returns {Array.<string>} Tokens
 */
function hast_to_hyperscript_node_modules_space_separated_tokens_parse(value) {
  var input = String(value || '').trim();
  return input ? input.split(/[ \t\n\r\f]+/g) : [];
}
/**
 * Serialize an array of strings as space separated tokens.
 *
 * @param {Array.<string|number>} values Tokens
 * @returns {string} Space separated tokens
 */

function hast_to_hyperscript_node_modules_space_separated_tokens_stringify(values) {
  return values.join(' ').trim();
}
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/node_modules/comma-separated-tokens/index.js
/**
 * @typedef {Object} StringifyOptions
 * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).
 * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).
 */

/**
 * Parse comma separated tokens to an array.
 *
 * @param {string} value
 * @returns {Array.<string>}
 */
function hast_to_hyperscript_node_modules_comma_separated_tokens_parse(value) {
  /** @type {Array.<string>} */
  var tokens = [];
  var input = String(value || '');
  var index = input.indexOf(',');
  var start = 0;
  /** @type {boolean} */

  var end;
  /** @type {string} */

  var token;

  while (!end) {
    if (index === -1) {
      index = input.length;
      end = true;
    }

    token = input.slice(start, index).trim();

    if (token || !end) {
      tokens.push(token);
    }

    start = index + 1;
    index = input.indexOf(',', start);
  }

  return tokens;
}
/**
 * Serialize an array of strings to comma separated tokens.
 *
 * @param {Array.<string|number>} values
 * @param {StringifyOptions} [options]
 * @returns {string}
 */

function hast_to_hyperscript_node_modules_comma_separated_tokens_stringify(values, options) {
  var settings = options || {}; // Ensure the last empty entry is seen.

  if (values[values.length - 1] === '') {
    values = values.concat('');
  }

  return values.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();
}
// EXTERNAL MODULE: ./node_modules/style-to-object/index.js
var style_to_object = __webpack_require__(2872);
;// CONCATENATED MODULE: ./node_modules/hast-to-hyperscript/index.js


/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Text} Text
 *
 * @typedef {import('unist-util-is').AssertPredicate<Element>} AssertElement
 * @typedef {import('unist-util-is').AssertPredicate<Text>} AssertText
 * @typedef {import('unist-util-is').AssertPredicate<Root>} AssertRoot
 *
 * @callback CreateElementLike
 * @param {string} name
 * @param {any} attributes
 * @param {Array.<string|any>} [children]
 * @returns {any}
 *
 * @typedef Context
 * @property {html|svg} schema
 * @property {string|null} prefix
 * @property {number} key
 * @property {boolean} react
 * @property {boolean} vue
 * @property {boolean} vdom
 * @property {boolean} hyperscript
 *
 * @typedef Options
 * @property {string|null} [prefix]
 * @property {'html'|'svg'} [space]
 */






var ns =
/** @type {Record<string, string>} */
webNamespaces;
var toReact =
/** @type {Record<string, string>} */
hastToReact;
var hast_to_hyperscript_own = {}.hasOwnProperty;
/** @type {AssertRoot} */
// @ts-expect-error it’s correct.

var hast_to_hyperscript_root = convert('root');
/** @type {AssertElement} */
// @ts-expect-error it’s correct.

var hast_to_hyperscript_element = convert('element');
/** @type {AssertText} */
// @ts-expect-error it’s correct.

var hast_to_hyperscript_text = convert('text');
/**
 * @template {CreateElementLike} H
 * @param {H} h
 * @param {Element|Root} tree
 * @param {string|boolean|Options} [options]
 * @returns {ReturnType<H>}
 */

function toH(h, tree, options) {
  if (typeof h !== 'function') {
    throw new TypeError('h is not a function');
  }

  var r = react(h);
  var v = vue(h);
  var vd = vdom(h);
  /** @type {string|boolean|null|undefined} */

  var prefix;
  /** @type {Element} */

  var node;

  if (typeof options === 'string' || typeof options === 'boolean') {
    prefix = options;
    options = {};
  } else {
    if (!options) options = {};
    prefix = options.prefix;
  }

  if (hast_to_hyperscript_root(tree)) {
    // @ts-expect-error Allow `doctypes` in there, we’ll filter them out later.
    node = tree.children.length === 1 && hast_to_hyperscript_element(tree.children[0]) ? tree.children[0] : {
      type: 'element',
      tagName: 'div',
      properties: {},
      children: tree.children
    };
  } else if (hast_to_hyperscript_element(tree)) {
    node = tree;
  } else {
    throw new Error( // @ts-expect-error runtime.
    'Expected root or element, not `' + (tree && tree.type || tree) + '`');
  }

  return hast_to_hyperscript_transform(h, node, {
    schema: options.space === 'svg' ? hast_to_hyperscript_node_modules_property_information_svg : hast_to_hyperscript_node_modules_property_information_html,
    prefix: prefix === undefined || prefix === null ? r || v || vd ? 'h-' : null : typeof prefix === 'string' ? prefix : prefix ? 'h-' : null,
    key: 0,
    react: r,
    vue: v,
    vdom: vd,
    hyperscript: hyperscript(h)
  });
}
/**
 * Transform a hast node through a hyperscript interface to *anything*!
 *
 * @template {CreateElementLike} H
 * @param {H} h
 * @param {Element} node
 * @param {Context} ctx
 */

function hast_to_hyperscript_transform(h, node, ctx) {
  var parentSchema = ctx.schema;
  var schema = parentSchema;
  var name = node.tagName;
  /** @type {Record<string, unknown>} */

  var attributes = {};
  /** @type {Array.<ReturnType<H>|string>} */

  var nodes = [];
  var index = -1;
  /** @type {string} */

  var key;

  if (parentSchema.space === 'html' && name.toLowerCase() === 'svg') {
    schema = hast_to_hyperscript_node_modules_property_information_svg;
    ctx.schema = schema;
  }

  for (key in node.properties) {
    if (node.properties && hast_to_hyperscript_own.call(node.properties, key)) {
      addAttribute(attributes, key, node.properties[key], ctx, name);
    }
  }

  if (ctx.vdom) {
    if (schema.space === 'html') {
      name = name.toUpperCase();
    } else if (schema.space) {
      attributes.namespace = ns[schema.space];
    }
  }

  if (ctx.prefix) {
    ctx.key++;
    attributes.key = ctx.prefix + ctx.key;
  }

  if (node.children) {
    while (++index < node.children.length) {
      var value = node.children[index];

      if (hast_to_hyperscript_element(value)) {
        nodes.push(hast_to_hyperscript_transform(h, value, ctx));
      } else if (hast_to_hyperscript_text(value)) {
        nodes.push(value.value);
      }
    }
  } // Restore parent schema.


  ctx.schema = parentSchema; // Ensure no React warnings are triggered for void elements having children
  // passed in.

  return nodes.length > 0 ? h.call(node, name, attributes, nodes) : h.call(node, name, attributes);
}
/**
 * @param {Record<string, unknown>} props
 * @param {string} prop
 * @param {unknown} value
 * @param {Context} ctx
 * @param {string} name
 */
// eslint-disable-next-line complexity, max-params


function addAttribute(props, prop, value, ctx, name) {
  var info = node_modules_property_information_lib_find_find(ctx.schema, prop);
  /** @type {string|undefined} */

  var subprop; // Ignore nullish and `NaN` values.
  // Ignore `false` and falsey known booleans for hyperlike DSLs.

  if (value === undefined || value === null || typeof value === 'number' && Number.isNaN(value) || value === false && (ctx.vue || ctx.vdom || ctx.hyperscript) || !value && info["boolean"] && (ctx.vue || ctx.vdom || ctx.hyperscript)) {
    return;
  }

  if (Array.isArray(value)) {
    // Accept `array`.
    // Most props are space-separated.
    value = info.commaSeparated ? hast_to_hyperscript_node_modules_comma_separated_tokens_stringify(value) : hast_to_hyperscript_node_modules_space_separated_tokens_stringify(value);
  } // Treat `true` and truthy known booleans.


  if (info["boolean"] && ctx.hyperscript) {
    value = '';
  } // VDOM, Vue, and React accept `style` as object.


  if (info.property === 'style' && typeof value === 'string' && (ctx.react || ctx.vue || ctx.vdom)) {
    value = parseStyle(value, name);
  }

  if (ctx.vue) {
    if (info.property !== 'style') subprop = 'attrs';
  } else if (!info.mustUseProperty) {
    if (ctx.vdom) {
      if (info.property !== 'style') subprop = 'attributes';
    } else if (ctx.hyperscript) {
      subprop = 'attrs';
    }
  }

  if (subprop) {
    props[subprop] = Object.assign(props[subprop] || {}, _defineProperty({}, info.attribute, value));
  } else if (info.space && ctx.react) {
    props[toReact[info.property] || info.property] = value;
  } else {
    props[info.attribute] = value;
  }
}
/**
 * Check if `h` is `react.createElement`.
 *
 * @param {CreateElementLike} h
 * @returns {boolean}
 */


function react(h) {
  /** @type {unknown} */
  var node = h('div', {});
  return Boolean(node && ( // @ts-expect-error Looks like a React node.
  '_owner' in node || '_store' in node) && ( // @ts-expect-error Looks like a React node.
  node.key === undefined || node.key === null));
}
/**
 * Check if `h` is `hyperscript`.
 *
 * @param {CreateElementLike} h
 * @returns {boolean}
 */


function hyperscript(h) {
  return 'context' in h && 'cleanup' in h;
}
/**
 * Check if `h` is `virtual-dom/h`.
 *
 * @param {CreateElementLike} h
 * @returns {boolean}
 */


function vdom(h) {
  /** @type {unknown} */
  var node = h('div', {}); // @ts-expect-error Looks like a vnode.

  return node.type === 'VirtualNode';
}
/**
 * Check if `h` is Vue.
 *
 * @param {CreateElementLike} h
 * @returns {boolean}
 */


function vue(h) {
  /** @type {unknown} */
  var node = h('div', {}); // @ts-expect-error Looks like a Vue node.

  return Boolean(node && node.context && node.context._isVue);
}
/**
 * @param {string} value
 * @param {string} tagName
 * @returns {Record<string, string>}
 */


function parseStyle(value, tagName) {
  /** @type {Record<string, string>} */
  var result = {};

  try {
    style_to_object(value, function (name, value) {
      if (name.slice(0, 4) === '-ms-') name = 'ms-' + name.slice(4);
      result[name.replace(/-([a-z])/g,
      /**
       * @param {string} _
       * @param {string} $1
       * @returns {string}
       */
      function (_, $1) {
        return $1.toUpperCase();
      })] = value;
    });
  } catch (error) {
    error.message = tagName + '[style]' + error.message.slice('undefined'.length);
    throw error;
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/zwitch/index.js
var zwitch_own = {}.hasOwnProperty;
/**
 * @callback Handler
 * @param {...unknown} value
 * @return {unknown}
 *
 * @typedef {Record<string, Handler>} Handlers
 *
 * @typedef {Object} Options
 * @property {Handler} [unknown]
 * @property {Handler} [invalid]
 * @property {Handlers} [handlers]
 */

/**
 * Handle values based on a property.
 *
 * @param {string} key
 * @param {Options} [options]
 */

function zwitch(key, options) {
  var settings = options || {};
  /**
   * Handle one value.
   * Based on the bound `key`, a respective handler will be called.
   * If `value` is not an object, or doesn’t have a `key` property, the special
   * “invalid” handler will be called.
   * If `value` has an unknown `key`, the special “unknown” handler will be
   * called.
   *
   * All arguments, and the context object, are passed through to the handler,
   * and it’s result is returned.
   *
   * @param {...unknown} [value]
   * @this {unknown}
   * @returns {unknown}
   * @property {Handler} invalid
   * @property {Handler} unknown
   * @property {Handlers} handlers
   */

  function one(value) {
    var fn = one.invalid;
    var handlers = one.handlers;

    if (value && zwitch_own.call(value, key)) {
      fn = zwitch_own.call(handlers, value[key]) ? handlers[value[key]] : one.unknown;
    }

    if (fn) {
      return fn.apply(this, arguments);
    }
  }

  one.handlers = settings.handlers || {};
  one.invalid = settings.invalid;
  one.unknown = settings.unknown;
  return one;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-to-parse5/lib/index.js
/**
 * @typedef {import('parse5').Node} P5Node
 * @typedef {import('parse5').Document} P5Document
 * @typedef {import('parse5').DocumentFragment} P5Fragment
 * @typedef {import('parse5').DocumentType} P5Doctype
 * @typedef {import('parse5').CommentNode} P5Comment
 * @typedef {import('parse5').TextNode} P5Text
 * @typedef {import('parse5').Element} P5Element
 * @typedef {import('parse5').Attribute} P5Attribute
 * @typedef {import('parse5').ParentNode} P5Parent
 * @typedef {Exclude<P5Node, P5Document|P5Fragment>} P5Child
 * @typedef {import('property-information').Schema} Schema
 * @typedef {import('property-information').Info} Info
 * @typedef {'html'|'svg'} Space
 * @typedef {import('hast').Parent} Parent
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').DocType} Doctype
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Text} Text
 * @typedef {import('hast').Comment} Comment
 * @typedef {Parent['children'][number]} Child
 * @typedef {Child|Root} Node
 *
 * @callback Handle
 * @param {Node} node
 * @param {Schema} schema
 * @returns {P5Node}
 */




var hast_util_to_parse5_lib_own = {}.hasOwnProperty;
var lib_one = zwitch('type', {
  handlers: {
    root: lib_root,
    element: hast_util_to_parse5_lib_element,
    text: hast_util_to_parse5_lib_text,
    comment: hast_util_to_parse5_lib_comment,
    doctype: hast_util_to_parse5_lib_doctype
  }
});
/**
 * Transform a tree from hast to Parse5’s AST.
 *
 * @param {Node} tree
 * @param {Space} [space='html']
 * @returns {P5Node}
 */

function toParse5(tree, space) {
  // @ts-ignore Types are wrong.
  return lib_one(tree, space === 'svg' ? hast_util_to_parse5_node_modules_property_information_svg : hast_util_to_parse5_node_modules_property_information_html);
}
/**
 * @type {Handle}
 * @param {Root} node
 * @returns {P5Document}
 */

function lib_root(node, schema) {
  /** @type {P5Document} */
  var p5 = {
    nodeName: '#document',
    mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',
    childNodes: []
  }; // @ts-ignore Assume correct children.

  p5.childNodes = lib_all(node.children, p5, schema);
  return patch(node, p5);
}
/**
 * @type {Handle}
 * @param {Root} node
 * @returns {P5Fragment}
 */


function fragment(node, schema) {
  /** @type {P5Fragment} */
  var p5 = {
    nodeName: '#document-fragment',
    childNodes: []
  }; // @ts-ignore Assume correct children.

  p5.childNodes = lib_all(node.children, p5, schema);
  return patch(node, p5);
}
/**
 * @type {Handle}
 * @param {Doctype} node
 * @returns {P5Doctype}
 */


function hast_util_to_parse5_lib_doctype(node) {
  return patch(node, {
    nodeName: '#documentType',
    name: 'html',
    publicId: '',
    systemId: '',
    parentNode: undefined
  });
}
/**
 * @type {Handle}
 * @param {Text} node
 * @returns {P5Text}
 */


function hast_util_to_parse5_lib_text(node) {
  return patch(node, {
    nodeName: '#text',
    value: node.value,
    parentNode: undefined
  });
}
/**
 * @type {Handle}
 * @param {Comment} node
 * @returns {P5Comment}
 */


function hast_util_to_parse5_lib_comment(node) {
  return patch(node, {
    nodeName: '#comment',
    data: node.value,
    parentNode: undefined
  });
}
/**
 * @type {Handle}
 * @param {Element} node
 * @returns {P5Element}
 */


function hast_util_to_parse5_lib_element(node, schema) {
  /** @type {Space} */
  // @ts-ignore Assume space.
  var space = schema.space;
  return toH(h, Object.assign({}, node, {
    children: []
  }), {
    space: space
  });
  /**
   * @param {string} name
   * @param {Object.<string, string|boolean|number>} attrs
   */

  function h(name, attrs) {
    /** @type {Array.<P5Attribute>} */
    var values = [];
    /** @type {Info} */

    var info;
    /** @type {P5Attribute} */

    var value;
    /** @type {string} */

    var key;
    /** @type {number} */

    var index;
    /** @type {P5Element} */

    var p5;

    for (key in attrs) {
      if (!hast_util_to_parse5_lib_own.call(attrs, key) || attrs[key] === false) {
        continue;
      }

      info = property_information_lib_find_find(schema, key);

      if (info["boolean"] && !attrs[key]) {
        continue;
      }

      value = {
        name: key,
        value: attrs[key] === true ? '' : String(attrs[key])
      };

      if (info.space && info.space !== 'html' && info.space !== 'svg') {
        index = key.indexOf(':');

        if (index < 0) {
          value.prefix = '';
        } else {
          value.name = key.slice(index + 1);
          value.prefix = key.slice(0, index);
        }

        value.namespace = webNamespaces[info.space];
      }

      values.push(value);
    }

    if (schema.space === 'html' && node.tagName === 'svg') schema = hast_util_to_parse5_node_modules_property_information_svg;
    p5 = patch(node, {
      nodeName: name,
      tagName: name,
      attrs: values,
      namespaceURI: webNamespaces[schema.space],
      childNodes: [],
      parentNode: undefined
    }); // @ts-ignore Assume correct children.

    p5.childNodes = lib_all(node.children, p5, schema); // @ts-ignore Types are wrong.

    if (name === 'template') p5.content = fragment(node.content, schema);
    return p5;
  }
}
/**
 * @param {Array.<Child>} children
 * @param {P5Parent} p5
 * @param {Schema} schema
 * @returns {Array.<P5Child>}
 */


function lib_all(children, p5, schema) {
  var index = -1;
  /** @type {Array.<P5Child>} */

  var result = [];
  /** @type {P5Child} */

  var child;

  if (children) {
    while (++index < children.length) {
      // @ts-ignore Assume child.
      child = lib_one(children[index], schema); // @ts-ignore types are wrong.

      child.parentNode = p5;
      result.push(child);
    }
  }

  return result;
}
/**
 * Patch specific properties.
 *
 * @template {P5Node} T
 * @param {Node} node
 * @param {T} p5
 * @returns {T}
 */


function patch(node, p5) {
  var position = node.position;

  if (position && position.start && position.end) {
    // @ts-ignore Types are wrong.
    p5.sourceCodeLocation = {
      startLine: position.start.line,
      startCol: position.start.column,
      startOffset: position.start.offset,
      endLine: position.end.line,
      endCol: position.end.column,
      endOffset: position.end.offset
    };
  }

  return p5;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-raw/lib/index.js


/**
 * @typedef {import('vfile').VFile} VFile
 * @typedef {import('parse5').Document} P5Document
 * @typedef {import('parse5').DocumentFragment} P5Fragment
 * @typedef {Omit<import('parse5').Element, 'parentNode'>} P5Element
 * @typedef {import('parse5').Attribute} P5Attribute
 * @typedef {Omit<import('parse5').Location, 'startOffset' | 'endOffset'> & {startOffset: number|undefined, endOffset: number|undefined}} P5Location
 * @typedef {import('parse5').ParserOptions} P5ParserOptions
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').DocType} Doctype
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Text} Text
 * @typedef {import('hast').Comment} Comment
 * @typedef {import('hast').Content} Content
 * @typedef {Root|Content} Node
 * @typedef {import('../complex-types').Raw} Raw
 *
 * @typedef {Omit<Comment, 'value'> & {value: {stitch: Node}}} Stitch
 *
 * @typedef Options
 * @property {Array.<string>} [passThrough]
 *   List of custom hast node types to pass through (keep) in hast.
 *   If the passed through nodes have children, those children are expected to
 *   be hast and will be handled.
 *
 * @typedef HiddenTokenizer
 * @property {Array.<HiddenLocationTracker>} __mixins
 *   Way too simple, but works for us.
 * @property {HiddenPreprocessor} preprocessor
 * @property {(value: string) => void} write
 * @property {() => number} _consume
 * @property {Array.<HiddenToken>} tokenQueue
 * @property {string} state
 * @property {string} returnState
 * @property {number} charRefCode
 * @property {Array.<number>} tempBuff
 * @property {Function} _flushCodePointsConsumedAsCharacterReference
 * @property {string} lastStartTagName
 * @property {number} consumedAfterSnapshot
 * @property {boolean} active
 * @property {HiddenToken|undefined} currentCharacterToken
 * @property {HiddenToken|undefined} currentToken
 * @property {unknown} currentAttr
 * @property {Function} NAMED_CHARACTER_REFERENCE_STATE
 * @property {Function} NUMERIC_CHARACTER_REFERENCE_END_STATE
 *
 * @typedef {Object.<string, unknown> & {location: P5Location}} HiddenToken
 *
 * @typedef HiddenPreprocessor
 * @property {string|undefined} html
 * @property {number} pos
 * @property {number} lastGapPos
 * @property {number} lastCharPos
 * @property {Array.<number>} gapStack
 * @property {boolean} skipNextNewLine
 * @property {boolean} lastChunkWritten
 * @property {boolean} endOfChunkHit
 *
 * @typedef HiddenLocationTracker
 * @property {P5Location|undefined} currentAttrLocation
 * @property {P5Location} ctLoc
 * @property {HiddenPosTracker} posTracker
 *
 * @typedef HiddenPosTracker
 * @property {boolean} isEol
 * @property {number} lineStartPos
 * @property {number} droppedBufferSize
 * @property {number} offset
 * @property {number} col
 * @property {number} line
 */
// @ts-expect-error: untyped.








var inTemplateMode = 'IN_TEMPLATE_MODE';
var dataState = 'DATA_STATE';
var characterToken = 'CHARACTER_TOKEN';
var startTagToken = 'START_TAG_TOKEN';
var endTagToken = 'END_TAG_TOKEN';
var commentToken = 'COMMENT_TOKEN';
var doctypeToken = 'DOCTYPE_TOKEN';
/** @type {P5ParserOptions} */

var parseOptions = {
  sourceCodeLocationInfo: true,
  scriptingEnabled: false
};
/**
 * Given a hast tree and an optional vfile (for positional info), return a new
 * parsed-again hast tree.
 *
 * @param tree
 *   Original hast tree.
 * @param file
 *   Virtual file for positional info, optional.
 * @param options
 *   Configuration.
 */

var lib_raw =
/**
 * @type {(
 *   ((tree: Node, file: VFile|undefined, options?: Options) => Node) &
 *   ((tree: Node, options?: Options) => Node)
 * )}
 */

/**
 * @param {Node} tree
 * @param {VFile} [file]
 * @param {Options} [options]
 */
function raw(tree, file, options) {
  var index = -1;
  var parser = new lib_parser(parseOptions);
  var one = zwitch('type', {
    // @ts-expect-error: hush.
    handlers: {
      root: root,
      element: element,
      text: text,
      comment: comment,
      doctype: doctype,
      raw: handleRaw
    },
    // @ts-expect-error: hush.
    unknown: unknown
  });
  /** @type {boolean|undefined} */

  var stitches;
  /** @type {HiddenTokenizer|undefined} */

  var tokenizer;
  /** @type {HiddenPreprocessor|undefined} */

  var preprocessor;
  /** @type {HiddenPosTracker|undefined} */

  var posTracker;
  /** @type {HiddenLocationTracker|undefined} */

  var locationTracker;

  if (isOptions(file)) {
    options = file;
    file = undefined;
  }

  if (options && options.passThrough) {
    while (++index < options.passThrough.length) {
      // @ts-expect-error: hush.
      one.handlers[options.passThrough[index]] = stitch;
    }
  }

  var result = fromParse5(documentMode(tree) ? document() : fragment(), file);

  if (stitches) {
    node_modules_unist_util_visit_visit(result, 'comment', function (node, index, parent) {
      var stitch =
      /** @type {Stitch} */

      /** @type {unknown} */
      node;

      if (stitch.value.stitch && parent !== null && index !== null) {
        // @ts-expect-error: assume the stitch is allowed.
        parent.children[index] = stitch.value.stitch;
        return index;
      }
    });
  } // Unpack if possible and when not given a `root`.


  if (tree.type !== 'root' && result.type === 'root' && result.children.length === 1) {
    return result.children[0];
  }

  return result;
  /**
   * @returns {P5Fragment}
   */

  function fragment() {
    /** @type {P5Element} */
    var context = {
      nodeName: 'template',
      tagName: 'template',
      attrs: [],
      namespaceURI: webNamespaces.html,
      childNodes: []
    };
    /** @type {P5Element} */

    var mock = {
      nodeName: 'documentmock',
      tagName: 'documentmock',
      attrs: [],
      namespaceURI: webNamespaces.html,
      childNodes: []
    };
    /** @type {P5Fragment} */

    var doc = {
      nodeName: '#document-fragment',
      childNodes: []
    };

    parser._bootstrap(mock, context);

    parser._pushTmplInsertionMode(inTemplateMode);

    parser._initTokenizerForFragmentParsing();

    parser._insertFakeRootElement();

    parser._resetInsertionMode();

    parser._findFormInFragmentContext();

    tokenizer = parser.tokenizer;
    /* c8 ignore next */

    if (!tokenizer) throw new Error('Expected `tokenizer`');
    preprocessor = tokenizer.preprocessor;
    locationTracker = tokenizer.__mixins[0];
    posTracker = locationTracker.posTracker;
    one(tree);

    parser._adoptNodes(mock.childNodes[0], doc);

    return doc;
  }
  /**
   * @returns {P5Document}
   */


  function document() {
    /** @type {P5Document} */
    var doc = parser.treeAdapter.createDocument();

    parser._bootstrap(doc, undefined);

    tokenizer = parser.tokenizer;
    /* c8 ignore next */

    if (!tokenizer) throw new Error('Expected `tokenizer`');
    preprocessor = tokenizer.preprocessor;
    locationTracker = tokenizer.__mixins[0];
    posTracker = locationTracker.posTracker;
    one(tree);
    return doc;
  }
  /**
   * @param {Content[]} nodes
   * @returns {void}
   */


  function all(nodes) {
    var index = -1;
    /* istanbul ignore else - invalid nodes, see rehypejs/rehype-raw#7. */

    if (nodes) {
      while (++index < nodes.length) {
        one(nodes[index]);
      }
    }
  }
  /**
   * @param {Root} node
   * @returns {void}
   */


  function root(node) {
    all(node.children);
  }
  /**
   * @param {Element} node
   * @returns {void}
   */


  function element(node) {
    resetTokenizer();

    parser._processToken(startTag(node), webNamespaces.html);

    all(node.children);

    if (!htmlVoidElements.includes(node.tagName)) {
      resetTokenizer();

      parser._processToken(endTag(node));
    }
  }
  /**
   * @param {Text} node
   * @returns {void}
   */


  function text(node) {
    resetTokenizer();

    parser._processToken({
      type: characterToken,
      chars: node.value,
      location: createParse5Location(node)
    });
  }
  /**
   * @param {Doctype} node
   * @returns {void}
   */


  function doctype(node) {
    resetTokenizer();

    parser._processToken({
      type: doctypeToken,
      name: 'html',
      forceQuirks: false,
      publicId: '',
      systemId: '',
      location: createParse5Location(node)
    });
  }
  /**
   * @param {Comment|Stitch} node
   * @returns {void}
   */


  function comment(node) {
    resetTokenizer();

    parser._processToken({
      type: commentToken,
      data: node.value,
      location: createParse5Location(node)
    });
  }
  /**
   * @param {Raw} node
   * @returns {void}
   */


  function handleRaw(node) {
    var start = pointStart(node);
    var line = start.line || 1;
    var column = start.column || 1;
    var offset = start.offset || 0;
    /* c8 ignore next 4 */

    if (!preprocessor) throw new Error('Expected `preprocessor`');
    if (!tokenizer) throw new Error('Expected `tokenizer`');
    if (!posTracker) throw new Error('Expected `posTracker`');
    if (!locationTracker) throw new Error('Expected `locationTracker`'); // Reset preprocessor:
    // See: <https://github.com/inikulin/parse5/blob/9c683e1/packages/parse5/lib/tokenizer/preprocessor.js>.

    preprocessor.html = undefined;
    preprocessor.pos = -1;
    preprocessor.lastGapPos = -1;
    preprocessor.lastCharPos = -1;
    preprocessor.gapStack = [];
    preprocessor.skipNextNewLine = false;
    preprocessor.lastChunkWritten = false;
    preprocessor.endOfChunkHit = false; // Reset preprocessor mixin:
    // See: <https://github.com/inikulin/parse5/blob/9c683e1/packages/parse5/lib/extensions/position-tracking/preprocessor-mixin.js>.

    posTracker.isEol = false;
    posTracker.lineStartPos = -column + 1; // Looks weird, but ensures we get correct positional info.

    posTracker.droppedBufferSize = offset;
    posTracker.offset = 0;
    posTracker.col = 1;
    posTracker.line = line; // Reset location tracker:
    // See: <https://github.com/inikulin/parse5/blob/9c683e1/packages/parse5/lib/extensions/location-info/tokenizer-mixin.js>.

    locationTracker.currentAttrLocation = undefined;
    locationTracker.ctLoc = createParse5Location(node); // See the code for `parse` and `parseFragment`:
    // See: <https://github.com/inikulin/parse5/blob/9c683e1/packages/parse5/lib/parser/index.js#L371>.

    tokenizer.write(node.value);

    parser._runParsingLoop(null); // Character references hang, so if we ended there, we need to flush
    // those too.
    // We reset the preprocessor as if the document ends here.
    // Then one single call to the relevant state does the trick, parse5
    // consumes the whole token.


    if (tokenizer.state === 'NAMED_CHARACTER_REFERENCE_STATE' || tokenizer.state === 'NUMERIC_CHARACTER_REFERENCE_END_STATE') {
      preprocessor.lastChunkWritten = true;
      tokenizer[tokenizer.state](tokenizer._consume());
    } // Process final characters if they’re still there after hibernating.
    // Similar to:
    // See: <https://github.com/inikulin/parse5/blob/9c683e1/packages/parse5/lib/extensions/location-info/tokenizer-mixin.js#L95>.


    var token = tokenizer.currentCharacterToken;

    if (token) {
      token.location.endLine = posTracker.line;
      token.location.endCol = posTracker.col + 1;
      token.location.endOffset = posTracker.offset + 1;

      parser._processToken(token);
    }
  }
  /**
   * @param {Node} node
   */


  function stitch(node) {
    stitches = true;
    /** @type {Node} */

    var clone; // Recurse, because to somewhat handle `[<x>]</x>` (where `[]` denotes the
    // passed through node).

    if ('children' in node) {
      clone = _objectSpread2(_objectSpread2({}, node), {}, {
        children: raw({
          type: 'root',
          children: node.children
        }, file, options // @ts-expect-error Assume a given parent yields a parent.
        ).children
      });
    } else {
      clone = _objectSpread2({}, node);
    } // Hack: `value` is supposed to be a string, but as none of the tools
    // (`parse5` or `hast-util-from-parse5`) looks at it, we can pass nodes
    // through.


    comment({
      type: 'comment',
      value: {
        stitch: clone
      }
    });
  }

  function resetTokenizer() {
    /* c8 ignore next */
    if (!tokenizer) throw new Error('Expected `tokenizer`'); // Reset tokenizer:
    // See: <https://github.com/inikulin/parse5/blob/9c683e1/packages/parse5/lib/tokenizer/index.js#L218-L234>.
    // Especially putting it back in the `data` state is useful: some elements,
    // like textareas and iframes, change the state.
    // See GH-7.
    // But also if broken HTML is in `raw`, and then a correct element is given.
    // See GH-11.

    tokenizer.tokenQueue = [];
    tokenizer.state = dataState;
    tokenizer.returnState = '';
    tokenizer.charRefCode = -1;
    tokenizer.tempBuff = [];
    tokenizer.lastStartTagName = '';
    tokenizer.consumedAfterSnapshot = -1;
    tokenizer.active = false;
    tokenizer.currentCharacterToken = undefined;
    tokenizer.currentToken = undefined;
    tokenizer.currentAttr = undefined;
  }
};
/**
 * @param {Element} node
 * @returns {HiddenToken}
 */

function startTag(node) {
  /** @type {P5Location} */
  var location = Object.assign(createParse5Location(node)); // @ts-expect-error extra positional info.

  location.startTag = Object.assign({}, location); // Untyped token.

  return {
    type: startTagToken,
    tagName: node.tagName,
    selfClosing: false,
    attrs: attributes(node),
    location: location
  };
}
/**
 * @param {Element} node
 * @returns {Array.<P5Attribute>}
 */


function attributes(node) {
  return toParse5({
    tagName: node.tagName,
    type: 'element',
    properties: node.properties,
    children: [] // @ts-expect-error Assume element.

  }).attrs;
}
/**
 * @param {Element} node
 * @returns {HiddenToken}
 */


function endTag(node) {
  /** @type {P5Location} */
  var location = Object.assign(createParse5Location(node)); // @ts-expect-error extra positional info.

  location.startTag = Object.assign({}, location); // Untyped token.

  return {
    type: endTagToken,
    tagName: node.tagName,
    attrs: [],
    location: location
  };
}
/**
 * @param {Node} node
 */


function unknown(node) {
  throw new Error('Cannot compile `' + node.type + '` node');
}
/**
 * @param {Node} node
 * @returns {boolean}
 */


function documentMode(node) {
  var head = node.type === 'root' ? node.children[0] : node;
  return Boolean(head && (head.type === 'doctype' || head.type === 'element' && head.tagName === 'html'));
}
/**
 * @param {Node|Stitch} node
 * @returns {P5Location}
 */


function createParse5Location(node) {
  var start = pointStart(node);
  var end = pointEnd(node);
  return {
    startLine: start.line,
    startCol: start.column,
    startOffset: start.offset,
    endLine: end.line,
    endCol: end.column,
    endOffset: end.offset
  };
}
/**
 * @param {VFile|Options|undefined} value
 * @return {value is Options}
 */


function isOptions(value) {
  return Boolean(value && !('message' in value && 'messages' in value));
}
;// CONCATENATED MODULE: ./node_modules/rehype-raw/index.js
/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast-util-raw').Options} Options
 * @typedef {import('hast-util-raw')} DoNotTouchAsThisImportIncludesRawInTree
 */

/**
 * Plugin to parse the tree again (and raw nodes).
 * Keeping positional info OK.  🙌
 *
 * @type {import('unified').Plugin<[Options?] | void[], Root>}
 */

function rehypeRaw() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (tree, file) {
    // Assume that when a root was given, it’s also returned.
    var result =
    /** @type {Root} */
    lib_raw(tree, file, options);
    return result;
  };
}
;// CONCATENATED MODULE: ./node_modules/rehype-rewrite/node_modules/unist-util-visit/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 * @typedef {import('./complex-types').Visitor} Visitor
 */


/**
 * Visit children of tree which pass a test
 *
 * @param tree Abstract syntax tree to walk
 * @param test Test, optional
 * @param visitor Function to run for each node
 * @param reverse Fisit the tree in reverse, defaults to false
 */

var rehype_rewrite_node_modules_unist_util_visit_visit =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {import('./complex-types').Visitor} visitor
 * @param {boolean} [reverse]
 */
function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  visitParents(tree, test, overload, reverse);
  /**
   * @param {Node} node
   * @param {Array.<Parent>} parents
   */

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/util/schema.js



/**
 * @typedef {import('./info.js').Info} Info
 * @typedef {Record<string, Info>} Properties
 * @typedef {Record<string, string>} Normal
 */
var node_modules_property_information_lib_util_schema_Schema = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {Properties} property
 * @param {Normal} normal
 * @param {string} [space]
 */
function Schema(property, normal, space) {
  _classCallCheck(this, Schema);

  this.property = property;
  this.normal = normal;

  if (space) {
    this.space = space;
  }
});
/** @type {Properties} */

node_modules_property_information_lib_util_schema_Schema.prototype.property = {};
/** @type {Normal} */

node_modules_property_information_lib_util_schema_Schema.prototype.normal = {};
/** @type {string|null} */

node_modules_property_information_lib_util_schema_Schema.prototype.space = null;
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/util/merge.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 */

/**
 * @param {Schema[]} definitions
 * @param {string} [space]
 * @returns {Schema}
 */

function node_modules_property_information_lib_util_merge_merge(definitions, space) {
  /** @type {Properties} */
  var property = {};
  /** @type {Normal} */

  var normal = {};
  var index = -1;

  while (++index < definitions.length) {
    Object.assign(property, definitions[index].property);
    Object.assign(normal, definitions[index].normal);
  }

  return new node_modules_property_information_lib_util_schema_Schema(property, normal, space);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/normalize.js
/**
 * @param {string} value
 * @returns {string}
 */
function hast_util_select_node_modules_property_information_lib_normalize_normalize(value) {
  return value.toLowerCase();
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/util/info.js


var node_modules_property_information_lib_util_info_Info = /*#__PURE__*/_createClass(
/**
 * @constructor
 * @param {string} property
 * @param {string} attribute
 */
function Info(property, attribute) {
  _classCallCheck(this, Info);

  /** @type {string} */
  this.property = property;
  /** @type {string} */

  this.attribute = attribute;
});
/** @type {string|null} */

node_modules_property_information_lib_util_info_Info.prototype.space = null;
node_modules_property_information_lib_util_info_Info.prototype["boolean"] = false;
node_modules_property_information_lib_util_info_Info.prototype.booleanish = false;
node_modules_property_information_lib_util_info_Info.prototype.overloadedBoolean = false;
node_modules_property_information_lib_util_info_Info.prototype.number = false;
node_modules_property_information_lib_util_info_Info.prototype.commaSeparated = false;
node_modules_property_information_lib_util_info_Info.prototype.spaceSeparated = false;
node_modules_property_information_lib_util_info_Info.prototype.commaOrSpaceSeparated = false;
node_modules_property_information_lib_util_info_Info.prototype.mustUseProperty = false;
node_modules_property_information_lib_util_info_Info.prototype.defined = false;
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/util/types.js
var node_modules_property_information_lib_util_types_powers = 0;

var node_modules_property_information_lib_util_types_boolean = node_modules_property_information_lib_util_types_increment();


var node_modules_property_information_lib_util_types_booleanish = node_modules_property_information_lib_util_types_increment();
var node_modules_property_information_lib_util_types_overloadedBoolean = node_modules_property_information_lib_util_types_increment();
var node_modules_property_information_lib_util_types_number = node_modules_property_information_lib_util_types_increment();
var node_modules_property_information_lib_util_types_spaceSeparated = node_modules_property_information_lib_util_types_increment();
var node_modules_property_information_lib_util_types_commaSeparated = node_modules_property_information_lib_util_types_increment();
var node_modules_property_information_lib_util_types_commaOrSpaceSeparated = node_modules_property_information_lib_util_types_increment();

function node_modules_property_information_lib_util_types_increment() {
  return Math.pow(2, ++node_modules_property_information_lib_util_types_powers);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/util/defined-info.js







/** @type {Array<keyof types>} */
// @ts-expect-error: hush.

var node_modules_property_information_lib_util_defined_info_checks = Object.keys(hast_util_select_node_modules_property_information_lib_util_types_namespaceObject);
var node_modules_property_information_lib_util_defined_info_DefinedInfo = /*#__PURE__*/function (_Info) {
  _inherits(DefinedInfo, _Info);

  var _super = _createSuper(DefinedInfo);

  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  function DefinedInfo(property, attribute, mask, space) {
    var _this;

    _classCallCheck(this, DefinedInfo);

    var index = -1;
    _this = _super.call(this, property, attribute);
    node_modules_property_information_lib_util_defined_info_mark(_assertThisInitialized(_this), 'space', space);

    if (typeof mask === 'number') {
      while (++index < node_modules_property_information_lib_util_defined_info_checks.length) {
        var check = node_modules_property_information_lib_util_defined_info_checks[index];
        node_modules_property_information_lib_util_defined_info_mark(_assertThisInitialized(_this), node_modules_property_information_lib_util_defined_info_checks[index], (mask & hast_util_select_node_modules_property_information_lib_util_types_namespaceObject[check]) === hast_util_select_node_modules_property_information_lib_util_types_namespaceObject[check]);
      }
    }

    return _this;
  }

  return _createClass(DefinedInfo);
}(node_modules_property_information_lib_util_info_Info);
node_modules_property_information_lib_util_defined_info_DefinedInfo.prototype.defined = true;
/**
 * @param {DefinedInfo} values
 * @param {string} key
 * @param {unknown} value
 */

function node_modules_property_information_lib_util_defined_info_mark(values, key, value) {
  if (value) {
    // @ts-expect-error: assume `value` matches the expected value of `key`.
    values[key] = value;
  }
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/util/create.js
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 *
 * @typedef {Record<string, string>} Attributes
 *
 * @typedef {Object} Definition
 * @property {Record<string, number|null>} properties
 * @property {(attributes: Attributes, property: string) => string} transform
 * @property {string} [space]
 * @property {Attributes} [attributes]
 * @property {Array<string>} [mustUseProperty]
 */



var hast_util_select_node_modules_property_information_lib_util_create_own = {}.hasOwnProperty;
/**
 * @param {Definition} definition
 * @returns {Schema}
 */

function node_modules_property_information_lib_util_create_create(definition) {
  /** @type {Properties} */
  var property = {};
  /** @type {Normal} */

  var normal = {};
  /** @type {string} */

  var prop;

  for (prop in definition.properties) {
    if (hast_util_select_node_modules_property_information_lib_util_create_own.call(definition.properties, prop)) {
      var value = definition.properties[prop];
      var info = new node_modules_property_information_lib_util_defined_info_DefinedInfo(prop, definition.transform(definition.attributes || {}, prop), value, definition.space);

      if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {
        info.mustUseProperty = true;
      }

      property[prop] = info;
      normal[hast_util_select_node_modules_property_information_lib_normalize_normalize(prop)] = prop;
      normal[hast_util_select_node_modules_property_information_lib_normalize_normalize(info.attribute)] = prop;
    }
  }

  return new node_modules_property_information_lib_util_schema_Schema(property, normal, definition.space);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/xlink.js

var hast_util_select_node_modules_property_information_lib_xlink_xlink = node_modules_property_information_lib_util_create_create({
  space: 'xlink',
  transform: function transform(_, prop) {
    return 'xlink:' + prop.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/xml.js

var hast_util_select_node_modules_property_information_lib_xml_xml = node_modules_property_information_lib_util_create_create({
  space: 'xml',
  transform: function transform(_, prop) {
    return 'xml:' + prop.slice(3).toLowerCase();
  },
  properties: {
    xmlLang: null,
    xmlBase: null,
    xmlSpace: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/util/case-sensitive-transform.js
/**
 * @param {Record<string, string>} attributes
 * @param {string} attribute
 * @returns {string}
 */
function node_modules_property_information_lib_util_case_sensitive_transform_caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/util/case-insensitive-transform.js

/**
 * @param {Record<string, string>} attributes
 * @param {string} property
 * @returns {string}
 */

function node_modules_property_information_lib_util_case_insensitive_transform_caseInsensitiveTransform(attributes, property) {
  return node_modules_property_information_lib_util_case_sensitive_transform_caseSensitiveTransform(attributes, property.toLowerCase());
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/xmlns.js


var hast_util_select_node_modules_property_information_lib_xmlns_xmlns = node_modules_property_information_lib_util_create_create({
  space: 'xmlns',
  attributes: {
    xmlnsxlink: 'xmlns:xlink'
  },
  transform: node_modules_property_information_lib_util_case_insensitive_transform_caseInsensitiveTransform,
  properties: {
    xmlns: null,
    xmlnsXLink: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/aria.js


var hast_util_select_node_modules_property_information_lib_aria_aria = node_modules_property_information_lib_util_create_create({
  transform: function transform(_, prop) {
    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: node_modules_property_information_lib_util_types_booleanish,
    ariaAutoComplete: null,
    ariaBusy: node_modules_property_information_lib_util_types_booleanish,
    ariaChecked: node_modules_property_information_lib_util_types_booleanish,
    ariaColCount: node_modules_property_information_lib_util_types_number,
    ariaColIndex: node_modules_property_information_lib_util_types_number,
    ariaColSpan: node_modules_property_information_lib_util_types_number,
    ariaControls: node_modules_property_information_lib_util_types_spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: node_modules_property_information_lib_util_types_spaceSeparated,
    ariaDetails: null,
    ariaDisabled: node_modules_property_information_lib_util_types_booleanish,
    ariaDropEffect: node_modules_property_information_lib_util_types_spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: node_modules_property_information_lib_util_types_booleanish,
    ariaFlowTo: node_modules_property_information_lib_util_types_spaceSeparated,
    ariaGrabbed: node_modules_property_information_lib_util_types_booleanish,
    ariaHasPopup: null,
    ariaHidden: node_modules_property_information_lib_util_types_booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: node_modules_property_information_lib_util_types_spaceSeparated,
    ariaLevel: node_modules_property_information_lib_util_types_number,
    ariaLive: null,
    ariaModal: node_modules_property_information_lib_util_types_booleanish,
    ariaMultiLine: node_modules_property_information_lib_util_types_booleanish,
    ariaMultiSelectable: node_modules_property_information_lib_util_types_booleanish,
    ariaOrientation: null,
    ariaOwns: node_modules_property_information_lib_util_types_spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: node_modules_property_information_lib_util_types_number,
    ariaPressed: node_modules_property_information_lib_util_types_booleanish,
    ariaReadOnly: node_modules_property_information_lib_util_types_booleanish,
    ariaRelevant: null,
    ariaRequired: node_modules_property_information_lib_util_types_booleanish,
    ariaRoleDescription: node_modules_property_information_lib_util_types_spaceSeparated,
    ariaRowCount: node_modules_property_information_lib_util_types_number,
    ariaRowIndex: node_modules_property_information_lib_util_types_number,
    ariaRowSpan: node_modules_property_information_lib_util_types_number,
    ariaSelected: node_modules_property_information_lib_util_types_booleanish,
    ariaSetSize: node_modules_property_information_lib_util_types_number,
    ariaSort: null,
    ariaValueMax: node_modules_property_information_lib_util_types_number,
    ariaValueMin: node_modules_property_information_lib_util_types_number,
    ariaValueNow: node_modules_property_information_lib_util_types_number,
    ariaValueText: null,
    role: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/html.js



var hast_util_select_node_modules_property_information_lib_html_html = node_modules_property_information_lib_util_create_create({
  space: 'html',
  attributes: {
    acceptcharset: 'accept-charset',
    classname: 'class',
    htmlfor: 'for',
    httpequiv: 'http-equiv'
  },
  transform: node_modules_property_information_lib_util_case_insensitive_transform_caseInsensitiveTransform,
  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: node_modules_property_information_lib_util_types_commaSeparated,
    acceptCharset: node_modules_property_information_lib_util_types_spaceSeparated,
    accessKey: node_modules_property_information_lib_util_types_spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: node_modules_property_information_lib_util_types_boolean,
    allowPaymentRequest: node_modules_property_information_lib_util_types_boolean,
    allowUserMedia: node_modules_property_information_lib_util_types_boolean,
    alt: null,
    as: null,
    async: node_modules_property_information_lib_util_types_boolean,
    autoCapitalize: null,
    autoComplete: node_modules_property_information_lib_util_types_spaceSeparated,
    autoFocus: node_modules_property_information_lib_util_types_boolean,
    autoPlay: node_modules_property_information_lib_util_types_boolean,
    capture: node_modules_property_information_lib_util_types_boolean,
    charSet: null,
    checked: node_modules_property_information_lib_util_types_boolean,
    cite: null,
    className: node_modules_property_information_lib_util_types_spaceSeparated,
    cols: node_modules_property_information_lib_util_types_number,
    colSpan: null,
    content: null,
    contentEditable: node_modules_property_information_lib_util_types_booleanish,
    controls: node_modules_property_information_lib_util_types_boolean,
    controlsList: node_modules_property_information_lib_util_types_spaceSeparated,
    coords: node_modules_property_information_lib_util_types_number | node_modules_property_information_lib_util_types_commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    "default": node_modules_property_information_lib_util_types_boolean,
    defer: node_modules_property_information_lib_util_types_boolean,
    dir: null,
    dirName: null,
    disabled: node_modules_property_information_lib_util_types_boolean,
    download: node_modules_property_information_lib_util_types_overloadedBoolean,
    draggable: node_modules_property_information_lib_util_types_booleanish,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: node_modules_property_information_lib_util_types_boolean,
    formTarget: null,
    headers: node_modules_property_information_lib_util_types_spaceSeparated,
    height: node_modules_property_information_lib_util_types_number,
    hidden: node_modules_property_information_lib_util_types_boolean,
    high: node_modules_property_information_lib_util_types_number,
    href: null,
    hrefLang: null,
    htmlFor: node_modules_property_information_lib_util_types_spaceSeparated,
    httpEquiv: node_modules_property_information_lib_util_types_spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: node_modules_property_information_lib_util_types_boolean,
    itemId: null,
    itemProp: node_modules_property_information_lib_util_types_spaceSeparated,
    itemRef: node_modules_property_information_lib_util_types_spaceSeparated,
    itemScope: node_modules_property_information_lib_util_types_boolean,
    itemType: node_modules_property_information_lib_util_types_spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: node_modules_property_information_lib_util_types_boolean,
    low: node_modules_property_information_lib_util_types_number,
    manifest: null,
    max: null,
    maxLength: node_modules_property_information_lib_util_types_number,
    media: null,
    method: null,
    min: null,
    minLength: node_modules_property_information_lib_util_types_number,
    multiple: node_modules_property_information_lib_util_types_boolean,
    muted: node_modules_property_information_lib_util_types_boolean,
    name: null,
    nonce: null,
    noModule: node_modules_property_information_lib_util_types_boolean,
    noValidate: node_modules_property_information_lib_util_types_boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: node_modules_property_information_lib_util_types_boolean,
    optimum: node_modules_property_information_lib_util_types_number,
    pattern: null,
    ping: node_modules_property_information_lib_util_types_spaceSeparated,
    placeholder: null,
    playsInline: node_modules_property_information_lib_util_types_boolean,
    poster: null,
    preload: null,
    readOnly: node_modules_property_information_lib_util_types_boolean,
    referrerPolicy: null,
    rel: node_modules_property_information_lib_util_types_spaceSeparated,
    required: node_modules_property_information_lib_util_types_boolean,
    reversed: node_modules_property_information_lib_util_types_boolean,
    rows: node_modules_property_information_lib_util_types_number,
    rowSpan: node_modules_property_information_lib_util_types_number,
    sandbox: node_modules_property_information_lib_util_types_spaceSeparated,
    scope: null,
    scoped: node_modules_property_information_lib_util_types_boolean,
    seamless: node_modules_property_information_lib_util_types_boolean,
    selected: node_modules_property_information_lib_util_types_boolean,
    shape: null,
    size: node_modules_property_information_lib_util_types_number,
    sizes: null,
    slot: null,
    span: node_modules_property_information_lib_util_types_number,
    spellCheck: node_modules_property_information_lib_util_types_booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: node_modules_property_information_lib_util_types_number,
    step: null,
    style: null,
    tabIndex: node_modules_property_information_lib_util_types_number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: node_modules_property_information_lib_util_types_boolean,
    useMap: null,
    value: node_modules_property_information_lib_util_types_booleanish,
    width: node_modules_property_information_lib_util_types_number,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: node_modules_property_information_lib_util_types_spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: node_modules_property_information_lib_util_types_number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: node_modules_property_information_lib_util_types_number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    "char": null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: node_modules_property_information_lib_util_types_boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: node_modules_property_information_lib_util_types_boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: node_modules_property_information_lib_util_types_number,
    // `<img>` and `<object>`
    leftMargin: node_modules_property_information_lib_util_types_number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: node_modules_property_information_lib_util_types_number,
    // `<body>`
    marginWidth: node_modules_property_information_lib_util_types_number,
    // `<body>`
    noResize: node_modules_property_information_lib_util_types_boolean,
    // `<frame>`
    noHref: node_modules_property_information_lib_util_types_boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: node_modules_property_information_lib_util_types_boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: node_modules_property_information_lib_util_types_boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: node_modules_property_information_lib_util_types_number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: node_modules_property_information_lib_util_types_booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: node_modules_property_information_lib_util_types_number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: node_modules_property_information_lib_util_types_number,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: node_modules_property_information_lib_util_types_boolean,
    disableRemotePlayback: node_modules_property_information_lib_util_types_boolean,
    prefix: null,
    property: null,
    results: node_modules_property_information_lib_util_types_number,
    security: null,
    unselectable: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/svg.js



var hast_util_select_node_modules_property_information_lib_svg_svg = node_modules_property_information_lib_util_create_create({
  space: 'svg',
  attributes: {
    accentHeight: 'accent-height',
    alignmentBaseline: 'alignment-baseline',
    arabicForm: 'arabic-form',
    baselineShift: 'baseline-shift',
    capHeight: 'cap-height',
    className: 'class',
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    crossOrigin: 'crossorigin',
    dataType: 'datatype',
    dominantBaseline: 'dominant-baseline',
    enableBackground: 'enable-background',
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    hrefLang: 'hreflang',
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    horizOriginY: 'horiz-origin-y',
    imageRendering: 'image-rendering',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    navDown: 'nav-down',
    navDownLeft: 'nav-down-left',
    navDownRight: 'nav-down-right',
    navLeft: 'nav-left',
    navNext: 'nav-next',
    navPrev: 'nav-prev',
    navRight: 'nav-right',
    navUp: 'nav-up',
    navUpLeft: 'nav-up-left',
    navUpRight: 'nav-up-right',
    onAbort: 'onabort',
    onActivate: 'onactivate',
    onAfterPrint: 'onafterprint',
    onBeforePrint: 'onbeforeprint',
    onBegin: 'onbegin',
    onCancel: 'oncancel',
    onCanPlay: 'oncanplay',
    onCanPlayThrough: 'oncanplaythrough',
    onChange: 'onchange',
    onClick: 'onclick',
    onClose: 'onclose',
    onCopy: 'oncopy',
    onCueChange: 'oncuechange',
    onCut: 'oncut',
    onDblClick: 'ondblclick',
    onDrag: 'ondrag',
    onDragEnd: 'ondragend',
    onDragEnter: 'ondragenter',
    onDragExit: 'ondragexit',
    onDragLeave: 'ondragleave',
    onDragOver: 'ondragover',
    onDragStart: 'ondragstart',
    onDrop: 'ondrop',
    onDurationChange: 'ondurationchange',
    onEmptied: 'onemptied',
    onEnd: 'onend',
    onEnded: 'onended',
    onError: 'onerror',
    onFocus: 'onfocus',
    onFocusIn: 'onfocusin',
    onFocusOut: 'onfocusout',
    onHashChange: 'onhashchange',
    onInput: 'oninput',
    onInvalid: 'oninvalid',
    onKeyDown: 'onkeydown',
    onKeyPress: 'onkeypress',
    onKeyUp: 'onkeyup',
    onLoad: 'onload',
    onLoadedData: 'onloadeddata',
    onLoadedMetadata: 'onloadedmetadata',
    onLoadStart: 'onloadstart',
    onMessage: 'onmessage',
    onMouseDown: 'onmousedown',
    onMouseEnter: 'onmouseenter',
    onMouseLeave: 'onmouseleave',
    onMouseMove: 'onmousemove',
    onMouseOut: 'onmouseout',
    onMouseOver: 'onmouseover',
    onMouseUp: 'onmouseup',
    onMouseWheel: 'onmousewheel',
    onOffline: 'onoffline',
    onOnline: 'ononline',
    onPageHide: 'onpagehide',
    onPageShow: 'onpageshow',
    onPaste: 'onpaste',
    onPause: 'onpause',
    onPlay: 'onplay',
    onPlaying: 'onplaying',
    onPopState: 'onpopstate',
    onProgress: 'onprogress',
    onRateChange: 'onratechange',
    onRepeat: 'onrepeat',
    onReset: 'onreset',
    onResize: 'onresize',
    onScroll: 'onscroll',
    onSeeked: 'onseeked',
    onSeeking: 'onseeking',
    onSelect: 'onselect',
    onShow: 'onshow',
    onStalled: 'onstalled',
    onStorage: 'onstorage',
    onSubmit: 'onsubmit',
    onSuspend: 'onsuspend',
    onTimeUpdate: 'ontimeupdate',
    onToggle: 'ontoggle',
    onUnload: 'onunload',
    onVolumeChange: 'onvolumechange',
    onWaiting: 'onwaiting',
    onZoom: 'onzoom',
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pointerEvents: 'pointer-events',
    referrerPolicy: 'referrerpolicy',
    renderingIntent: 'rendering-intent',
    shapeRendering: 'shape-rendering',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    strokeDashArray: 'stroke-dasharray',
    strokeDashOffset: 'stroke-dashoffset',
    strokeLineCap: 'stroke-linecap',
    strokeLineJoin: 'stroke-linejoin',
    strokeMiterLimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    tabIndex: 'tabindex',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    typeOf: 'typeof',
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    vectorEffect: 'vector-effect',
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    xHeight: 'x-height',
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: 'playbackorder',
    timelineBegin: 'timelinebegin'
  },
  transform: node_modules_property_information_lib_util_case_sensitive_transform_caseSensitiveTransform,
  properties: {
    about: node_modules_property_information_lib_util_types_commaOrSpaceSeparated,
    accentHeight: node_modules_property_information_lib_util_types_number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: node_modules_property_information_lib_util_types_number,
    amplitude: node_modules_property_information_lib_util_types_number,
    arabicForm: null,
    ascent: node_modules_property_information_lib_util_types_number,
    attributeName: null,
    attributeType: null,
    azimuth: node_modules_property_information_lib_util_types_number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: node_modules_property_information_lib_util_types_number,
    by: null,
    calcMode: null,
    capHeight: node_modules_property_information_lib_util_types_number,
    className: node_modules_property_information_lib_util_types_spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: node_modules_property_information_lib_util_types_number,
    diffuseConstant: node_modules_property_information_lib_util_types_number,
    direction: null,
    display: null,
    dur: null,
    divisor: node_modules_property_information_lib_util_types_number,
    dominantBaseline: null,
    download: node_modules_property_information_lib_util_types_boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: node_modules_property_information_lib_util_types_number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: node_modules_property_information_lib_util_types_number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: node_modules_property_information_lib_util_types_number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: node_modules_property_information_lib_util_types_commaSeparated,
    g2: node_modules_property_information_lib_util_types_commaSeparated,
    glyphName: node_modules_property_information_lib_util_types_commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: node_modules_property_information_lib_util_types_number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: node_modules_property_information_lib_util_types_number,
    horizOriginX: node_modules_property_information_lib_util_types_number,
    horizOriginY: node_modules_property_information_lib_util_types_number,
    id: null,
    ideographic: node_modules_property_information_lib_util_types_number,
    imageRendering: null,
    initialVisibility: null,
    "in": null,
    in2: null,
    intercept: node_modules_property_information_lib_util_types_number,
    k: node_modules_property_information_lib_util_types_number,
    k1: node_modules_property_information_lib_util_types_number,
    k2: node_modules_property_information_lib_util_types_number,
    k3: node_modules_property_information_lib_util_types_number,
    k4: node_modules_property_information_lib_util_types_number,
    kernelMatrix: node_modules_property_information_lib_util_types_commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: node_modules_property_information_lib_util_types_number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: node_modules_property_information_lib_util_types_number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: node_modules_property_information_lib_util_types_number,
    overlineThickness: node_modules_property_information_lib_util_types_number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: node_modules_property_information_lib_util_types_number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: node_modules_property_information_lib_util_types_spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: node_modules_property_information_lib_util_types_number,
    pointsAtY: node_modules_property_information_lib_util_types_number,
    pointsAtZ: node_modules_property_information_lib_util_types_number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: node_modules_property_information_lib_util_types_commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: node_modules_property_information_lib_util_types_commaOrSpaceSeparated,
    rev: node_modules_property_information_lib_util_types_commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: node_modules_property_information_lib_util_types_commaOrSpaceSeparated,
    requiredFeatures: node_modules_property_information_lib_util_types_commaOrSpaceSeparated,
    requiredFonts: node_modules_property_information_lib_util_types_commaOrSpaceSeparated,
    requiredFormats: node_modules_property_information_lib_util_types_commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: node_modules_property_information_lib_util_types_number,
    specularExponent: node_modules_property_information_lib_util_types_number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: node_modules_property_information_lib_util_types_number,
    strikethroughThickness: node_modules_property_information_lib_util_types_number,
    string: null,
    stroke: null,
    strokeDashArray: node_modules_property_information_lib_util_types_commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: node_modules_property_information_lib_util_types_number,
    strokeOpacity: node_modules_property_information_lib_util_types_number,
    strokeWidth: null,
    style: null,
    surfaceScale: node_modules_property_information_lib_util_types_number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: node_modules_property_information_lib_util_types_commaOrSpaceSeparated,
    tabIndex: node_modules_property_information_lib_util_types_number,
    tableValues: null,
    target: null,
    targetX: node_modules_property_information_lib_util_types_number,
    targetY: node_modules_property_information_lib_util_types_number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: node_modules_property_information_lib_util_types_commaOrSpaceSeparated,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: node_modules_property_information_lib_util_types_number,
    underlineThickness: node_modules_property_information_lib_util_types_number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: node_modules_property_information_lib_util_types_number,
    values: null,
    vAlphabetic: node_modules_property_information_lib_util_types_number,
    vMathematical: node_modules_property_information_lib_util_types_number,
    vectorEffect: null,
    vHanging: node_modules_property_information_lib_util_types_number,
    vIdeographic: node_modules_property_information_lib_util_types_number,
    version: null,
    vertAdvY: node_modules_property_information_lib_util_types_number,
    vertOriginX: node_modules_property_information_lib_util_types_number,
    vertOriginY: node_modules_property_information_lib_util_types_number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: node_modules_property_information_lib_util_types_number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/index.js
/**
 * @typedef {import('./lib/util/info.js').Info} Info
 * @typedef {import('./lib/util/schema.js').Schema} Schema
 */










var hast_util_select_node_modules_property_information_html = node_modules_property_information_lib_util_merge_merge([hast_util_select_node_modules_property_information_lib_xml_xml, hast_util_select_node_modules_property_information_lib_xlink_xlink, hast_util_select_node_modules_property_information_lib_xmlns_xmlns, hast_util_select_node_modules_property_information_lib_aria_aria, hast_util_select_node_modules_property_information_lib_html_html], 'html');
var hast_util_select_node_modules_property_information_svg = node_modules_property_information_lib_util_merge_merge([hast_util_select_node_modules_property_information_lib_xml_xml, hast_util_select_node_modules_property_information_lib_xlink_xlink, hast_util_select_node_modules_property_information_lib_xmlns_xmlns, hast_util_select_node_modules_property_information_lib_aria_aria, hast_util_select_node_modules_property_information_lib_svg_svg], 'svg');
;// CONCATENATED MODULE: ./node_modules/direction/index.js
var rtlRange = "\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC";
var ltrRange = "A-Za-z\xC0-\xD6\xD8-\xF6" + "\xF8-\u02B8\u0300-\u0590\u0800-\u1FFF\u200E\u2C00-\uFB1C" + "\uFE00-\uFE6F\uFEFD-\uFFFF";
/* eslint-disable no-misleading-character-class */

var rtl = new RegExp('^[^' + ltrRange + ']*[' + rtlRange + ']');
var ltr = new RegExp('^[^' + rtlRange + ']*[' + ltrRange + ']');
/* eslint-enable no-misleading-character-class */

/**
 * Detect the direction of text: left-to-right, right-to-left, or neutral
 *
 * @param {string} value
 * @returns {'rtl'|'ltr'|'neutral'}
 */

function direction(value) {
  var source = String(value || '');
  return rtl.test(source) ? 'rtl' : ltr.test(source) ? 'ltr' : 'neutral';
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/hast-util-to-string/index.js
/**
 * @fileoverview
 *   Get the plain-text value of a hast node.
 * @longdescription
 *   ## Use
 *
 *   ```js
 *   import {h} from 'hastscript'
 *   import {toString} from 'hast-util-to-string'
 *
 *   toString(h('p', 'Alpha'))
 *   //=> 'Alpha'
 *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))
 *   //=> 'Bold and italic.'
 *   ```
 *
 *   ## API
 *
 *   ### `toString(node)`
 *
 *   Transform a node to a string.
 */

/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Element} Element
 * @typedef {Root|Root['children'][number]} Node
 */

/**
 * Get the plain-text value of a hast node.
 *
 * @param {Node} node
 * @returns {string}
 */
function node_modules_hast_util_to_string_toString(node) {
  // “The concatenation of data of all the Text node descendants of the context
  // object, in tree order.”
  if ('children' in node) {
    return node_modules_hast_util_to_string_all(node);
  } // “Context object’s data.”


  return 'value' in node ? node.value : '';
}
/**
 * @param {Node} node
 * @returns {string}
 */

function node_modules_hast_util_to_string_one(node) {
  if (node.type === 'text') {
    return node.value;
  }

  return 'children' in node ? node_modules_hast_util_to_string_all(node) : '';
}
/**
 * @param {Root|Element} node
 * @returns {string}
 */


function node_modules_hast_util_to_string_all(node) {
  var index = -1;
  /** @type {string[]} */

  var result = [];

  while (++index < node.children.length) {
    result[index] = node_modules_hast_util_to_string_one(node.children[index]);
  }

  return result.join('');
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/unist-util-visit/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 * @typedef {import('./complex-types').Visitor} Visitor
 */


/**
 * Visit children of tree which pass a test
 *
 * @param tree Abstract syntax tree to walk
 * @param test Test, optional
 * @param visitor Function to run for each node
 * @param reverse Fisit the tree in reverse, defaults to false
 */

var hast_util_select_node_modules_unist_util_visit_visit =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {import('./complex-types').Visitor} visitor
 * @param {boolean} [reverse]
 */
function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  visitParents(tree, test, overload, reverse);
  /**
   * @param {Node} node
   * @param {Array.<Parent>} parents
   */

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};
;// CONCATENATED MODULE: ./node_modules/hast-util-select/lib/util.js
/**
 * @typedef {import('./types.js').Node} Node
 * @typedef {import('./types.js').Element} Element
 * @typedef {import('./types.js').Parent} Parent
 * @typedef {import('hast-util-is-element').AssertPredicate<Element>} IsElement
 */

/**
 * @param {Node} node
 * @returns {node is Parent}
 */

function util_parent(node) {
  // @ts-expect-error: hush.
  return Array.isArray(node.children);
}
/** @type {IsElement} */
// @ts-expect-error it works.

var util_element = convertElement();
;// CONCATENATED MODULE: ./node_modules/hast-util-select/lib/enter-state.js
/**
 * @typedef {import('./types.js').SelectState} SelectState
 * @typedef {import('./types.js').HastNode} HastNode
 * @typedef {import('./types.js').ElementChild} ElementChild
 * @typedef {import('./types.js').Direction} Direction
 * @typedef {import('unist-util-visit').Visitor<ElementChild>} Visitor
 */






/**
 * @param {SelectState} state
 * @param {HastNode} node
 * @returns {() => void}
 */
// eslint-disable-next-line complexity

function enterState(state, node) {
  var schema = state.schema;
  var language = state.language;
  var currentDirection = state.direction;
  var editableOrEditingHost = state.editableOrEditingHost;
  /** @type {Direction|undefined} */

  var dirInferred;
  /** @type {boolean|undefined} */

  var found;

  if (util_element(node) && node.properties) {
    var lang = node.properties.xmlLang || node.properties.lang;
    var type = node.properties.type || 'text';
    var dir = dirProperty(node);

    if (lang !== undefined && lang !== null) {
      state.language = String(lang);
      found = true;
    }

    if (schema && schema.space === 'html') {
      if (node.properties.contentEditable === 'true') {
        state.editableOrEditingHost = true;
        found = true;
      }

      if (isElement(node, 'svg')) {
        state.schema = hast_util_select_node_modules_property_information_svg;
        found = true;
      } // See: <https://html.spec.whatwg.org/#the-directionality>.
      // Explicit `[dir=rtl]`.


      if (dir === 'rtl') {
        dirInferred = dir;
      } else if ( // Explicit `[dir=ltr]`.
      dir === 'ltr' || // HTML with an invalid or no `[dir]`.
      dir !== 'auto' && isElement(node, 'html') || // `input[type=tel]` with an invalid or no `[dir]`.
      dir !== 'auto' && isElement(node, 'input') && type === 'tel') {
        dirInferred = 'ltr'; // `[dir=auto]` or `bdi` with an invalid or no `[dir]`.
      } else if (dir === 'auto' || isElement(node, 'bdi')) {
        if (isElement(node, 'textarea')) {
          // Check contents of `<textarea>`.
          dirInferred = dirBidi(node_modules_hast_util_to_string_toString(node));
        } else if (isElement(node, 'input') && (type === 'email' || type === 'search' || type === 'tel' || type === 'text')) {
          // Check value of `<input>`.
          // @ts-expect-error something is `never` in types but this is needed.
          dirInferred = node.properties.value ? // @ts-expect-error Assume string
          dirBidi(node.properties.value) : 'ltr';
        } else {
          // Check text nodes in `node`.
          hast_util_select_node_modules_unist_util_visit_visit(node, inferDirectionality);
        }
      }

      if (dirInferred) {
        state.direction = dirInferred;
        found = true;
      }
    } // Turn off editing mode in non-HTML spaces.
    else if (state.editableOrEditingHost) {
      state.editableOrEditingHost = false;
      found = true;
    }
  }

  return found ? reset : noop;

  function reset() {
    state.schema = schema;
    state.language = language;
    state.direction = currentDirection;
    state.editableOrEditingHost = editableOrEditingHost;
  }
  /** @type {Visitor} */


  function inferDirectionality(child) {
    if (child.type === 'text') {
      dirInferred = dirBidi(child.value);
      return dirInferred ? EXIT : null;
    }

    if (child !== node && (isElement(child, ['bdi', 'script', 'style', 'textare']) || dirProperty(child))) {
      return SKIP;
    }
  }
}
/**
 * @param {string} value
 * @returns {Direction|undefined}
 */

function dirBidi(value) {
  var result = direction(value);
  return result === 'neutral' ? undefined : result;
}
/**
 * @param {ElementChild} node
 * @returns {Direction|undefined}
 */


function dirProperty(node) {
  var value = util_element(node) && node.properties && typeof node.properties.dir === 'string' ? node.properties.dir.toLowerCase() : undefined;
  return value === 'auto' || value === 'ltr' || value === 'rtl' ? value : undefined;
}

function noop() {}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/lib/nest.js
/**
 * @typedef {import('./types.js').Rule} Rule
 * @typedef {import('./types.js').Node} Node
 * @typedef {import('./types.js').Element} Element
 * @typedef {import('./types.js').Parent} Parent
 * @typedef {import('./types.js').SelectState} SelectState
 * @typedef {import('./types.js').SelectIterator} SelectIterator
 * @typedef {import('./types.js').Handler} Handler
 */



var nest_own = {}.hasOwnProperty;
var handle = zwitch('nestingOperator', {
  // @ts-expect-error: hush.
  unknown: unknownNesting,
  // @ts-expect-error: hush.
  invalid: topScan,
  // `undefined` is the top query selector.
  handlers: {
    // @ts-expect-error: hush.
    "null": descendant,
    // `null` is the descendant combinator.
    // @ts-expect-error: hush.
    '>': child,
    // @ts-expect-error: hush.
    '+': adjacentSibling,
    // @ts-expect-error: hush.
    '~': generalSibling
  }
});
/** @type {Handler} */

function nest(query, node, index, parent, state) {
  handle(query, node, index, parent, state);
} // Shouldn’t be called, parser gives correct data.

/* c8 ignore next 6 */

/**
 * @param {{[x: string]: unknown, type: string}} query
 */

function unknownNesting(query) {
  throw new Error('Unexpected nesting `' + query.nestingOperator + '`');
}
/** @type {Handler} */


function topScan(query, node, index, parent, state) {
  // Shouldn’t happen.

  /* c8 ignore next 3 */
  if (parent || index === null) {
    throw new Error('topScan is supposed to be called from the root node');
  } // Shouldn’t happen.

  /* c8 ignore next 3 */


  if (!state.iterator) {
    throw new Error('Expected `iterator`');
  }

  state.iterator(query, node, index, parent, state);
  if (!state.shallow) descendant(query, node, index, parent, state);
}
/** @type {Handler} */


function descendant(query, node, index, parent, state) {
  var previous = state.iterator;
  state.iterator = iterator;
  child(query, node, index, parent, state);
  /** @type {SelectIterator} */

  function iterator(query, node, index, parent, state) {
    // Shouldn’t happen.

    /* c8 ignore next 3 */
    if (!previous) {
      throw new Error('Expected `iterator`');
    }

    state.iterator = previous;
    previous(query, node, index, parent, state);
    state.iterator = iterator;
    if (state.one && state.found) return;
    child(query, node, index, parent, state);
  }
}
/** @type {Handler} */


function child(query, node, _1, _2, state) {
  if (!util_parent(node)) return;
  if (node.children.length === 0) return;
  indexedSearch(query, node, state);
}
/** @type {Handler} */


function adjacentSibling(query, _, index, parent, state) {
  // Shouldn’t happen.

  /* c8 ignore next */
  if (!parent || index === null) return;
  indexedSearch(query, parent, state, index + 1, true);
}
/** @type {Handler} */


function generalSibling(query, _, index, parent, state) {
  // Shouldn’t happen.

  /* c8 ignore next */
  if (!parent || index === null) return;
  indexedSearch(query, parent, state, index + 1);
}
/**
 * Handles `typeIndex` and `typeCount` properties for every walker.
 *
 * @param {Rule} query
 * @param {Parent} parent
 * @param {SelectState} state
 * @param {number} [from=0]
 * @param {boolean} [firstElementOnly=false]
 */


function indexedSearch(query, parent, state, from, firstElementOnly) {
  var handle = state.index ? delay : add;
  var children = parent.children;
  var elements = 0;
  var index = -1;
  /** @type {Object.<string, number>} */

  var types = {};
  /** @type {Array.<Function>} */

  var delayed = []; // Start looking at `from`

  if (from === undefined || from === null) from = 0; // Exit if there are no further nodes.

  if (from >= children.length) return; // If we need to index for types, do so for all elements before `from`.

  if (state.index) {
    while (++index < from) {
      var _child = children[index];
      if (util_element(_child)) count(_child.tagName);
    }
  }

  index = from - 1;

  while (++index < children.length) {
    var _child2 = children[index]; // Only check elements.
    // Check either all elements, or only check the first sibling

    if (util_element(_child2)) {
      handle(_child2, index); // Stop if we’re looking for one node and it’s already found.

      if (state.one && state.found) return;
      if (firstElementOnly) break;
    }
  }

  if (state.index) {
    index = -1;

    while (++index < delayed.length) {
      delayed[index]();
      if (state.one && state.found) return;
    }
  }
  /**
   * @param {Element} node
   * @param {number} childIndex
   */


  function delay(node, childIndex) {
    var elementsBefore = elements;
    var elementsByTypeBefore = nest_own.call(types, node.tagName) ? types[node.tagName] : 0;
    count(node.tagName);
    delayed.push(fn);

    function fn() {
      // Before counting further elements:
      state.elementIndex = elementsBefore;
      state.typeIndex = elementsByTypeBefore; // After counting all elements.

      state.elementCount = elements;
      state.typeCount = types[node.tagName];
      add(node, childIndex);
    }
  }
  /**
   * @param {Element} node
   * @param {number} childIndex
   */


  function add(node, childIndex) {
    var exit = enterState(state, node); // Shouldn’t happen.

    /* c8 ignore next 3 */

    if (!state.iterator) {
      throw new Error('Expected `iterator`');
    }

    state.iterator(query, node, childIndex, parent, state);
    exit();
  }
  /**
   * @param {string} name
   */


  function count(name) {
    if (!nest_own.call(types, name)) types[name] = 0;
    elements++;
    types[name]++;
  }
}
;// CONCATENATED MODULE: ./node_modules/bcp-47-match/index.js
/**
 * See <https://tools.ietf.org/html/rfc4647#section-3.1>
 * for more information on the algorithms.
 */

/**
 * @typedef {string} Tag
 * @typedef {Array<Tag>} Tags
 * @typedef {string} Range
 * @typedef {Array<Range>} Ranges
 */

/**
 * @callback Check
 * @param {Tag} tag
 * @param {Range} range
 * @returns {boolean}
 */

/**
 * @callback Filter
 * @param {Tag|Tags} tag
 * @param {Range|Ranges} [ranges]
 * @returns {Tag}
 */

/**
 * @callback Lookup
 * @param {Tag|Tags} tag
 * @param {Range|Ranges} [ranges]
 * @returns {Tag}
 */

/**
 * Factory to perform a filter or a lookup.
 * This factory creates a function that accepts a list of tags and a list of
 * ranges, and contains logic to exit early for lookups.
 * `check` just has to deal with one tag and one range.
 * This match function iterates over ranges, and for each range,
 * iterates over tags.  That way, earlier ranges matching any tag have
 * precedence over later ranges.
 *
 * @type {{
 *   (check: Check, filter: true): Filter
 *   (check: Check, filter?: false): Lookup
 * }}
 */
// prettier-ignore
var factory =
/**
 * @param {Check} check
 * @param {boolean} [filter=false]
 */
function factory(check, filter) {
  return match;
  /**
   * @param {Tag|Tags} tags
   * @param {Range|Ranges} [ranges='*']
   * @returns {Tag|Tags|undefined}
   */

  function match(tags, ranges) {
    var left = bcp_47_match_cast(tags, 'tag');
    var right = bcp_47_match_cast(ranges === null || ranges === undefined ? '*' : ranges, 'range');
    /** @type {Tags} */

    var matches = [];
    var rightIndex = -1;

    while (++rightIndex < right.length) {
      var range = right[rightIndex].toLowerCase(); // Ignore wildcards in lookup mode.

      if (!filter && range === '*') continue;
      var leftIndex = -1;
      /** @type {Tags} */

      var next = [];

      while (++leftIndex < left.length) {
        if (check(left[leftIndex].toLowerCase(), range)) {
          // Exit if this is a lookup and we have a match.
          if (!filter) return left[leftIndex];
          matches.push(left[leftIndex]);
        } else {
          next.push(left[leftIndex]);
        }
      }

      left = next;
    } // If this is a filter, return the list.  If it’s a lookup, we didn’t find
    // a match, so return `undefined`.


    return filter ? matches : undefined;
  }
};
/**
 * Basic Filtering (Section 3.3.1) matches a language priority list consisting
 * of basic language ranges (Section 2.1) to sets of language tags.
 * @param {Tag|Tags} tags
 * @param {Range|Ranges} [ranges]
 * @returns {Tags}
 */


var basicFilter = factory(
/** @type {Check} */
function (tag, range) {
  return range === '*' || tag === range || tag.includes(range + '-');
}, true);
/**
 * Extended Filtering (Section 3.3.2) matches a language priority list
 * consisting of extended language ranges (Section 2.2) to sets of language
 * tags.
 * @param {Tag|Tags} tags
 * @param {Range|Ranges} [ranges]
 * @returns {Tags}
 */

var extendedFilter = factory(
/** @type {Check} */
function (tag, range) {
  // 3.3.2.1
  var left = tag.split('-');
  var right = range.split('-');
  var leftIndex = 0;
  var rightIndex = 0; // 3.3.2.2

  if (right[rightIndex] !== '*' && left[leftIndex] !== right[rightIndex]) {
    return false;
  }

  leftIndex++;
  rightIndex++; // 3.3.2.3

  while (rightIndex < right.length) {
    // 3.3.2.3.A
    if (right[rightIndex] === '*') {
      rightIndex++;
      continue;
    } // 3.3.2.3.B


    if (!left[leftIndex]) return false; // 3.3.2.3.C

    if (left[leftIndex] === right[rightIndex]) {
      leftIndex++;
      rightIndex++;
      continue;
    } // 3.3.2.3.D


    if (left[leftIndex].length === 1) return false; // 3.3.2.3.E

    leftIndex++;
  } // 3.3.2.4


  return true;
}, true);
/**
 * Lookup (Section 3.4) matches a language priority list consisting of basic
 * language ranges to sets of language tags to find the one exact language tag
 * that best matches the range.
 * @param {Tag|Tags} tags
 * @param {Range|Ranges} [ranges]
 * @returns {Tag}
 */

var lookup = factory(
/** @type {Check} */
function (tag, range) {
  var right = range;
  /* eslint-disable-next-line no-constant-condition */

  while (true) {
    if (right === '*' || tag === right) return true;
    var index = right.lastIndexOf('-');
    if (index < 0) return false;
    if (right.charAt(index - 2) === '-') index -= 2;
    right = right.slice(0, index);
  }
});
/**
 * Validate tags or ranges, and cast them to arrays.
 *
 * @param {string|Array<string>} values
 * @param {string} name
 * @returns {Array<string>}
 */

function bcp_47_match_cast(values, name) {
  var value = values && typeof values === 'string' ? [values] : values;

  if (!value || typeof value !== 'object' || !('length' in value)) {
    throw new Error('Invalid ' + name + ' `' + value + '`, expected non-empty string');
  }

  return value;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/comma-separated-tokens/index.js
/**
 * @typedef {Object} StringifyOptions
 * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).
 * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).
 */

/**
 * Parse comma separated tokens to an array.
 *
 * @param {string} value
 * @returns {Array.<string>}
 */
function hast_util_select_node_modules_comma_separated_tokens_parse(value) {
  /** @type {Array.<string>} */
  var tokens = [];
  var input = String(value || '');
  var index = input.indexOf(',');
  var start = 0;
  /** @type {boolean} */

  var end;
  /** @type {string} */

  var token;

  while (!end) {
    if (index === -1) {
      index = input.length;
      end = true;
    }

    token = input.slice(start, index).trim();

    if (token || !end) {
      tokens.push(token);
    }

    start = index + 1;
    index = input.indexOf(',', start);
  }

  return tokens;
}
/**
 * Serialize an array of strings to comma separated tokens.
 *
 * @param {Array.<string|number>} values
 * @param {StringifyOptions} [options]
 * @returns {string}
 */

function hast_util_select_node_modules_comma_separated_tokens_stringify(values, options) {
  var settings = options || {}; // Ensure the last empty entry is seen.

  if (values[values.length - 1] === '') {
    values = values.concat('');
  }

  return values.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/lib/pseudo.js
/**
 * @typedef {import('./types.js').Rule} Rule
 * @typedef {import('./types.js').RulePseudo} RulePseudo
 * @typedef {import('./types.js').RulePseudoNth} RulePseudoNth
 * @typedef {import('./types.js').RulePseudoSelector} RulePseudoSelector
 * @typedef {import('./types.js').Parent} Parent
 * @typedef {import('./types.js').Selector} Selector
 * @typedef {import('./types.js').Selectors} Selectors
 * @typedef {import('./types.js').SelectState} SelectState
 * @typedef {import('./types.js').Element} Element
 * @typedef {import('./types.js').ElementChild} ElementChild
 */







var pseudo_handle = zwitch('name', {
  // @ts-expect-error: hush.
  unknown: unknownPseudo,
  invalid: invalidPseudo,
  handlers: {
    // @ts-expect-error: hush.
    any: matches,
    // @ts-expect-error: hush.
    'any-link': anyLink,
    // @ts-expect-error: hush.
    blank: blank,
    // @ts-expect-error: hush.
    checked: checked,
    // @ts-expect-error: hush.
    dir: dir,
    // @ts-expect-error: hush.
    disabled: disabled,
    // @ts-expect-error: hush.
    empty: empty,
    // @ts-expect-error: hush.
    enabled: enabled,
    // @ts-expect-error: hush.
    'first-child': firstChild,
    // @ts-expect-error: hush.
    'first-of-type': firstOfType,
    // @ts-expect-error: hush.
    has: has,
    // @ts-expect-error: hush.
    lang: lang,
    // @ts-expect-error: hush.
    'last-child': lastChild,
    // @ts-expect-error: hush.
    'last-of-type': lastOfType,
    // @ts-expect-error: hush.
    matches: matches,
    // @ts-expect-error: hush.
    not: not,
    // @ts-expect-error: hush.
    'nth-child': nthChild,
    // @ts-expect-error: hush.
    'nth-last-child': nthLastChild,
    // @ts-expect-error: hush.
    'nth-of-type': nthOfType,
    // @ts-expect-error: hush.
    'nth-last-of-type': nthLastOfType,
    // @ts-expect-error: hush.
    'only-child': onlyChild,
    // @ts-expect-error: hush.
    'only-of-type': onlyOfType,
    // @ts-expect-error: hush.
    optional: optional,
    // @ts-expect-error: hush.
    'read-only': readOnly,
    // @ts-expect-error: hush.
    'read-write': readWrite,
    // @ts-expect-error: hush.
    required: required,
    // @ts-expect-error: hush.
    root: pseudo_root,
    // @ts-expect-error: hush.
    scope: scope
  }
});
pseudo.needsIndex = ['first-child', 'first-of-type', 'last-child', 'last-of-type', 'nth-child', 'nth-last-child', 'nth-of-type', 'nth-last-of-type', 'only-child', 'only-of-type'];
/**
 * @param {Rule} query
 * @param {Element} element
 * @param {number|null} index
 * @param {Parent|null} parent
 * @param {SelectState} state
 * @returns {boolean}
 */

function pseudo(query, element, index, parent, state) {
  var pseudos = query.pseudos;
  var offset = -1;

  while (++offset < pseudos.length) {
    if (!pseudo_handle(pseudos[offset], element, index, parent, state)) return false;
  }

  return true;
}
/**
 * @param {RulePseudoSelector} query
 * @param {Element} element
 * @param {number|null} _1
 * @param {Parent|null} _2
 * @param {SelectState} state
 * @returns {boolean}
 */

function matches(query, element, _1, _2, state) {
  var shallow = state.shallow;
  var one = state.one;
  state.shallow = true;
  state.one = true;
  var result = any_any(query.value, element, state)[0] === element;
  state.shallow = shallow;
  state.one = one;
  return result;
}
/**
 * @param {RulePseudoSelector} query
 * @param {Element} element
 * @param {number|null} index
 * @param {Parent|null} parent
 * @param {SelectState} state
 * @returns {boolean}
 */


function not(query, element, index, parent, state) {
  return !matches(query, element, index, parent, state);
}
/**
 * @param {RulePseudo} _
 * @param {Element} element
 * @returns {boolean}
 */


function anyLink(_, element) {
  return isElement(element, ['a', 'area', 'link']) && hasProperty(element, 'href');
}
/**
 * @param {RulePseudo} _
 * @param {Element} element
 * @returns {boolean}
 */


function checked(_, element) {
  if (isElement(element, ['input', 'menuitem'])) {
    return Boolean(element.properties && (element.properties.type === 'checkbox' || element.properties.type === 'radio') && hasProperty(element, 'checked'));
  }

  if (isElement(element, 'option')) {
    return hasProperty(element, 'selected');
  }

  return false;
}
/**
 * @param {RulePseudo} query
 * @param {Element} _1
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function dir(query, _1, _2, _3, state) {
  return state.direction === query.value;
}
/**
 * @param {RulePseudo} _
 * @param {Element} element
 * @returns {boolean}
 */


function disabled(_, element) {
  return isElement(element, ['button', 'input', 'select', 'textarea', 'optgroup', 'option', 'menuitem', 'fieldset']) && hasProperty(element, 'disabled');
}
/**
 * @param {RulePseudo} query
 * @param {Element} element
 * @returns {boolean}
 */


function enabled(query, element) {
  return !disabled(query, element);
}
/**
 * @param {RulePseudo} _
 * @param {Element} element
 * @returns {boolean}
 */


function required(_, element) {
  return isElement(element, ['input', 'textarea', 'select']) && hasProperty(element, 'required');
}
/**
 * @param {RulePseudo} query
 * @param {Element} element
 * @returns {boolean}
 */


function optional(query, element) {
  return !required(query, element);
}
/**
 * @param {RulePseudo} _
 * @param {Element} element
 * @param {number|null} _1
 * @param {Parent|null} _2
 * @param {SelectState} state
 * @returns {boolean}
 */


function readWrite(_, element, _1, _2, state) {
  return isElement(element, ['input', 'textarea']) ? !hasProperty(element, 'readOnly') && !hasProperty(element, 'disabled') : Boolean(state.editableOrEditingHost);
}
/**
 * @param {RulePseudo} query
 * @param {Element} element
 * @param {number|null} index
 * @param {Parent|null} parent
 * @param {SelectState} state
 * @returns {boolean}
 */


function readOnly(query, element, index, parent, state) {
  return !readWrite(query, element, index, parent, state);
}
/**
 * @param {RulePseudo} _
 * @param {Element} element
 * @param {number|null} _1
 * @param {Parent|null} parent
 * @param {SelectState} state
 * @returns {boolean}
 */


function pseudo_root(_, element, _1, parent, state) {
  return Boolean((!parent || parent.type === 'root') && state.schema && (state.schema.space === 'html' || state.schema.space === 'svg') && isElement(element, ['html', 'svg']));
}
/**
 * @param {RulePseudo} _
 * @param {Element} element
 * @param {number|null} _1
 * @param {Parent|null} _2
 * @param {SelectState} state
 * @returns {boolean}
 */


function scope(_, element, _1, _2, state) {
  return Boolean(isElement(element) && state.scopeElements && state.scopeElements.includes(element));
}
/**
 * @param {RulePseudo} _
 * @param {Element} element
 * @returns {boolean}
 */


function empty(_, element) {
  return !someChildren(element, check);
  /**
   * @param {ElementChild} child
   * @returns {boolean}
   */

  function check(child) {
    return child.type === 'element' || child.type === 'text';
  }
}
/**
 * @param {RulePseudo} _
 * @param {Element} element
 * @returns {boolean}
 */


function blank(_, element) {
  return !someChildren(element, check);
  /**
   * @param {ElementChild} child
   * @returns {boolean}
   */

  function check(child) {
    return child.type === 'element' || child.type === 'text' && !whitespace(child);
  }
}
/**
 * @param {RulePseudo} query
 * @param {Element} _1
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function firstChild(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return state.elementIndex === 0;
}
/**
 * @param {RulePseudo} query
 * @param {Element} _1
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function lang(query, _1, _2, _3, state) {
  return state.language !== '' && state.language !== undefined && state.language !== null && // @ts-expect-error never `selectors`.
  extendedFilter(state.language, hast_util_select_node_modules_comma_separated_tokens_parse(query.value)).length > 0;
}
/**
 * @param {RulePseudo} query
 * @param {Element} _1
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function lastChild(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return Boolean(state.elementCount && state.elementIndex === state.elementCount - 1);
}
/**
 * @param {RulePseudo} query
 * @param {Element} _1
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function onlyChild(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return state.elementCount === 1;
}
/**
 * @param {RulePseudoNth} query
 * @param {Element} _1
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function nthChild(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return typeof state.elementIndex === 'number' && query.value(state.elementIndex);
}
/**
 * @param {RulePseudoNth} query
 * @param {Element} _1
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function nthLastChild(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return Boolean(typeof state.elementCount === 'number' && typeof state.elementIndex === 'number' && query.value(state.elementCount - state.elementIndex - 1));
}
/**
 * @param {RulePseudoNth} query
 * @param {Element} _1
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function nthOfType(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return typeof state.typeIndex === 'number' && query.value(state.typeIndex);
}
/**
 * @param {RulePseudoNth} query
 * @param {Element} _1
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function nthLastOfType(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return typeof state.typeCount === 'number' && typeof state.typeIndex === 'number' && query.value(state.typeCount - 1 - state.typeIndex);
}
/**
 * @param {RulePseudo} query
 * @param {Element} _1
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function firstOfType(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return state.typeIndex === 0;
}
/**
 * @param {RulePseudo} query
 * @param {Element} _1
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function lastOfType(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return typeof state.typeIndex === 'number' && typeof state.typeCount === 'number' && state.typeIndex === state.typeCount - 1;
}
/**
 * @param {RulePseudo} query
 * @param {Element} _1
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function onlyOfType(query, _1, _2, _3, state) {
  assertDeep(state, query);
  return state.typeCount === 1;
}
/**
 * @param {Element} element
 * @param {(child: ElementChild) => boolean} check
 * @returns {boolean}
 */


function someChildren(element, check) {
  var children = element.children;
  var index = -1;

  while (++index < children.length) {
    if (check(children[index])) return true;
  }

  return false;
} // Shouldn’t be called, parser gives correct data.

/* c8 ignore next 3 */


function invalidPseudo() {
  throw new Error('Invalid pseudo-selector');
}
/**
 * @param {RulePseudo} query
 */


function unknownPseudo(query) {
  if (query.name) {
    throw new Error('Unknown pseudo-selector `' + query.name + '`');
  }

  throw new Error('Unexpected pseudo-element or empty pseudo-class');
}
/**
 * @param {SelectState} state
 * @param {RulePseudo|RulePseudoNth} query
 */


function assertDeep(state, query) {
  if (state.shallow) {
    throw new Error('Cannot use `:' + query.name + '` without parent');
  }
}
/**
 * @param {RulePseudoSelector} query
 * @param {Element} element
 * @param {number|null} _2
 * @param {Parent|null} _3
 * @param {SelectState} state
 * @returns {boolean}
 */


function has(query, element, _2, _3, state) {
  var shallow = state.shallow;
  var one = state.one;
  var scopeElements = state.scopeElements;
  var value = appendScope(query.value);
  state.shallow = false;
  state.one = true;
  state.scopeElements = [element];
  var result = any_any(value, element, state).length > 0;
  state.shallow = shallow;
  state.one = one;
  state.scopeElements = scopeElements;
  return result;
}
/**
 * @param {Selector} value
 * @returns {Selectors}
 */


function appendScope(value) {
  /** @type {Selectors} */
  var selector = value.type === 'ruleSet' ? {
    type: 'selectors',
    selectors: [value]
  } : value;
  var index = -1;

  while (++index < selector.selectors.length) {
    var rule = selector.selectors[index].rule;
    rule.nestingOperator = null;

    if (!rule.pseudos || rule.pseudos.length !== 1 || rule.pseudos[0].name !== 'scope') {
      selector.selectors[index] = {
        type: 'ruleSet',
        // @ts-expect-error pseudos are fine w/ just a name!
        rule: {
          type: 'rule',
          rule: rule,
          pseudos: [{
            name: 'scope'
          }]
        }
      };
    }
  }

  return selector;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/property-information/lib/find.js
/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */



var hast_util_select_node_modules_property_information_lib_find_valid = /^data[-\w.:]+$/i;
var hast_util_select_node_modules_property_information_lib_find_dash = /-[a-z]/g;
var hast_util_select_node_modules_property_information_lib_find_cap = /[A-Z]/g;
/**
 * @param {Schema} schema
 * @param {string} value
 * @returns {Info}
 */

function hast_util_select_node_modules_property_information_lib_find_find(schema, value) {
  var normal = hast_util_select_node_modules_property_information_lib_normalize_normalize(value);
  var prop = value;
  var Type = node_modules_property_information_lib_util_info_Info;

  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }

  if (normal.length > 4 && normal.slice(0, 4) === 'data' && hast_util_select_node_modules_property_information_lib_find_valid.test(value)) {
    // Attribute or property.
    if (value.charAt(4) === '-') {
      // Turn it into a property.
      var rest = value.slice(5).replace(hast_util_select_node_modules_property_information_lib_find_dash, hast_util_select_node_modules_property_information_lib_find_camelcase);
      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      // Turn it into an attribute.
      var _rest = value.slice(4);

      if (!hast_util_select_node_modules_property_information_lib_find_dash.test(_rest)) {
        var dashes = _rest.replace(hast_util_select_node_modules_property_information_lib_find_cap, hast_util_select_node_modules_property_information_lib_find_kebab);

        if (dashes.charAt(0) !== '-') {
          dashes = '-' + dashes;
        }

        value = 'data' + dashes;
      }
    }

    Type = node_modules_property_information_lib_util_defined_info_DefinedInfo;
  }

  return new Type(prop, value);
}
/**
 * @param {string} $0
 * @returns {string}
 */

function hast_util_select_node_modules_property_information_lib_find_kebab($0) {
  return '-' + $0.toLowerCase();
}
/**
 * @param {string} $0
 * @returns {string}
 */


function hast_util_select_node_modules_property_information_lib_find_camelcase($0) {
  return $0.charAt(1).toUpperCase();
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/node_modules/space-separated-tokens/index.js
/**
 * Parse space separated tokens to an array of strings.
 *
 * @param {string} value Space separated tokens
 * @returns {Array.<string>} Tokens
 */
function hast_util_select_node_modules_space_separated_tokens_parse(value) {
  var input = String(value || '').trim();
  return input ? input.split(/[ \t\n\r\f]+/g) : [];
}
/**
 * Serialize an array of strings as space separated tokens.
 *
 * @param {Array.<string|number>} values Tokens
 * @returns {string} Space separated tokens
 */

function hast_util_select_node_modules_space_separated_tokens_stringify(values) {
  return values.join(' ').trim();
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/lib/attribute.js
/**
 * @typedef {import('./types.js').Rule} Rule
 * @typedef {import('./types.js').RuleAttr} RuleAttr
 * @typedef {import('./types.js').Element} Element
 * @typedef {import('./types.js').Schema} Schema
 * @typedef {import('./types.js').Info} Info
 * @typedef {import('./types.js').PropertyValue} PropertyValue
 */





var attribute_handle = zwitch('operator', {
  // @ts-expect-error: hush.
  unknown: unknownOperator,
  // @ts-expect-error: hush.
  invalid: exists,
  handlers: {
    // @ts-expect-error: hush.
    '=': exact,
    // @ts-expect-error: hush.
    '~=': spaceSeparatedList,
    // @ts-expect-error: hush.
    '|=': exactOrPrefix,
    // @ts-expect-error: hush.
    '^=': begins,
    // @ts-expect-error: hush.
    '$=': ends,
    // @ts-expect-error: hush.
    '*=': contains
  }
});
/**
 * @param {Rule} query
 * @param {Element} element
 * @param {Schema} schema
 * @returns {boolean}
 */

function attribute(query, element, schema) {
  var attrs = query.attrs;
  var index = -1;

  while (++index < attrs.length) {
    if (!attribute_handle(attrs[index], element, hast_util_select_node_modules_property_information_lib_find_find(schema, attrs[index].name))) {
      return false;
    }
  }

  return true;
}
/**
 * `[attr]`
 *
 * @param {RuleAttr} _
 * @param {Element} element
 * @param {Info} info
 * @returns {boolean}
 */

function exists(_, element, info) {
  return hasProperty(element, info.property);
}
/**
 * `[attr=value]`
 *
 * @param {RuleAttr} query
 * @param {Element} element
 * @param {Info} info
 * @returns {boolean}
 */


function exact(query, element, info) {
  return Boolean(hasProperty(element, info.property) && element.properties && normalizeValue(element.properties[info.property], info) === query.value);
}
/**
 * `[attr~=value]`
 *
 * @param {RuleAttr} query
 * @param {Element} element
 * @param {Info} info
 * @returns {boolean}
 */


function spaceSeparatedList(query, element, info) {
  var value = element.properties && element.properties[info.property];
  return (// If this is a comma-separated list, and the query is contained in it, return
    // true.
    !info.commaSeparated && value && typeof value === 'object' && query.value && value.includes(query.value) || // For all other values (including comma-separated lists), return whether this
    // is an exact match.
    hasProperty(element, info.property) && normalizeValue(value, info) === query.value
  );
}
/**
 * `[attr|=value]`
 *
 * @param {RuleAttr} query
 * @param {Element} element
 * @param {Info} info
 * @returns {boolean}
 */


function exactOrPrefix(query, element, info) {
  var value = normalizeValue(element.properties && element.properties[info.property], info);
  return Boolean(hasProperty(element, info.property) && query.value && (value === query.value || value.slice(0, query.value.length) === query.value && value.charAt(query.value.length) === '-'));
}
/**
 * `[attr^=value]`
 *
 * @param {RuleAttr} query
 * @param {Element} element
 * @param {Info} info
 * @returns {boolean}
 */


function begins(query, element, info) {
  return Boolean(hasProperty(element, info.property) && element.properties && query.value && normalizeValue(element.properties[info.property], info).slice(0, query.value.length) === query.value);
}
/**
 * `[attr$=value]`
 *
 * @param {RuleAttr} query
 * @param {Element} element
 * @param {Info} info
 * @returns {boolean}
 */


function ends(query, element, info) {
  return Boolean(hasProperty(element, info.property) && element.properties && query.value && normalizeValue(element.properties[info.property], info).slice(-query.value.length) === query.value);
}
/**
 * `[attr*=value]`
 *
 * @param {RuleAttr} query
 * @param {Element} element
 * @param {Info} info
 * @returns {boolean}
 */


function contains(query, element, info) {
  return Boolean(hasProperty(element, info.property) && element.properties && query.value && normalizeValue(element.properties[info.property], info).includes(query.value));
} // Shouldn’t be called, Parser throws an error instead.

/**
 * @param {RuleAttr} query
 * @returns {boolean}
 */

/* c8 ignore next 3 */


function unknownOperator(query) {
  throw new Error('Unknown operator `' + query.operator + '`');
}
/**
 * Stringify a hast value back to its HTML form.
 *
 * @param {PropertyValue} value
 * @param {Info} info
 * @returns {string}
 */


function normalizeValue(value, info) {
  if (typeof value === 'boolean') {
    return info.attribute;
  }

  if (Array.isArray(value)) {
    return (info.commaSeparated ? hast_util_select_node_modules_comma_separated_tokens_stringify : hast_util_select_node_modules_space_separated_tokens_stringify)(value);
  }

  return String(value);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/lib/class-name.js
/**
 * @typedef {import('./types.js').Rule} Rule
 * @typedef {import('./types.js').Element} Element
 */

/**
 * @param {Rule} query
 * @param {Element} element
 * @returns {boolean}
 */
function className(query, element) {
  /** @type {Array.<string>} */
  // @ts-expect-error Assume array.
  var value = element.properties.className || [];
  var index = -1;

  if (query.classNames) {
    while (++index < query.classNames.length) {
      if (!value.includes(query.classNames[index])) return false;
    }
  }

  return true;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/lib/id.js
/**
 * @typedef {import('./types.js').Rule} Rule
 * @typedef {import('./types.js').Element} Element
 */

/**
 * @param {Rule} query
 * @param {Element} element
 * @returns {boolean}
 */
function id(query, element) {
  return Boolean(element.properties && element.properties.id === query.id);
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/lib/name.js
/**
 * @typedef {import('./types.js').Rule} Rule
 * @typedef {import('./types.js').Element} Element
 */

/**
 * @param {Rule} query
 * @param {Element} element
 * @returns {boolean}
 */
function name_name(query, element) {
  return query.tagName === '*' || query.tagName === element.tagName;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/lib/test.js
/**
 * @typedef {import('./types.js').Rule} Rule
 * @typedef {import('./types.js').HastNode} HastNode
 * @typedef {import('./types.js').Element} Element
 * @typedef {import('./types.js').Parent} Parent
 * @typedef {import('./types.js').SelectState} SelectState
 * @typedef {import('hast-util-is-element').AssertPredicate<Element>} IsElement
 */






/**
 * @param {Rule} query
 * @param {HastNode} node
 * @param {number|null} index
 * @param {Parent|null} parent
 * @param {SelectState} state
 * @returns {boolean}
 */

function test(query, node, index, parent, state) {
  return Boolean(util_element(node) && state.schema && (!query.tagName || name_name(query, node)) && (!query.classNames || className(query, node)) && (!query.id || id(query, node)) && (!query.attrs || attribute(query, node, state.schema)) && (!query.pseudos || pseudo(query, node, index, parent, state)));
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/lib/any.js



/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('./types.js').Selectors} Selectors
 * @typedef {import('./types.js').Rule} Rule
 * @typedef {import('./types.js').RuleSet} RuleSet
 * @typedef {import('./types.js').HastNode} HastNode
 * @typedef {import('./types.js').SelectIterator} SelectIterator
 * @typedef {import('./types.js').SelectState} SelectState
 */






var type = zwitch('type', {
  // @ts-expect-error: hush.
  unknown: unknownType,
  invalid: invalidType,
  // @ts-expect-error: hush.
  handlers: {
    selectors: selectors,
    ruleSet: ruleSet,
    rule: rule
  }
});
/**
 * @param {Selectors|RuleSet|Rule} query
 * @param {HastNode|undefined} node
 * @param {SelectState} state
 * @returns {Array.<Element>}
 */

function any_any(query, node, state) {
  // @ts-expect-error zwitch types are off.
  return query && node ? type(query, node, state) : [];
}
/**
 * @param {Selectors} query
 * @param {HastNode} node
 * @param {SelectState} state
 * @returns {Array.<Element>}
 */

function selectors(query, node, state) {
  var collector = new Collector(state.one);
  var index = -1;

  while (++index < query.selectors.length) {
    collector.collectAll(ruleSet(query.selectors[index], node, state));
  }

  return collector.result;
}
/**
 * @param {RuleSet} query
 * @param {HastNode} node
 * @param {SelectState} state
 * @returns {Array.<Element>}
 */


function ruleSet(query, node, state) {
  return rule(query.rule, node, state);
}
/**
 * @param {Rule} query
 * @param {HastNode} tree
 * @param {SelectState} state
 * @returns {Array.<Element>}
 */


function rule(query, tree, state) {
  var collector = new Collector(state.one);

  if (state.shallow && query.rule) {
    throw new Error('Expected selector without nesting');
  }

  nest(query, tree, 0, null, configure(query, {
    schema: state.space === 'svg' ? hast_util_select_node_modules_property_information_svg : hast_util_select_node_modules_property_information_html,
    language: undefined,
    direction: 'ltr',
    editableOrEditingHost: false,
    // @ts-expect-error assume elements.
    scopeElements: tree.type === 'root' ? tree.children : [tree],
    iterator: iterator,
    one: state.one,
    shallow: state.shallow
  }));
  return collector.result;
  /** @type {SelectIterator} */

  function iterator(query, node, index, parent, state) {
    var exit = enterState(state, node);

    if (test(query, node, index, parent, state)) {
      if (query.rule) {
        nest(query.rule, node, index, parent, configure(query.rule, state));
      } else {
        // @ts-expect-error `test` also asserts `node is Element`
        collector.collect(node);
        state.found = true;
      }
    }

    exit();
  }
  /**
   * @template {SelectState} S
   * @param {Rule} query
   * @param {S} state
   * @returns {S}
   */


  function configure(query, state) {
    var pseudos = query.pseudos || [];
    var index = -1;

    while (++index < pseudos.length) {
      if (pseudo.needsIndex.includes(pseudos[index].name)) {
        state.index = true;
        break;
      }
    }

    return state;
  }
} // Shouldn’t be called, all data is handled.

/* c8 ignore next 6 */

/**
 * @param {{[x: string]: unknown, type: string}} query
 */


function unknownType(query) {
  throw new Error('Unknown type `' + query.type + '`');
} // Shouldn’t be called, parser gives correct data.

/* c8 ignore next 3 */


function invalidType() {
  throw new Error('Invalid type');
}

var Collector = /*#__PURE__*/function () {
  /**
   * @param {boolean|undefined} [one]
   */
  function Collector(one) {
    _classCallCheck(this, Collector);

    /** @type {Array.<Element>} */
    this.result = [];
    /** @type {boolean|undefined} */

    this.one = one;
    /** @type {boolean} */

    this.found = false;
  }
  /**
   * Append nodes to array, filtering out duplicates.
   *
   * @param {Array.<Element>} elements
   */


  _createClass(Collector, [{
    key: "collectAll",
    value: function collectAll(elements) {
      var index = -1;

      while (++index < elements.length) {
        this.collect(elements[index]);
      }
    }
    /**
     * Append one node.
     *
     * @param {Element} element
     */

  }, {
    key: "collect",
    value: function collect(element) {
      if (this.one) {
        // Shouldn’t happen, safeguards performance problems.

        /* c8 ignore next */
        if (this.found) return;
        this.found = true;
      }

      if (!this.result.includes(element)) this.result.push(element);
    }
  }]);

  return Collector;
}();
// EXTERNAL MODULE: ./node_modules/css-selector-parser/lib/index.js
var css_selector_parser_lib = __webpack_require__(8743);
// EXTERNAL MODULE: ./node_modules/nth-check/lib/index.js
var nth_check_lib = __webpack_require__(8728);
;// CONCATENATED MODULE: ./node_modules/hast-util-select/lib/parse.js
/**
 * @typedef {import('./types.js').Selector} Selector
 * @typedef {import('./types.js').Selectors} Selectors
 * @typedef {import('./types.js').RuleSet} RuleSet
 * @typedef {import('./types.js').Rule} Rule
 * @typedef {import('./types.js').RulePseudo} RulePseudo
 * @typedef {import('./types.js').RulePseudoNth} RulePseudoNth
 */



/** @type {import('nth-check').default} */
// @ts-expect-error

var nthCheck = nth_check_lib/* default */.ZP;
var nth = new Set(['nth-child', 'nth-last-child', 'nth-of-type', 'nth-last-of-type']);
var parser = new css_selector_parser_lib/* CssSelectorParser */.N(); // @ts-expect-error: hush.

var compile = zwitch('type', {
  handlers: {
    selectors: parse_selectors,
    ruleSet: parse_ruleSet,
    rule: parse_rule
  }
});
parser.registerAttrEqualityMods('~', '|', '^', '$', '*');
parser.registerSelectorPseudos('any', 'matches', 'not', 'has');
parser.registerNestingOperators('>', '+', '~');
/**
 * @param {string} selector
 * @returns {Selector}
 */

function parse_parse(selector) {
  if (typeof selector !== 'string') {
    throw new TypeError('Expected `string` as selector, not `' + selector + '`');
  } // @ts-expect-error types are wrong.


  return compile(parser.parse(selector));
}
/**
 * @param {Selectors} query
 * @returns {Selectors}
 */

function parse_selectors(query) {
  var index = -1;

  while (++index < query.selectors.length) {
    compile(query.selectors[index]);
  }

  return query;
}
/**
 * @param {RuleSet} query
 * @returns {Rule}
 */


function parse_ruleSet(query) {
  return parse_rule(query.rule);
}
/**
 * @param {Rule} query
 * @returns {Rule}
 */


function parse_rule(query) {
  var pseudos = query.pseudos || [];
  var index = -1;

  while (++index < pseudos.length) {
    var pseudo = pseudos[index];

    if (nth.has(pseudo.name)) {
      // @ts-expect-error Patch a non-primitive type.
      pseudo.value = nthCheck(pseudo.value); // @ts-expect-error Patch a non-primitive type.

      pseudo.valueType = 'function';
    }
  }

  compile(query.rule);
  return query;
}
;// CONCATENATED MODULE: ./node_modules/hast-util-select/index.js
/**
 * @typedef {import('./lib/types.js').Element} Element
 * @typedef {import('./lib/types.js').HastNode} HastNode
 * @typedef {import('./lib/types.js').Space} Space
 */


/**
 * @param {string} selector
 * @param {HastNode} [node]
 * @param {Space} [space]
 * @returns {boolean}
 */

function hast_util_select_matches(selector, node, space) {
  return Boolean(any(parse(selector), node, {
    space: space,
    one: true,
    shallow: true
  })[0]);
}
/**
 * @param {string} selector
 * @param {HastNode} [node]
 * @param {Space} [space]
 * @returns {Element|null}
 */

function hast_util_select_select(selector, node, space) {
  return any(parse(selector), node, {
    space: space,
    one: true
  })[0] || null;
}
/**
 * @param {string} selector
 * @param {HastNode} [node]
 * @param {Space} [space]
 * @returns {Array.<Element>}
 */

function selectAll(selector, node, space) {
  return any_any(parse_parse(selector), node, {
    space: space
  });
}
;// CONCATENATED MODULE: ./node_modules/rehype-rewrite/lib/index.js



var remarkRewrite = function remarkRewrite(options) {
  var _ref = options || {},
      selector = _ref.selector,
      rewrite = _ref.rewrite;

  return function (tree) {
    if (!rewrite || typeof rewrite !== 'function') return;

    if (selector && typeof selector === 'string') {
      var selected = selectAll(selector, tree);

      if (selected && selected.length > 0) {
        rehype_rewrite_node_modules_unist_util_visit_visit(tree, selected, function (node, index, parent) {
          rewrite(node, index, parent);
        });
      }

      return;
    }

    rehype_rewrite_node_modules_unist_util_visit_visit(tree, function (node, index, parent) {
      rewrite(node, index, parent);
    });
  };
};

/* harmony default export */ const rehype_rewrite_lib = (remarkRewrite);
;// CONCATENATED MODULE: ./node_modules/rehype-attr/node_modules/unist-util-visit/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 * @typedef {import('./complex-types').Visitor} Visitor
 */


/**
 * Visit children of tree which pass a test
 *
 * @param tree Abstract syntax tree to walk
 * @param test Test, optional
 * @param visitor Function to run for each node
 * @param reverse Fisit the tree in reverse, defaults to false
 */

var rehype_attr_node_modules_unist_util_visit_visit =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {import('./complex-types').Visitor} visitor
 * @param {boolean} [reverse]
 */
function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  visitParents(tree, test, overload, reverse);
  /**
   * @param {Node} node
   * @param {Array.<Parent>} parents
   */

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};
;// CONCATENATED MODULE: ./node_modules/rehype-attr/lib/utils.js

var getURLParameters = function getURLParameters(url) {
  return (url.match(/([^?=&]+)(=([^&]*))/g) || []).reduce(function (a, v) {
    return a[v.slice(0, v.indexOf('='))] = v.slice(v.indexOf('=') + 1), a;
  }, {});
};
var prevChild = function prevChild() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var index = arguments.length > 1 ? arguments[1] : undefined;
  var i = index;

  while (i > -1) {
    i--;
    if (!data[i]) return;

    if (data[i] && data[i].value && data[i].value.replace(/(\n|\s)/g, '') !== '' || data[i].type !== 'text') {
      if (!/^rehype:/.test(data[i].value) || data[i].type !== 'comment') return;
      return data[i];
    }
  }

  return;
};
var nextChild = function nextChild() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var index = arguments.length > 1 ? arguments[1] : undefined;
  var tagName = arguments.length > 2 ? arguments[2] : undefined;
  var i = index;

  while (i < data.length) {
    i++;

    if (tagName) {
      var element = data[i];

      if (element && element.value && element.value.replace(/(\n|\s)/g, '') !== '' || data[i] && data[i].type === 'element') {
        return element.tagName === tagName ? element : undefined;
      }
    } else {
      var _element = data[i];
      if (!_element || _element.type !== 'text' && _element.type !== 'comment' || _element.type === 'text' && _element.value.replace(/(\n|\s)/g, '') !== '') return;

      if (_element.type === 'comment') {
        if (!/^rehype:/.test(_element.value)) return;
        var nextNode = nextChild(data, i, 'pre');
        if (nextNode) return;
        return _element;
      }
    }
  }

  return;
};
/**
 * 获取代码注视的位置
 * @param data 数据
 * @param index 当前数据所在的位置
 * @returns 返回 当前参数数据 Object，`{}`
 */

var getCommentObject = function getCommentObject(_ref) {
  var _ref$value = _ref.value,
      value = _ref$value === void 0 ? '' : _ref$value;
  var param = getURLParameters(value.replace(/^rehype:/, ''));
  Object.keys(param).forEach(function (keyName) {
    if (param[keyName] === 'true') {
      param[keyName] = true;
    }

    if (param[keyName] === 'false') {
      param[keyName] = false;
    }

    if (typeof param[keyName] === 'string' && !/^0/.test(param[keyName]) && !isNaN(+param[keyName])) {
      param[keyName] = +param[keyName];
    }
  });
  return param;
};
var propertiesHandle = function propertiesHandle(defaultAttrs, attrs, type) {
  if (type === 'string') {
    return _objectSpread2(_objectSpread2({}, defaultAttrs), {}, {
      'data-config': JSON.stringify(_objectSpread2(_objectSpread2({}, attrs), {}, {
        rehyp: true
      }))
    });
  } else if (type === 'attr') {
    return _objectSpread2(_objectSpread2({}, defaultAttrs), attrs);
  }

  return _objectSpread2(_objectSpread2({}, defaultAttrs), {}, {
    'data-config': _objectSpread2(_objectSpread2({}, attrs), {}, {
      rehyp: true
    })
  });
};
;// CONCATENATED MODULE: ./node_modules/rehype-attr/lib/index.js



var defaultOptions = {
  properties: 'data'
};

var rehypeAttrs = function rehypeAttrs(options) {
  var opts = _objectSpread2(_objectSpread2({}, defaultOptions), options);

  return function (tree) {
    rehype_attr_node_modules_unist_util_visit_visit(tree, 'element', function (node, index, parent) {
      if (node.tagName === 'pre' && node && Array.isArray(node.children) && parent && Array.isArray(parent.children) && parent.children.length > 1) {
        var firstChild = node.children[0];

        if (firstChild && firstChild.tagName === 'code' && typeof index === 'number') {
          var child = prevChild(parent.children, index);

          if (child) {
            var attr = getCommentObject(child);

            if (Object.keys(attr).length > 0) {
              node.properties = _objectSpread2(_objectSpread2({}, node.properties), {
                'data-type': 'rehyp'
              });
              firstChild.properties = propertiesHandle(firstChild.properties, attr, opts.properties);
            }
          }
        }
      }

      if (/^(em|strong|b|a|i|p|pre|kbd|blockquote|h(1|2|3|4|5|6)|code|table|img|del|ul|ol)$/.test(node.tagName) && parent && Array.isArray(parent.children) && typeof index === 'number') {
        var _child = nextChild(parent.children, index);

        if (_child) {
          var _attr = getCommentObject(_child);

          if (Object.keys(_attr).length > 0) {
            node.properties = propertiesHandle(node.properties, _attr, opts.properties);
          }
        }
      }
    });
  };
};

/* harmony default export */ const rehype_attr_lib = (rehypeAttrs);
;// CONCATENATED MODULE: ./node_modules/rehype-video/node_modules/unist-util-visit/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 * @typedef {import('./complex-types').Visitor} Visitor
 */


/**
 * Visit children of tree which pass a test
 *
 * @param tree Abstract syntax tree to walk
 * @param test Test, optional
 * @param visitor Function to run for each node
 * @param reverse Fisit the tree in reverse, defaults to false
 */

var rehype_video_node_modules_unist_util_visit_visit =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {import('./complex-types').Visitor} visitor
 * @param {boolean} [reverse]
 */
function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  visitParents(tree, test, overload, reverse);
  /**
   * @param {Node} node
   * @param {Array.<Parent>} parents
   */

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};
;// CONCATENATED MODULE: ./node_modules/rehype-video/lib/detailsNode.js
function detailsNode(title) {
  return {
    type: 'element',
    tagName: 'details',
    properties: {
      open: true,
      className: 'octicon octicon-video'
    },
    children: [{
      type: 'element',
      tagName: 'summary',
      children: [{
        type: 'element',
        tagName: 'svg',
        properties: {
          'aria-hidden': true,
          height: 16,
          width: 16,
          viewBox: '0 0 16 16',
          version: '1.1',
          'data-view-component': true,
          className: 'octicon octicon-device-camera-video'
        },
        children: [{
          type: 'element',
          tagName: 'path',
          properties: {
            'fill-rule': 'evenodd',
            d: 'M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z'
          },
          children: []
        }]
      }, {
        type: 'element',
        tagName: 'span',
        properties: {
          'aria-label': "Video description ".concat(title || '')
        },
        children: [{
          type: 'text',
          value: title || ''
        }]
      }, {
        type: 'element',
        tagName: 'span',
        properties: {
          className: 'dropdown-caret'
        },
        children: []
      }]
    }]
  };
}
;// CONCATENATED MODULE: ./node_modules/rehype-video/lib/index.js



var properties = {
  muted: 'muted',
  controls: 'controls',
  style: 'max-height:640px;'
};

function reElement(node, details, href) {
  var filename = href.split('/').pop();
  node.properties = _objectSpread2(_objectSpread2({}, properties), {}, {
    src: href
  });
  node.tagName = 'video';
  node.children = [];

  if (details) {
    var reNode = detailsNode(filename);
    reNode.children.push(_objectSpread2({}, node));
    node.children = reNode.children;
    node.tagName = reNode.tagName;
    node.properties = reNode.properties;
  }
}

var RehypeVideo = function RehypeVideo(options) {
  var _ref = options || {},
      _ref$test = _ref.test,
      test = _ref$test === void 0 ? /\/(.*)(.mp4|.mov)$/ : _ref$test,
      _ref$details = _ref.details,
      details = _ref$details === void 0 ? true : _ref$details;

  return function (tree) {
    rehype_video_node_modules_unist_util_visit_visit(tree, 'element', function (node, index, parent) {
      var isChecked = function isChecked(str) {
        return test.test(str);
      };

      var child = node.children[0];
      var delimiter = /((?:https?:\/\/)(?:(?:[a-z0-9]?(?:[a-z0-9\-]{1,61}[a-z0-9])?\.[^\.|\s])+[a-z\.]*[a-z]+|(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})(?::\d{1,5})*[a-z0-9.,_\/~#&=;%+?\-\\(\\)]*)/g; // const delimiter = /((?:https?:\/\/)?(?:(?:[a-z0-9]?(?:[a-z0-9\-]{1,61}[a-z0-9])?\.[^\.|\s])+[a-z\.]*[a-z]+|(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})(?::\d{1,5})*[a-z0-9.,_\/~#&=;%+?\-\\(\\)]*)/g;

      if (node.tagName === 'p' && node.children.length === 1) {
        if (child.type === 'text' && delimiter.test(child.value) && isChecked(child.value)) {
          reElement(node, details, child.value);
        }

        if (child.type === 'element' && child.tagName === 'a' && child.properties && typeof child.properties.href === 'string' && isChecked(child.properties.href)) {
          reElement(node, details, child.properties.href);
        }
      }
    });
  };
};

/* harmony default export */ const rehype_video_lib = (RehypeVideo);
;// CONCATENATED MODULE: ./node_modules/micromark-util-chunked/index.js
/**
 * Like `Array#splice`, but smarter for giant arrays.
 *
 * `Array#splice` takes all items to be inserted as individual argument which
 * causes a stack overflow in V8 when trying to insert 100k items for instance.
 *
 * Otherwise, this does not return the removed items, and takes `items` as an
 * array instead of rest parameters.
 *
 * @template {unknown} T
 * @param {T[]} list
 * @param {number} start
 * @param {number} remove
 * @param {T[]} items
 * @returns {void}
 */
function splice(list, start, remove, items) {
  var end = list.length;
  var chunkStart = 0;
  /** @type {unknown[]} */

  var parameters; // Make start between zero and `end` (included).

  if (start < 0) {
    start = -start > end ? 0 : end + start;
  } else {
    start = start > end ? end : start;
  }

  remove = remove > 0 ? remove : 0; // No need to chunk the items if there’s only a couple (10k) items.

  if (items.length < 10000) {
    parameters = Array.from(items);
    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.
    ;
    [].splice.apply(list, parameters);
  } else {
    // Delete `remove` items starting from `start`
    if (remove) [].splice.apply(list, [start, remove]); // Insert the items in chunks to not cause stack overflows.

    while (chunkStart < items.length) {
      parameters = items.slice(chunkStart, chunkStart + 10000);
      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.
      ;
      [].splice.apply(list, parameters);
      chunkStart += 10000;
      start += 10000;
    }
  }
}
/**
 * Append `items` (an array) at the end of `list` (another array).
 * When `list` was empty, returns `items` instead.
 *
 * This prevents a potentially expensive operation when `list` is empty,
 * and adds items in batches to prevent V8 from hanging.
 *
 * @template {unknown} T
 * @param {T[]} list
 * @param {T[]} items
 * @returns {T[]}
 */

function push(list, items) {
  if (list.length > 0) {
    splice(list, list.length, 0, items);
    return list;
  }

  return items;
}
;// CONCATENATED MODULE: ./node_modules/micromark-util-combine-extensions/index.js
/**
 * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
 */

var micromark_util_combine_extensions_hasOwnProperty = {}.hasOwnProperty;
/**
 * Combine several syntax extensions into one.
 *
 * @param {Extension[]} extensions List of syntax extensions.
 * @returns {NormalizedExtension} A single combined extension.
 */

function combineExtensions(extensions) {
  /** @type {NormalizedExtension} */
  var all = {};
  var index = -1;

  while (++index < extensions.length) {
    syntaxExtension(all, extensions[index]);
  }

  return all;
}
/**
 * Merge `extension` into `all`.
 *
 * @param {NormalizedExtension} all Extension to merge into.
 * @param {Extension} extension Extension to merge.
 * @returns {void}
 */

function syntaxExtension(all, extension) {
  /** @type {string} */
  var hook;

  for (hook in extension) {
    var maybe = micromark_util_combine_extensions_hasOwnProperty.call(all, hook) ? all[hook] : undefined;
    var left = maybe || (all[hook] = {});
    var right = extension[hook];
    /** @type {string} */

    var code = void 0;

    for (code in right) {
      if (!micromark_util_combine_extensions_hasOwnProperty.call(left, code)) left[code] = [];
      var value = right[code];
      constructs( // @ts-expect-error Looks like a list.
      left[code], Array.isArray(value) ? value : value ? [value] : []);
    }
  }
}
/**
 * Merge `list` into `existing` (both lists of constructs).
 * Mutates `existing`.
 *
 * @param {unknown[]} existing
 * @param {unknown[]} list
 * @returns {void}
 */


function constructs(existing, list) {
  var index = -1;
  /** @type {unknown[]} */

  var before = [];

  while (++index < list.length) {
    // @ts-expect-error Looks like an object.
    ;
    (list[index].add === 'after' ? existing : before).push(list[index]);
  }

  splice(existing, 0, 0, before);
}
/**
 * Combine several HTML extensions into one.
 *
 * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.
 * @returns {HtmlExtension} A single combined extension.
 */


function micromark_util_combine_extensions_combineHtmlExtensions(htmlExtensions) {
  /** @type {HtmlExtension} */
  var handlers = {};
  var index = -1;

  while (++index < htmlExtensions.length) {
    htmlExtension(handlers, htmlExtensions[index]);
  }

  return handlers;
}
/**
 * Merge `extension` into `all`.
 *
 * @param {HtmlExtension} all Extension to merge into.
 * @param {HtmlExtension} extension Extension to merge.
 * @returns {void}
 */

function htmlExtension(all, extension) {
  /** @type {string} */
  var hook;

  for (hook in extension) {
    var maybe = micromark_util_combine_extensions_hasOwnProperty.call(all, hook) ? all[hook] : undefined;
    var left = maybe || (all[hook] = {});
    var right = extension[hook];
    /** @type {string} */

    var type = void 0;

    if (right) {
      for (type in right) {
        left[type] = right[type];
      }
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js
// This module is generated by `script/`.
//
// CommonMark handles attention (emphasis, strong) markers based on what comes
// before or after them.
// One such difference is if those characters are Unicode punctuation.
// This script is generated from the Unicode data.
var unicodePunctuationRegex = /[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;
;// CONCATENATED MODULE: ./node_modules/micromark-util-character/index.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 */

/**
 * Check whether the character code represents an ASCII alpha (`a` through `z`,
 * case insensitive).
 *
 * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.
 *
 * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)
 * to U+005A (`Z`).
 *
 * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)
 * to U+007A (`z`).
 */

var asciiAlpha = regexCheck(/[A-Za-z]/);
/**
 * Check whether the character code represents an ASCII digit (`0` through `9`).
 *
 * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to
 * U+0039 (`9`).
 */

var asciiDigit = regexCheck(/\d/);
/**
 * Check whether the character code represents an ASCII hex digit (`a` through
 * `f`, case insensitive, or `0` through `9`).
 *
 * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex
 * digit, or an ASCII lower hex digit.
 *
 * An **ASCII upper hex digit** is a character in the inclusive range U+0041
 * (`A`) to U+0046 (`F`).
 *
 * An **ASCII lower hex digit** is a character in the inclusive range U+0061
 * (`a`) to U+0066 (`f`).
 */

var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
/**
 * Check whether the character code represents an ASCII alphanumeric (`a`
 * through `z`, case insensitive, or `0` through `9`).
 *
 * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha
 * (see `asciiAlpha`).
 */

var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
/**
 * Check whether the character code represents ASCII punctuation.
 *
 * An **ASCII punctuation** is a character in the inclusive ranges U+0021
 * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT
 * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT
 * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).
 */

var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
/**
 * Check whether the character code represents an ASCII atext.
 *
 * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in
 * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),
 * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F
 * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E
 * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE
 * (`{`) to U+007E TILDE (`~`).
 *
 * See:
 * **\[RFC5322]**:
 * [Internet Message Format](https://tools.ietf.org/html/rfc5322).
 * P. Resnick.
 * IETF.
 */

var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
/**
 * Check whether a character code is an ASCII control character.
 *
 * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)
 * to U+001F (US), or U+007F (DEL).
 *
 * @param {Code} code
 * @returns {code is number}
 */

function asciiControl(code) {
  return (// Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code !== null && (code < 32 || code === 127)
  );
}
/**
 * Check whether a character code is a markdown line ending (see
 * `markdownLineEnding`) or markdown space (see `markdownSpace`).
 *
 * @param {Code} code
 * @returns {code is number}
 */

function markdownLineEndingOrSpace(code) {
  return code !== null && (code < 0 || code === 32);
}
/**
 * Check whether a character code is a markdown line ending.
 *
 * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN
 * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).
 *
 * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE
 * RETURN (CR) are replaced by these virtual characters depending on whether
 * they occurred together.
 *
 * @param {Code} code
 * @returns {code is number}
 */

function markdownLineEnding(code) {
  return code !== null && code < -2;
}
/**
 * Check whether a character code is a markdown space.
 *
 * A **markdown space** is the concrete character U+0020 SPACE (SP) and the
 * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).
 *
 * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is
 * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL
 * SPACE (VS) characters, depending on the column at which the tab occurred.
 *
 * @param {Code} code
 * @returns {code is number}
 */

function markdownSpace(code) {
  return code === -2 || code === -1 || code === 32;
}
/**
 * Check whether the character code represents Unicode whitespace.
 *
 * Note that this does handle micromark specific markdown whitespace characters.
 * See `markdownLineEndingOrSpace` to check that.
 *
 * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,
 * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),
 * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\[UNICODE]**).
 *
 * See:
 * **\[UNICODE]**:
 * [The Unicode Standard](https://www.unicode.org/versions/).
 * Unicode Consortium.
 */

var unicodeWhitespace = regexCheck(/\s/);
/**
 * Check whether the character code represents Unicode punctuation.
 *
 * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,
 * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`
 * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`
 * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII
 * punctuation (see `asciiPunctuation`).
 *
 * See:
 * **\[UNICODE]**:
 * [The Unicode Standard](https://www.unicode.org/versions/).
 * Unicode Consortium.
 */
// Size note: removing ASCII from the regex and using `asciiPunctuation` here
// In fact adds to the bundle size.

var unicodePunctuation = regexCheck(unicodePunctuationRegex);
/**
 * Create a code check from a regex.
 *
 * @param {RegExp} regex
 * @returns {(code: Code) => code is number}
 */

function regexCheck(regex) {
  return check;
  /**
   * Check whether a code matches the bound regex.
   *
   * @param {Code} code Character code
   * @returns {code is number} Whether the character code matches the bound regex
   */

  function check(code) {
    return code !== null && regex.test(String.fromCharCode(code));
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js
/**
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Previous} Previous
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Code} Code
 */

var www = {
  tokenize: tokenizeWww,
  partial: true
};
var domain = {
  tokenize: tokenizeDomain,
  partial: true
};
var path = {
  tokenize: tokenizePath,
  partial: true
};
var punctuation = {
  tokenize: tokenizePunctuation,
  partial: true
};
var namedCharacterReference = {
  tokenize: tokenizeNamedCharacterReference,
  partial: true
};
var wwwAutolink = {
  tokenize: tokenizeWwwAutolink,
  previous: previousWww
};
var httpAutolink = {
  tokenize: tokenizeHttpAutolink,
  previous: previousHttp
};
var emailAutolink = {
  tokenize: tokenizeEmailAutolink,
  previous: previousEmail
};
/** @type {ConstructRecord} */

var syntax_text = {};
/** @type {Extension} */

var gfmAutolinkLiteral = {
  text: syntax_text
};
var code = 48; // Add alphanumerics.

while (code < 123) {
  syntax_text[code] = emailAutolink;
  code++;
  if (code === 58) code = 65;else if (code === 91) code = 97;
}

syntax_text[43] = emailAutolink;
syntax_text[45] = emailAutolink;
syntax_text[46] = emailAutolink;
syntax_text[95] = emailAutolink;
syntax_text[72] = [emailAutolink, httpAutolink];
syntax_text[104] = [emailAutolink, httpAutolink];
syntax_text[87] = [emailAutolink, wwwAutolink];
syntax_text[119] = [emailAutolink, wwwAutolink];
/** @type {Tokenizer} */

function tokenizeEmailAutolink(effects, ok, nok) {
  var self = this;
  /** @type {boolean} */

  var hasDot;
  /** @type {boolean|undefined} */

  var hasDigitInLastSegment;
  return start;
  /** @type {State} */

  function start(code) {
    if (!gfmAtext(code) || !previousEmail(self.previous) || previousUnbalanced(self.events)) {
      return nok(code);
    }

    effects.enter('literalAutolink');
    effects.enter('literalAutolinkEmail');
    return atext(code);
  }
  /** @type {State} */


  function atext(code) {
    if (gfmAtext(code)) {
      effects.consume(code);
      return atext;
    }

    if (code === 64) {
      effects.consume(code);
      return label;
    }

    return nok(code);
  }
  /** @type {State} */


  function label(code) {
    if (code === 46) {
      return effects.check(punctuation, done, dotContinuation)(code);
    }

    if (code === 45 || code === 95) {
      return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code);
    }

    if (asciiAlphanumeric(code)) {
      if (!hasDigitInLastSegment && asciiDigit(code)) {
        hasDigitInLastSegment = true;
      }

      effects.consume(code);
      return label;
    }

    return done(code);
  }
  /** @type {State} */


  function dotContinuation(code) {
    effects.consume(code);
    hasDot = true;
    hasDigitInLastSegment = undefined;
    return label;
  }
  /** @type {State} */


  function dashOrUnderscoreContinuation(code) {
    effects.consume(code);
    return afterDashOrUnderscore;
  }
  /** @type {State} */


  function afterDashOrUnderscore(code) {
    if (code === 46) {
      return effects.check(punctuation, nok, dotContinuation)(code);
    }

    return label(code);
  }
  /** @type {State} */


  function done(code) {
    if (hasDot && !hasDigitInLastSegment) {
      effects.exit('literalAutolinkEmail');
      effects.exit('literalAutolink');
      return ok(code);
    }

    return nok(code);
  }
}
/** @type {Tokenizer} */


function tokenizeWwwAutolink(effects, ok, nok) {
  var self = this;
  return start;
  /** @type {State} */

  function start(code) {
    if (code !== 87 && code !== 119 || !previousWww(self.previous) || previousUnbalanced(self.events)) {
      return nok(code);
    }

    effects.enter('literalAutolink');
    effects.enter('literalAutolinkWww'); // For `www.` we check instead of attempt, because when it matches, GH
    // treats it as part of a domain (yes, it says a valid domain must come
    // after `www.`, but that’s not how it’s implemented by them).

    return effects.check(www, effects.attempt(domain, effects.attempt(path, done), nok), nok)(code);
  }
  /** @type {State} */


  function done(code) {
    effects.exit('literalAutolinkWww');
    effects.exit('literalAutolink');
    return ok(code);
  }
}
/** @type {Tokenizer} */


function tokenizeHttpAutolink(effects, ok, nok) {
  var self = this;
  return start;
  /** @type {State} */

  function start(code) {
    if (code !== 72 && code !== 104 || !previousHttp(self.previous) || previousUnbalanced(self.events)) {
      return nok(code);
    }

    effects.enter('literalAutolink');
    effects.enter('literalAutolinkHttp');
    effects.consume(code);
    return t1;
  }
  /** @type {State} */


  function t1(code) {
    if (code === 84 || code === 116) {
      effects.consume(code);
      return t2;
    }

    return nok(code);
  }
  /** @type {State} */


  function t2(code) {
    if (code === 84 || code === 116) {
      effects.consume(code);
      return p;
    }

    return nok(code);
  }
  /** @type {State} */


  function p(code) {
    if (code === 80 || code === 112) {
      effects.consume(code);
      return s;
    }

    return nok(code);
  }
  /** @type {State} */


  function s(code) {
    if (code === 83 || code === 115) {
      effects.consume(code);
      return colon;
    }

    return colon(code);
  }
  /** @type {State} */


  function colon(code) {
    if (code === 58) {
      effects.consume(code);
      return slash1;
    }

    return nok(code);
  }
  /** @type {State} */


  function slash1(code) {
    if (code === 47) {
      effects.consume(code);
      return slash2;
    }

    return nok(code);
  }
  /** @type {State} */


  function slash2(code) {
    if (code === 47) {
      effects.consume(code);
      return after;
    }

    return nok(code);
  }
  /** @type {State} */


  function after(code) {
    return code === null || asciiControl(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, done), nok)(code);
  }
  /** @type {State} */


  function done(code) {
    effects.exit('literalAutolinkHttp');
    effects.exit('literalAutolink');
    return ok(code);
  }
}
/** @type {Tokenizer} */


function tokenizeWww(effects, ok, nok) {
  return start;
  /** @type {State} */

  function start(code) {
    effects.consume(code);
    return w2;
  }
  /** @type {State} */


  function w2(code) {
    if (code === 87 || code === 119) {
      effects.consume(code);
      return w3;
    }

    return nok(code);
  }
  /** @type {State} */


  function w3(code) {
    if (code === 87 || code === 119) {
      effects.consume(code);
      return dot;
    }

    return nok(code);
  }
  /** @type {State} */


  function dot(code) {
    if (code === 46) {
      effects.consume(code);
      return after;
    }

    return nok(code);
  }
  /** @type {State} */


  function after(code) {
    return code === null || markdownLineEnding(code) ? nok(code) : ok(code);
  }
}
/** @type {Tokenizer} */


function tokenizeDomain(effects, ok, nok) {
  /** @type {boolean|undefined} */
  var hasUnderscoreInLastSegment;
  /** @type {boolean|undefined} */

  var hasUnderscoreInLastLastSegment;
  return domain;
  /** @type {State} */

  function domain(code) {
    if (code === 38) {
      return effects.check(namedCharacterReference, done, punctuationContinuation)(code);
    }

    if (code === 46 || code === 95) {
      return effects.check(punctuation, done, punctuationContinuation)(code);
    } // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can
    // occur, which sounds like ASCII only, but they also support `www.點看.com`,
    // so that’s Unicode.
    // Instead of some new production for Unicode alphanumerics, markdown
    // already has that for Unicode punctuation and whitespace, so use those.


    if (code === null || asciiControl(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {
      return done(code);
    }

    effects.consume(code);
    return domain;
  }
  /** @type {State} */


  function punctuationContinuation(code) {
    if (code === 46) {
      hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment;
      hasUnderscoreInLastSegment = undefined;
      effects.consume(code);
      return domain;
    }

    if (code === 95) hasUnderscoreInLastSegment = true;
    effects.consume(code);
    return domain;
  }
  /** @type {State} */


  function done(code) {
    if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {
      return ok(code);
    }

    return nok(code);
  }
}
/** @type {Tokenizer} */


function tokenizePath(effects, ok) {
  var balance = 0;
  return inPath;
  /** @type {State} */

  function inPath(code) {
    if (code === 38) {
      return effects.check(namedCharacterReference, ok, continuedPunctuation)(code);
    }

    if (code === 40) {
      balance++;
    }

    if (code === 41) {
      return effects.check(punctuation, parenAtPathEnd, continuedPunctuation)(code);
    }

    if (pathEnd(code)) {
      return ok(code);
    }

    if (trailingPunctuation(code)) {
      return effects.check(punctuation, ok, continuedPunctuation)(code);
    }

    effects.consume(code);
    return inPath;
  }
  /** @type {State} */


  function continuedPunctuation(code) {
    effects.consume(code);
    return inPath;
  }
  /** @type {State} */


  function parenAtPathEnd(code) {
    balance--;
    return balance < 0 ? ok(code) : continuedPunctuation(code);
  }
}
/** @type {Tokenizer} */


function tokenizeNamedCharacterReference(effects, ok, nok) {
  return start;
  /** @type {State} */

  function start(code) {
    effects.consume(code);
    return inside;
  }
  /** @type {State} */


  function inside(code) {
    if (asciiAlpha(code)) {
      effects.consume(code);
      return inside;
    }

    if (code === 59) {
      effects.consume(code);
      return after;
    }

    return nok(code);
  }
  /** @type {State} */


  function after(code) {
    // If the named character reference is followed by the end of the path, it’s
    // not continued punctuation.
    return pathEnd(code) ? ok(code) : nok(code);
  }
}
/** @type {Tokenizer} */


function tokenizePunctuation(effects, ok, nok) {
  return start;
  /** @type {State} */

  function start(code) {
    effects.consume(code);
    return after;
  }
  /** @type {State} */


  function after(code) {
    // Check the next.
    if (trailingPunctuation(code)) {
      effects.consume(code);
      return after;
    } // If the punctuation marker is followed by the end of the path, it’s not
    // continued punctuation.


    return pathEnd(code) ? ok(code) : nok(code);
  }
}
/**
 * @param {Code} code
 * @returns {boolean}
 */


function trailingPunctuation(code) {
  return code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 95 || code === 126;
}
/**
 * @param {Code} code
 * @returns {boolean}
 */


function pathEnd(code) {
  return code === null || code === 60 || markdownLineEndingOrSpace(code);
}
/**
 * @param {Code} code
 * @returns {boolean}
 */


function gfmAtext(code) {
  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);
}
/** @type {Previous} */


function previousWww(code) {
  return code === null || code === 40 || code === 42 || code === 95 || code === 126 || markdownLineEndingOrSpace(code);
}
/** @type {Previous} */


function previousHttp(code) {
  return code === null || !asciiAlpha(code);
}
/** @type {Previous} */


function previousEmail(code) {
  return code !== 47 && previousHttp(code);
}
/**
 * @param {Event[]} events
 * @returns {boolean}
 */


function previousUnbalanced(events) {
  var index = events.length;
  var result = false;

  while (index--) {
    var token = events[index][1];

    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {
      result = true;
      break;
    } // @ts-expect-error If we’ve seen this token, and it was marked as not
    // having any unbalanced bracket before it, we can exit.


    if (token._gfmAutolinkLiteralWalkedInto) {
      result = false;
      break;
    }
  }

  if (events.length > 0 && !result) {
    // @ts-expect-error Mark the last token as “walked into” w/o finding
    // anything.
    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/micromark-factory-space/index.js
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 */

/**
 * @param {Effects} effects
 * @param {State} ok
 * @param {string} type
 * @param {number} [max=Infinity]
 * @returns {State}
 */

function factorySpace(effects, ok, type, max) {
  var limit = max ? max - 1 : Number.POSITIVE_INFINITY;
  var size = 0;
  return start;
  /** @type {State} */

  function start(code) {
    if (markdownSpace(code)) {
      effects.enter(type);
      return prefix(code);
    }

    return ok(code);
  }
  /** @type {State} */


  function prefix(code) {
    if (markdownSpace(code) && size++ < limit) {
      effects.consume(code);
      return prefix;
    }

    effects.exit(type);
    return ok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/blank-line.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */


/** @type {Construct} */

var blankLine = {
  tokenize: tokenizeBlankLine,
  partial: true
};
/** @type {Tokenizer} */

function tokenizeBlankLine(effects, ok, nok) {
  return factorySpace(effects, afterWhitespace, 'linePrefix');
  /** @type {State} */

  function afterWhitespace(code) {
    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-util-normalize-identifier/index.js
/**
 * Normalize an identifier (such as used in definitions).
 *
 * @param {string} value
 * @returns {string}
 */
function normalizeIdentifier(value) {
  return value // Collapse Markdown whitespace.
  .replace(/[\t\n\r ]+/g, ' ') // Trim.
  .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase
  // counterpart is uppercased will result in a different uppercase
  // character.
  // Hence, to get that form, we perform both lower- and uppercase.
  // Upper case makes sure keys will not interact with default prototypal
  // methods: no method is uppercase.
  .toLowerCase().toUpperCase();
}
;// CONCATENATED MODULE: ./node_modules/micromark-extension-gfm-footnote/lib/syntax.js


/**
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Exiter} Exiter
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Event} Event
 */




var indent = {
  tokenize: tokenizeIndent,
  partial: true
};
/**
 * @returns {Extension}
 */

function gfmFootnote() {
  var _text;

  /** @type {Extension} */
  return {
    document: _defineProperty({}, 91, {
      tokenize: tokenizeDefinitionStart,
      continuation: {
        tokenize: tokenizeDefinitionContinuation
      },
      exit: gfmFootnoteDefinitionEnd
    }),
    text: (_text = {}, _defineProperty(_text, 91, {
      tokenize: tokenizeGfmFootnoteCall
    }), _defineProperty(_text, 93, {
      add: 'after',
      tokenize: tokenizePotentialGfmFootnoteCall,
      resolveTo: resolveToPotentialGfmFootnoteCall
    }), _text)
  };
}
/** @type {Tokenizer} */

function tokenizePotentialGfmFootnoteCall(effects, ok, nok) {
  var self = this;
  var index = self.events.length;
  /** @type {string[]} */
  // @ts-expect-error It’s fine!

  var defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
  /** @type {Token} */

  var labelStart; // Find an opening.

  while (index--) {
    var token = self.events[index][1];

    if (token.type === 'labelImage') {
      labelStart = token;
      break;
    } // Exit if we’ve walked far enough.


    if (token.type === 'gfmFootnoteCall' || token.type === 'labelLink' || token.type === 'label' || token.type === 'image' || token.type === 'link') {
      break;
    }
  }

  return start;
  /** @type {State} */

  function start(code) {
    if (!labelStart || !labelStart._balanced) {
      return nok(code);
    }

    var id = normalizeIdentifier(self.sliceSerialize({
      start: labelStart.end,
      end: self.now()
    }));

    if (id.charCodeAt(0) !== 94 || !defined.includes(id.slice(1))) {
      return nok(code);
    }

    effects.enter('gfmFootnoteCallLabelMarker');
    effects.consume(code);
    effects.exit('gfmFootnoteCallLabelMarker');
    return ok(code);
  }
}
/** @type {Resolver} */


function resolveToPotentialGfmFootnoteCall(events, context) {
  var index = events.length;
  /** @type {Token|undefined} */

  var labelStart; // Find an opening.

  while (index--) {
    if (events[index][1].type === 'labelImage' && events[index][0] === 'enter') {
      labelStart = events[index][1];
      break;
    }
  } // Change the `labelImageMarker` to a `data`.


  events[index + 1][1].type = 'data';
  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'; // The whole (without `!`):

  var call = {
    type: 'gfmFootnoteCall',
    start: Object.assign({}, events[index + 3][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  }; // The `^` marker

  var marker = {
    type: 'gfmFootnoteCallMarker',
    start: Object.assign({}, events[index + 3][1].end),
    end: Object.assign({}, events[index + 3][1].end)
  }; // Increment the end 1 character.

  marker.end.column++;
  marker.end.offset++;
  marker.end._bufferIndex++;
  var string = {
    type: 'gfmFootnoteCallString',
    start: Object.assign({}, marker.end),
    end: Object.assign({}, events[events.length - 1][1].start)
  };
  var chunk = {
    type: 'chunkString',
    contentType: 'string',
    start: Object.assign({}, string.start),
    end: Object.assign({}, string.end)
  };
  /** @type {Event[]} */

  var replacement = [// Take the `labelImageMarker` (now `data`, the `!`)
  events[index + 1], events[index + 2], ['enter', call, context], // The `[`
  events[index + 3], events[index + 4], // The `^`.
  ['enter', marker, context], ['exit', marker, context], // Everything in between.
  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context], // The ending (`]`, properly parsed and labelled).
  events[events.length - 2], events[events.length - 1], ['exit', call, context]];
  events.splice.apply(events, [index, events.length - index + 1].concat(replacement));
  return events;
}
/** @type {Tokenizer} */


function tokenizeGfmFootnoteCall(effects, ok, nok) {
  var self = this;
  /** @type {string[]} */
  // @ts-expect-error It’s fine!

  var defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
  var size = 0;
  /** @type {boolean} */

  var data;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('gfmFootnoteCall');
    effects.enter('gfmFootnoteCallLabelMarker');
    effects.consume(code);
    effects.exit('gfmFootnoteCallLabelMarker');
    return callStart;
  }
  /** @type {State} */


  function callStart(code) {
    if (code !== 94) return nok(code);
    effects.enter('gfmFootnoteCallMarker');
    effects.consume(code);
    effects.exit('gfmFootnoteCallMarker');
    effects.enter('gfmFootnoteCallString');
    effects.enter('chunkString').contentType = 'string';
    return callData;
  }
  /** @type {State} */


  function callData(code) {
    /** @type {Token} */
    var token;

    if (code === null || code === 91 || size++ > 999) {
      return nok(code);
    }

    if (code === 93) {
      if (!data) {
        return nok(code);
      }

      effects.exit('chunkString');
      token = effects.exit('gfmFootnoteCallString');
      return defined.includes(normalizeIdentifier(self.sliceSerialize(token))) ? end(code) : nok(code);
    }

    effects.consume(code);

    if (!markdownLineEndingOrSpace(code)) {
      data = true;
    }

    return code === 92 ? callEscape : callData;
  }
  /** @type {State} */


  function callEscape(code) {
    if (code === 91 || code === 92 || code === 93) {
      effects.consume(code);
      size++;
      return callData;
    }

    return callData(code);
  }
  /** @type {State} */


  function end(code) {
    effects.enter('gfmFootnoteCallLabelMarker');
    effects.consume(code);
    effects.exit('gfmFootnoteCallLabelMarker');
    effects.exit('gfmFootnoteCall');
    return ok;
  }
}
/** @type {Tokenizer} */


function tokenizeDefinitionStart(effects, ok, nok) {
  var self = this;
  /** @type {string[]} */
  // @ts-expect-error It’s fine!

  var defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
  /** @type {string} */

  var identifier;
  var size = 0;
  /** @type {boolean|undefined} */

  var data;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('gfmFootnoteDefinition')._container = true;
    effects.enter('gfmFootnoteDefinitionLabel');
    effects.enter('gfmFootnoteDefinitionLabelMarker');
    effects.consume(code);
    effects.exit('gfmFootnoteDefinitionLabelMarker');
    return labelStart;
  }
  /** @type {State} */


  function labelStart(code) {
    if (code === 94) {
      effects.enter('gfmFootnoteDefinitionMarker');
      effects.consume(code);
      effects.exit('gfmFootnoteDefinitionMarker');
      effects.enter('gfmFootnoteDefinitionLabelString');
      return atBreak;
    }

    return nok(code);
  }
  /** @type {State} */


  function atBreak(code) {
    /** @type {Token} */
    var token;

    if (code === null || code === 91 || size > 999) {
      return nok(code);
    }

    if (code === 93) {
      if (!data) {
        return nok(code);
      }

      token = effects.exit('gfmFootnoteDefinitionLabelString');
      identifier = normalizeIdentifier(self.sliceSerialize(token));
      effects.enter('gfmFootnoteDefinitionLabelMarker');
      effects.consume(code);
      effects.exit('gfmFootnoteDefinitionLabelMarker');
      effects.exit('gfmFootnoteDefinitionLabel');
      return labelAfter;
    }

    if (markdownLineEnding(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      size++;
      return atBreak;
    }

    effects.enter('chunkString').contentType = 'string';
    return label(code);
  }
  /** @type {State} */


  function label(code) {
    if (code === null || markdownLineEnding(code) || code === 91 || code === 93 || size > 999) {
      effects.exit('chunkString');
      return atBreak(code);
    }

    if (!markdownLineEndingOrSpace(code)) {
      data = true;
    }

    size++;
    effects.consume(code);
    return code === 92 ? labelEscape : label;
  }
  /** @type {State} */


  function labelEscape(code) {
    if (code === 91 || code === 92 || code === 93) {
      effects.consume(code);
      size++;
      return label;
    }

    return label(code);
  }
  /** @type {State} */


  function labelAfter(code) {
    if (code === 58) {
      effects.enter('definitionMarker');
      effects.consume(code);
      effects.exit('definitionMarker'); // Any whitespace after the marker is eaten, forming indented code
      // is not possible.
      // No space is also fine, just like a block quote marker.

      return factorySpace(effects, done, 'gfmFootnoteDefinitionWhitespace');
    }

    return nok(code);
  }
  /** @type {State} */


  function done(code) {
    if (!defined.includes(identifier)) {
      defined.push(identifier);
    }

    return ok(code);
  }
}
/** @type {Tokenizer} */


function tokenizeDefinitionContinuation(effects, ok, nok) {
  // Either a blank line, which is okay, or an indented thing.
  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));
}
/** @type {Exiter} */


function gfmFootnoteDefinitionEnd(effects) {
  effects.exit('gfmFootnoteDefinition');
}
/** @type {Tokenizer} */


function tokenizeIndent(effects, ok, nok) {
  var self = this;
  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);
  /** @type {State} */

  function afterPrefix(code) {
    var tail = self.events[self.events.length - 1];
    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-util-classify-character/index.js
/**
 * @typedef {import('micromark-util-types').Code} Code
 */

/**
 * Classify whether a character code represents whitespace, punctuation, or
 * something else.
 *
 * Used for attention (emphasis, strong), whose sequences can open or close
 * based on the class of surrounding characters.
 *
 * Note that eof (`null`) is seen as whitespace.
 *
 * @param {Code} code
 * @returns {number|undefined}
 */

function classifyCharacter(code) {
  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {
    return 1;
  }

  if (unicodePunctuation(code)) {
    return 2;
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-util-resolve-all/index.js
/**
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Resolver} Resolver
 */

/**
 * Call all `resolveAll`s.
 *
 * @param {{resolveAll?: Resolver}[]} constructs
 * @param {Event[]} events
 * @param {TokenizeContext} context
 * @returns {Event[]}
 */
function resolveAll(constructs, events, context) {
  /** @type {Resolver[]} */
  var called = [];
  var index = -1;

  while (++index < constructs.length) {
    var resolve = constructs[index].resolveAll;

    if (resolve && !called.includes(resolve)) {
      events = resolve(events, context);
      called.push(resolve);
    }
  }

  return events;
}
;// CONCATENATED MODULE: ./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js


/**
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').Event} Event
 */

/**
 * @typedef Options
 * @property {boolean} [singleTilde=true]
 *   Whether to support strikethrough with a single tilde (`boolean`, default:
 *   `true`).
 *   Single tildes work on github.com, but are technically prohibited by the
 *   GFM spec.
 */



/**
 * @param {Options} [options]
 * @returns {Extension}
 */

function gfmStrikethrough() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var single = options.singleTilde;
  var tokenizer = {
    tokenize: tokenizeStrikethrough,
    resolveAll: resolveAllStrikethrough
  };

  if (single === null || single === undefined) {
    single = true;
  }

  return {
    text: _defineProperty({}, 126, tokenizer),
    insideSpan: {
      "null": [tokenizer]
    },
    attentionMarkers: {
      "null": [126]
    }
  };
  /**
   * Take events and resolve strikethrough.
   *
   * @type {Resolver}
   */

  function resolveAllStrikethrough(events, context) {
    var index = -1; // Walk through all events.

    while (++index < events.length) {
      // Find a token that can close.
      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {
        var open = index; // Now walk back to find an opener.

        while (open--) {
          // Find a token that can open the closer.
          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open && // If the sizes are the same:
          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {
            events[index][1].type = 'strikethroughSequence';
            events[open][1].type = 'strikethroughSequence';
            var strikethrough = {
              type: 'strikethrough',
              start: Object.assign({}, events[open][1].start),
              end: Object.assign({}, events[index][1].end)
            };
            var text = {
              type: 'strikethroughText',
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index][1].start)
            }; // Opening.

            var nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]]; // Between.

            splice(nextEvents, nextEvents.length, 0, resolveAll(context.parser.constructs.insideSpan["null"], events.slice(open + 1, index), context)); // Closing.

            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);
            splice(events, open - 1, index - open + 3, nextEvents);
            index = open + nextEvents.length - 2;
            break;
          }
        }
      }
    }

    index = -1;

    while (++index < events.length) {
      if (events[index][1].type === 'strikethroughSequenceTemporary') {
        events[index][1].type = 'data';
      }
    }

    return events;
  }
  /** @type {Tokenizer} */


  function tokenizeStrikethrough(effects, ok, nok) {
    var previous = this.previous;
    var events = this.events;
    var size = 0;
    return start;
    /** @type {State} */

    function start(code) {
      if (previous === 126 && events[events.length - 1][1].type !== 'characterEscape') {
        return nok(code);
      }

      effects.enter('strikethroughSequenceTemporary');
      return more(code);
    }
    /** @type {State} */


    function more(code) {
      var before = classifyCharacter(previous);

      if (code === 126) {
        // If this is the third marker, exit.
        if (size > 1) return nok(code);
        effects.consume(code);
        size++;
        return more;
      }

      if (size < 2 && !single) return nok(code);
      var token = effects.exit('strikethroughSequenceTemporary');
      var after = classifyCharacter(code);
      token._open = !after || after === 2 && Boolean(before);
      token._close = !before || before === 2 && Boolean(after);
      return ok(code);
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-extension-gfm-table/lib/syntax.js
/**
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 */

/**
 * @typedef {'left'|'center'|'right'|null} Align
 */


/** @type {Extension} */

var gfmTable = {
  flow: {
    "null": {
      tokenize: tokenizeTable,
      resolve: resolveTable
    }
  }
};
var nextPrefixedOrBlank = {
  tokenize: tokenizeNextPrefixedOrBlank,
  partial: true
};
/** @type {Resolver} */

function resolveTable(events, context) {
  var index = -1;
  /** @type {boolean|undefined} */

  var inHead;
  /** @type {boolean|undefined} */

  var inDelimiterRow;
  /** @type {boolean|undefined} */

  var inRow;
  /** @type {number|undefined} */

  var contentStart;
  /** @type {number|undefined} */

  var contentEnd;
  /** @type {number|undefined} */

  var cellStart;
  /** @type {boolean|undefined} */

  var seenCellInRow;

  while (++index < events.length) {
    var token = events[index][1];

    if (inRow) {
      if (token.type === 'temporaryTableCellContent') {
        contentStart = contentStart || index;
        contentEnd = index;
      }

      if ( // Combine separate content parts into one.
      (token.type === 'tableCellDivider' || token.type === 'tableRow') && contentEnd) {
        var content = {
          type: 'tableContent',
          start: events[contentStart][1].start,
          end: events[contentEnd][1].end
        };
        /** @type {Token} */

        var text = {
          type: 'chunkText',
          start: content.start,
          end: content.end,
          // @ts-expect-error It’s fine.
          contentType: 'text'
        };
        events.splice(contentStart, contentEnd - contentStart + 1, ['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]);
        index -= contentEnd - contentStart - 3;
        contentStart = undefined;
        contentEnd = undefined;
      }
    }

    if (events[index][0] === 'exit' && cellStart !== undefined && cellStart + (seenCellInRow ? 0 : 1) < index && (token.type === 'tableCellDivider' || token.type === 'tableRow' && (cellStart + 3 < index || events[cellStart][1].type !== 'whitespace'))) {
      var cell = {
        type: inDelimiterRow ? 'tableDelimiter' : inHead ? 'tableHeader' : 'tableData',
        start: events[cellStart][1].start,
        end: events[index][1].end
      };
      events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, ['exit', cell, context]);
      events.splice(cellStart, 0, ['enter', cell, context]);
      index += 2;
      cellStart = index + 1;
      seenCellInRow = true;
    }

    if (token.type === 'tableRow') {
      inRow = events[index][0] === 'enter';

      if (inRow) {
        cellStart = index + 1;
        seenCellInRow = false;
      }
    }

    if (token.type === 'tableDelimiterRow') {
      inDelimiterRow = events[index][0] === 'enter';

      if (inDelimiterRow) {
        cellStart = index + 1;
        seenCellInRow = false;
      }
    }

    if (token.type === 'tableHead') {
      inHead = events[index][0] === 'enter';
    }
  }

  return events;
}
/** @type {Tokenizer} */


function tokenizeTable(effects, ok, nok) {
  var self = this;
  /** @type {Align[]} */

  var align = [];
  var tableHeaderCount = 0;
  /** @type {boolean|undefined} */

  var seenDelimiter;
  /** @type {boolean|undefined} */

  var hasDash;
  return start;
  /** @type {State} */

  function start(code) {
    // @ts-expect-error Custom.
    effects.enter('table')._align = align;
    effects.enter('tableHead');
    effects.enter('tableRow'); // If we start with a pipe, we open a cell marker.

    if (code === 124) {
      return cellDividerHead(code);
    }

    tableHeaderCount++;
    effects.enter('temporaryTableCellContent'); // Can’t be space or eols at the start of a construct, so we’re in a cell.

    return inCellContentHead(code);
  }
  /** @type {State} */


  function cellDividerHead(code) {
    effects.enter('tableCellDivider');
    effects.consume(code);
    effects.exit('tableCellDivider');
    seenDelimiter = true;
    return cellBreakHead;
  }
  /** @type {State} */


  function cellBreakHead(code) {
    if (code === null || markdownLineEnding(code)) {
      return atRowEndHead(code);
    }

    if (markdownSpace(code)) {
      effects.enter('whitespace');
      effects.consume(code);
      return inWhitespaceHead;
    }

    if (seenDelimiter) {
      seenDelimiter = undefined;
      tableHeaderCount++;
    }

    if (code === 124) {
      return cellDividerHead(code);
    } // Anything else is cell content.


    effects.enter('temporaryTableCellContent');
    return inCellContentHead(code);
  }
  /** @type {State} */


  function inWhitespaceHead(code) {
    if (markdownSpace(code)) {
      effects.consume(code);
      return inWhitespaceHead;
    }

    effects.exit('whitespace');
    return cellBreakHead(code);
  }
  /** @type {State} */


  function inCellContentHead(code) {
    // EOF, whitespace, pipe
    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {
      effects.exit('temporaryTableCellContent');
      return cellBreakHead(code);
    }

    effects.consume(code);
    return code === 92 ? inCellContentEscapeHead : inCellContentHead;
  }
  /** @type {State} */


  function inCellContentEscapeHead(code) {
    if (code === 92 || code === 124) {
      effects.consume(code);
      return inCellContentHead;
    } // Anything else.


    return inCellContentHead(code);
  }
  /** @type {State} */


  function atRowEndHead(code) {
    if (code === null) {
      return nok(code);
    }

    effects.exit('tableRow');
    effects.exit('tableHead');
    var originalInterrupt = self.interrupt;
    self.interrupt = true;
    return effects.attempt({
      tokenize: tokenizeRowEnd,
      partial: true
    }, function (code) {
      self.interrupt = originalInterrupt;
      effects.enter('tableDelimiterRow');
      return atDelimiterRowBreak(code);
    }, function (code) {
      self.interrupt = originalInterrupt;
      return nok(code);
    })(code);
  }
  /** @type {State} */


  function atDelimiterRowBreak(code) {
    if (code === null || markdownLineEnding(code)) {
      return rowEndDelimiter(code);
    }

    if (markdownSpace(code)) {
      effects.enter('whitespace');
      effects.consume(code);
      return inWhitespaceDelimiter;
    }

    if (code === 45) {
      effects.enter('tableDelimiterFiller');
      effects.consume(code);
      hasDash = true;
      align.push(null);
      return inFillerDelimiter;
    }

    if (code === 58) {
      effects.enter('tableDelimiterAlignment');
      effects.consume(code);
      effects.exit('tableDelimiterAlignment');
      align.push('left');
      return afterLeftAlignment;
    } // If we start with a pipe, we open a cell marker.


    if (code === 124) {
      effects.enter('tableCellDivider');
      effects.consume(code);
      effects.exit('tableCellDivider');
      return atDelimiterRowBreak;
    }

    return nok(code);
  }
  /** @type {State} */


  function inWhitespaceDelimiter(code) {
    if (markdownSpace(code)) {
      effects.consume(code);
      return inWhitespaceDelimiter;
    }

    effects.exit('whitespace');
    return atDelimiterRowBreak(code);
  }
  /** @type {State} */


  function inFillerDelimiter(code) {
    if (code === 45) {
      effects.consume(code);
      return inFillerDelimiter;
    }

    effects.exit('tableDelimiterFiller');

    if (code === 58) {
      effects.enter('tableDelimiterAlignment');
      effects.consume(code);
      effects.exit('tableDelimiterAlignment');
      align[align.length - 1] = align[align.length - 1] === 'left' ? 'center' : 'right';
      return afterRightAlignment;
    }

    return atDelimiterRowBreak(code);
  }
  /** @type {State} */


  function afterLeftAlignment(code) {
    if (code === 45) {
      effects.enter('tableDelimiterFiller');
      effects.consume(code);
      hasDash = true;
      return inFillerDelimiter;
    } // Anything else is not ok.


    return nok(code);
  }
  /** @type {State} */


  function afterRightAlignment(code) {
    if (code === null || markdownLineEnding(code)) {
      return rowEndDelimiter(code);
    }

    if (markdownSpace(code)) {
      effects.enter('whitespace');
      effects.consume(code);
      return inWhitespaceDelimiter;
    } // `|`


    if (code === 124) {
      effects.enter('tableCellDivider');
      effects.consume(code);
      effects.exit('tableCellDivider');
      return atDelimiterRowBreak;
    }

    return nok(code);
  }
  /** @type {State} */


  function rowEndDelimiter(code) {
    effects.exit('tableDelimiterRow'); // Exit if there was no dash at all, or if the header cell count is not the
    // delimiter cell count.

    if (!hasDash || tableHeaderCount !== align.length) {
      return nok(code);
    }

    if (code === null) {
      return tableClose(code);
    }

    return effects.check(nextPrefixedOrBlank, tableClose, effects.attempt({
      tokenize: tokenizeRowEnd,
      partial: true
    }, factorySpace(effects, bodyStart, 'linePrefix', 4), tableClose))(code);
  }
  /** @type {State} */


  function tableClose(code) {
    effects.exit('table');
    return ok(code);
  }
  /** @type {State} */


  function bodyStart(code) {
    effects.enter('tableBody');
    return rowStartBody(code);
  }
  /** @type {State} */


  function rowStartBody(code) {
    effects.enter('tableRow'); // If we start with a pipe, we open a cell marker.

    if (code === 124) {
      return cellDividerBody(code);
    }

    effects.enter('temporaryTableCellContent'); // Can’t be space or eols at the start of a construct, so we’re in a cell.

    return inCellContentBody(code);
  }
  /** @type {State} */


  function cellDividerBody(code) {
    effects.enter('tableCellDivider');
    effects.consume(code);
    effects.exit('tableCellDivider');
    return cellBreakBody;
  }
  /** @type {State} */


  function cellBreakBody(code) {
    if (code === null || markdownLineEnding(code)) {
      return atRowEndBody(code);
    }

    if (markdownSpace(code)) {
      effects.enter('whitespace');
      effects.consume(code);
      return inWhitespaceBody;
    } // `|`


    if (code === 124) {
      return cellDividerBody(code);
    } // Anything else is cell content.


    effects.enter('temporaryTableCellContent');
    return inCellContentBody(code);
  }
  /** @type {State} */


  function inWhitespaceBody(code) {
    if (markdownSpace(code)) {
      effects.consume(code);
      return inWhitespaceBody;
    }

    effects.exit('whitespace');
    return cellBreakBody(code);
  }
  /** @type {State} */


  function inCellContentBody(code) {
    // EOF, whitespace, pipe
    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {
      effects.exit('temporaryTableCellContent');
      return cellBreakBody(code);
    }

    effects.consume(code);
    return code === 92 ? inCellContentEscapeBody : inCellContentBody;
  }
  /** @type {State} */


  function inCellContentEscapeBody(code) {
    if (code === 92 || code === 124) {
      effects.consume(code);
      return inCellContentBody;
    } // Anything else.


    return inCellContentBody(code);
  }
  /** @type {State} */


  function atRowEndBody(code) {
    effects.exit('tableRow');

    if (code === null) {
      return tableBodyClose(code);
    }

    return effects.check(nextPrefixedOrBlank, tableBodyClose, effects.attempt({
      tokenize: tokenizeRowEnd,
      partial: true
    }, factorySpace(effects, rowStartBody, 'linePrefix', 4), tableBodyClose))(code);
  }
  /** @type {State} */


  function tableBodyClose(code) {
    effects.exit('tableBody');
    return tableClose(code);
  }
  /** @type {Tokenizer} */


  function tokenizeRowEnd(effects, ok, nok) {
    return start;
    /** @type {State} */

    function start(code) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return factorySpace(effects, prefixed, 'linePrefix');
    }
    /** @type {State} */


    function prefixed(code) {
      // Blank or interrupting line.
      if (self.parser.lazy[self.now().line] || code === null || markdownLineEnding(code)) {
        return nok(code);
      }

      var tail = self.events[self.events.length - 1]; // Indented code can interrupt delimiter and body rows.

      if (!self.parser.constructs.disable["null"].includes('codeIndented') && tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4) {
        return nok(code);
      }

      self._gfmTableDynamicInterruptHack = true;
      return effects.check(self.parser.constructs.flow, function (code) {
        self._gfmTableDynamicInterruptHack = false;
        return nok(code);
      }, function (code) {
        self._gfmTableDynamicInterruptHack = false;
        return ok(code);
      })(code);
    }
  }
}
/** @type {Tokenizer} */


function tokenizeNextPrefixedOrBlank(effects, ok, nok) {
  var size = 0;
  return start;
  /** @type {State} */

  function start(code) {
    // This is a check, so we don’t care about tokens, but we open a bogus one
    // so we’re valid.
    effects.enter('check'); // EOL.

    effects.consume(code);
    return whitespace;
  }
  /** @type {State} */


  function whitespace(code) {
    if (code === -1 || code === 32) {
      effects.consume(code);
      size++;
      return size === 4 ? ok : whitespace;
    } // EOF or whitespace


    if (code === null || markdownLineEndingOrSpace(code)) {
      return ok(code);
    } // Anything else.


    return nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js


/**
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Previous} Previous
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Code} Code
 */


var tasklistCheck = {
  tokenize: tokenizeTasklistCheck
};
var gfmTaskListItem = {
  text: _defineProperty({}, 91, tasklistCheck)
};
/** @type {Tokenizer} */

function tokenizeTasklistCheck(effects, ok, nok) {
  var self = this;
  return open;
  /** @type {State} */

  function open(code) {
    if ( // Exit if there’s stuff before.
    self.previous !== null || // Exit if not in the first content that is the first child of a list
    // item.
    !self._gfmTasklistFirstContentOfListItem) {
      return nok(code);
    }

    effects.enter('taskListCheck');
    effects.enter('taskListCheckMarker');
    effects.consume(code);
    effects.exit('taskListCheckMarker');
    return inside;
  }
  /** @type {State} */


  function inside(code) {
    if (markdownSpace(code)) {
      effects.enter('taskListCheckValueUnchecked');
      effects.consume(code);
      effects.exit('taskListCheckValueUnchecked');
      return close;
    }

    if (code === 88 || code === 120) {
      effects.enter('taskListCheckValueChecked');
      effects.consume(code);
      effects.exit('taskListCheckValueChecked');
      return close;
    }

    return nok(code);
  }
  /** @type {State} */


  function close(code) {
    if (code === 93) {
      effects.enter('taskListCheckMarker');
      effects.consume(code);
      effects.exit('taskListCheckMarker');
      effects.exit('taskListCheck');
      return effects.check({
        tokenize: spaceThenNonSpace
      }, ok, nok);
    }

    return nok(code);
  }
}
/** @type {Tokenizer} */


function spaceThenNonSpace(effects, ok, nok) {
  var self = this;
  return factorySpace(effects, after, 'whitespace');
  /** @type {State} */

  function after(code) {
    var tail = self.events[self.events.length - 1];
    return tail && tail[1].type === 'whitespace' && code !== null && !markdownLineEndingOrSpace(code) ? ok(code) : nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-extension-gfm/index.js
/**
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
 * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options
 * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions
 */







/**
 * Support GFM or markdown on github.com.
 *
 * @param {Options} [options]
 * @returns {Extension}
 */

function gfm(options) {
  return combineExtensions([gfmAutolinkLiteral, gfmFootnote(), gfmStrikethrough(options), gfmTable, gfmTaskListItem]);
}
/**
 * Support to compile GFM to HTML.
 *
 * @param {HtmlOptions} [options]
 * @returns {HtmlExtension}
 */

function gfmHtml(options) {
  return combineHtmlExtensions([gfmAutolinkLiteralHtml, gfmFootnoteHtml(options), gfmStrikethroughHtml, gfmTableHtml, gfmTagfilterHtml, gfmTaskListItemHtml]);
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string) {
  if (typeof string !== 'string') {
    throw new TypeError('Expected a string');
  } // Escape characters with special meaning either inside or outside character sets.
  // Use a simple backslash escape when it’s always valid, and a `\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.


  return string.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&').replace(/-/g, '\\x2d');
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/color.js
/**
 * @param {string} d
 * @returns {string}
 */
function color_color(d) {
  return "\x1B[33m" + d + "\x1B[39m";
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 */

/**
 * @typedef {CONTINUE|SKIP|EXIT} Action Union of the action types
 * @typedef {number} Index Move to the sibling at index next (after node itself is completely traversed). Useful if mutating the tree, such as removing the node the visitor is currently on, or any of its previous siblings (or next siblings, in case of reverse) Results less than 0 or greater than or equal to children.length stop traversing the parent
 * @typedef {[(Action|null|undefined|void)?, (Index|null|undefined)?]} ActionTuple List with one or two values, the first an action, the second an index.
 * @typedef {null|undefined|Action|Index|ActionTuple|void} VisitorResult Any value that can be returned from a visitor
 */

/**
 * Invoked when a node (matching test, if given) is found.
 * Visitors are free to transform node.
 * They can also transform the parent of node (the last of ancestors).
 * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.
 * If adding or removing previous siblings (or next siblings, in case of reverse) of node,
 * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.
 * Adding or removing next siblings of node (or previous siblings, in case of reverse)
 * is handled as expected without needing to return a new index.
 * Removing the children property of an ancestor still results in them being traversed.
 *
 * @template {Node} V
 * @callback Visitor
 * @param {V} node Found node
 * @param {Array.<Parent>} ancestors Ancestors of node
 * @returns {VisitorResult}
 */


/**
 * Continue traversing as normal
 */

var unist_util_visit_parents_CONTINUE = true;
/**
 * Do not traverse this node’s children
 */

var unist_util_visit_parents_SKIP = 'skip';
/**
 * Stop traversing immediately
 */

var unist_util_visit_parents_EXIT = false;
var unist_util_visit_parents_visitParents =
/**
 * @type {(
 *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &
 *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &
 *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)
 * )}
 */

/**
 * Visit children of tree which pass a test
 *
 * @param {Node} tree Abstract syntax tree to walk
 * @param {Test} test test Test node
 * @param {Visitor<Node>} visitor Function to run for each node
 * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false
 */
function visitParents(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor; // @ts-ignore no visitor given, so `visitor` is test.

    visitor = test;
    test = null;
  }

  var is = convert(test);
  var step = reverse ? -1 : 1;
  factory(tree, null, [])();
  /**
   * @param {Node} node
   * @param {number?} index
   * @param {Array.<Parent>} parents
   */

  function factory(node, index, parents) {
    /** @type {Object.<string, unknown>} */
    var value = typeof node === 'object' && node !== null ? node : {};
    /** @type {string} */

    var name;

    if (typeof value.type === 'string') {
      name = typeof value.tagName === 'string' ? value.tagName : typeof value.name === 'string' ? value.name : undefined;
      Object.defineProperty(visit, 'name', {
        value: 'node (' + color_color(value.type + (name ? '<' + name + '>' : '')) + ')'
      });
    }

    return visit;

    function visit() {
      /** @type {ActionTuple} */
      var result = [];
      /** @type {ActionTuple} */

      var subresult;
      /** @type {number} */

      var offset;
      /** @type {Array.<Parent>} */

      var grandparents;

      if (!test || is(node, index, parents[parents.length - 1] || null)) {
        result = unist_util_visit_parents_toResult(visitor(node, parents));

        if (result[0] === unist_util_visit_parents_EXIT) {
          return result;
        }
      }

      if (node.children && result[0] !== unist_util_visit_parents_SKIP) {
        // @ts-ignore looks like a parent.
        offset = (reverse ? node.children.length : -1) + step; // @ts-ignore looks like a parent.

        grandparents = parents.concat(node); // @ts-ignore looks like a parent.

        while (offset > -1 && offset < node.children.length) {
          subresult = factory(node.children[offset], offset, grandparents)();

          if (subresult[0] === unist_util_visit_parents_EXIT) {
            return subresult;
          }

          offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;
        }
      }

      return result;
    }
  }
};
/**
 * @param {VisitorResult} value
 * @returns {ActionTuple}
 */

function unist_util_visit_parents_toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }

  if (typeof value === 'number') {
    return [unist_util_visit_parents_CONTINUE, value];
  }

  return [value];
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-find-and-replace/index.js


/**
 * @typedef Options Configuration.
 * @property {Test} [ignore] `unist-util-is` test used to assert parents
 *
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast').Content} Content
 * @typedef {import('mdast').PhrasingContent} PhrasingContent
 * @typedef {import('mdast').Text} Text
 * @typedef {Content|Root} Node
 * @typedef {Extract<Node, import('mdast').Parent>} Parent
 *
 * @typedef {import('unist-util-visit-parents').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 *
 * @typedef RegExpMatchObject
 * @property {number} index
 * @property {string} input
 *
 * @typedef {string|RegExp} Find
 * @typedef {string|ReplaceFunction} Replace
 *
 * @typedef {[Find, Replace]} FindAndReplaceTuple
 * @typedef {Object.<string, Replace>} FindAndReplaceSchema
 * @typedef {Array.<FindAndReplaceTuple>} FindAndReplaceList
 *
 * @typedef {[RegExp, ReplaceFunction]} Pair
 * @typedef {Array.<Pair>} Pairs
 */

/**
 * @callback ReplaceFunction
 * @param {...any} parameters
 * @returns {Array.<PhrasingContent>|PhrasingContent|string|false|undefined|null}
 */



var mdast_util_find_and_replace_own = {}.hasOwnProperty;
/**
 * @param tree mdast tree
 * @param find Value to find and remove. When `string`, escaped and made into a global `RegExp`
 * @param [replace] Value to insert.
 *   * When `string`, turned into a Text node.
 *   * When `Function`, called with the results of calling `RegExp.exec` as
 *     arguments, in which case it can return a single or a list of `Node`,
 *     a `string` (which is wrapped in a `Text` node), or `false` to not replace
 * @param [options] Configuration.
 */

var findAndReplace =
/**
 * @type {(
 *   ((tree: Node, find: Find, replace?: Replace, options?: Options) => Node) &
 *   ((tree: Node, schema: FindAndReplaceSchema|FindAndReplaceList, options?: Options) => Node)
 * )}
 **/

/**
 * @param {Node} tree
 * @param {Find|FindAndReplaceSchema|FindAndReplaceList} find
 * @param {Replace|Options} [replace]
 * @param {Options} [options]
 */
function findAndReplace(tree, find, replace, options) {
  /** @type {Options|undefined} */
  var settings;
  /** @type {FindAndReplaceSchema|FindAndReplaceList} */

  var schema;

  if (typeof find === 'string' || find instanceof RegExp) {
    // @ts-expect-error don’t expect options twice.
    schema = [[find, replace]];
    settings = options;
  } else {
    schema = find; // @ts-expect-error don’t expect replace twice.

    settings = replace;
  }

  if (!settings) {
    settings = {};
  }

  var ignored = convert(settings.ignore || []);
  var pairs = toPairs(schema);
  var pairIndex = -1;

  while (++pairIndex < pairs.length) {
    unist_util_visit_parents_visitParents(tree, 'text', visitor);
  }

  return tree;
  /** @type {import('unist-util-visit-parents').Visitor<Text>} */

  function visitor(node, parents) {
    var index = -1;
    /** @type {Parent|undefined} */

    var grandparent;

    while (++index < parents.length) {
      var parent =
      /** @type {Parent} */
      parents[index];

      if (ignored(parent, // @ts-expect-error mdast vs. unist parent.
      grandparent ? grandparent.children.indexOf(parent) : undefined, grandparent)) {
        return;
      }

      grandparent = parent;
    }

    if (grandparent) {
      return handler(node, grandparent);
    }
  }
  /**
   * @param {Text} node
   * @param {Parent} parent
   * @returns {VisitorResult}
   */


  function handler(node, parent) {
    var find = pairs[pairIndex][0];
    var replace = pairs[pairIndex][1];
    var start = 0; // @ts-expect-error: TS is wrong, some of these children can be text.

    var index = parent.children.indexOf(node);
    /** @type {Array.<PhrasingContent>} */

    var nodes = [];
    /** @type {number|undefined} */

    var position;
    find.lastIndex = 0;
    var match = find.exec(node.value);

    while (match) {
      position = match.index; // @ts-expect-error this is perfectly fine, typescript.

      var value = replace.apply(void 0, _toConsumableArray(match).concat([{
        index: match.index,
        input: match.input
      }]));

      if (typeof value === 'string') {
        value = value.length > 0 ? {
          type: 'text',
          value: value
        } : undefined;
      }

      if (value !== false) {
        if (start !== position) {
          nodes.push({
            type: 'text',
            value: node.value.slice(start, position)
          });
        }

        if (Array.isArray(value)) {
          var _nodes;

          (_nodes = nodes).push.apply(_nodes, _toConsumableArray(value));
        } else if (value) {
          nodes.push(value);
        }

        start = position + match[0].length;
      }

      if (!find.global) {
        break;
      }

      match = find.exec(node.value);
    }

    if (position === undefined) {
      nodes = [node];
      index--;
    } else {
      var _parent$children;

      if (start < node.value.length) {
        nodes.push({
          type: 'text',
          value: node.value.slice(start)
        });
      }

      (_parent$children = parent.children).splice.apply(_parent$children, [index, 1].concat(_toConsumableArray(nodes)));
    }

    return index + nodes.length + 1;
  }
};
/**
 * @param {FindAndReplaceSchema|FindAndReplaceList} schema
 * @returns {Pairs}
 */

function toPairs(schema) {
  /** @type {Pairs} */
  var result = [];

  if (typeof schema !== 'object') {
    throw new TypeError('Expected array or object as schema');
  }

  if (Array.isArray(schema)) {
    var index = -1;

    while (++index < schema.length) {
      result.push([toExpression(schema[index][0]), toFunction(schema[index][1])]);
    }
  } else {
    /** @type {string} */
    var key;

    for (key in schema) {
      if (mdast_util_find_and_replace_own.call(schema, key)) {
        result.push([toExpression(key), toFunction(schema[key])]);
      }
    }
  }

  return result;
}
/**
 * @param {Find} find
 * @returns {RegExp}
 */


function toExpression(find) {
  return typeof find === 'string' ? new RegExp(escapeStringRegexp(find), 'g') : find;
}
/**
 * @param {Replace} replace
 * @returns {ReplaceFunction}
 */


function toFunction(replace) {
  return typeof replace === 'function' ? replace : function () {
    return replace;
  };
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-gfm-autolink-literal/index.js
/**
 * @typedef {import('mdast').Link} Link
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 * @typedef {import('mdast-util-to-markdown/lib/types.js').Options} ToMarkdownExtension
 * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction
 * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject
 * @typedef {import('mdast-util-find-and-replace').PhrasingContent} PhrasingContent
 */



var inConstruct = 'phrasing';
var notInConstruct = ['autolink', 'link', 'image', 'label'];
/** @type {FromMarkdownExtension} */

var gfmAutolinkLiteralFromMarkdown = {
  transforms: [transformGfmAutolinkLiterals],
  enter: {
    literalAutolink: enterLiteralAutolink,
    literalAutolinkEmail: enterLiteralAutolinkValue,
    literalAutolinkHttp: enterLiteralAutolinkValue,
    literalAutolinkWww: enterLiteralAutolinkValue
  },
  exit: {
    literalAutolink: exitLiteralAutolink,
    literalAutolinkEmail: exitLiteralAutolinkEmail,
    literalAutolinkHttp: exitLiteralAutolinkHttp,
    literalAutolinkWww: exitLiteralAutolinkWww
  }
};
/** @type {ToMarkdownExtension} */

var gfmAutolinkLiteralToMarkdown = {
  unsafe: [{
    character: '@',
    before: '[+\\-.\\w]',
    after: '[\\-.\\w]',
    inConstruct: inConstruct,
    notInConstruct: notInConstruct
  }, {
    character: '.',
    before: '[Ww]',
    after: '[\\-.\\w]',
    inConstruct: inConstruct,
    notInConstruct: notInConstruct
  }, {
    character: ':',
    before: '[ps]',
    after: '\\/',
    inConstruct: inConstruct,
    notInConstruct: notInConstruct
  }]
};
/** @type {FromMarkdownHandle} */

function enterLiteralAutolink(token) {
  this.enter({
    type: 'link',
    title: null,
    url: '',
    children: []
  }, token);
}
/** @type {FromMarkdownHandle} */


function enterLiteralAutolinkValue(token) {
  this.config.enter.autolinkProtocol.call(this, token);
}
/** @type {FromMarkdownHandle} */


function exitLiteralAutolinkHttp(token) {
  this.config.exit.autolinkProtocol.call(this, token);
}
/** @type {FromMarkdownHandle} */


function exitLiteralAutolinkWww(token) {
  this.config.exit.data.call(this, token);
  var node =
  /** @type {Link} */
  this.stack[this.stack.length - 1];
  node.url = 'http://' + this.sliceSerialize(token);
}
/** @type {FromMarkdownHandle} */


function exitLiteralAutolinkEmail(token) {
  this.config.exit.autolinkEmail.call(this, token);
}
/** @type {FromMarkdownHandle} */


function exitLiteralAutolink(token) {
  this.exit(token);
}
/** @type {FromMarkdownTransform} */


function transformGfmAutolinkLiterals(tree) {
  findAndReplace(tree, [[/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl], [/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g, findEmail]], {
    ignore: ['link', 'linkReference']
  });
}
/**
 * @type {ReplaceFunction}
 * @param {string} _
 * @param {string} protocol
 * @param {string} domain
 * @param {string} path
 * @param {RegExpMatchObject} match
 */
// eslint-disable-next-line max-params


function findUrl(_, protocol, domain, path, match) {
  var prefix = ''; // Not an expected previous character.

  if (!previous(match)) {
    return false;
  } // Treat `www` as part of the domain.


  if (/^w/i.test(protocol)) {
    domain = protocol + domain;
    protocol = '';
    prefix = 'http://';
  }

  if (!isCorrectDomain(domain)) {
    return false;
  }

  var parts = splitUrl(domain + path);
  if (!parts[0]) return false;
  /** @type {PhrasingContent} */

  var result = {
    type: 'link',
    title: null,
    url: prefix + protocol + parts[0],
    children: [{
      type: 'text',
      value: protocol + parts[0]
    }]
  };

  if (parts[1]) {
    return [result, {
      type: 'text',
      value: parts[1]
    }];
  }

  return result;
}
/**
 * @type {ReplaceFunction}
 * @param {string} _
 * @param {string} atext
 * @param {string} label
 * @param {RegExpMatchObject} match
 */


function findEmail(_, atext, label, match) {
  if ( // Not an expected previous character.
  !previous(match, true) || // Label ends in not allowed character.
  /[_-\d]$/.test(label)) {
    return false;
  }

  return {
    type: 'link',
    title: null,
    url: 'mailto:' + atext + '@' + label,
    children: [{
      type: 'text',
      value: atext + '@' + label
    }]
  };
}
/**
 * @param {string} domain
 * @returns {boolean}
 */


function isCorrectDomain(domain) {
  var parts = domain.split('.');

  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\d]/.test(parts[parts.length - 2]))) {
    return false;
  }

  return true;
}
/**
 * @param {string} url
 * @returns {[string, string|undefined]}
 */


function splitUrl(url) {
  var trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);
  /** @type {number} */

  var closingParenIndex;
  /** @type {number} */

  var openingParens;
  /** @type {number} */

  var closingParens;
  /** @type {string|undefined} */

  var trail;

  if (trailExec) {
    url = url.slice(0, trailExec.index);
    trail = trailExec[0];
    closingParenIndex = trail.indexOf(')');
    openingParens = ccount(url, '(');
    closingParens = ccount(url, ')');

    while (closingParenIndex !== -1 && openingParens > closingParens) {
      url += trail.slice(0, closingParenIndex + 1);
      trail = trail.slice(closingParenIndex + 1);
      closingParenIndex = trail.indexOf(')');
      closingParens++;
    }
  }

  return [url, trail];
}
/**
 * @param {RegExpMatchObject} match
 * @param {boolean} [email=false]
 * @returns {boolean}
 */


function previous(match, email) {
  var code = match.input.charCodeAt(match.index - 1);
  return (match.index === 0 || unicodeWhitespace(code) || unicodePunctuation(code)) && (!email || code !== 47);
}
;// CONCATENATED MODULE: ./node_modules/decode-named-character-reference/node_modules/character-entities/index.js
/**
 * Map of named character references.
 *
 * @type {Record<string, string>}
 */
var characterEntities = {
  AEli: 'Æ',
  AElig: 'Æ',
  AM: '&',
  AMP: '&',
  Aacut: 'Á',
  Aacute: 'Á',
  Abreve: 'Ă',
  Acir: 'Â',
  Acirc: 'Â',
  Acy: 'А',
  Afr: '𝔄',
  Agrav: 'À',
  Agrave: 'À',
  Alpha: 'Α',
  Amacr: 'Ā',
  And: '⩓',
  Aogon: 'Ą',
  Aopf: '𝔸',
  ApplyFunction: '⁡',
  Arin: 'Å',
  Aring: 'Å',
  Ascr: '𝒜',
  Assign: '≔',
  Atild: 'Ã',
  Atilde: 'Ã',
  Aum: 'Ä',
  Auml: 'Ä',
  Backslash: '∖',
  Barv: '⫧',
  Barwed: '⌆',
  Bcy: 'Б',
  Because: '∵',
  Bernoullis: 'ℬ',
  Beta: 'Β',
  Bfr: '𝔅',
  Bopf: '𝔹',
  Breve: '˘',
  Bscr: 'ℬ',
  Bumpeq: '≎',
  CHcy: 'Ч',
  COP: '©',
  COPY: '©',
  Cacute: 'Ć',
  Cap: '⋒',
  CapitalDifferentialD: 'ⅅ',
  Cayleys: 'ℭ',
  Ccaron: 'Č',
  Ccedi: 'Ç',
  Ccedil: 'Ç',
  Ccirc: 'Ĉ',
  Cconint: '∰',
  Cdot: 'Ċ',
  Cedilla: '¸',
  CenterDot: '·',
  Cfr: 'ℭ',
  Chi: 'Χ',
  CircleDot: '⊙',
  CircleMinus: '⊖',
  CirclePlus: '⊕',
  CircleTimes: '⊗',
  ClockwiseContourIntegral: '∲',
  CloseCurlyDoubleQuote: '”',
  CloseCurlyQuote: '’',
  Colon: '∷',
  Colone: '⩴',
  Congruent: '≡',
  Conint: '∯',
  ContourIntegral: '∮',
  Copf: 'ℂ',
  Coproduct: '∐',
  CounterClockwiseContourIntegral: '∳',
  Cross: '⨯',
  Cscr: '𝒞',
  Cup: '⋓',
  CupCap: '≍',
  DD: 'ⅅ',
  DDotrahd: '⤑',
  DJcy: 'Ђ',
  DScy: 'Ѕ',
  DZcy: 'Џ',
  Dagger: '‡',
  Darr: '↡',
  Dashv: '⫤',
  Dcaron: 'Ď',
  Dcy: 'Д',
  Del: '∇',
  Delta: 'Δ',
  Dfr: '𝔇',
  DiacriticalAcute: '´',
  DiacriticalDot: '˙',
  DiacriticalDoubleAcute: '˝',
  DiacriticalGrave: '`',
  DiacriticalTilde: '˜',
  Diamond: '⋄',
  DifferentialD: 'ⅆ',
  Dopf: '𝔻',
  Dot: '¨',
  DotDot: '⃜',
  DotEqual: '≐',
  DoubleContourIntegral: '∯',
  DoubleDot: '¨',
  DoubleDownArrow: '⇓',
  DoubleLeftArrow: '⇐',
  DoubleLeftRightArrow: '⇔',
  DoubleLeftTee: '⫤',
  DoubleLongLeftArrow: '⟸',
  DoubleLongLeftRightArrow: '⟺',
  DoubleLongRightArrow: '⟹',
  DoubleRightArrow: '⇒',
  DoubleRightTee: '⊨',
  DoubleUpArrow: '⇑',
  DoubleUpDownArrow: '⇕',
  DoubleVerticalBar: '∥',
  DownArrow: '↓',
  DownArrowBar: '⤓',
  DownArrowUpArrow: '⇵',
  DownBreve: '̑',
  DownLeftRightVector: '⥐',
  DownLeftTeeVector: '⥞',
  DownLeftVector: '↽',
  DownLeftVectorBar: '⥖',
  DownRightTeeVector: '⥟',
  DownRightVector: '⇁',
  DownRightVectorBar: '⥗',
  DownTee: '⊤',
  DownTeeArrow: '↧',
  Downarrow: '⇓',
  Dscr: '𝒟',
  Dstrok: 'Đ',
  ENG: 'Ŋ',
  ET: 'Ð',
  ETH: 'Ð',
  Eacut: 'É',
  Eacute: 'É',
  Ecaron: 'Ě',
  Ecir: 'Ê',
  Ecirc: 'Ê',
  Ecy: 'Э',
  Edot: 'Ė',
  Efr: '𝔈',
  Egrav: 'È',
  Egrave: 'È',
  Element: '∈',
  Emacr: 'Ē',
  EmptySmallSquare: '◻',
  EmptyVerySmallSquare: '▫',
  Eogon: 'Ę',
  Eopf: '𝔼',
  Epsilon: 'Ε',
  Equal: '⩵',
  EqualTilde: '≂',
  Equilibrium: '⇌',
  Escr: 'ℰ',
  Esim: '⩳',
  Eta: 'Η',
  Eum: 'Ë',
  Euml: 'Ë',
  Exists: '∃',
  ExponentialE: 'ⅇ',
  Fcy: 'Ф',
  Ffr: '𝔉',
  FilledSmallSquare: '◼',
  FilledVerySmallSquare: '▪',
  Fopf: '𝔽',
  ForAll: '∀',
  Fouriertrf: 'ℱ',
  Fscr: 'ℱ',
  GJcy: 'Ѓ',
  G: '>',
  GT: '>',
  Gamma: 'Γ',
  Gammad: 'Ϝ',
  Gbreve: 'Ğ',
  Gcedil: 'Ģ',
  Gcirc: 'Ĝ',
  Gcy: 'Г',
  Gdot: 'Ġ',
  Gfr: '𝔊',
  Gg: '⋙',
  Gopf: '𝔾',
  GreaterEqual: '≥',
  GreaterEqualLess: '⋛',
  GreaterFullEqual: '≧',
  GreaterGreater: '⪢',
  GreaterLess: '≷',
  GreaterSlantEqual: '⩾',
  GreaterTilde: '≳',
  Gscr: '𝒢',
  Gt: '≫',
  HARDcy: 'Ъ',
  Hacek: 'ˇ',
  Hat: '^',
  Hcirc: 'Ĥ',
  Hfr: 'ℌ',
  HilbertSpace: 'ℋ',
  Hopf: 'ℍ',
  HorizontalLine: '─',
  Hscr: 'ℋ',
  Hstrok: 'Ħ',
  HumpDownHump: '≎',
  HumpEqual: '≏',
  IEcy: 'Е',
  IJlig: 'Ĳ',
  IOcy: 'Ё',
  Iacut: 'Í',
  Iacute: 'Í',
  Icir: 'Î',
  Icirc: 'Î',
  Icy: 'И',
  Idot: 'İ',
  Ifr: 'ℑ',
  Igrav: 'Ì',
  Igrave: 'Ì',
  Im: 'ℑ',
  Imacr: 'Ī',
  ImaginaryI: 'ⅈ',
  Implies: '⇒',
  Int: '∬',
  Integral: '∫',
  Intersection: '⋂',
  InvisibleComma: '⁣',
  InvisibleTimes: '⁢',
  Iogon: 'Į',
  Iopf: '𝕀',
  Iota: 'Ι',
  Iscr: 'ℐ',
  Itilde: 'Ĩ',
  Iukcy: 'І',
  Ium: 'Ï',
  Iuml: 'Ï',
  Jcirc: 'Ĵ',
  Jcy: 'Й',
  Jfr: '𝔍',
  Jopf: '𝕁',
  Jscr: '𝒥',
  Jsercy: 'Ј',
  Jukcy: 'Є',
  KHcy: 'Х',
  KJcy: 'Ќ',
  Kappa: 'Κ',
  Kcedil: 'Ķ',
  Kcy: 'К',
  Kfr: '𝔎',
  Kopf: '𝕂',
  Kscr: '𝒦',
  LJcy: 'Љ',
  L: '<',
  LT: '<',
  Lacute: 'Ĺ',
  Lambda: 'Λ',
  Lang: '⟪',
  Laplacetrf: 'ℒ',
  Larr: '↞',
  Lcaron: 'Ľ',
  Lcedil: 'Ļ',
  Lcy: 'Л',
  LeftAngleBracket: '⟨',
  LeftArrow: '←',
  LeftArrowBar: '⇤',
  LeftArrowRightArrow: '⇆',
  LeftCeiling: '⌈',
  LeftDoubleBracket: '⟦',
  LeftDownTeeVector: '⥡',
  LeftDownVector: '⇃',
  LeftDownVectorBar: '⥙',
  LeftFloor: '⌊',
  LeftRightArrow: '↔',
  LeftRightVector: '⥎',
  LeftTee: '⊣',
  LeftTeeArrow: '↤',
  LeftTeeVector: '⥚',
  LeftTriangle: '⊲',
  LeftTriangleBar: '⧏',
  LeftTriangleEqual: '⊴',
  LeftUpDownVector: '⥑',
  LeftUpTeeVector: '⥠',
  LeftUpVector: '↿',
  LeftUpVectorBar: '⥘',
  LeftVector: '↼',
  LeftVectorBar: '⥒',
  Leftarrow: '⇐',
  Leftrightarrow: '⇔',
  LessEqualGreater: '⋚',
  LessFullEqual: '≦',
  LessGreater: '≶',
  LessLess: '⪡',
  LessSlantEqual: '⩽',
  LessTilde: '≲',
  Lfr: '𝔏',
  Ll: '⋘',
  Lleftarrow: '⇚',
  Lmidot: 'Ŀ',
  LongLeftArrow: '⟵',
  LongLeftRightArrow: '⟷',
  LongRightArrow: '⟶',
  Longleftarrow: '⟸',
  Longleftrightarrow: '⟺',
  Longrightarrow: '⟹',
  Lopf: '𝕃',
  LowerLeftArrow: '↙',
  LowerRightArrow: '↘',
  Lscr: 'ℒ',
  Lsh: '↰',
  Lstrok: 'Ł',
  Lt: '≪',
  Map: '⤅',
  Mcy: 'М',
  MediumSpace: ' ',
  Mellintrf: 'ℳ',
  Mfr: '𝔐',
  MinusPlus: '∓',
  Mopf: '𝕄',
  Mscr: 'ℳ',
  Mu: 'Μ',
  NJcy: 'Њ',
  Nacute: 'Ń',
  Ncaron: 'Ň',
  Ncedil: 'Ņ',
  Ncy: 'Н',
  NegativeMediumSpace: '​',
  NegativeThickSpace: '​',
  NegativeThinSpace: '​',
  NegativeVeryThinSpace: '​',
  NestedGreaterGreater: '≫',
  NestedLessLess: '≪',
  NewLine: '\n',
  Nfr: '𝔑',
  NoBreak: '⁠',
  NonBreakingSpace: ' ',
  Nopf: 'ℕ',
  Not: '⫬',
  NotCongruent: '≢',
  NotCupCap: '≭',
  NotDoubleVerticalBar: '∦',
  NotElement: '∉',
  NotEqual: '≠',
  NotEqualTilde: '≂̸',
  NotExists: '∄',
  NotGreater: '≯',
  NotGreaterEqual: '≱',
  NotGreaterFullEqual: '≧̸',
  NotGreaterGreater: '≫̸',
  NotGreaterLess: '≹',
  NotGreaterSlantEqual: '⩾̸',
  NotGreaterTilde: '≵',
  NotHumpDownHump: '≎̸',
  NotHumpEqual: '≏̸',
  NotLeftTriangle: '⋪',
  NotLeftTriangleBar: '⧏̸',
  NotLeftTriangleEqual: '⋬',
  NotLess: '≮',
  NotLessEqual: '≰',
  NotLessGreater: '≸',
  NotLessLess: '≪̸',
  NotLessSlantEqual: '⩽̸',
  NotLessTilde: '≴',
  NotNestedGreaterGreater: '⪢̸',
  NotNestedLessLess: '⪡̸',
  NotPrecedes: '⊀',
  NotPrecedesEqual: '⪯̸',
  NotPrecedesSlantEqual: '⋠',
  NotReverseElement: '∌',
  NotRightTriangle: '⋫',
  NotRightTriangleBar: '⧐̸',
  NotRightTriangleEqual: '⋭',
  NotSquareSubset: '⊏̸',
  NotSquareSubsetEqual: '⋢',
  NotSquareSuperset: '⊐̸',
  NotSquareSupersetEqual: '⋣',
  NotSubset: '⊂⃒',
  NotSubsetEqual: '⊈',
  NotSucceeds: '⊁',
  NotSucceedsEqual: '⪰̸',
  NotSucceedsSlantEqual: '⋡',
  NotSucceedsTilde: '≿̸',
  NotSuperset: '⊃⃒',
  NotSupersetEqual: '⊉',
  NotTilde: '≁',
  NotTildeEqual: '≄',
  NotTildeFullEqual: '≇',
  NotTildeTilde: '≉',
  NotVerticalBar: '∤',
  Nscr: '𝒩',
  Ntild: 'Ñ',
  Ntilde: 'Ñ',
  Nu: 'Ν',
  OElig: 'Œ',
  Oacut: 'Ó',
  Oacute: 'Ó',
  Ocir: 'Ô',
  Ocirc: 'Ô',
  Ocy: 'О',
  Odblac: 'Ő',
  Ofr: '𝔒',
  Ograv: 'Ò',
  Ograve: 'Ò',
  Omacr: 'Ō',
  Omega: 'Ω',
  Omicron: 'Ο',
  Oopf: '𝕆',
  OpenCurlyDoubleQuote: '“',
  OpenCurlyQuote: '‘',
  Or: '⩔',
  Oscr: '𝒪',
  Oslas: 'Ø',
  Oslash: 'Ø',
  Otild: 'Õ',
  Otilde: 'Õ',
  Otimes: '⨷',
  Oum: 'Ö',
  Ouml: 'Ö',
  OverBar: '‾',
  OverBrace: '⏞',
  OverBracket: '⎴',
  OverParenthesis: '⏜',
  PartialD: '∂',
  Pcy: 'П',
  Pfr: '𝔓',
  Phi: 'Φ',
  Pi: 'Π',
  PlusMinus: '±',
  Poincareplane: 'ℌ',
  Popf: 'ℙ',
  Pr: '⪻',
  Precedes: '≺',
  PrecedesEqual: '⪯',
  PrecedesSlantEqual: '≼',
  PrecedesTilde: '≾',
  Prime: '″',
  Product: '∏',
  Proportion: '∷',
  Proportional: '∝',
  Pscr: '𝒫',
  Psi: 'Ψ',
  QUO: '"',
  QUOT: '"',
  Qfr: '𝔔',
  Qopf: 'ℚ',
  Qscr: '𝒬',
  RBarr: '⤐',
  RE: '®',
  REG: '®',
  Racute: 'Ŕ',
  Rang: '⟫',
  Rarr: '↠',
  Rarrtl: '⤖',
  Rcaron: 'Ř',
  Rcedil: 'Ŗ',
  Rcy: 'Р',
  Re: 'ℜ',
  ReverseElement: '∋',
  ReverseEquilibrium: '⇋',
  ReverseUpEquilibrium: '⥯',
  Rfr: 'ℜ',
  Rho: 'Ρ',
  RightAngleBracket: '⟩',
  RightArrow: '→',
  RightArrowBar: '⇥',
  RightArrowLeftArrow: '⇄',
  RightCeiling: '⌉',
  RightDoubleBracket: '⟧',
  RightDownTeeVector: '⥝',
  RightDownVector: '⇂',
  RightDownVectorBar: '⥕',
  RightFloor: '⌋',
  RightTee: '⊢',
  RightTeeArrow: '↦',
  RightTeeVector: '⥛',
  RightTriangle: '⊳',
  RightTriangleBar: '⧐',
  RightTriangleEqual: '⊵',
  RightUpDownVector: '⥏',
  RightUpTeeVector: '⥜',
  RightUpVector: '↾',
  RightUpVectorBar: '⥔',
  RightVector: '⇀',
  RightVectorBar: '⥓',
  Rightarrow: '⇒',
  Ropf: 'ℝ',
  RoundImplies: '⥰',
  Rrightarrow: '⇛',
  Rscr: 'ℛ',
  Rsh: '↱',
  RuleDelayed: '⧴',
  SHCHcy: 'Щ',
  SHcy: 'Ш',
  SOFTcy: 'Ь',
  Sacute: 'Ś',
  Sc: '⪼',
  Scaron: 'Š',
  Scedil: 'Ş',
  Scirc: 'Ŝ',
  Scy: 'С',
  Sfr: '𝔖',
  ShortDownArrow: '↓',
  ShortLeftArrow: '←',
  ShortRightArrow: '→',
  ShortUpArrow: '↑',
  Sigma: 'Σ',
  SmallCircle: '∘',
  Sopf: '𝕊',
  Sqrt: '√',
  Square: '□',
  SquareIntersection: '⊓',
  SquareSubset: '⊏',
  SquareSubsetEqual: '⊑',
  SquareSuperset: '⊐',
  SquareSupersetEqual: '⊒',
  SquareUnion: '⊔',
  Sscr: '𝒮',
  Star: '⋆',
  Sub: '⋐',
  Subset: '⋐',
  SubsetEqual: '⊆',
  Succeeds: '≻',
  SucceedsEqual: '⪰',
  SucceedsSlantEqual: '≽',
  SucceedsTilde: '≿',
  SuchThat: '∋',
  Sum: '∑',
  Sup: '⋑',
  Superset: '⊃',
  SupersetEqual: '⊇',
  Supset: '⋑',
  THOR: 'Þ',
  THORN: 'Þ',
  TRADE: '™',
  TSHcy: 'Ћ',
  TScy: 'Ц',
  Tab: '\t',
  Tau: 'Τ',
  Tcaron: 'Ť',
  Tcedil: 'Ţ',
  Tcy: 'Т',
  Tfr: '𝔗',
  Therefore: '∴',
  Theta: 'Θ',
  ThickSpace: '  ',
  ThinSpace: ' ',
  Tilde: '∼',
  TildeEqual: '≃',
  TildeFullEqual: '≅',
  TildeTilde: '≈',
  Topf: '𝕋',
  TripleDot: '⃛',
  Tscr: '𝒯',
  Tstrok: 'Ŧ',
  Uacut: 'Ú',
  Uacute: 'Ú',
  Uarr: '↟',
  Uarrocir: '⥉',
  Ubrcy: 'Ў',
  Ubreve: 'Ŭ',
  Ucir: 'Û',
  Ucirc: 'Û',
  Ucy: 'У',
  Udblac: 'Ű',
  Ufr: '𝔘',
  Ugrav: 'Ù',
  Ugrave: 'Ù',
  Umacr: 'Ū',
  UnderBar: '_',
  UnderBrace: '⏟',
  UnderBracket: '⎵',
  UnderParenthesis: '⏝',
  Union: '⋃',
  UnionPlus: '⊎',
  Uogon: 'Ų',
  Uopf: '𝕌',
  UpArrow: '↑',
  UpArrowBar: '⤒',
  UpArrowDownArrow: '⇅',
  UpDownArrow: '↕',
  UpEquilibrium: '⥮',
  UpTee: '⊥',
  UpTeeArrow: '↥',
  Uparrow: '⇑',
  Updownarrow: '⇕',
  UpperLeftArrow: '↖',
  UpperRightArrow: '↗',
  Upsi: 'ϒ',
  Upsilon: 'Υ',
  Uring: 'Ů',
  Uscr: '𝒰',
  Utilde: 'Ũ',
  Uum: 'Ü',
  Uuml: 'Ü',
  VDash: '⊫',
  Vbar: '⫫',
  Vcy: 'В',
  Vdash: '⊩',
  Vdashl: '⫦',
  Vee: '⋁',
  Verbar: '‖',
  Vert: '‖',
  VerticalBar: '∣',
  VerticalLine: '|',
  VerticalSeparator: '❘',
  VerticalTilde: '≀',
  VeryThinSpace: ' ',
  Vfr: '𝔙',
  Vopf: '𝕍',
  Vscr: '𝒱',
  Vvdash: '⊪',
  Wcirc: 'Ŵ',
  Wedge: '⋀',
  Wfr: '𝔚',
  Wopf: '𝕎',
  Wscr: '𝒲',
  Xfr: '𝔛',
  Xi: 'Ξ',
  Xopf: '𝕏',
  Xscr: '𝒳',
  YAcy: 'Я',
  YIcy: 'Ї',
  YUcy: 'Ю',
  Yacut: 'Ý',
  Yacute: 'Ý',
  Ycirc: 'Ŷ',
  Ycy: 'Ы',
  Yfr: '𝔜',
  Yopf: '𝕐',
  Yscr: '𝒴',
  Yuml: 'Ÿ',
  ZHcy: 'Ж',
  Zacute: 'Ź',
  Zcaron: 'Ž',
  Zcy: 'З',
  Zdot: 'Ż',
  ZeroWidthSpace: '​',
  Zeta: 'Ζ',
  Zfr: 'ℨ',
  Zopf: 'ℤ',
  Zscr: '𝒵',
  aacut: 'á',
  aacute: 'á',
  abreve: 'ă',
  ac: '∾',
  acE: '∾̳',
  acd: '∿',
  acir: 'â',
  acirc: 'â',
  acut: '´',
  acute: '´',
  acy: 'а',
  aeli: 'æ',
  aelig: 'æ',
  af: '⁡',
  afr: '𝔞',
  agrav: 'à',
  agrave: 'à',
  alefsym: 'ℵ',
  aleph: 'ℵ',
  alpha: 'α',
  amacr: 'ā',
  amalg: '⨿',
  am: '&',
  amp: '&',
  and: '∧',
  andand: '⩕',
  andd: '⩜',
  andslope: '⩘',
  andv: '⩚',
  ang: '∠',
  ange: '⦤',
  angle: '∠',
  angmsd: '∡',
  angmsdaa: '⦨',
  angmsdab: '⦩',
  angmsdac: '⦪',
  angmsdad: '⦫',
  angmsdae: '⦬',
  angmsdaf: '⦭',
  angmsdag: '⦮',
  angmsdah: '⦯',
  angrt: '∟',
  angrtvb: '⊾',
  angrtvbd: '⦝',
  angsph: '∢',
  angst: 'Å',
  angzarr: '⍼',
  aogon: 'ą',
  aopf: '𝕒',
  ap: '≈',
  apE: '⩰',
  apacir: '⩯',
  ape: '≊',
  apid: '≋',
  apos: "'",
  approx: '≈',
  approxeq: '≊',
  arin: 'å',
  aring: 'å',
  ascr: '𝒶',
  ast: '*',
  asymp: '≈',
  asympeq: '≍',
  atild: 'ã',
  atilde: 'ã',
  aum: 'ä',
  auml: 'ä',
  awconint: '∳',
  awint: '⨑',
  bNot: '⫭',
  backcong: '≌',
  backepsilon: '϶',
  backprime: '‵',
  backsim: '∽',
  backsimeq: '⋍',
  barvee: '⊽',
  barwed: '⌅',
  barwedge: '⌅',
  bbrk: '⎵',
  bbrktbrk: '⎶',
  bcong: '≌',
  bcy: 'б',
  bdquo: '„',
  becaus: '∵',
  because: '∵',
  bemptyv: '⦰',
  bepsi: '϶',
  bernou: 'ℬ',
  beta: 'β',
  beth: 'ℶ',
  between: '≬',
  bfr: '𝔟',
  bigcap: '⋂',
  bigcirc: '◯',
  bigcup: '⋃',
  bigodot: '⨀',
  bigoplus: '⨁',
  bigotimes: '⨂',
  bigsqcup: '⨆',
  bigstar: '★',
  bigtriangledown: '▽',
  bigtriangleup: '△',
  biguplus: '⨄',
  bigvee: '⋁',
  bigwedge: '⋀',
  bkarow: '⤍',
  blacklozenge: '⧫',
  blacksquare: '▪',
  blacktriangle: '▴',
  blacktriangledown: '▾',
  blacktriangleleft: '◂',
  blacktriangleright: '▸',
  blank: '␣',
  blk12: '▒',
  blk14: '░',
  blk34: '▓',
  block: '█',
  bne: '=⃥',
  bnequiv: '≡⃥',
  bnot: '⌐',
  bopf: '𝕓',
  bot: '⊥',
  bottom: '⊥',
  bowtie: '⋈',
  boxDL: '╗',
  boxDR: '╔',
  boxDl: '╖',
  boxDr: '╓',
  boxH: '═',
  boxHD: '╦',
  boxHU: '╩',
  boxHd: '╤',
  boxHu: '╧',
  boxUL: '╝',
  boxUR: '╚',
  boxUl: '╜',
  boxUr: '╙',
  boxV: '║',
  boxVH: '╬',
  boxVL: '╣',
  boxVR: '╠',
  boxVh: '╫',
  boxVl: '╢',
  boxVr: '╟',
  boxbox: '⧉',
  boxdL: '╕',
  boxdR: '╒',
  boxdl: '┐',
  boxdr: '┌',
  boxh: '─',
  boxhD: '╥',
  boxhU: '╨',
  boxhd: '┬',
  boxhu: '┴',
  boxminus: '⊟',
  boxplus: '⊞',
  boxtimes: '⊠',
  boxuL: '╛',
  boxuR: '╘',
  boxul: '┘',
  boxur: '└',
  boxv: '│',
  boxvH: '╪',
  boxvL: '╡',
  boxvR: '╞',
  boxvh: '┼',
  boxvl: '┤',
  boxvr: '├',
  bprime: '‵',
  breve: '˘',
  brvba: '¦',
  brvbar: '¦',
  bscr: '𝒷',
  bsemi: '⁏',
  bsim: '∽',
  bsime: '⋍',
  bsol: '\\',
  bsolb: '⧅',
  bsolhsub: '⟈',
  bull: '•',
  bullet: '•',
  bump: '≎',
  bumpE: '⪮',
  bumpe: '≏',
  bumpeq: '≏',
  cacute: 'ć',
  cap: '∩',
  capand: '⩄',
  capbrcup: '⩉',
  capcap: '⩋',
  capcup: '⩇',
  capdot: '⩀',
  caps: '∩︀',
  caret: '⁁',
  caron: 'ˇ',
  ccaps: '⩍',
  ccaron: 'č',
  ccedi: 'ç',
  ccedil: 'ç',
  ccirc: 'ĉ',
  ccups: '⩌',
  ccupssm: '⩐',
  cdot: 'ċ',
  cedi: '¸',
  cedil: '¸',
  cemptyv: '⦲',
  cen: '¢',
  cent: '¢',
  centerdot: '·',
  cfr: '𝔠',
  chcy: 'ч',
  check: '✓',
  checkmark: '✓',
  chi: 'χ',
  cir: '○',
  cirE: '⧃',
  circ: 'ˆ',
  circeq: '≗',
  circlearrowleft: '↺',
  circlearrowright: '↻',
  circledR: '®',
  circledS: 'Ⓢ',
  circledast: '⊛',
  circledcirc: '⊚',
  circleddash: '⊝',
  cire: '≗',
  cirfnint: '⨐',
  cirmid: '⫯',
  cirscir: '⧂',
  clubs: '♣',
  clubsuit: '♣',
  colon: ':',
  colone: '≔',
  coloneq: '≔',
  comma: ',',
  commat: '@',
  comp: '∁',
  compfn: '∘',
  complement: '∁',
  complexes: 'ℂ',
  cong: '≅',
  congdot: '⩭',
  conint: '∮',
  copf: '𝕔',
  coprod: '∐',
  cop: '©',
  copy: '©',
  copysr: '℗',
  crarr: '↵',
  cross: '✗',
  cscr: '𝒸',
  csub: '⫏',
  csube: '⫑',
  csup: '⫐',
  csupe: '⫒',
  ctdot: '⋯',
  cudarrl: '⤸',
  cudarrr: '⤵',
  cuepr: '⋞',
  cuesc: '⋟',
  cularr: '↶',
  cularrp: '⤽',
  cup: '∪',
  cupbrcap: '⩈',
  cupcap: '⩆',
  cupcup: '⩊',
  cupdot: '⊍',
  cupor: '⩅',
  cups: '∪︀',
  curarr: '↷',
  curarrm: '⤼',
  curlyeqprec: '⋞',
  curlyeqsucc: '⋟',
  curlyvee: '⋎',
  curlywedge: '⋏',
  curre: '¤',
  curren: '¤',
  curvearrowleft: '↶',
  curvearrowright: '↷',
  cuvee: '⋎',
  cuwed: '⋏',
  cwconint: '∲',
  cwint: '∱',
  cylcty: '⌭',
  dArr: '⇓',
  dHar: '⥥',
  dagger: '†',
  daleth: 'ℸ',
  darr: '↓',
  dash: '‐',
  dashv: '⊣',
  dbkarow: '⤏',
  dblac: '˝',
  dcaron: 'ď',
  dcy: 'д',
  dd: 'ⅆ',
  ddagger: '‡',
  ddarr: '⇊',
  ddotseq: '⩷',
  de: '°',
  deg: '°',
  delta: 'δ',
  demptyv: '⦱',
  dfisht: '⥿',
  dfr: '𝔡',
  dharl: '⇃',
  dharr: '⇂',
  diam: '⋄',
  diamond: '⋄',
  diamondsuit: '♦',
  diams: '♦',
  die: '¨',
  digamma: 'ϝ',
  disin: '⋲',
  div: '÷',
  divid: '÷',
  divide: '÷',
  divideontimes: '⋇',
  divonx: '⋇',
  djcy: 'ђ',
  dlcorn: '⌞',
  dlcrop: '⌍',
  dollar: '$',
  dopf: '𝕕',
  dot: '˙',
  doteq: '≐',
  doteqdot: '≑',
  dotminus: '∸',
  dotplus: '∔',
  dotsquare: '⊡',
  doublebarwedge: '⌆',
  downarrow: '↓',
  downdownarrows: '⇊',
  downharpoonleft: '⇃',
  downharpoonright: '⇂',
  drbkarow: '⤐',
  drcorn: '⌟',
  drcrop: '⌌',
  dscr: '𝒹',
  dscy: 'ѕ',
  dsol: '⧶',
  dstrok: 'đ',
  dtdot: '⋱',
  dtri: '▿',
  dtrif: '▾',
  duarr: '⇵',
  duhar: '⥯',
  dwangle: '⦦',
  dzcy: 'џ',
  dzigrarr: '⟿',
  eDDot: '⩷',
  eDot: '≑',
  eacut: 'é',
  eacute: 'é',
  easter: '⩮',
  ecaron: 'ě',
  ecir: 'ê',
  ecirc: 'ê',
  ecolon: '≕',
  ecy: 'э',
  edot: 'ė',
  ee: 'ⅇ',
  efDot: '≒',
  efr: '𝔢',
  eg: '⪚',
  egrav: 'è',
  egrave: 'è',
  egs: '⪖',
  egsdot: '⪘',
  el: '⪙',
  elinters: '⏧',
  ell: 'ℓ',
  els: '⪕',
  elsdot: '⪗',
  emacr: 'ē',
  empty: '∅',
  emptyset: '∅',
  emptyv: '∅',
  emsp13: ' ',
  emsp14: ' ',
  emsp: ' ',
  eng: 'ŋ',
  ensp: ' ',
  eogon: 'ę',
  eopf: '𝕖',
  epar: '⋕',
  eparsl: '⧣',
  eplus: '⩱',
  epsi: 'ε',
  epsilon: 'ε',
  epsiv: 'ϵ',
  eqcirc: '≖',
  eqcolon: '≕',
  eqsim: '≂',
  eqslantgtr: '⪖',
  eqslantless: '⪕',
  equals: '=',
  equest: '≟',
  equiv: '≡',
  equivDD: '⩸',
  eqvparsl: '⧥',
  erDot: '≓',
  erarr: '⥱',
  escr: 'ℯ',
  esdot: '≐',
  esim: '≂',
  eta: 'η',
  et: 'ð',
  eth: 'ð',
  eum: 'ë',
  euml: 'ë',
  euro: '€',
  excl: '!',
  exist: '∃',
  expectation: 'ℰ',
  exponentiale: 'ⅇ',
  fallingdotseq: '≒',
  fcy: 'ф',
  female: '♀',
  ffilig: 'ﬃ',
  fflig: 'ﬀ',
  ffllig: 'ﬄ',
  ffr: '𝔣',
  filig: 'ﬁ',
  fjlig: 'fj',
  flat: '♭',
  fllig: 'ﬂ',
  fltns: '▱',
  fnof: 'ƒ',
  fopf: '𝕗',
  forall: '∀',
  fork: '⋔',
  forkv: '⫙',
  fpartint: '⨍',
  frac1: '¼',
  frac12: '½',
  frac13: '⅓',
  frac14: '¼',
  frac15: '⅕',
  frac16: '⅙',
  frac18: '⅛',
  frac23: '⅔',
  frac25: '⅖',
  frac3: '¾',
  frac34: '¾',
  frac35: '⅗',
  frac38: '⅜',
  frac45: '⅘',
  frac56: '⅚',
  frac58: '⅝',
  frac78: '⅞',
  frasl: '⁄',
  frown: '⌢',
  fscr: '𝒻',
  gE: '≧',
  gEl: '⪌',
  gacute: 'ǵ',
  gamma: 'γ',
  gammad: 'ϝ',
  gap: '⪆',
  gbreve: 'ğ',
  gcirc: 'ĝ',
  gcy: 'г',
  gdot: 'ġ',
  ge: '≥',
  gel: '⋛',
  geq: '≥',
  geqq: '≧',
  geqslant: '⩾',
  ges: '⩾',
  gescc: '⪩',
  gesdot: '⪀',
  gesdoto: '⪂',
  gesdotol: '⪄',
  gesl: '⋛︀',
  gesles: '⪔',
  gfr: '𝔤',
  gg: '≫',
  ggg: '⋙',
  gimel: 'ℷ',
  gjcy: 'ѓ',
  gl: '≷',
  glE: '⪒',
  gla: '⪥',
  glj: '⪤',
  gnE: '≩',
  gnap: '⪊',
  gnapprox: '⪊',
  gne: '⪈',
  gneq: '⪈',
  gneqq: '≩',
  gnsim: '⋧',
  gopf: '𝕘',
  grave: '`',
  gscr: 'ℊ',
  gsim: '≳',
  gsime: '⪎',
  gsiml: '⪐',
  g: '>',
  gt: '>',
  gtcc: '⪧',
  gtcir: '⩺',
  gtdot: '⋗',
  gtlPar: '⦕',
  gtquest: '⩼',
  gtrapprox: '⪆',
  gtrarr: '⥸',
  gtrdot: '⋗',
  gtreqless: '⋛',
  gtreqqless: '⪌',
  gtrless: '≷',
  gtrsim: '≳',
  gvertneqq: '≩︀',
  gvnE: '≩︀',
  hArr: '⇔',
  hairsp: ' ',
  half: '½',
  hamilt: 'ℋ',
  hardcy: 'ъ',
  harr: '↔',
  harrcir: '⥈',
  harrw: '↭',
  hbar: 'ℏ',
  hcirc: 'ĥ',
  hearts: '♥',
  heartsuit: '♥',
  hellip: '…',
  hercon: '⊹',
  hfr: '𝔥',
  hksearow: '⤥',
  hkswarow: '⤦',
  hoarr: '⇿',
  homtht: '∻',
  hookleftarrow: '↩',
  hookrightarrow: '↪',
  hopf: '𝕙',
  horbar: '―',
  hscr: '𝒽',
  hslash: 'ℏ',
  hstrok: 'ħ',
  hybull: '⁃',
  hyphen: '‐',
  iacut: 'í',
  iacute: 'í',
  ic: '⁣',
  icir: 'î',
  icirc: 'î',
  icy: 'и',
  iecy: 'е',
  iexc: '¡',
  iexcl: '¡',
  iff: '⇔',
  ifr: '𝔦',
  igrav: 'ì',
  igrave: 'ì',
  ii: 'ⅈ',
  iiiint: '⨌',
  iiint: '∭',
  iinfin: '⧜',
  iiota: '℩',
  ijlig: 'ĳ',
  imacr: 'ī',
  image: 'ℑ',
  imagline: 'ℐ',
  imagpart: 'ℑ',
  imath: 'ı',
  imof: '⊷',
  imped: 'Ƶ',
  "in": '∈',
  incare: '℅',
  infin: '∞',
  infintie: '⧝',
  inodot: 'ı',
  "int": '∫',
  intcal: '⊺',
  integers: 'ℤ',
  intercal: '⊺',
  intlarhk: '⨗',
  intprod: '⨼',
  iocy: 'ё',
  iogon: 'į',
  iopf: '𝕚',
  iota: 'ι',
  iprod: '⨼',
  iques: '¿',
  iquest: '¿',
  iscr: '𝒾',
  isin: '∈',
  isinE: '⋹',
  isindot: '⋵',
  isins: '⋴',
  isinsv: '⋳',
  isinv: '∈',
  it: '⁢',
  itilde: 'ĩ',
  iukcy: 'і',
  ium: 'ï',
  iuml: 'ï',
  jcirc: 'ĵ',
  jcy: 'й',
  jfr: '𝔧',
  jmath: 'ȷ',
  jopf: '𝕛',
  jscr: '𝒿',
  jsercy: 'ј',
  jukcy: 'є',
  kappa: 'κ',
  kappav: 'ϰ',
  kcedil: 'ķ',
  kcy: 'к',
  kfr: '𝔨',
  kgreen: 'ĸ',
  khcy: 'х',
  kjcy: 'ќ',
  kopf: '𝕜',
  kscr: '𝓀',
  lAarr: '⇚',
  lArr: '⇐',
  lAtail: '⤛',
  lBarr: '⤎',
  lE: '≦',
  lEg: '⪋',
  lHar: '⥢',
  lacute: 'ĺ',
  laemptyv: '⦴',
  lagran: 'ℒ',
  lambda: 'λ',
  lang: '⟨',
  langd: '⦑',
  langle: '⟨',
  lap: '⪅',
  laqu: '«',
  laquo: '«',
  larr: '←',
  larrb: '⇤',
  larrbfs: '⤟',
  larrfs: '⤝',
  larrhk: '↩',
  larrlp: '↫',
  larrpl: '⤹',
  larrsim: '⥳',
  larrtl: '↢',
  lat: '⪫',
  latail: '⤙',
  late: '⪭',
  lates: '⪭︀',
  lbarr: '⤌',
  lbbrk: '❲',
  lbrace: '{',
  lbrack: '[',
  lbrke: '⦋',
  lbrksld: '⦏',
  lbrkslu: '⦍',
  lcaron: 'ľ',
  lcedil: 'ļ',
  lceil: '⌈',
  lcub: '{',
  lcy: 'л',
  ldca: '⤶',
  ldquo: '“',
  ldquor: '„',
  ldrdhar: '⥧',
  ldrushar: '⥋',
  ldsh: '↲',
  le: '≤',
  leftarrow: '←',
  leftarrowtail: '↢',
  leftharpoondown: '↽',
  leftharpoonup: '↼',
  leftleftarrows: '⇇',
  leftrightarrow: '↔',
  leftrightarrows: '⇆',
  leftrightharpoons: '⇋',
  leftrightsquigarrow: '↭',
  leftthreetimes: '⋋',
  leg: '⋚',
  leq: '≤',
  leqq: '≦',
  leqslant: '⩽',
  les: '⩽',
  lescc: '⪨',
  lesdot: '⩿',
  lesdoto: '⪁',
  lesdotor: '⪃',
  lesg: '⋚︀',
  lesges: '⪓',
  lessapprox: '⪅',
  lessdot: '⋖',
  lesseqgtr: '⋚',
  lesseqqgtr: '⪋',
  lessgtr: '≶',
  lesssim: '≲',
  lfisht: '⥼',
  lfloor: '⌊',
  lfr: '𝔩',
  lg: '≶',
  lgE: '⪑',
  lhard: '↽',
  lharu: '↼',
  lharul: '⥪',
  lhblk: '▄',
  ljcy: 'љ',
  ll: '≪',
  llarr: '⇇',
  llcorner: '⌞',
  llhard: '⥫',
  lltri: '◺',
  lmidot: 'ŀ',
  lmoust: '⎰',
  lmoustache: '⎰',
  lnE: '≨',
  lnap: '⪉',
  lnapprox: '⪉',
  lne: '⪇',
  lneq: '⪇',
  lneqq: '≨',
  lnsim: '⋦',
  loang: '⟬',
  loarr: '⇽',
  lobrk: '⟦',
  longleftarrow: '⟵',
  longleftrightarrow: '⟷',
  longmapsto: '⟼',
  longrightarrow: '⟶',
  looparrowleft: '↫',
  looparrowright: '↬',
  lopar: '⦅',
  lopf: '𝕝',
  loplus: '⨭',
  lotimes: '⨴',
  lowast: '∗',
  lowbar: '_',
  loz: '◊',
  lozenge: '◊',
  lozf: '⧫',
  lpar: '(',
  lparlt: '⦓',
  lrarr: '⇆',
  lrcorner: '⌟',
  lrhar: '⇋',
  lrhard: '⥭',
  lrm: '‎',
  lrtri: '⊿',
  lsaquo: '‹',
  lscr: '𝓁',
  lsh: '↰',
  lsim: '≲',
  lsime: '⪍',
  lsimg: '⪏',
  lsqb: '[',
  lsquo: '‘',
  lsquor: '‚',
  lstrok: 'ł',
  l: '<',
  lt: '<',
  ltcc: '⪦',
  ltcir: '⩹',
  ltdot: '⋖',
  lthree: '⋋',
  ltimes: '⋉',
  ltlarr: '⥶',
  ltquest: '⩻',
  ltrPar: '⦖',
  ltri: '◃',
  ltrie: '⊴',
  ltrif: '◂',
  lurdshar: '⥊',
  luruhar: '⥦',
  lvertneqq: '≨︀',
  lvnE: '≨︀',
  mDDot: '∺',
  mac: '¯',
  macr: '¯',
  male: '♂',
  malt: '✠',
  maltese: '✠',
  map: '↦',
  mapsto: '↦',
  mapstodown: '↧',
  mapstoleft: '↤',
  mapstoup: '↥',
  marker: '▮',
  mcomma: '⨩',
  mcy: 'м',
  mdash: '—',
  measuredangle: '∡',
  mfr: '𝔪',
  mho: '℧',
  micr: 'µ',
  micro: 'µ',
  mid: '∣',
  midast: '*',
  midcir: '⫰',
  middo: '·',
  middot: '·',
  minus: '−',
  minusb: '⊟',
  minusd: '∸',
  minusdu: '⨪',
  mlcp: '⫛',
  mldr: '…',
  mnplus: '∓',
  models: '⊧',
  mopf: '𝕞',
  mp: '∓',
  mscr: '𝓂',
  mstpos: '∾',
  mu: 'μ',
  multimap: '⊸',
  mumap: '⊸',
  nGg: '⋙̸',
  nGt: '≫⃒',
  nGtv: '≫̸',
  nLeftarrow: '⇍',
  nLeftrightarrow: '⇎',
  nLl: '⋘̸',
  nLt: '≪⃒',
  nLtv: '≪̸',
  nRightarrow: '⇏',
  nVDash: '⊯',
  nVdash: '⊮',
  nabla: '∇',
  nacute: 'ń',
  nang: '∠⃒',
  nap: '≉',
  napE: '⩰̸',
  napid: '≋̸',
  napos: 'ŉ',
  napprox: '≉',
  natur: '♮',
  natural: '♮',
  naturals: 'ℕ',
  nbs: ' ',
  nbsp: ' ',
  nbump: '≎̸',
  nbumpe: '≏̸',
  ncap: '⩃',
  ncaron: 'ň',
  ncedil: 'ņ',
  ncong: '≇',
  ncongdot: '⩭̸',
  ncup: '⩂',
  ncy: 'н',
  ndash: '–',
  ne: '≠',
  neArr: '⇗',
  nearhk: '⤤',
  nearr: '↗',
  nearrow: '↗',
  nedot: '≐̸',
  nequiv: '≢',
  nesear: '⤨',
  nesim: '≂̸',
  nexist: '∄',
  nexists: '∄',
  nfr: '𝔫',
  ngE: '≧̸',
  nge: '≱',
  ngeq: '≱',
  ngeqq: '≧̸',
  ngeqslant: '⩾̸',
  nges: '⩾̸',
  ngsim: '≵',
  ngt: '≯',
  ngtr: '≯',
  nhArr: '⇎',
  nharr: '↮',
  nhpar: '⫲',
  ni: '∋',
  nis: '⋼',
  nisd: '⋺',
  niv: '∋',
  njcy: 'њ',
  nlArr: '⇍',
  nlE: '≦̸',
  nlarr: '↚',
  nldr: '‥',
  nle: '≰',
  nleftarrow: '↚',
  nleftrightarrow: '↮',
  nleq: '≰',
  nleqq: '≦̸',
  nleqslant: '⩽̸',
  nles: '⩽̸',
  nless: '≮',
  nlsim: '≴',
  nlt: '≮',
  nltri: '⋪',
  nltrie: '⋬',
  nmid: '∤',
  nopf: '𝕟',
  no: '¬',
  not: '¬',
  notin: '∉',
  notinE: '⋹̸',
  notindot: '⋵̸',
  notinva: '∉',
  notinvb: '⋷',
  notinvc: '⋶',
  notni: '∌',
  notniva: '∌',
  notnivb: '⋾',
  notnivc: '⋽',
  npar: '∦',
  nparallel: '∦',
  nparsl: '⫽⃥',
  npart: '∂̸',
  npolint: '⨔',
  npr: '⊀',
  nprcue: '⋠',
  npre: '⪯̸',
  nprec: '⊀',
  npreceq: '⪯̸',
  nrArr: '⇏',
  nrarr: '↛',
  nrarrc: '⤳̸',
  nrarrw: '↝̸',
  nrightarrow: '↛',
  nrtri: '⋫',
  nrtrie: '⋭',
  nsc: '⊁',
  nsccue: '⋡',
  nsce: '⪰̸',
  nscr: '𝓃',
  nshortmid: '∤',
  nshortparallel: '∦',
  nsim: '≁',
  nsime: '≄',
  nsimeq: '≄',
  nsmid: '∤',
  nspar: '∦',
  nsqsube: '⋢',
  nsqsupe: '⋣',
  nsub: '⊄',
  nsubE: '⫅̸',
  nsube: '⊈',
  nsubset: '⊂⃒',
  nsubseteq: '⊈',
  nsubseteqq: '⫅̸',
  nsucc: '⊁',
  nsucceq: '⪰̸',
  nsup: '⊅',
  nsupE: '⫆̸',
  nsupe: '⊉',
  nsupset: '⊃⃒',
  nsupseteq: '⊉',
  nsupseteqq: '⫆̸',
  ntgl: '≹',
  ntild: 'ñ',
  ntilde: 'ñ',
  ntlg: '≸',
  ntriangleleft: '⋪',
  ntrianglelefteq: '⋬',
  ntriangleright: '⋫',
  ntrianglerighteq: '⋭',
  nu: 'ν',
  num: '#',
  numero: '№',
  numsp: ' ',
  nvDash: '⊭',
  nvHarr: '⤄',
  nvap: '≍⃒',
  nvdash: '⊬',
  nvge: '≥⃒',
  nvgt: '>⃒',
  nvinfin: '⧞',
  nvlArr: '⤂',
  nvle: '≤⃒',
  nvlt: '<⃒',
  nvltrie: '⊴⃒',
  nvrArr: '⤃',
  nvrtrie: '⊵⃒',
  nvsim: '∼⃒',
  nwArr: '⇖',
  nwarhk: '⤣',
  nwarr: '↖',
  nwarrow: '↖',
  nwnear: '⤧',
  oS: 'Ⓢ',
  oacut: 'ó',
  oacute: 'ó',
  oast: '⊛',
  ocir: 'ô',
  ocirc: 'ô',
  ocy: 'о',
  odash: '⊝',
  odblac: 'ő',
  odiv: '⨸',
  odot: '⊙',
  odsold: '⦼',
  oelig: 'œ',
  ofcir: '⦿',
  ofr: '𝔬',
  ogon: '˛',
  ograv: 'ò',
  ograve: 'ò',
  ogt: '⧁',
  ohbar: '⦵',
  ohm: 'Ω',
  oint: '∮',
  olarr: '↺',
  olcir: '⦾',
  olcross: '⦻',
  oline: '‾',
  olt: '⧀',
  omacr: 'ō',
  omega: 'ω',
  omicron: 'ο',
  omid: '⦶',
  ominus: '⊖',
  oopf: '𝕠',
  opar: '⦷',
  operp: '⦹',
  oplus: '⊕',
  or: '∨',
  orarr: '↻',
  ord: 'º',
  order: 'ℴ',
  orderof: 'ℴ',
  ordf: 'ª',
  ordm: 'º',
  origof: '⊶',
  oror: '⩖',
  orslope: '⩗',
  orv: '⩛',
  oscr: 'ℴ',
  oslas: 'ø',
  oslash: 'ø',
  osol: '⊘',
  otild: 'õ',
  otilde: 'õ',
  otimes: '⊗',
  otimesas: '⨶',
  oum: 'ö',
  ouml: 'ö',
  ovbar: '⌽',
  par: '¶',
  para: '¶',
  parallel: '∥',
  parsim: '⫳',
  parsl: '⫽',
  part: '∂',
  pcy: 'п',
  percnt: '%',
  period: '.',
  permil: '‰',
  perp: '⊥',
  pertenk: '‱',
  pfr: '𝔭',
  phi: 'φ',
  phiv: 'ϕ',
  phmmat: 'ℳ',
  phone: '☎',
  pi: 'π',
  pitchfork: '⋔',
  piv: 'ϖ',
  planck: 'ℏ',
  planckh: 'ℎ',
  plankv: 'ℏ',
  plus: '+',
  plusacir: '⨣',
  plusb: '⊞',
  pluscir: '⨢',
  plusdo: '∔',
  plusdu: '⨥',
  pluse: '⩲',
  plusm: '±',
  plusmn: '±',
  plussim: '⨦',
  plustwo: '⨧',
  pm: '±',
  pointint: '⨕',
  popf: '𝕡',
  poun: '£',
  pound: '£',
  pr: '≺',
  prE: '⪳',
  prap: '⪷',
  prcue: '≼',
  pre: '⪯',
  prec: '≺',
  precapprox: '⪷',
  preccurlyeq: '≼',
  preceq: '⪯',
  precnapprox: '⪹',
  precneqq: '⪵',
  precnsim: '⋨',
  precsim: '≾',
  prime: '′',
  primes: 'ℙ',
  prnE: '⪵',
  prnap: '⪹',
  prnsim: '⋨',
  prod: '∏',
  profalar: '⌮',
  profline: '⌒',
  profsurf: '⌓',
  prop: '∝',
  propto: '∝',
  prsim: '≾',
  prurel: '⊰',
  pscr: '𝓅',
  psi: 'ψ',
  puncsp: ' ',
  qfr: '𝔮',
  qint: '⨌',
  qopf: '𝕢',
  qprime: '⁗',
  qscr: '𝓆',
  quaternions: 'ℍ',
  quatint: '⨖',
  quest: '?',
  questeq: '≟',
  quo: '"',
  quot: '"',
  rAarr: '⇛',
  rArr: '⇒',
  rAtail: '⤜',
  rBarr: '⤏',
  rHar: '⥤',
  race: '∽̱',
  racute: 'ŕ',
  radic: '√',
  raemptyv: '⦳',
  rang: '⟩',
  rangd: '⦒',
  range: '⦥',
  rangle: '⟩',
  raqu: '»',
  raquo: '»',
  rarr: '→',
  rarrap: '⥵',
  rarrb: '⇥',
  rarrbfs: '⤠',
  rarrc: '⤳',
  rarrfs: '⤞',
  rarrhk: '↪',
  rarrlp: '↬',
  rarrpl: '⥅',
  rarrsim: '⥴',
  rarrtl: '↣',
  rarrw: '↝',
  ratail: '⤚',
  ratio: '∶',
  rationals: 'ℚ',
  rbarr: '⤍',
  rbbrk: '❳',
  rbrace: '}',
  rbrack: ']',
  rbrke: '⦌',
  rbrksld: '⦎',
  rbrkslu: '⦐',
  rcaron: 'ř',
  rcedil: 'ŗ',
  rceil: '⌉',
  rcub: '}',
  rcy: 'р',
  rdca: '⤷',
  rdldhar: '⥩',
  rdquo: '”',
  rdquor: '”',
  rdsh: '↳',
  real: 'ℜ',
  realine: 'ℛ',
  realpart: 'ℜ',
  reals: 'ℝ',
  rect: '▭',
  re: '®',
  reg: '®',
  rfisht: '⥽',
  rfloor: '⌋',
  rfr: '𝔯',
  rhard: '⇁',
  rharu: '⇀',
  rharul: '⥬',
  rho: 'ρ',
  rhov: 'ϱ',
  rightarrow: '→',
  rightarrowtail: '↣',
  rightharpoondown: '⇁',
  rightharpoonup: '⇀',
  rightleftarrows: '⇄',
  rightleftharpoons: '⇌',
  rightrightarrows: '⇉',
  rightsquigarrow: '↝',
  rightthreetimes: '⋌',
  ring: '˚',
  risingdotseq: '≓',
  rlarr: '⇄',
  rlhar: '⇌',
  rlm: '‏',
  rmoust: '⎱',
  rmoustache: '⎱',
  rnmid: '⫮',
  roang: '⟭',
  roarr: '⇾',
  robrk: '⟧',
  ropar: '⦆',
  ropf: '𝕣',
  roplus: '⨮',
  rotimes: '⨵',
  rpar: ')',
  rpargt: '⦔',
  rppolint: '⨒',
  rrarr: '⇉',
  rsaquo: '›',
  rscr: '𝓇',
  rsh: '↱',
  rsqb: ']',
  rsquo: '’',
  rsquor: '’',
  rthree: '⋌',
  rtimes: '⋊',
  rtri: '▹',
  rtrie: '⊵',
  rtrif: '▸',
  rtriltri: '⧎',
  ruluhar: '⥨',
  rx: '℞',
  sacute: 'ś',
  sbquo: '‚',
  sc: '≻',
  scE: '⪴',
  scap: '⪸',
  scaron: 'š',
  sccue: '≽',
  sce: '⪰',
  scedil: 'ş',
  scirc: 'ŝ',
  scnE: '⪶',
  scnap: '⪺',
  scnsim: '⋩',
  scpolint: '⨓',
  scsim: '≿',
  scy: 'с',
  sdot: '⋅',
  sdotb: '⊡',
  sdote: '⩦',
  seArr: '⇘',
  searhk: '⤥',
  searr: '↘',
  searrow: '↘',
  sec: '§',
  sect: '§',
  semi: ';',
  seswar: '⤩',
  setminus: '∖',
  setmn: '∖',
  sext: '✶',
  sfr: '𝔰',
  sfrown: '⌢',
  sharp: '♯',
  shchcy: 'щ',
  shcy: 'ш',
  shortmid: '∣',
  shortparallel: '∥',
  sh: '­',
  shy: '­',
  sigma: 'σ',
  sigmaf: 'ς',
  sigmav: 'ς',
  sim: '∼',
  simdot: '⩪',
  sime: '≃',
  simeq: '≃',
  simg: '⪞',
  simgE: '⪠',
  siml: '⪝',
  simlE: '⪟',
  simne: '≆',
  simplus: '⨤',
  simrarr: '⥲',
  slarr: '←',
  smallsetminus: '∖',
  smashp: '⨳',
  smeparsl: '⧤',
  smid: '∣',
  smile: '⌣',
  smt: '⪪',
  smte: '⪬',
  smtes: '⪬︀',
  softcy: 'ь',
  sol: '/',
  solb: '⧄',
  solbar: '⌿',
  sopf: '𝕤',
  spades: '♠',
  spadesuit: '♠',
  spar: '∥',
  sqcap: '⊓',
  sqcaps: '⊓︀',
  sqcup: '⊔',
  sqcups: '⊔︀',
  sqsub: '⊏',
  sqsube: '⊑',
  sqsubset: '⊏',
  sqsubseteq: '⊑',
  sqsup: '⊐',
  sqsupe: '⊒',
  sqsupset: '⊐',
  sqsupseteq: '⊒',
  squ: '□',
  square: '□',
  squarf: '▪',
  squf: '▪',
  srarr: '→',
  sscr: '𝓈',
  ssetmn: '∖',
  ssmile: '⌣',
  sstarf: '⋆',
  star: '☆',
  starf: '★',
  straightepsilon: 'ϵ',
  straightphi: 'ϕ',
  strns: '¯',
  sub: '⊂',
  subE: '⫅',
  subdot: '⪽',
  sube: '⊆',
  subedot: '⫃',
  submult: '⫁',
  subnE: '⫋',
  subne: '⊊',
  subplus: '⪿',
  subrarr: '⥹',
  subset: '⊂',
  subseteq: '⊆',
  subseteqq: '⫅',
  subsetneq: '⊊',
  subsetneqq: '⫋',
  subsim: '⫇',
  subsub: '⫕',
  subsup: '⫓',
  succ: '≻',
  succapprox: '⪸',
  succcurlyeq: '≽',
  succeq: '⪰',
  succnapprox: '⪺',
  succneqq: '⪶',
  succnsim: '⋩',
  succsim: '≿',
  sum: '∑',
  sung: '♪',
  sup: '⊃',
  sup1: '¹',
  sup2: '²',
  sup3: '³',
  supE: '⫆',
  supdot: '⪾',
  supdsub: '⫘',
  supe: '⊇',
  supedot: '⫄',
  suphsol: '⟉',
  suphsub: '⫗',
  suplarr: '⥻',
  supmult: '⫂',
  supnE: '⫌',
  supne: '⊋',
  supplus: '⫀',
  supset: '⊃',
  supseteq: '⊇',
  supseteqq: '⫆',
  supsetneq: '⊋',
  supsetneqq: '⫌',
  supsim: '⫈',
  supsub: '⫔',
  supsup: '⫖',
  swArr: '⇙',
  swarhk: '⤦',
  swarr: '↙',
  swarrow: '↙',
  swnwar: '⤪',
  szli: 'ß',
  szlig: 'ß',
  target: '⌖',
  tau: 'τ',
  tbrk: '⎴',
  tcaron: 'ť',
  tcedil: 'ţ',
  tcy: 'т',
  tdot: '⃛',
  telrec: '⌕',
  tfr: '𝔱',
  there4: '∴',
  therefore: '∴',
  theta: 'θ',
  thetasym: 'ϑ',
  thetav: 'ϑ',
  thickapprox: '≈',
  thicksim: '∼',
  thinsp: ' ',
  thkap: '≈',
  thksim: '∼',
  thor: 'þ',
  thorn: 'þ',
  tilde: '˜',
  time: '×',
  times: '×',
  timesb: '⊠',
  timesbar: '⨱',
  timesd: '⨰',
  tint: '∭',
  toea: '⤨',
  top: '⊤',
  topbot: '⌶',
  topcir: '⫱',
  topf: '𝕥',
  topfork: '⫚',
  tosa: '⤩',
  tprime: '‴',
  trade: '™',
  triangle: '▵',
  triangledown: '▿',
  triangleleft: '◃',
  trianglelefteq: '⊴',
  triangleq: '≜',
  triangleright: '▹',
  trianglerighteq: '⊵',
  tridot: '◬',
  trie: '≜',
  triminus: '⨺',
  triplus: '⨹',
  trisb: '⧍',
  tritime: '⨻',
  trpezium: '⏢',
  tscr: '𝓉',
  tscy: 'ц',
  tshcy: 'ћ',
  tstrok: 'ŧ',
  twixt: '≬',
  twoheadleftarrow: '↞',
  twoheadrightarrow: '↠',
  uArr: '⇑',
  uHar: '⥣',
  uacut: 'ú',
  uacute: 'ú',
  uarr: '↑',
  ubrcy: 'ў',
  ubreve: 'ŭ',
  ucir: 'û',
  ucirc: 'û',
  ucy: 'у',
  udarr: '⇅',
  udblac: 'ű',
  udhar: '⥮',
  ufisht: '⥾',
  ufr: '𝔲',
  ugrav: 'ù',
  ugrave: 'ù',
  uharl: '↿',
  uharr: '↾',
  uhblk: '▀',
  ulcorn: '⌜',
  ulcorner: '⌜',
  ulcrop: '⌏',
  ultri: '◸',
  umacr: 'ū',
  um: '¨',
  uml: '¨',
  uogon: 'ų',
  uopf: '𝕦',
  uparrow: '↑',
  updownarrow: '↕',
  upharpoonleft: '↿',
  upharpoonright: '↾',
  uplus: '⊎',
  upsi: 'υ',
  upsih: 'ϒ',
  upsilon: 'υ',
  upuparrows: '⇈',
  urcorn: '⌝',
  urcorner: '⌝',
  urcrop: '⌎',
  uring: 'ů',
  urtri: '◹',
  uscr: '𝓊',
  utdot: '⋰',
  utilde: 'ũ',
  utri: '▵',
  utrif: '▴',
  uuarr: '⇈',
  uum: 'ü',
  uuml: 'ü',
  uwangle: '⦧',
  vArr: '⇕',
  vBar: '⫨',
  vBarv: '⫩',
  vDash: '⊨',
  vangrt: '⦜',
  varepsilon: 'ϵ',
  varkappa: 'ϰ',
  varnothing: '∅',
  varphi: 'ϕ',
  varpi: 'ϖ',
  varpropto: '∝',
  varr: '↕',
  varrho: 'ϱ',
  varsigma: 'ς',
  varsubsetneq: '⊊︀',
  varsubsetneqq: '⫋︀',
  varsupsetneq: '⊋︀',
  varsupsetneqq: '⫌︀',
  vartheta: 'ϑ',
  vartriangleleft: '⊲',
  vartriangleright: '⊳',
  vcy: 'в',
  vdash: '⊢',
  vee: '∨',
  veebar: '⊻',
  veeeq: '≚',
  vellip: '⋮',
  verbar: '|',
  vert: '|',
  vfr: '𝔳',
  vltri: '⊲',
  vnsub: '⊂⃒',
  vnsup: '⊃⃒',
  vopf: '𝕧',
  vprop: '∝',
  vrtri: '⊳',
  vscr: '𝓋',
  vsubnE: '⫋︀',
  vsubne: '⊊︀',
  vsupnE: '⫌︀',
  vsupne: '⊋︀',
  vzigzag: '⦚',
  wcirc: 'ŵ',
  wedbar: '⩟',
  wedge: '∧',
  wedgeq: '≙',
  weierp: '℘',
  wfr: '𝔴',
  wopf: '𝕨',
  wp: '℘',
  wr: '≀',
  wreath: '≀',
  wscr: '𝓌',
  xcap: '⋂',
  xcirc: '◯',
  xcup: '⋃',
  xdtri: '▽',
  xfr: '𝔵',
  xhArr: '⟺',
  xharr: '⟷',
  xi: 'ξ',
  xlArr: '⟸',
  xlarr: '⟵',
  xmap: '⟼',
  xnis: '⋻',
  xodot: '⨀',
  xopf: '𝕩',
  xoplus: '⨁',
  xotime: '⨂',
  xrArr: '⟹',
  xrarr: '⟶',
  xscr: '𝓍',
  xsqcup: '⨆',
  xuplus: '⨄',
  xutri: '△',
  xvee: '⋁',
  xwedge: '⋀',
  yacut: 'ý',
  yacute: 'ý',
  yacy: 'я',
  ycirc: 'ŷ',
  ycy: 'ы',
  ye: '¥',
  yen: '¥',
  yfr: '𝔶',
  yicy: 'ї',
  yopf: '𝕪',
  yscr: '𝓎',
  yucy: 'ю',
  yum: 'ÿ',
  yuml: 'ÿ',
  zacute: 'ź',
  zcaron: 'ž',
  zcy: 'з',
  zdot: 'ż',
  zeetrf: 'ℨ',
  zeta: 'ζ',
  zfr: '𝔷',
  zhcy: 'ж',
  zigrarr: '⇝',
  zopf: '𝕫',
  zscr: '𝓏',
  zwj: '‍',
  zwnj: '‌'
};
;// CONCATENATED MODULE: ./node_modules/decode-named-character-reference/index.js

var decode_named_character_reference_own = {}.hasOwnProperty;
/**
 * Decode a single character reference (without the `&` or `;`).
 * You probably only need this when you’re building parsers yourself that follow
 * different rules compared to HTML.
 * This is optimized to be tiny in browsers.
 *
 * @param {string} value
 *   `notin` (named), `#123` (deci), `#x123` (hexa).
 * @returns {string|false}
 *   Decoded reference.
 */

function decodeNamedCharacterReference(value) {
  return decode_named_character_reference_own.call(characterEntities, value) ? characterEntities[value] : false;
}
;// CONCATENATED MODULE: ./node_modules/micromark-util-decode-numeric-character-reference/index.js
/**
 * Turn the number (in string form as either hexa- or plain decimal) coming from
 * a numeric character reference into a character.
 *
 * @param {string} value
 *   Value to decode.
 * @param {number} base
 *   Numeric base.
 * @returns {string}
 */
function decodeNumericCharacterReference(value, base) {
  var code = Number.parseInt(value, base);

  if ( // C0 except for HT, LF, FF, CR, space
  code < 9 || code === 11 || code > 13 && code < 32 || // Control character (DEL) of the basic block and C1 controls.
  code > 126 && code < 160 || // Lone high surrogates and low surrogates.
  code > 55295 && code < 57344 || // Noncharacters.
  code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 || // Out of range
  code > 1114111) {
    return "\uFFFD";
  }

  return String.fromCharCode(code);
}
;// CONCATENATED MODULE: ./node_modules/micromark-util-decode-string/index.js


var characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
/**
 * Utility to decode markdown strings (which occur in places such as fenced
 * code info strings, destinations, labels, and titles).
 * The “string” content type allows character escapes and -references.
 * This decodes those.
 *
 * @param {string} value
 * @returns {string}
 */

function decodeString(value) {
  return value.replace(characterEscapeOrReference, decode);
}
/**
 * @param {string} $0
 * @param {string} $1
 * @param {string} $2
 * @returns {string}
 */

function decode($0, $1, $2) {
  if ($1) {
    // Escape.
    return $1;
  } // Reference.


  var head = $2.charCodeAt(0);

  if (head === 35) {
    var _head = $2.charCodeAt(1);

    var hex = _head === 120 || _head === 88;
    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);
  }

  return decodeNamedCharacterReference($2) || $0;
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-markdown/lib/util/association.js
/**
 * @typedef {import('mdast').Association} Association
 */

/**
 * The `label` of an association is the string value: character escapes and
 * references work, and casing is intact.
 * The `identifier` is used to match one association to another: controversially,
 * character escapes and references don’t work in this matching: `&copy;` does
 * not match `©`, and `\+` does not match `+`.
 * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\nb`
 * matches `a b`.
 * So, we do prefer the label when figuring out how we’re going to serialize:
 * it has whitespace, casing, and we can ignore most useless character escapes
 * and all character references.
 *
 * @param {Association} node
 * @returns {string}
 */

function association(node) {
  if (node.label || !node.identifier) {
    return node.label || '';
  }

  return decodeString(node.identifier);
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-markdown/lib/util/container-flow.js
/**
 * @typedef {import('../types.js').Node} Node
 * @typedef {import('../types.js').Parent} Parent
 * @typedef {import('../types.js').Join} Join
 * @typedef {import('../types.js').Context} Context
 */

/**
 * @param {Parent} parent
 * @param {Context} context
 * @returns {string}
 */
function containerFlow(parent, context) {
  var indexStack = context.indexStack;
  var children = parent.children || [];
  /** @type {Array.<string>} */

  var results = [];
  var index = -1;
  indexStack.push(-1);

  while (++index < children.length) {
    var child = children[index];
    indexStack[indexStack.length - 1] = index;
    results.push(context.handle(child, parent, context, {
      before: '\n',
      after: '\n'
    }));

    if (child.type !== 'list') {
      context.bulletLastUsed = undefined;
    }

    if (index < children.length - 1) {
      results.push(between(child, children[index + 1]));
    }
  }

  indexStack.pop();
  return results.join('');
  /**
   * @param {Node} left
   * @param {Node} right
   * @returns {string}
   */

  function between(left, right) {
    var index = context.join.length;

    while (index--) {
      var result = context.join[index](left, right, parent, context);

      if (result === true || result === 1) {
        break;
      }

      if (typeof result === 'number') {
        return '\n'.repeat(1 + result);
      }

      if (result === false) {
        return '\n\n<!---->\n\n';
      }
    }

    return '\n\n';
  }
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-markdown/lib/util/indent-lines.js
/**
 * @callback Map
 * @param {string} value
 * @param {number} line
 * @param {boolean} blank
 * @returns {string}
 */
var eol = /\r?\n|\r/g;
/**
 * @param {string} value
 * @param {Map} map
 * @returns {string}
 */

function indentLines(value, map) {
  /** @type {Array.<string>} */
  var result = [];
  var start = 0;
  var line = 0;
  /** @type {RegExpExecArray|null} */

  var match;

  while (match = eol.exec(value)) {
    one(value.slice(start, match.index));
    result.push(match[0]);
    start = match.index + match[0].length;
    line++;
  }

  one(value.slice(start));
  return result.join('');
  /**
   * @param {string} value
   */

  function one(value) {
    result.push(map(value, line, !value));
  }
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js
/**
 * @typedef {import('../types.js').Unsafe} Unsafe
 */

/**
 * @param {Unsafe} pattern
 * @returns {RegExp}
 */
function patternCompile(pattern) {
  if (!pattern._compiled) {
    var before = (pattern.atBreak ? '[\\r\\n][\\t ]*' : '') + (pattern.before ? '(?:' + pattern.before + ')' : '');
    pattern._compiled = new RegExp((before ? '(' + before + ')' : '') + (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? '\\' : '') + pattern.character + (pattern.after ? '(?:' + pattern.after + ')' : ''), 'g');
  }

  return pattern._compiled;
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
/**
 * @typedef {import('../types.js').Unsafe} Unsafe
 */

/**
 * @param {Array.<string>} stack
 * @param {Unsafe} pattern
 * @returns {boolean}
 */
function patternInScope(stack, pattern) {
  return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);
}
/**
 * @param {Array.<string>} stack
 * @param {Unsafe['inConstruct']} list
 * @param {boolean} none
 * @returns {boolean}
 */

function listInScope(stack, list, none) {
  if (!list) {
    return none;
  }

  if (typeof list === 'string') {
    list = [list];
  }

  var index = -1;

  while (++index < list.length) {
    if (stack.includes(list[index])) {
      return true;
    }
  }

  return false;
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-markdown/lib/util/safe.js
/**
 * @typedef {import('../types.js').Context} Context
 * @typedef {import('../types.js').SafeOptions} SafeOptions
 */


/**
 * @param {Context} context
 * @param {string|null|undefined} input
 * @param {SafeOptions & {encode?: Array.<string>}} config
 * @returns {string}
 */

function safe(context, input, config) {
  var value = (config.before || '') + (input || '') + (config.after || '');
  /** @type {Array.<number>} */

  var positions = [];
  /** @type {Array.<string>} */

  var result = [];
  /** @type {Record<number, {before: boolean, after: boolean}>} */

  var infos = {};
  var index = -1;

  while (++index < context.unsafe.length) {
    var pattern = context.unsafe[index];

    if (!patternInScope(context.stack, pattern)) {
      continue;
    }

    var expression = patternCompile(pattern);
    /** @type {RegExpExecArray|null} */

    var match = void 0;

    while (match = expression.exec(value)) {
      var before = 'before' in pattern || Boolean(pattern.atBreak);
      var after = ('after' in pattern);
      var position = match.index + (before ? match[1].length : 0);

      if (positions.includes(position)) {
        if (infos[position].before && !before) {
          infos[position].before = false;
        }

        if (infos[position].after && !after) {
          infos[position].after = false;
        }
      } else {
        positions.push(position);
        infos[position] = {
          before: before,
          after: after
        };
      }
    }
  }

  positions.sort(numerical);
  var start = config.before ? config.before.length : 0;
  var end = value.length - (config.after ? config.after.length : 0);
  index = -1;

  while (++index < positions.length) {
    var _position = positions[index]; // Character before or after matched:

    if (_position < start || _position >= end) {
      continue;
    } // If this character is supposed to be escaped because it has a condition on
    // the next character, and the next character is definitly being escaped,
    // then skip this escape.


    if (_position + 1 < end && positions[index + 1] === _position + 1 && infos[_position].after && !infos[_position + 1].before && !infos[_position + 1].after || positions[index - 1] === _position - 1 && infos[_position].before && !infos[_position - 1].before && !infos[_position - 1].after) {
      continue;
    }

    if (start !== _position) {
      // If we have to use a character reference, an ampersand would be more
      // correct, but as backslashes only care about punctuation, either will
      // do the trick
      result.push(escapeBackslashes(value.slice(start, _position), '\\'));
    }

    start = _position;

    if (/[!-/:-@[-`{-~]/.test(value.charAt(_position)) && (!config.encode || !config.encode.includes(value.charAt(_position)))) {
      // Character escape.
      result.push('\\');
    } else {
      // Character reference.
      result.push('&#x' + value.charCodeAt(_position).toString(16).toUpperCase() + ';');
      start++;
    }
  }

  result.push(escapeBackslashes(value.slice(start, end), config.after));
  return result.join('');
}
/**
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */

function numerical(a, b) {
  return a - b;
}
/**
 * @param {string} value
 * @param {string} after
 * @returns {string}
 */


function escapeBackslashes(value, after) {
  var expression = /\\(?=[!-/:-@[-`{-~])/g;
  /** @type {Array.<number>} */

  var positions = [];
  /** @type {Array.<string>} */

  var results = [];
  var whole = value + after;
  var index = -1;
  var start = 0;
  /** @type {RegExpExecArray|null} */

  var match;

  while (match = expression.exec(whole)) {
    positions.push(match.index);
  }

  while (++index < positions.length) {
    if (start !== positions[index]) {
      results.push(value.slice(start, positions[index]));
    }

    results.push('\\');
    start = positions[index];
  }

  results.push(value.slice(start));
  return results.join('');
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-gfm-footnote/node_modules/unist-util-visit/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 * @typedef {import('./complex-types').Visitor} Visitor
 */


/**
 * Visit children of tree which pass a test
 *
 * @param tree Abstract syntax tree to walk
 * @param test Test, optional
 * @param visitor Function to run for each node
 * @param reverse Fisit the tree in reverse, defaults to false
 */

var mdast_util_gfm_footnote_node_modules_unist_util_visit_visit =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {import('./complex-types').Visitor} visitor
 * @param {boolean} [reverse]
 */
function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  visitParents(tree, test, overload, reverse);
  /**
   * @param {Node} node
   * @param {Array.<Parent>} parents
   */

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};
;// CONCATENATED MODULE: ./node_modules/mdast-util-gfm-footnote/index.js
/**
 * @typedef {import('mdast').FootnoteReference} FootnoteReference
 * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Map} Map
 */






var warningColonInFootnote = false;
var warningListInFootnote = false;
/**
 * @returns {FromMarkdownExtension}
 */

function gfmFootnoteFromMarkdown() {
  return {
    enter: {
      gfmFootnoteDefinition: enterFootnoteDefinition,
      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
      gfmFootnoteCall: enterFootnoteCall,
      gfmFootnoteCallString: enterFootnoteCallString
    },
    exit: {
      gfmFootnoteDefinition: exitFootnoteDefinition,
      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
      gfmFootnoteCall: exitFootnoteCall,
      gfmFootnoteCallString: exitFootnoteCallString
    }
  };
  /** @type {FromMarkdownHandle} */

  function enterFootnoteDefinition(token) {
    this.enter({
      type: 'footnoteDefinition',
      identifier: '',
      label: '',
      children: []
    }, token);
  }
  /** @type {FromMarkdownHandle} */


  function enterFootnoteDefinitionLabelString() {
    this.buffer();
  }
  /** @type {FromMarkdownHandle} */


  function exitFootnoteDefinitionLabelString(token) {
    var label = this.resume();
    var node =
    /** @type {FootnoteDefinition} */
    this.stack[this.stack.length - 1];
    node.label = label;
    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
  }
  /** @type {FromMarkdownHandle} */


  function exitFootnoteDefinition(token) {
    this.exit(token);
  }
  /** @type {FromMarkdownHandle} */


  function enterFootnoteCall(token) {
    this.enter({
      type: 'footnoteReference',
      identifier: '',
      label: ''
    }, token);
  }
  /** @type {FromMarkdownHandle} */


  function enterFootnoteCallString() {
    this.buffer();
  }
  /** @type {FromMarkdownHandle} */


  function exitFootnoteCallString(token) {
    var label = this.resume();
    var node =
    /** @type {FootnoteDefinition} */
    this.stack[this.stack.length - 1];
    node.label = label;
    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
  }
  /** @type {FromMarkdownHandle} */


  function exitFootnoteCall(token) {
    this.exit(token);
  }
}
/**
 * @returns {ToMarkdownExtension}
 */

function gfmFootnoteToMarkdown() {
  footnoteReference.peek = footnoteReferencePeek;
  return {
    // This is on by default already.
    unsafe: [{
      character: '[',
      inConstruct: ['phrasing', 'label', 'reference']
    }],
    handlers: {
      footnoteDefinition: footnoteDefinition,
      footnoteReference: footnoteReference
    }
  };
  /**
   * @type {ToMarkdownHandle}
   * @param {FootnoteReference} node
   */

  function footnoteReference(node, _, context) {
    var exit = context.enter('footnoteReference');
    var subexit = context.enter('reference');
    var reference = safe(context, association(node), {
      before: '^',
      after: ']'
    });
    subexit();
    exit();
    return '[^' + reference + ']';
  }
  /** @type {ToMarkdownHandle} */


  function footnoteReferencePeek() {
    return '[';
  }
  /**
   * @type {ToMarkdownHandle}
   * @param {FootnoteDefinition} node
   */


  function footnoteDefinition(node, _, context) {
    var exit = context.enter('footnoteDefinition');
    var subexit = context.enter('label');
    var id = safe(context, association(node), {
      before: '^',
      after: ']'
    });
    var label = '[^' + id + ']:';
    subexit();
    var value = indentLines(containerFlow(node, context), map);
    exit();

    if (!warningColonInFootnote && id.includes(':')) {
      console.warn('[mdast-util-gfm-footnote] Warning: Found a colon in footnote identifier `' + id + '`. GitHub currently crahes on colons in footnotes (see <https://github.com/github/cmark-gfm/issues/241> for more info)');
      warningColonInFootnote = true;
    }

    if (!warningListInFootnote) {
      mdast_util_gfm_footnote_node_modules_unist_util_visit_visit(node, 'list', function () {
        console.warn('[mdast-util-gfm-footnote] Warning: Found a list in a footnote definition. GitHub currently crahes on lists in footnotes (see <https://github.com/github/cmark-gfm/issues/241> for more info)');
        warningListInFootnote = true;
        return EXIT;
      });
    }

    return value;
    /** @type {Map} */

    function map(line, index, blank) {
      if (index) {
        return (blank ? '' : '    ') + line;
      }

      return (blank ? label : label + ' ') + line;
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js
/**
 * @typedef {import('../types.js').Node} Node
 * @typedef {import('../types.js').Parent} Parent
 * @typedef {import('../types.js').SafeOptions} SafeOptions
 * @typedef {import('../types.js').Context} Context
 */

/**
 * @param {Parent} parent
 * @param {Context} context
 * @param {SafeOptions} safeOptions
 * @returns {string}
 */
function containerPhrasing(parent, context, safeOptions) {
  var indexStack = context.indexStack;
  var children = parent.children || [];
  /** @type {Array.<string>} */

  var results = [];
  var index = -1;
  var before = safeOptions.before;
  indexStack.push(-1);

  while (++index < children.length) {
    var child = children[index];
    /** @type {string} */

    var after = void 0;
    indexStack[indexStack.length - 1] = index;

    if (index + 1 < children.length) {
      // @ts-expect-error: hush, it’s actually a `zwitch`.
      var handle = context.handle.handlers[children[index + 1].type];
      if (handle && handle.peek) handle = handle.peek;
      after = handle ? handle(children[index + 1], parent, context, {
        before: '',
        after: ''
      }).charAt(0) : '';
    } else {
      after = safeOptions.after;
    } // In some cases, html (text) can be found in phrasing right after an eol.
    // When we’d serialize that, in most cases that would be seen as html
    // (flow).
    // As we can’t escape or so to prevent it from happening, we take a somewhat
    // reasonable approach: replace that eol with a space.
    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>


    if (results.length > 0 && (before === '\r' || before === '\n') && child.type === 'html') {
      results[results.length - 1] = results[results.length - 1].replace(/(\r?\n|\r)$/, ' ');
      before = ' ';
    }

    results.push(context.handle(child, parent, context, {
      before: before,
      after: after
    }));
    before = results[results.length - 1].slice(-1);
  }

  indexStack.pop();
  return results.join('');
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-gfm-strikethrough/index.js
/**
 * @typedef {import('mdast').Delete} Delete
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 */

/** @type {FromMarkdownExtension} */

var gfmStrikethroughFromMarkdown = {
  canContainEols: ['delete'],
  enter: {
    strikethrough: enterStrikethrough
  },
  exit: {
    strikethrough: exitStrikethrough
  }
};
/** @type {ToMarkdownExtension} */

var gfmStrikethroughToMarkdown = {
  unsafe: [{
    character: '~',
    inConstruct: 'phrasing'
  }],
  handlers: {
    "delete": handleDelete
  }
};
handleDelete.peek = peekDelete;
/** @type {FromMarkdownHandle} */

function enterStrikethrough(token) {
  this.enter({
    type: 'delete',
    children: []
  }, token);
}
/** @type {FromMarkdownHandle} */


function exitStrikethrough(token) {
  this.exit(token);
}
/**
 * @type {ToMarkdownHandle}
 * @param {Delete} node
 */


function handleDelete(node, _, context) {
  var exit = context.enter('emphasis');
  var value = containerPhrasing(node, context, {
    before: '~',
    after: '~'
  });
  exit();
  return '~~' + value + '~~';
}
/** @type {ToMarkdownHandle} */


function peekDelete() {
  return '~';
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
/**
 * @typedef {import('mdast').InlineCode} InlineCode
 * @typedef {import('../types.js').Handle} Handle
 */

inlineCode.peek = inlineCodePeek;
/**
 * @type {Handle}
 * @param {InlineCode} node
 */

function inlineCode(node, _, context) {
  var value = node.value || '';
  var sequence = '`';
  var index = -1; // If there is a single grave accent on its own in the code, use a fence of
  // two.
  // If there are two in a row, use one.

  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {
    sequence += '`';
  } // If this is not just spaces or eols (tabs don’t count), and either the
  // first or last character are a space, eol, or tick, then pad with spaces.


  if (/[^ \r\n]/.test(value) && (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || /^`|`$/.test(value))) {
    value = ' ' + value + ' ';
  } // We have a potential problem: certain characters after eols could result in
  // blocks being seen.
  // For example, if someone injected the string `'\n# b'`, then that would
  // result in an ATX heading.
  // We can’t escape characters in `inlineCode`, but because eols are
  // transformed to spaces when going from markdown to HTML anyway, we can swap
  // them out.


  while (++index < context.unsafe.length) {
    var pattern = context.unsafe[index];
    var expression = patternCompile(pattern);
    /** @type {RegExpExecArray|null} */

    var match = void 0; // Only look for `atBreak`s.
    // Btw: note that `atBreak` patterns will always start the regex at LF or
    // CR.

    if (!pattern.atBreak) continue;

    while (match = expression.exec(value)) {
      var position = match.index; // Support CRLF (patterns only look for one of the characters).

      if (value.charCodeAt(position) === 10
      /* `\n` */
      && value.charCodeAt(position - 1) === 13
      /* `\r` */
      ) {
        position--;
      }

      value = value.slice(0, position) + ' ' + value.slice(match.index + 1);
    }
  }

  return sequence + value + sequence;
}
/**
 * @type {Handle}
 */

function inlineCodePeek() {
  return '`';
}
;// CONCATENATED MODULE: ./node_modules/markdown-table/index.js
/**
 * @typedef MarkdownTableOptions
 * @property {string|null|Array.<string|null|undefined>} [align]
 * @property {boolean} [padding=true]
 * @property {boolean} [delimiterStart=true]
 * @property {boolean} [delimiterStart=true]
 * @property {boolean} [delimiterEnd=true]
 * @property {boolean} [alignDelimiters=true]
 * @property {(value: string) => number} [stringLength]
 */

/**
 * Create a table from a matrix of strings.
 *
 * @param {Array.<Array.<string|null|undefined>>} table
 * @param {MarkdownTableOptions} [options]
 * @returns {string}
 */
function markdownTable(table, options) {
  var settings = options || {};
  var align = (settings.align || []).concat();
  var stringLength = settings.stringLength || defaultStringLength;
  /** @type {number[]} Character codes as symbols for alignment per column. */

  var alignments = [];
  var rowIndex = -1;
  /** @type {string[][]} Cells per row. */

  var cellMatrix = [];
  /** @type {number[][]} Sizes of each cell per row. */

  var sizeMatrix = [];
  /** @type {number[]} */

  var longestCellByColumn = [];
  var mostCellsPerRow = 0;
  /** @type {number} */

  var columnIndex;
  /** @type {string[]} Cells of current row */

  var row;
  /** @type {number[]} Sizes of current row */

  var sizes;
  /** @type {number} Sizes of current cell */

  var size;
  /** @type {string} Current cell */

  var cell;
  /** @type {string[]} Chunks of current line. */

  var line;
  /** @type {string} */

  var before;
  /** @type {string} */

  var after;
  /** @type {number} */

  var code; // This is a superfluous loop if we don’t align delimiters, but otherwise we’d
  // do superfluous work when aligning, so optimize for aligning.

  while (++rowIndex < table.length) {
    columnIndex = -1;
    row = [];
    sizes = [];

    if (table[rowIndex].length > mostCellsPerRow) {
      mostCellsPerRow = table[rowIndex].length;
    }

    while (++columnIndex < table[rowIndex].length) {
      cell = serialize(table[rowIndex][columnIndex]);

      if (settings.alignDelimiters !== false) {
        size = stringLength(cell);
        sizes[columnIndex] = size;

        if (longestCellByColumn[columnIndex] === undefined || size > longestCellByColumn[columnIndex]) {
          longestCellByColumn[columnIndex] = size;
        }
      }

      row.push(cell);
    }

    cellMatrix[rowIndex] = row;
    sizeMatrix[rowIndex] = sizes;
  } // Figure out which alignments to use.


  columnIndex = -1;

  if (typeof align === 'object' && 'length' in align) {
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = toAlignment(align[columnIndex]);
    }
  } else {
    code = toAlignment(align);

    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = code;
    }
  } // Inject the alignment row.


  columnIndex = -1;
  row = [];
  sizes = [];

  while (++columnIndex < mostCellsPerRow) {
    code = alignments[columnIndex];
    before = '';
    after = '';

    if (code === 99
    /* `c` */
    ) {
      before = ':';
      after = ':';
    } else if (code === 108
    /* `l` */
    ) {
      before = ':';
    } else if (code === 114
    /* `r` */
    ) {
      after = ':';
    } // There *must* be at least one hyphen-minus in each alignment cell.


    size = settings.alignDelimiters === false ? 1 : Math.max(1, longestCellByColumn[columnIndex] - before.length - after.length);
    cell = before + '-'.repeat(size) + after;

    if (settings.alignDelimiters !== false) {
      size = before.length + size + after.length;

      if (size > longestCellByColumn[columnIndex]) {
        longestCellByColumn[columnIndex] = size;
      }

      sizes[columnIndex] = size;
    }

    row[columnIndex] = cell;
  } // Inject the alignment row.


  cellMatrix.splice(1, 0, row);
  sizeMatrix.splice(1, 0, sizes);
  rowIndex = -1;
  /** @type {string[]} */

  var lines = [];

  while (++rowIndex < cellMatrix.length) {
    row = cellMatrix[rowIndex];
    sizes = sizeMatrix[rowIndex];
    columnIndex = -1;
    line = [];

    while (++columnIndex < mostCellsPerRow) {
      cell = row[columnIndex] || '';
      before = '';
      after = '';

      if (settings.alignDelimiters !== false) {
        size = longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);
        code = alignments[columnIndex];

        if (code === 114
        /* `r` */
        ) {
          before = ' '.repeat(size);
        } else if (code === 99
        /* `c` */
        ) {
          if (size % 2) {
            before = ' '.repeat(size / 2 + 0.5);
            after = ' '.repeat(size / 2 - 0.5);
          } else {
            before = ' '.repeat(size / 2);
            after = before;
          }
        } else {
          after = ' '.repeat(size);
        }
      }

      if (settings.delimiterStart !== false && !columnIndex) {
        line.push('|');
      }

      if (settings.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is
      // empty: there will be a closing space.
      !(settings.alignDelimiters === false && cell === '') && (settings.delimiterStart !== false || columnIndex)) {
        line.push(' ');
      }

      if (settings.alignDelimiters !== false) {
        line.push(before);
      }

      line.push(cell);

      if (settings.alignDelimiters !== false) {
        line.push(after);
      }

      if (settings.padding !== false) {
        line.push(' ');
      }

      if (settings.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {
        line.push('|');
      }
    }

    lines.push(settings.delimiterEnd === false ? line.join('').replace(/ +$/, '') : line.join(''));
  }

  return lines.join('\n');
}
/**
 * @param {string|null|undefined} [value]
 * @returns {string}
 */

function serialize(value) {
  return value === null || value === undefined ? '' : String(value);
}
/**
 * @param {string} value
 * @returns {number}
 */


function defaultStringLength(value) {
  return value.length;
}
/**
 * @param {string|null|undefined} value
 * @returns {number}
 */


function toAlignment(value) {
  var code = typeof value === 'string' ? value.charCodeAt(0) : 0;
  return code === 67
  /* `C` */
  || code === 99
  /* `c` */
  ? 99
  /* `c` */
  : code === 76
  /* `L` */
  || code === 108
  /* `l` */
  ? 108
  /* `l` */
  : code === 82
  /* `R` */
  || code === 114
  /* `r` */
  ? 114
  /* `r` */
  : 0;
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-gfm-table/index.js
/**
 * @typedef {import('mdast').AlignType} AlignType
 * @typedef {import('mdast').Table} Table
 * @typedef {import('mdast').TableRow} TableRow
 * @typedef {import('mdast').TableCell} TableCell
 * @typedef {import('mdast').InlineCode} InlineCode
 * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext
 *
 * @typedef Options
 * @property {boolean} [tableCellPadding=true]
 * @property {boolean} [tablePipeAlign=true]
 * @property {MarkdownTableOptions['stringLength']} [stringLength]
 */



/** @type {FromMarkdownExtension} */

var gfmTableFromMarkdown = {
  enter: {
    table: enterTable,
    tableData: enterCell,
    tableHeader: enterCell,
    tableRow: enterRow
  },
  exit: {
    codeText: exitCodeText,
    table: exitTable,
    tableData: exit,
    tableHeader: exit,
    tableRow: exit
  }
};
/** @type {FromMarkdownHandle} */

function enterTable(token) {
  /** @type {AlignType[]} */
  // @ts-expect-error: `align` is custom.
  var align = token._align;
  this.enter({
    type: 'table',
    align: align,
    children: []
  }, token);
  this.setData('inTable', true);
}
/** @type {FromMarkdownHandle} */


function exitTable(token) {
  this.exit(token);
  this.setData('inTable');
}
/** @type {FromMarkdownHandle} */


function enterRow(token) {
  this.enter({
    type: 'tableRow',
    children: []
  }, token);
}
/** @type {FromMarkdownHandle} */


function exit(token) {
  this.exit(token);
}
/** @type {FromMarkdownHandle} */


function enterCell(token) {
  this.enter({
    type: 'tableCell',
    children: []
  }, token);
} // Overwrite the default code text data handler to unescape escaped pipes when
// they are in tables.

/** @type {FromMarkdownHandle} */


function exitCodeText(token) {
  var value = this.resume();

  if (this.getData('inTable')) {
    value = value.replace(/\\([\\|])/g, replace);
  }

  var node =
  /** @type {InlineCode} */
  this.stack[this.stack.length - 1];
  node.value = value;
  this.exit(token);
}
/**
 * @param {string} $0
 * @param {string} $1
 * @returns {string}
 */


function replace($0, $1) {
  // Pipes work, backslashes don’t (but can’t escape pipes).
  return $1 === '|' ? $1 : $0;
}
/**
 * @param {Options} [options]
 * @returns {ToMarkdownExtension}
 */


function gfmTableToMarkdown(options) {
  var settings = options || {};
  var padding = settings.tableCellPadding;
  var alignDelimiters = settings.tablePipeAlign;
  var stringLength = settings.stringLength;
  var around = padding ? ' ' : '|';
  return {
    unsafe: [{
      character: '\r',
      inConstruct: 'tableCell'
    }, {
      character: '\n',
      inConstruct: 'tableCell'
    }, // A pipe, when followed by a tab or space (padding), or a dash or colon
    // (unpadded delimiter row), could result in a table.
    {
      atBreak: true,
      character: '|',
      after: '[\t :-]'
    }, // A pipe in a cell must be encoded.
    {
      character: '|',
      inConstruct: 'tableCell'
    }, // A colon must be followed by a dash, in which case it could start a
    // delimiter row.
    {
      atBreak: true,
      character: ':',
      after: '-'
    }, // A delimiter row can also start with a dash, when followed by more
    // dashes, a colon, or a pipe.
    // This is a stricter version than the built in check for lists, thematic
    // breaks, and setex heading underlines though:
    // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
    {
      atBreak: true,
      character: '-',
      after: '[:|-]'
    }],
    handlers: {
      table: handleTable,
      tableRow: handleTableRow,
      tableCell: handleTableCell,
      inlineCode: inlineCodeWithTable
    }
  };
  /**
   * @type {ToMarkdownHandle}
   * @param {Table} node
   */

  function handleTable(node, _, context) {
    // @ts-expect-error: fixed in `markdown-table@3.0.1`.
    return serializeData(handleTableAsData(node, context), node.align);
  }
  /**
   * This function isn’t really used normally, because we handle rows at the
   * table level.
   * But, if someone passes in a table row, this ensures we make somewhat sense.
   *
   * @type {ToMarkdownHandle}
   * @param {TableRow} node
   */


  function handleTableRow(node, _, context) {
    var row = handleTableRowAsData(node, context); // `markdown-table` will always add an align row

    var value = serializeData([row]);
    return value.slice(0, value.indexOf('\n'));
  }
  /**
   * @type {ToMarkdownHandle}
   * @param {TableCell} node
   */


  function handleTableCell(node, _, context) {
    var exit = context.enter('tableCell');
    var subexit = context.enter('phrasing');
    var value = containerPhrasing(node, context, {
      before: around,
      after: around
    });
    subexit();
    exit();
    return value;
  }
  /**
   * @param {Array.<Array.<string>>} matrix
   * @param {Array.<string>} [align]
   */


  function serializeData(matrix, align) {
    return markdownTable(matrix, {
      align: align,
      alignDelimiters: alignDelimiters,
      padding: padding,
      stringLength: stringLength
    });
  }
  /**
   * @param {Table} node
   * @param {ToMarkdownContext} context
   */


  function handleTableAsData(node, context) {
    var children = node.children;
    var index = -1;
    /** @type {Array.<Array.<string>>} */

    var result = [];
    var subexit = context.enter('table');

    while (++index < children.length) {
      result[index] = handleTableRowAsData(children[index], context);
    }

    subexit();
    return result;
  }
  /**
   * @param {TableRow} node
   * @param {ToMarkdownContext} context
   */


  function handleTableRowAsData(node, context) {
    var children = node.children;
    var index = -1;
    /** @type {Array.<string>} */

    var result = [];
    var subexit = context.enter('tableRow');

    while (++index < children.length) {
      result[index] = handleTableCell(children[index], node, context);
    }

    subexit();
    return result;
  }
  /**
   * @type {ToMarkdownHandle}
   * @param {InlineCode} node
   */


  function inlineCodeWithTable(node, parent, context) {
    var value = inlineCode(node, parent, context);

    if (context.stack.includes('tableCell')) {
      value = value.replace(/\|/g, '\\$&');
    }

    return value;
  }
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
/**
 * @typedef {import('../types.js').Context} Context
 * @typedef {import('../types.js').Options} Options
 */

/**
 * @param {Context} context
 * @returns {Exclude<Options['bullet'], undefined>}
 */
function checkBullet(context) {
  var marker = context.options.bullet || '*';

  if (marker !== '*' && marker !== '+' && marker !== '-') {
    throw new Error('Cannot serialize items with `' + marker + '` for `options.bullet`, expected `*`, `+`, or `-`');
  }

  return marker;
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
/**
 * @typedef {import('../types.js').Context} Context
 * @typedef {import('../types.js').Options} Options
 */

/**
 * @param {Context} context
 * @returns {Exclude<Options['listItemIndent'], undefined>}
 */
function checkListItemIndent(context) {
  var style = context.options.listItemIndent || 'tab'; // To do: remove in a major.
  // @ts-expect-error: deprecated.

  if (style === 1 || style === '1') {
    return 'one';
  }

  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {
    throw new Error('Cannot serialize items with `' + style + '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`');
  }

  return style;
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-markdown/lib/handle/list-item.js
/**
 * @typedef {import('mdast').ListItem} ListItem
 * @typedef {import('mdast').List} List
 * @typedef {import('../util/indent-lines.js').Map} Map
 * @typedef {import('../types.js').Options} Options
 * @typedef {import('../types.js').Handle} Handle
 */




/**
 * @type {Handle}
 * @param {ListItem} node
 */

function listItem(node, parent, context) {
  var listItemIndent = checkListItemIndent(context);
  var bullet = context.bulletCurrent || checkBullet(context); // Add the marker value for ordered lists.

  if (parent && parent.type === 'list' && parent.ordered) {
    bullet = (typeof parent.start === 'number' && parent.start > -1 ? parent.start : 1) + (context.options.incrementListMarker === false ? 0 : parent.children.indexOf(node)) + bullet;
  }

  var size = bullet.length + 1;

  if (listItemIndent === 'tab' || listItemIndent === 'mixed' && (parent && parent.type === 'list' && parent.spread || node.spread)) {
    size = Math.ceil(size / 4) * 4;
  }

  var exit = context.enter('listItem');
  var value = indentLines(containerFlow(node, context), map);
  exit();
  return value;
  /** @type {Map} */

  function map(line, index, blank) {
    if (index) {
      return (blank ? '' : ' '.repeat(size)) + line;
    }

    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line;
  }
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-gfm-task-list-item/index.js
/**
 * @typedef {import('mdast').ListItem} ListItem
 * @typedef {import('mdast').Paragraph} Paragraph
 * @typedef {import('mdast').BlockContent} BlockContent
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 */

/** @type {FromMarkdownExtension} */

var gfmTaskListItemFromMarkdown = {
  exit: {
    taskListCheckValueChecked: exitCheck,
    taskListCheckValueUnchecked: exitCheck,
    paragraph: exitParagraphWithTaskListItem
  }
};
/** @type {ToMarkdownExtension} */

var gfmTaskListItemToMarkdown = {
  unsafe: [{
    atBreak: true,
    character: '-',
    after: '[:|-]'
  }],
  handlers: {
    listItem: listItemWithTaskListItem
  }
};
/** @type {FromMarkdownHandle} */

function exitCheck(token) {
  // We’re always in a paragraph, in a list item.
  this.stack[this.stack.length - 2].checked = token.type === 'taskListCheckValueChecked';
}
/** @type {FromMarkdownHandle} */


function exitParagraphWithTaskListItem(token) {
  var parent = this.stack[this.stack.length - 2];
  /** @type {Paragraph} */
  // @ts-expect-error: must be true.

  var node = this.stack[this.stack.length - 1];
  /** @type {BlockContent[]} */
  // @ts-expect-error: check whether `parent` is a `listItem` later.

  var siblings = parent.children;
  var head = node.children[0];
  var index = -1;
  /** @type {Paragraph|undefined} */

  var firstParaghraph;

  if (parent && parent.type === 'listItem' && typeof parent.checked === 'boolean' && head && head.type === 'text') {
    while (++index < siblings.length) {
      var sibling = siblings[index];

      if (sibling.type === 'paragraph') {
        firstParaghraph = sibling;
        break;
      }
    }

    if (firstParaghraph === node) {
      // Must start with a space or a tab.
      head.value = head.value.slice(1);

      if (head.value.length === 0) {
        node.children.shift();
      } else {
        // @ts-expect-error: must be true.
        head.position.start.column++; // @ts-expect-error: must be true.

        head.position.start.offset++; // @ts-expect-error: must be true.

        node.position.start = Object.assign({}, head.position.start);
      }
    }
  }

  this.exit(token);
}
/**
 * @type {ToMarkdownHandle}
 * @param {ListItem} node
 */


function listItemWithTaskListItem(node, parent, context) {
  var head = node.children[0];
  var value = listItem(node, parent, context);

  if (typeof node.checked === 'boolean' && head && head.type === 'paragraph') {
    value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
  }

  return value;
  /**
   * @param {string} $0
   * @returns {string}
   */

  function check($0) {
    return $0 + '[' + (node.checked ? 'x' : ' ') + '] ';
  }
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-gfm/index.js
/**
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 *
 * @typedef {import('mdast-util-gfm-table').Options} Options
 */





/**
 * @returns {Array.<FromMarkdownExtension>}
 */

function gfmFromMarkdown() {
  return [gfmAutolinkLiteralFromMarkdown, gfmFootnoteFromMarkdown(), gfmStrikethroughFromMarkdown, gfmTableFromMarkdown, gfmTaskListItemFromMarkdown];
}
/**
 * @param {Options} [options]
 * @returns {ToMarkdownExtension}
 */

function gfmToMarkdown(options) {
  return {
    extensions: [gfmAutolinkLiteralToMarkdown, gfmFootnoteToMarkdown(), gfmStrikethroughToMarkdown, gfmTableToMarkdown(options), gfmTaskListItemToMarkdown]
  };
}
;// CONCATENATED MODULE: ./node_modules/remark-gfm/index.js
/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options
 */


/**
 * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).
 *
 * @type {import('unified').Plugin<[Options?]|void[], Root>}
 */

function remarkGfm() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var data = this.data();
  add('micromarkExtensions', gfm(options));
  add('fromMarkdownExtensions', gfmFromMarkdown());
  add('toMarkdownExtensions', gfmToMarkdown(options));
  /**
   * @param {string} field
   * @param {unknown} value
   */

  function add(field, value) {
    var list =
    /** @type {unknown[]} */
    // Other extensions

    /* c8 ignore next 2 */
    data[field] ? data[field] : data[field] = [];
    list.push(value);
  }
}
;// CONCATENATED MODULE: ./node_modules/gemoji/index.js
/**
 * @typedef Gemoji
 * @property {string} emoji
 *   Example: `'😀'`.
 * @property {Array<string>} names
 *   Example: `['grinning']`.
 * @property {Array<string>} tags
 *   Example: `['smile', 'happy']`.
 * @property {string} description
 *   Example: `'grinning face'`.
 * @property {string} category
 *   Example: `'Smileys & Emotion'`.
 */

/**
 * List of gemoji.
 *
 * @type {Array<Gemoji>}
 */
var gemoji = [{
  emoji: '😀',
  names: ['grinning'],
  tags: ['smile', 'happy'],
  description: 'grinning face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😃',
  names: ['smiley'],
  tags: ['happy', 'joy', 'haha'],
  description: 'grinning face with big eyes',
  category: 'Smileys & Emotion'
}, {
  emoji: '😄',
  names: ['smile'],
  tags: ['happy', 'joy', 'laugh', 'pleased'],
  description: 'grinning face with smiling eyes',
  category: 'Smileys & Emotion'
}, {
  emoji: '😁',
  names: ['grin'],
  tags: [],
  description: 'beaming face with smiling eyes',
  category: 'Smileys & Emotion'
}, {
  emoji: '😆',
  names: ['laughing', 'satisfied'],
  tags: ['happy', 'haha'],
  description: 'grinning squinting face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😅',
  names: ['sweat_smile'],
  tags: ['hot'],
  description: 'grinning face with sweat',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤣',
  names: ['rofl'],
  tags: ['lol', 'laughing'],
  description: 'rolling on the floor laughing',
  category: 'Smileys & Emotion'
}, {
  emoji: '😂',
  names: ['joy'],
  tags: ['tears'],
  description: 'face with tears of joy',
  category: 'Smileys & Emotion'
}, {
  emoji: '🙂',
  names: ['slightly_smiling_face'],
  tags: [],
  description: 'slightly smiling face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🙃',
  names: ['upside_down_face'],
  tags: [],
  description: 'upside-down face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😉',
  names: ['wink'],
  tags: ['flirt'],
  description: 'winking face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😊',
  names: ['blush'],
  tags: ['proud'],
  description: 'smiling face with smiling eyes',
  category: 'Smileys & Emotion'
}, {
  emoji: '😇',
  names: ['innocent'],
  tags: ['angel'],
  description: 'smiling face with halo',
  category: 'Smileys & Emotion'
}, {
  emoji: '🥰',
  names: ['smiling_face_with_three_hearts'],
  tags: ['love'],
  description: 'smiling face with hearts',
  category: 'Smileys & Emotion'
}, {
  emoji: '😍',
  names: ['heart_eyes'],
  tags: ['love', 'crush'],
  description: 'smiling face with heart-eyes',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤩',
  names: ['star_struck'],
  tags: ['eyes'],
  description: 'star-struck',
  category: 'Smileys & Emotion'
}, {
  emoji: '😘',
  names: ['kissing_heart'],
  tags: ['flirt'],
  description: 'face blowing a kiss',
  category: 'Smileys & Emotion'
}, {
  emoji: '😗',
  names: ['kissing'],
  tags: [],
  description: 'kissing face',
  category: 'Smileys & Emotion'
}, {
  emoji: '☺️',
  names: ['relaxed'],
  tags: ['blush', 'pleased'],
  description: 'smiling face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😚',
  names: ['kissing_closed_eyes'],
  tags: [],
  description: 'kissing face with closed eyes',
  category: 'Smileys & Emotion'
}, {
  emoji: '😙',
  names: ['kissing_smiling_eyes'],
  tags: [],
  description: 'kissing face with smiling eyes',
  category: 'Smileys & Emotion'
}, {
  emoji: '🥲',
  names: ['smiling_face_with_tear'],
  tags: [],
  description: 'smiling face with tear',
  category: 'Smileys & Emotion'
}, {
  emoji: '😋',
  names: ['yum'],
  tags: ['tongue', 'lick'],
  description: 'face savoring food',
  category: 'Smileys & Emotion'
}, {
  emoji: '😛',
  names: ['stuck_out_tongue'],
  tags: [],
  description: 'face with tongue',
  category: 'Smileys & Emotion'
}, {
  emoji: '😜',
  names: ['stuck_out_tongue_winking_eye'],
  tags: ['prank', 'silly'],
  description: 'winking face with tongue',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤪',
  names: ['zany_face'],
  tags: ['goofy', 'wacky'],
  description: 'zany face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😝',
  names: ['stuck_out_tongue_closed_eyes'],
  tags: ['prank'],
  description: 'squinting face with tongue',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤑',
  names: ['money_mouth_face'],
  tags: ['rich'],
  description: 'money-mouth face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤗',
  names: ['hugs'],
  tags: [],
  description: 'hugging face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤭',
  names: ['hand_over_mouth'],
  tags: ['quiet', 'whoops'],
  description: 'face with hand over mouth',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤫',
  names: ['shushing_face'],
  tags: ['silence', 'quiet'],
  description: 'shushing face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤔',
  names: ['thinking'],
  tags: [],
  description: 'thinking face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤐',
  names: ['zipper_mouth_face'],
  tags: ['silence', 'hush'],
  description: 'zipper-mouth face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤨',
  names: ['raised_eyebrow'],
  tags: ['suspicious'],
  description: 'face with raised eyebrow',
  category: 'Smileys & Emotion'
}, {
  emoji: '😐',
  names: ['neutral_face'],
  tags: ['meh'],
  description: 'neutral face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😑',
  names: ['expressionless'],
  tags: [],
  description: 'expressionless face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😶',
  names: ['no_mouth'],
  tags: ['mute', 'silence'],
  description: 'face without mouth',
  category: 'Smileys & Emotion'
}, {
  emoji: '😶‍🌫️',
  names: ['face_in_clouds'],
  tags: [],
  description: 'face in clouds',
  category: 'Smileys & Emotion'
}, {
  emoji: '😏',
  names: ['smirk'],
  tags: ['smug'],
  description: 'smirking face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😒',
  names: ['unamused'],
  tags: ['meh'],
  description: 'unamused face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🙄',
  names: ['roll_eyes'],
  tags: [],
  description: 'face with rolling eyes',
  category: 'Smileys & Emotion'
}, {
  emoji: '😬',
  names: ['grimacing'],
  tags: [],
  description: 'grimacing face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😮‍💨',
  names: ['face_exhaling'],
  tags: [],
  description: 'face exhaling',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤥',
  names: ['lying_face'],
  tags: ['liar'],
  description: 'lying face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😌',
  names: ['relieved'],
  tags: ['whew'],
  description: 'relieved face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😔',
  names: ['pensive'],
  tags: [],
  description: 'pensive face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😪',
  names: ['sleepy'],
  tags: ['tired'],
  description: 'sleepy face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤤',
  names: ['drooling_face'],
  tags: [],
  description: 'drooling face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😴',
  names: ['sleeping'],
  tags: ['zzz'],
  description: 'sleeping face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😷',
  names: ['mask'],
  tags: ['sick', 'ill'],
  description: 'face with medical mask',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤒',
  names: ['face_with_thermometer'],
  tags: ['sick'],
  description: 'face with thermometer',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤕',
  names: ['face_with_head_bandage'],
  tags: ['hurt'],
  description: 'face with head-bandage',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤢',
  names: ['nauseated_face'],
  tags: ['sick', 'barf', 'disgusted'],
  description: 'nauseated face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤮',
  names: ['vomiting_face'],
  tags: ['barf', 'sick'],
  description: 'face vomiting',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤧',
  names: ['sneezing_face'],
  tags: ['achoo', 'sick'],
  description: 'sneezing face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🥵',
  names: ['hot_face'],
  tags: ['heat', 'sweating'],
  description: 'hot face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🥶',
  names: ['cold_face'],
  tags: ['freezing', 'ice'],
  description: 'cold face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🥴',
  names: ['woozy_face'],
  tags: ['groggy'],
  description: 'woozy face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😵',
  names: ['dizzy_face'],
  tags: [],
  description: 'knocked-out face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😵‍💫',
  names: ['face_with_spiral_eyes'],
  tags: [],
  description: 'face with spiral eyes',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤯',
  names: ['exploding_head'],
  tags: ['mind', 'blown'],
  description: 'exploding head',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤠',
  names: ['cowboy_hat_face'],
  tags: [],
  description: 'cowboy hat face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🥳',
  names: ['partying_face'],
  tags: ['celebration', 'birthday'],
  description: 'partying face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🥸',
  names: ['disguised_face'],
  tags: [],
  description: 'disguised face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😎',
  names: ['sunglasses'],
  tags: ['cool'],
  description: 'smiling face with sunglasses',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤓',
  names: ['nerd_face'],
  tags: ['geek', 'glasses'],
  description: 'nerd face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🧐',
  names: ['monocle_face'],
  tags: [],
  description: 'face with monocle',
  category: 'Smileys & Emotion'
}, {
  emoji: '😕',
  names: ['confused'],
  tags: [],
  description: 'confused face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😟',
  names: ['worried'],
  tags: ['nervous'],
  description: 'worried face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🙁',
  names: ['slightly_frowning_face'],
  tags: [],
  description: 'slightly frowning face',
  category: 'Smileys & Emotion'
}, {
  emoji: '☹️',
  names: ['frowning_face'],
  tags: [],
  description: 'frowning face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😮',
  names: ['open_mouth'],
  tags: ['surprise', 'impressed', 'wow'],
  description: 'face with open mouth',
  category: 'Smileys & Emotion'
}, {
  emoji: '😯',
  names: ['hushed'],
  tags: ['silence', 'speechless'],
  description: 'hushed face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😲',
  names: ['astonished'],
  tags: ['amazed', 'gasp'],
  description: 'astonished face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😳',
  names: ['flushed'],
  tags: [],
  description: 'flushed face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🥺',
  names: ['pleading_face'],
  tags: ['puppy', 'eyes'],
  description: 'pleading face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😦',
  names: ['frowning'],
  tags: [],
  description: 'frowning face with open mouth',
  category: 'Smileys & Emotion'
}, {
  emoji: '😧',
  names: ['anguished'],
  tags: ['stunned'],
  description: 'anguished face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😨',
  names: ['fearful'],
  tags: ['scared', 'shocked', 'oops'],
  description: 'fearful face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😰',
  names: ['cold_sweat'],
  tags: ['nervous'],
  description: 'anxious face with sweat',
  category: 'Smileys & Emotion'
}, {
  emoji: '😥',
  names: ['disappointed_relieved'],
  tags: ['phew', 'sweat', 'nervous'],
  description: 'sad but relieved face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😢',
  names: ['cry'],
  tags: ['sad', 'tear'],
  description: 'crying face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😭',
  names: ['sob'],
  tags: ['sad', 'cry', 'bawling'],
  description: 'loudly crying face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😱',
  names: ['scream'],
  tags: ['horror', 'shocked'],
  description: 'face screaming in fear',
  category: 'Smileys & Emotion'
}, {
  emoji: '😖',
  names: ['confounded'],
  tags: [],
  description: 'confounded face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😣',
  names: ['persevere'],
  tags: ['struggling'],
  description: 'persevering face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😞',
  names: ['disappointed'],
  tags: ['sad'],
  description: 'disappointed face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😓',
  names: ['sweat'],
  tags: [],
  description: 'downcast face with sweat',
  category: 'Smileys & Emotion'
}, {
  emoji: '😩',
  names: ['weary'],
  tags: ['tired'],
  description: 'weary face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😫',
  names: ['tired_face'],
  tags: ['upset', 'whine'],
  description: 'tired face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🥱',
  names: ['yawning_face'],
  tags: [],
  description: 'yawning face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😤',
  names: ['triumph'],
  tags: ['smug'],
  description: 'face with steam from nose',
  category: 'Smileys & Emotion'
}, {
  emoji: '😡',
  names: ['rage', 'pout'],
  tags: ['angry'],
  description: 'pouting face',
  category: 'Smileys & Emotion'
}, {
  emoji: '😠',
  names: ['angry'],
  tags: ['mad', 'annoyed'],
  description: 'angry face',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤬',
  names: ['cursing_face'],
  tags: ['foul'],
  description: 'face with symbols on mouth',
  category: 'Smileys & Emotion'
}, {
  emoji: '😈',
  names: ['smiling_imp'],
  tags: ['devil', 'evil', 'horns'],
  description: 'smiling face with horns',
  category: 'Smileys & Emotion'
}, {
  emoji: '👿',
  names: ['imp'],
  tags: ['angry', 'devil', 'evil', 'horns'],
  description: 'angry face with horns',
  category: 'Smileys & Emotion'
}, {
  emoji: '💀',
  names: ['skull'],
  tags: ['dead', 'danger', 'poison'],
  description: 'skull',
  category: 'Smileys & Emotion'
}, {
  emoji: '☠️',
  names: ['skull_and_crossbones'],
  tags: ['danger', 'pirate'],
  description: 'skull and crossbones',
  category: 'Smileys & Emotion'
}, {
  emoji: '💩',
  names: ['hankey', 'poop', 'shit'],
  tags: ['crap'],
  description: 'pile of poo',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤡',
  names: ['clown_face'],
  tags: [],
  description: 'clown face',
  category: 'Smileys & Emotion'
}, {
  emoji: '👹',
  names: ['japanese_ogre'],
  tags: ['monster'],
  description: 'ogre',
  category: 'Smileys & Emotion'
}, {
  emoji: '👺',
  names: ['japanese_goblin'],
  tags: [],
  description: 'goblin',
  category: 'Smileys & Emotion'
}, {
  emoji: '👻',
  names: ['ghost'],
  tags: ['halloween'],
  description: 'ghost',
  category: 'Smileys & Emotion'
}, {
  emoji: '👽',
  names: ['alien'],
  tags: ['ufo'],
  description: 'alien',
  category: 'Smileys & Emotion'
}, {
  emoji: '👾',
  names: ['space_invader'],
  tags: ['game', 'retro'],
  description: 'alien monster',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤖',
  names: ['robot'],
  tags: [],
  description: 'robot',
  category: 'Smileys & Emotion'
}, {
  emoji: '😺',
  names: ['smiley_cat'],
  tags: [],
  description: 'grinning cat',
  category: 'Smileys & Emotion'
}, {
  emoji: '😸',
  names: ['smile_cat'],
  tags: [],
  description: 'grinning cat with smiling eyes',
  category: 'Smileys & Emotion'
}, {
  emoji: '😹',
  names: ['joy_cat'],
  tags: [],
  description: 'cat with tears of joy',
  category: 'Smileys & Emotion'
}, {
  emoji: '😻',
  names: ['heart_eyes_cat'],
  tags: [],
  description: 'smiling cat with heart-eyes',
  category: 'Smileys & Emotion'
}, {
  emoji: '😼',
  names: ['smirk_cat'],
  tags: [],
  description: 'cat with wry smile',
  category: 'Smileys & Emotion'
}, {
  emoji: '😽',
  names: ['kissing_cat'],
  tags: [],
  description: 'kissing cat',
  category: 'Smileys & Emotion'
}, {
  emoji: '🙀',
  names: ['scream_cat'],
  tags: ['horror'],
  description: 'weary cat',
  category: 'Smileys & Emotion'
}, {
  emoji: '😿',
  names: ['crying_cat_face'],
  tags: ['sad', 'tear'],
  description: 'crying cat',
  category: 'Smileys & Emotion'
}, {
  emoji: '😾',
  names: ['pouting_cat'],
  tags: [],
  description: 'pouting cat',
  category: 'Smileys & Emotion'
}, {
  emoji: '🙈',
  names: ['see_no_evil'],
  tags: ['monkey', 'blind', 'ignore'],
  description: 'see-no-evil monkey',
  category: 'Smileys & Emotion'
}, {
  emoji: '🙉',
  names: ['hear_no_evil'],
  tags: ['monkey', 'deaf'],
  description: 'hear-no-evil monkey',
  category: 'Smileys & Emotion'
}, {
  emoji: '🙊',
  names: ['speak_no_evil'],
  tags: ['monkey', 'mute', 'hush'],
  description: 'speak-no-evil monkey',
  category: 'Smileys & Emotion'
}, {
  emoji: '💋',
  names: ['kiss'],
  tags: ['lipstick'],
  description: 'kiss mark',
  category: 'Smileys & Emotion'
}, {
  emoji: '💌',
  names: ['love_letter'],
  tags: ['email', 'envelope'],
  description: 'love letter',
  category: 'Smileys & Emotion'
}, {
  emoji: '💘',
  names: ['cupid'],
  tags: ['love', 'heart'],
  description: 'heart with arrow',
  category: 'Smileys & Emotion'
}, {
  emoji: '💝',
  names: ['gift_heart'],
  tags: ['chocolates'],
  description: 'heart with ribbon',
  category: 'Smileys & Emotion'
}, {
  emoji: '💖',
  names: ['sparkling_heart'],
  tags: [],
  description: 'sparkling heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '💗',
  names: ['heartpulse'],
  tags: [],
  description: 'growing heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '💓',
  names: ['heartbeat'],
  tags: [],
  description: 'beating heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '💞',
  names: ['revolving_hearts'],
  tags: [],
  description: 'revolving hearts',
  category: 'Smileys & Emotion'
}, {
  emoji: '💕',
  names: ['two_hearts'],
  tags: [],
  description: 'two hearts',
  category: 'Smileys & Emotion'
}, {
  emoji: '💟',
  names: ['heart_decoration'],
  tags: [],
  description: 'heart decoration',
  category: 'Smileys & Emotion'
}, {
  emoji: '❣️',
  names: ['heavy_heart_exclamation'],
  tags: [],
  description: 'heart exclamation',
  category: 'Smileys & Emotion'
}, {
  emoji: '💔',
  names: ['broken_heart'],
  tags: [],
  description: 'broken heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '❤️‍🔥',
  names: ['heart_on_fire'],
  tags: [],
  description: 'heart on fire',
  category: 'Smileys & Emotion'
}, {
  emoji: '❤️‍🩹',
  names: ['mending_heart'],
  tags: [],
  description: 'mending heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '❤️',
  names: ['heart'],
  tags: ['love'],
  description: 'red heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '🧡',
  names: ['orange_heart'],
  tags: [],
  description: 'orange heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '💛',
  names: ['yellow_heart'],
  tags: [],
  description: 'yellow heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '💚',
  names: ['green_heart'],
  tags: [],
  description: 'green heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '💙',
  names: ['blue_heart'],
  tags: [],
  description: 'blue heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '💜',
  names: ['purple_heart'],
  tags: [],
  description: 'purple heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤎',
  names: ['brown_heart'],
  tags: [],
  description: 'brown heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '🖤',
  names: ['black_heart'],
  tags: [],
  description: 'black heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '🤍',
  names: ['white_heart'],
  tags: [],
  description: 'white heart',
  category: 'Smileys & Emotion'
}, {
  emoji: '💯',
  names: ['100'],
  tags: ['score', 'perfect'],
  description: 'hundred points',
  category: 'Smileys & Emotion'
}, {
  emoji: '💢',
  names: ['anger'],
  tags: ['angry'],
  description: 'anger symbol',
  category: 'Smileys & Emotion'
}, {
  emoji: '💥',
  names: ['boom', 'collision'],
  tags: ['explode'],
  description: 'collision',
  category: 'Smileys & Emotion'
}, {
  emoji: '💫',
  names: ['dizzy'],
  tags: ['star'],
  description: 'dizzy',
  category: 'Smileys & Emotion'
}, {
  emoji: '💦',
  names: ['sweat_drops'],
  tags: ['water', 'workout'],
  description: 'sweat droplets',
  category: 'Smileys & Emotion'
}, {
  emoji: '💨',
  names: ['dash'],
  tags: ['wind', 'blow', 'fast'],
  description: 'dashing away',
  category: 'Smileys & Emotion'
}, {
  emoji: '🕳️',
  names: ['hole'],
  tags: [],
  description: 'hole',
  category: 'Smileys & Emotion'
}, {
  emoji: '💣',
  names: ['bomb'],
  tags: ['boom'],
  description: 'bomb',
  category: 'Smileys & Emotion'
}, {
  emoji: '💬',
  names: ['speech_balloon'],
  tags: ['comment'],
  description: 'speech balloon',
  category: 'Smileys & Emotion'
}, {
  emoji: '👁️‍🗨️',
  names: ['eye_speech_bubble'],
  tags: [],
  description: 'eye in speech bubble',
  category: 'Smileys & Emotion'
}, {
  emoji: '🗨️',
  names: ['left_speech_bubble'],
  tags: [],
  description: 'left speech bubble',
  category: 'Smileys & Emotion'
}, {
  emoji: '🗯️',
  names: ['right_anger_bubble'],
  tags: [],
  description: 'right anger bubble',
  category: 'Smileys & Emotion'
}, {
  emoji: '💭',
  names: ['thought_balloon'],
  tags: ['thinking'],
  description: 'thought balloon',
  category: 'Smileys & Emotion'
}, {
  emoji: '💤',
  names: ['zzz'],
  tags: ['sleeping'],
  description: 'zzz',
  category: 'Smileys & Emotion'
}, {
  emoji: '👋',
  names: ['wave'],
  tags: ['goodbye'],
  description: 'waving hand',
  category: 'People & Body'
}, {
  emoji: '🤚',
  names: ['raised_back_of_hand'],
  tags: [],
  description: 'raised back of hand',
  category: 'People & Body'
}, {
  emoji: '🖐️',
  names: ['raised_hand_with_fingers_splayed'],
  tags: [],
  description: 'hand with fingers splayed',
  category: 'People & Body'
}, {
  emoji: '✋',
  names: ['hand', 'raised_hand'],
  tags: ['highfive', 'stop'],
  description: 'raised hand',
  category: 'People & Body'
}, {
  emoji: '🖖',
  names: ['vulcan_salute'],
  tags: ['prosper', 'spock'],
  description: 'vulcan salute',
  category: 'People & Body'
}, {
  emoji: '👌',
  names: ['ok_hand'],
  tags: [],
  description: 'OK hand',
  category: 'People & Body'
}, {
  emoji: '🤌',
  names: ['pinched_fingers'],
  tags: [],
  description: 'pinched fingers',
  category: 'People & Body'
}, {
  emoji: '🤏',
  names: ['pinching_hand'],
  tags: [],
  description: 'pinching hand',
  category: 'People & Body'
}, {
  emoji: '✌️',
  names: ['v'],
  tags: ['victory', 'peace'],
  description: 'victory hand',
  category: 'People & Body'
}, {
  emoji: '🤞',
  names: ['crossed_fingers'],
  tags: ['luck', 'hopeful'],
  description: 'crossed fingers',
  category: 'People & Body'
}, {
  emoji: '🤟',
  names: ['love_you_gesture'],
  tags: [],
  description: 'love-you gesture',
  category: 'People & Body'
}, {
  emoji: '🤘',
  names: ['metal'],
  tags: [],
  description: 'sign of the horns',
  category: 'People & Body'
}, {
  emoji: '🤙',
  names: ['call_me_hand'],
  tags: [],
  description: 'call me hand',
  category: 'People & Body'
}, {
  emoji: '👈',
  names: ['point_left'],
  tags: [],
  description: 'backhand index pointing left',
  category: 'People & Body'
}, {
  emoji: '👉',
  names: ['point_right'],
  tags: [],
  description: 'backhand index pointing right',
  category: 'People & Body'
}, {
  emoji: '👆',
  names: ['point_up_2'],
  tags: [],
  description: 'backhand index pointing up',
  category: 'People & Body'
}, {
  emoji: '🖕',
  names: ['middle_finger', 'fu'],
  tags: [],
  description: 'middle finger',
  category: 'People & Body'
}, {
  emoji: '👇',
  names: ['point_down'],
  tags: [],
  description: 'backhand index pointing down',
  category: 'People & Body'
}, {
  emoji: '☝️',
  names: ['point_up'],
  tags: [],
  description: 'index pointing up',
  category: 'People & Body'
}, {
  emoji: '👍',
  names: ['+1', 'thumbsup'],
  tags: ['approve', 'ok'],
  description: 'thumbs up',
  category: 'People & Body'
}, {
  emoji: '👎',
  names: ['-1', 'thumbsdown'],
  tags: ['disapprove', 'bury'],
  description: 'thumbs down',
  category: 'People & Body'
}, {
  emoji: '✊',
  names: ['fist_raised', 'fist'],
  tags: ['power'],
  description: 'raised fist',
  category: 'People & Body'
}, {
  emoji: '👊',
  names: ['fist_oncoming', 'facepunch', 'punch'],
  tags: ['attack'],
  description: 'oncoming fist',
  category: 'People & Body'
}, {
  emoji: '🤛',
  names: ['fist_left'],
  tags: [],
  description: 'left-facing fist',
  category: 'People & Body'
}, {
  emoji: '🤜',
  names: ['fist_right'],
  tags: [],
  description: 'right-facing fist',
  category: 'People & Body'
}, {
  emoji: '👏',
  names: ['clap'],
  tags: ['praise', 'applause'],
  description: 'clapping hands',
  category: 'People & Body'
}, {
  emoji: '🙌',
  names: ['raised_hands'],
  tags: ['hooray'],
  description: 'raising hands',
  category: 'People & Body'
}, {
  emoji: '👐',
  names: ['open_hands'],
  tags: [],
  description: 'open hands',
  category: 'People & Body'
}, {
  emoji: '🤲',
  names: ['palms_up_together'],
  tags: [],
  description: 'palms up together',
  category: 'People & Body'
}, {
  emoji: '🤝',
  names: ['handshake'],
  tags: ['deal'],
  description: 'handshake',
  category: 'People & Body'
}, {
  emoji: '🙏',
  names: ['pray'],
  tags: ['please', 'hope', 'wish'],
  description: 'folded hands',
  category: 'People & Body'
}, {
  emoji: '✍️',
  names: ['writing_hand'],
  tags: [],
  description: 'writing hand',
  category: 'People & Body'
}, {
  emoji: '💅',
  names: ['nail_care'],
  tags: ['beauty', 'manicure'],
  description: 'nail polish',
  category: 'People & Body'
}, {
  emoji: '🤳',
  names: ['selfie'],
  tags: [],
  description: 'selfie',
  category: 'People & Body'
}, {
  emoji: '💪',
  names: ['muscle'],
  tags: ['flex', 'bicep', 'strong', 'workout'],
  description: 'flexed biceps',
  category: 'People & Body'
}, {
  emoji: '🦾',
  names: ['mechanical_arm'],
  tags: [],
  description: 'mechanical arm',
  category: 'People & Body'
}, {
  emoji: '🦿',
  names: ['mechanical_leg'],
  tags: [],
  description: 'mechanical leg',
  category: 'People & Body'
}, {
  emoji: '🦵',
  names: ['leg'],
  tags: [],
  description: 'leg',
  category: 'People & Body'
}, {
  emoji: '🦶',
  names: ['foot'],
  tags: [],
  description: 'foot',
  category: 'People & Body'
}, {
  emoji: '👂',
  names: ['ear'],
  tags: ['hear', 'sound', 'listen'],
  description: 'ear',
  category: 'People & Body'
}, {
  emoji: '🦻',
  names: ['ear_with_hearing_aid'],
  tags: [],
  description: 'ear with hearing aid',
  category: 'People & Body'
}, {
  emoji: '👃',
  names: ['nose'],
  tags: ['smell'],
  description: 'nose',
  category: 'People & Body'
}, {
  emoji: '🧠',
  names: ['brain'],
  tags: [],
  description: 'brain',
  category: 'People & Body'
}, {
  emoji: '🫀',
  names: ['anatomical_heart'],
  tags: [],
  description: 'anatomical heart',
  category: 'People & Body'
}, {
  emoji: '🫁',
  names: ['lungs'],
  tags: [],
  description: 'lungs',
  category: 'People & Body'
}, {
  emoji: '🦷',
  names: ['tooth'],
  tags: [],
  description: 'tooth',
  category: 'People & Body'
}, {
  emoji: '🦴',
  names: ['bone'],
  tags: [],
  description: 'bone',
  category: 'People & Body'
}, {
  emoji: '👀',
  names: ['eyes'],
  tags: ['look', 'see', 'watch'],
  description: 'eyes',
  category: 'People & Body'
}, {
  emoji: '👁️',
  names: ['eye'],
  tags: [],
  description: 'eye',
  category: 'People & Body'
}, {
  emoji: '👅',
  names: ['tongue'],
  tags: ['taste'],
  description: 'tongue',
  category: 'People & Body'
}, {
  emoji: '👄',
  names: ['lips'],
  tags: ['kiss'],
  description: 'mouth',
  category: 'People & Body'
}, {
  emoji: '👶',
  names: ['baby'],
  tags: ['child', 'newborn'],
  description: 'baby',
  category: 'People & Body'
}, {
  emoji: '🧒',
  names: ['child'],
  tags: [],
  description: 'child',
  category: 'People & Body'
}, {
  emoji: '👦',
  names: ['boy'],
  tags: ['child'],
  description: 'boy',
  category: 'People & Body'
}, {
  emoji: '👧',
  names: ['girl'],
  tags: ['child'],
  description: 'girl',
  category: 'People & Body'
}, {
  emoji: '🧑',
  names: ['adult'],
  tags: [],
  description: 'person',
  category: 'People & Body'
}, {
  emoji: '👱',
  names: ['blond_haired_person'],
  tags: [],
  description: 'person: blond hair',
  category: 'People & Body'
}, {
  emoji: '👨',
  names: ['man'],
  tags: ['mustache', 'father', 'dad'],
  description: 'man',
  category: 'People & Body'
}, {
  emoji: '🧔',
  names: ['bearded_person'],
  tags: [],
  description: 'person: beard',
  category: 'People & Body'
}, {
  emoji: '🧔‍♂️',
  names: ['man_beard'],
  tags: [],
  description: 'man: beard',
  category: 'People & Body'
}, {
  emoji: '🧔‍♀️',
  names: ['woman_beard'],
  tags: [],
  description: 'woman: beard',
  category: 'People & Body'
}, {
  emoji: '👨‍🦰',
  names: ['red_haired_man'],
  tags: [],
  description: 'man: red hair',
  category: 'People & Body'
}, {
  emoji: '👨‍🦱',
  names: ['curly_haired_man'],
  tags: [],
  description: 'man: curly hair',
  category: 'People & Body'
}, {
  emoji: '👨‍🦳',
  names: ['white_haired_man'],
  tags: [],
  description: 'man: white hair',
  category: 'People & Body'
}, {
  emoji: '👨‍🦲',
  names: ['bald_man'],
  tags: [],
  description: 'man: bald',
  category: 'People & Body'
}, {
  emoji: '👩',
  names: ['woman'],
  tags: ['girls'],
  description: 'woman',
  category: 'People & Body'
}, {
  emoji: '👩‍🦰',
  names: ['red_haired_woman'],
  tags: [],
  description: 'woman: red hair',
  category: 'People & Body'
}, {
  emoji: '🧑‍🦰',
  names: ['person_red_hair'],
  tags: [],
  description: 'person: red hair',
  category: 'People & Body'
}, {
  emoji: '👩‍🦱',
  names: ['curly_haired_woman'],
  tags: [],
  description: 'woman: curly hair',
  category: 'People & Body'
}, {
  emoji: '🧑‍🦱',
  names: ['person_curly_hair'],
  tags: [],
  description: 'person: curly hair',
  category: 'People & Body'
}, {
  emoji: '👩‍🦳',
  names: ['white_haired_woman'],
  tags: [],
  description: 'woman: white hair',
  category: 'People & Body'
}, {
  emoji: '🧑‍🦳',
  names: ['person_white_hair'],
  tags: [],
  description: 'person: white hair',
  category: 'People & Body'
}, {
  emoji: '👩‍🦲',
  names: ['bald_woman'],
  tags: [],
  description: 'woman: bald',
  category: 'People & Body'
}, {
  emoji: '🧑‍🦲',
  names: ['person_bald'],
  tags: [],
  description: 'person: bald',
  category: 'People & Body'
}, {
  emoji: '👱‍♀️',
  names: ['blond_haired_woman', 'blonde_woman'],
  tags: [],
  description: 'woman: blond hair',
  category: 'People & Body'
}, {
  emoji: '👱‍♂️',
  names: ['blond_haired_man'],
  tags: [],
  description: 'man: blond hair',
  category: 'People & Body'
}, {
  emoji: '🧓',
  names: ['older_adult'],
  tags: [],
  description: 'older person',
  category: 'People & Body'
}, {
  emoji: '👴',
  names: ['older_man'],
  tags: [],
  description: 'old man',
  category: 'People & Body'
}, {
  emoji: '👵',
  names: ['older_woman'],
  tags: [],
  description: 'old woman',
  category: 'People & Body'
}, {
  emoji: '🙍',
  names: ['frowning_person'],
  tags: [],
  description: 'person frowning',
  category: 'People & Body'
}, {
  emoji: '🙍‍♂️',
  names: ['frowning_man'],
  tags: [],
  description: 'man frowning',
  category: 'People & Body'
}, {
  emoji: '🙍‍♀️',
  names: ['frowning_woman'],
  tags: [],
  description: 'woman frowning',
  category: 'People & Body'
}, {
  emoji: '🙎',
  names: ['pouting_face'],
  tags: [],
  description: 'person pouting',
  category: 'People & Body'
}, {
  emoji: '🙎‍♂️',
  names: ['pouting_man'],
  tags: [],
  description: 'man pouting',
  category: 'People & Body'
}, {
  emoji: '🙎‍♀️',
  names: ['pouting_woman'],
  tags: [],
  description: 'woman pouting',
  category: 'People & Body'
}, {
  emoji: '🙅',
  names: ['no_good'],
  tags: ['stop', 'halt', 'denied'],
  description: 'person gesturing NO',
  category: 'People & Body'
}, {
  emoji: '🙅‍♂️',
  names: ['no_good_man', 'ng_man'],
  tags: ['stop', 'halt', 'denied'],
  description: 'man gesturing NO',
  category: 'People & Body'
}, {
  emoji: '🙅‍♀️',
  names: ['no_good_woman', 'ng_woman'],
  tags: ['stop', 'halt', 'denied'],
  description: 'woman gesturing NO',
  category: 'People & Body'
}, {
  emoji: '🙆',
  names: ['ok_person'],
  tags: [],
  description: 'person gesturing OK',
  category: 'People & Body'
}, {
  emoji: '🙆‍♂️',
  names: ['ok_man'],
  tags: [],
  description: 'man gesturing OK',
  category: 'People & Body'
}, {
  emoji: '🙆‍♀️',
  names: ['ok_woman'],
  tags: [],
  description: 'woman gesturing OK',
  category: 'People & Body'
}, {
  emoji: '💁',
  names: ['tipping_hand_person', 'information_desk_person'],
  tags: [],
  description: 'person tipping hand',
  category: 'People & Body'
}, {
  emoji: '💁‍♂️',
  names: ['tipping_hand_man', 'sassy_man'],
  tags: ['information'],
  description: 'man tipping hand',
  category: 'People & Body'
}, {
  emoji: '💁‍♀️',
  names: ['tipping_hand_woman', 'sassy_woman'],
  tags: ['information'],
  description: 'woman tipping hand',
  category: 'People & Body'
}, {
  emoji: '🙋',
  names: ['raising_hand'],
  tags: [],
  description: 'person raising hand',
  category: 'People & Body'
}, {
  emoji: '🙋‍♂️',
  names: ['raising_hand_man'],
  tags: [],
  description: 'man raising hand',
  category: 'People & Body'
}, {
  emoji: '🙋‍♀️',
  names: ['raising_hand_woman'],
  tags: [],
  description: 'woman raising hand',
  category: 'People & Body'
}, {
  emoji: '🧏',
  names: ['deaf_person'],
  tags: [],
  description: 'deaf person',
  category: 'People & Body'
}, {
  emoji: '🧏‍♂️',
  names: ['deaf_man'],
  tags: [],
  description: 'deaf man',
  category: 'People & Body'
}, {
  emoji: '🧏‍♀️',
  names: ['deaf_woman'],
  tags: [],
  description: 'deaf woman',
  category: 'People & Body'
}, {
  emoji: '🙇',
  names: ['bow'],
  tags: ['respect', 'thanks'],
  description: 'person bowing',
  category: 'People & Body'
}, {
  emoji: '🙇‍♂️',
  names: ['bowing_man'],
  tags: ['respect', 'thanks'],
  description: 'man bowing',
  category: 'People & Body'
}, {
  emoji: '🙇‍♀️',
  names: ['bowing_woman'],
  tags: ['respect', 'thanks'],
  description: 'woman bowing',
  category: 'People & Body'
}, {
  emoji: '🤦',
  names: ['facepalm'],
  tags: [],
  description: 'person facepalming',
  category: 'People & Body'
}, {
  emoji: '🤦‍♂️',
  names: ['man_facepalming'],
  tags: [],
  description: 'man facepalming',
  category: 'People & Body'
}, {
  emoji: '🤦‍♀️',
  names: ['woman_facepalming'],
  tags: [],
  description: 'woman facepalming',
  category: 'People & Body'
}, {
  emoji: '🤷',
  names: ['shrug'],
  tags: [],
  description: 'person shrugging',
  category: 'People & Body'
}, {
  emoji: '🤷‍♂️',
  names: ['man_shrugging'],
  tags: [],
  description: 'man shrugging',
  category: 'People & Body'
}, {
  emoji: '🤷‍♀️',
  names: ['woman_shrugging'],
  tags: [],
  description: 'woman shrugging',
  category: 'People & Body'
}, {
  emoji: '🧑‍⚕️',
  names: ['health_worker'],
  tags: [],
  description: 'health worker',
  category: 'People & Body'
}, {
  emoji: '👨‍⚕️',
  names: ['man_health_worker'],
  tags: ['doctor', 'nurse'],
  description: 'man health worker',
  category: 'People & Body'
}, {
  emoji: '👩‍⚕️',
  names: ['woman_health_worker'],
  tags: ['doctor', 'nurse'],
  description: 'woman health worker',
  category: 'People & Body'
}, {
  emoji: '🧑‍🎓',
  names: ['student'],
  tags: [],
  description: 'student',
  category: 'People & Body'
}, {
  emoji: '👨‍🎓',
  names: ['man_student'],
  tags: ['graduation'],
  description: 'man student',
  category: 'People & Body'
}, {
  emoji: '👩‍🎓',
  names: ['woman_student'],
  tags: ['graduation'],
  description: 'woman student',
  category: 'People & Body'
}, {
  emoji: '🧑‍🏫',
  names: ['teacher'],
  tags: [],
  description: 'teacher',
  category: 'People & Body'
}, {
  emoji: '👨‍🏫',
  names: ['man_teacher'],
  tags: ['school', 'professor'],
  description: 'man teacher',
  category: 'People & Body'
}, {
  emoji: '👩‍🏫',
  names: ['woman_teacher'],
  tags: ['school', 'professor'],
  description: 'woman teacher',
  category: 'People & Body'
}, {
  emoji: '🧑‍⚖️',
  names: ['judge'],
  tags: [],
  description: 'judge',
  category: 'People & Body'
}, {
  emoji: '👨‍⚖️',
  names: ['man_judge'],
  tags: ['justice'],
  description: 'man judge',
  category: 'People & Body'
}, {
  emoji: '👩‍⚖️',
  names: ['woman_judge'],
  tags: ['justice'],
  description: 'woman judge',
  category: 'People & Body'
}, {
  emoji: '🧑‍🌾',
  names: ['farmer'],
  tags: [],
  description: 'farmer',
  category: 'People & Body'
}, {
  emoji: '👨‍🌾',
  names: ['man_farmer'],
  tags: [],
  description: 'man farmer',
  category: 'People & Body'
}, {
  emoji: '👩‍🌾',
  names: ['woman_farmer'],
  tags: [],
  description: 'woman farmer',
  category: 'People & Body'
}, {
  emoji: '🧑‍🍳',
  names: ['cook'],
  tags: [],
  description: 'cook',
  category: 'People & Body'
}, {
  emoji: '👨‍🍳',
  names: ['man_cook'],
  tags: ['chef'],
  description: 'man cook',
  category: 'People & Body'
}, {
  emoji: '👩‍🍳',
  names: ['woman_cook'],
  tags: ['chef'],
  description: 'woman cook',
  category: 'People & Body'
}, {
  emoji: '🧑‍🔧',
  names: ['mechanic'],
  tags: [],
  description: 'mechanic',
  category: 'People & Body'
}, {
  emoji: '👨‍🔧',
  names: ['man_mechanic'],
  tags: [],
  description: 'man mechanic',
  category: 'People & Body'
}, {
  emoji: '👩‍🔧',
  names: ['woman_mechanic'],
  tags: [],
  description: 'woman mechanic',
  category: 'People & Body'
}, {
  emoji: '🧑‍🏭',
  names: ['factory_worker'],
  tags: [],
  description: 'factory worker',
  category: 'People & Body'
}, {
  emoji: '👨‍🏭',
  names: ['man_factory_worker'],
  tags: [],
  description: 'man factory worker',
  category: 'People & Body'
}, {
  emoji: '👩‍🏭',
  names: ['woman_factory_worker'],
  tags: [],
  description: 'woman factory worker',
  category: 'People & Body'
}, {
  emoji: '🧑‍💼',
  names: ['office_worker'],
  tags: [],
  description: 'office worker',
  category: 'People & Body'
}, {
  emoji: '👨‍💼',
  names: ['man_office_worker'],
  tags: ['business'],
  description: 'man office worker',
  category: 'People & Body'
}, {
  emoji: '👩‍💼',
  names: ['woman_office_worker'],
  tags: ['business'],
  description: 'woman office worker',
  category: 'People & Body'
}, {
  emoji: '🧑‍🔬',
  names: ['scientist'],
  tags: [],
  description: 'scientist',
  category: 'People & Body'
}, {
  emoji: '👨‍🔬',
  names: ['man_scientist'],
  tags: ['research'],
  description: 'man scientist',
  category: 'People & Body'
}, {
  emoji: '👩‍🔬',
  names: ['woman_scientist'],
  tags: ['research'],
  description: 'woman scientist',
  category: 'People & Body'
}, {
  emoji: '🧑‍💻',
  names: ['technologist'],
  tags: [],
  description: 'technologist',
  category: 'People & Body'
}, {
  emoji: '👨‍💻',
  names: ['man_technologist'],
  tags: ['coder'],
  description: 'man technologist',
  category: 'People & Body'
}, {
  emoji: '👩‍💻',
  names: ['woman_technologist'],
  tags: ['coder'],
  description: 'woman technologist',
  category: 'People & Body'
}, {
  emoji: '🧑‍🎤',
  names: ['singer'],
  tags: [],
  description: 'singer',
  category: 'People & Body'
}, {
  emoji: '👨‍🎤',
  names: ['man_singer'],
  tags: ['rockstar'],
  description: 'man singer',
  category: 'People & Body'
}, {
  emoji: '👩‍🎤',
  names: ['woman_singer'],
  tags: ['rockstar'],
  description: 'woman singer',
  category: 'People & Body'
}, {
  emoji: '🧑‍🎨',
  names: ['artist'],
  tags: [],
  description: 'artist',
  category: 'People & Body'
}, {
  emoji: '👨‍🎨',
  names: ['man_artist'],
  tags: ['painter'],
  description: 'man artist',
  category: 'People & Body'
}, {
  emoji: '👩‍🎨',
  names: ['woman_artist'],
  tags: ['painter'],
  description: 'woman artist',
  category: 'People & Body'
}, {
  emoji: '🧑‍✈️',
  names: ['pilot'],
  tags: [],
  description: 'pilot',
  category: 'People & Body'
}, {
  emoji: '👨‍✈️',
  names: ['man_pilot'],
  tags: [],
  description: 'man pilot',
  category: 'People & Body'
}, {
  emoji: '👩‍✈️',
  names: ['woman_pilot'],
  tags: [],
  description: 'woman pilot',
  category: 'People & Body'
}, {
  emoji: '🧑‍🚀',
  names: ['astronaut'],
  tags: [],
  description: 'astronaut',
  category: 'People & Body'
}, {
  emoji: '👨‍🚀',
  names: ['man_astronaut'],
  tags: ['space'],
  description: 'man astronaut',
  category: 'People & Body'
}, {
  emoji: '👩‍🚀',
  names: ['woman_astronaut'],
  tags: ['space'],
  description: 'woman astronaut',
  category: 'People & Body'
}, {
  emoji: '🧑‍🚒',
  names: ['firefighter'],
  tags: [],
  description: 'firefighter',
  category: 'People & Body'
}, {
  emoji: '👨‍🚒',
  names: ['man_firefighter'],
  tags: [],
  description: 'man firefighter',
  category: 'People & Body'
}, {
  emoji: '👩‍🚒',
  names: ['woman_firefighter'],
  tags: [],
  description: 'woman firefighter',
  category: 'People & Body'
}, {
  emoji: '👮',
  names: ['police_officer', 'cop'],
  tags: ['law'],
  description: 'police officer',
  category: 'People & Body'
}, {
  emoji: '👮‍♂️',
  names: ['policeman'],
  tags: ['law', 'cop'],
  description: 'man police officer',
  category: 'People & Body'
}, {
  emoji: '👮‍♀️',
  names: ['policewoman'],
  tags: ['law', 'cop'],
  description: 'woman police officer',
  category: 'People & Body'
}, {
  emoji: '🕵️',
  names: ['detective'],
  tags: ['sleuth'],
  description: 'detective',
  category: 'People & Body'
}, {
  emoji: '🕵️‍♂️',
  names: ['male_detective'],
  tags: ['sleuth'],
  description: 'man detective',
  category: 'People & Body'
}, {
  emoji: '🕵️‍♀️',
  names: ['female_detective'],
  tags: ['sleuth'],
  description: 'woman detective',
  category: 'People & Body'
}, {
  emoji: '💂',
  names: ['guard'],
  tags: [],
  description: 'guard',
  category: 'People & Body'
}, {
  emoji: '💂‍♂️',
  names: ['guardsman'],
  tags: [],
  description: 'man guard',
  category: 'People & Body'
}, {
  emoji: '💂‍♀️',
  names: ['guardswoman'],
  tags: [],
  description: 'woman guard',
  category: 'People & Body'
}, {
  emoji: '🥷',
  names: ['ninja'],
  tags: [],
  description: 'ninja',
  category: 'People & Body'
}, {
  emoji: '👷',
  names: ['construction_worker'],
  tags: ['helmet'],
  description: 'construction worker',
  category: 'People & Body'
}, {
  emoji: '👷‍♂️',
  names: ['construction_worker_man'],
  tags: ['helmet'],
  description: 'man construction worker',
  category: 'People & Body'
}, {
  emoji: '👷‍♀️',
  names: ['construction_worker_woman'],
  tags: ['helmet'],
  description: 'woman construction worker',
  category: 'People & Body'
}, {
  emoji: '🤴',
  names: ['prince'],
  tags: ['crown', 'royal'],
  description: 'prince',
  category: 'People & Body'
}, {
  emoji: '👸',
  names: ['princess'],
  tags: ['crown', 'royal'],
  description: 'princess',
  category: 'People & Body'
}, {
  emoji: '👳',
  names: ['person_with_turban'],
  tags: [],
  description: 'person wearing turban',
  category: 'People & Body'
}, {
  emoji: '👳‍♂️',
  names: ['man_with_turban'],
  tags: [],
  description: 'man wearing turban',
  category: 'People & Body'
}, {
  emoji: '👳‍♀️',
  names: ['woman_with_turban'],
  tags: [],
  description: 'woman wearing turban',
  category: 'People & Body'
}, {
  emoji: '👲',
  names: ['man_with_gua_pi_mao'],
  tags: [],
  description: 'person with skullcap',
  category: 'People & Body'
}, {
  emoji: '🧕',
  names: ['woman_with_headscarf'],
  tags: ['hijab'],
  description: 'woman with headscarf',
  category: 'People & Body'
}, {
  emoji: '🤵',
  names: ['person_in_tuxedo'],
  tags: ['groom', 'marriage', 'wedding'],
  description: 'person in tuxedo',
  category: 'People & Body'
}, {
  emoji: '🤵‍♂️',
  names: ['man_in_tuxedo'],
  tags: [],
  description: 'man in tuxedo',
  category: 'People & Body'
}, {
  emoji: '🤵‍♀️',
  names: ['woman_in_tuxedo'],
  tags: [],
  description: 'woman in tuxedo',
  category: 'People & Body'
}, {
  emoji: '👰',
  names: ['person_with_veil'],
  tags: ['marriage', 'wedding'],
  description: 'person with veil',
  category: 'People & Body'
}, {
  emoji: '👰‍♂️',
  names: ['man_with_veil'],
  tags: [],
  description: 'man with veil',
  category: 'People & Body'
}, {
  emoji: '👰‍♀️',
  names: ['woman_with_veil', 'bride_with_veil'],
  tags: [],
  description: 'woman with veil',
  category: 'People & Body'
}, {
  emoji: '🤰',
  names: ['pregnant_woman'],
  tags: [],
  description: 'pregnant woman',
  category: 'People & Body'
}, {
  emoji: '🤱',
  names: ['breast_feeding'],
  tags: ['nursing'],
  description: 'breast-feeding',
  category: 'People & Body'
}, {
  emoji: '👩‍🍼',
  names: ['woman_feeding_baby'],
  tags: [],
  description: 'woman feeding baby',
  category: 'People & Body'
}, {
  emoji: '👨‍🍼',
  names: ['man_feeding_baby'],
  tags: [],
  description: 'man feeding baby',
  category: 'People & Body'
}, {
  emoji: '🧑‍🍼',
  names: ['person_feeding_baby'],
  tags: [],
  description: 'person feeding baby',
  category: 'People & Body'
}, {
  emoji: '👼',
  names: ['angel'],
  tags: [],
  description: 'baby angel',
  category: 'People & Body'
}, {
  emoji: '🎅',
  names: ['santa'],
  tags: ['christmas'],
  description: 'Santa Claus',
  category: 'People & Body'
}, {
  emoji: '🤶',
  names: ['mrs_claus'],
  tags: ['santa'],
  description: 'Mrs. Claus',
  category: 'People & Body'
}, {
  emoji: '🧑‍🎄',
  names: ['mx_claus'],
  tags: [],
  description: 'mx claus',
  category: 'People & Body'
}, {
  emoji: '🦸',
  names: ['superhero'],
  tags: [],
  description: 'superhero',
  category: 'People & Body'
}, {
  emoji: '🦸‍♂️',
  names: ['superhero_man'],
  tags: [],
  description: 'man superhero',
  category: 'People & Body'
}, {
  emoji: '🦸‍♀️',
  names: ['superhero_woman'],
  tags: [],
  description: 'woman superhero',
  category: 'People & Body'
}, {
  emoji: '🦹',
  names: ['supervillain'],
  tags: [],
  description: 'supervillain',
  category: 'People & Body'
}, {
  emoji: '🦹‍♂️',
  names: ['supervillain_man'],
  tags: [],
  description: 'man supervillain',
  category: 'People & Body'
}, {
  emoji: '🦹‍♀️',
  names: ['supervillain_woman'],
  tags: [],
  description: 'woman supervillain',
  category: 'People & Body'
}, {
  emoji: '🧙',
  names: ['mage'],
  tags: ['wizard'],
  description: 'mage',
  category: 'People & Body'
}, {
  emoji: '🧙‍♂️',
  names: ['mage_man'],
  tags: ['wizard'],
  description: 'man mage',
  category: 'People & Body'
}, {
  emoji: '🧙‍♀️',
  names: ['mage_woman'],
  tags: ['wizard'],
  description: 'woman mage',
  category: 'People & Body'
}, {
  emoji: '🧚',
  names: ['fairy'],
  tags: [],
  description: 'fairy',
  category: 'People & Body'
}, {
  emoji: '🧚‍♂️',
  names: ['fairy_man'],
  tags: [],
  description: 'man fairy',
  category: 'People & Body'
}, {
  emoji: '🧚‍♀️',
  names: ['fairy_woman'],
  tags: [],
  description: 'woman fairy',
  category: 'People & Body'
}, {
  emoji: '🧛',
  names: ['vampire'],
  tags: [],
  description: 'vampire',
  category: 'People & Body'
}, {
  emoji: '🧛‍♂️',
  names: ['vampire_man'],
  tags: [],
  description: 'man vampire',
  category: 'People & Body'
}, {
  emoji: '🧛‍♀️',
  names: ['vampire_woman'],
  tags: [],
  description: 'woman vampire',
  category: 'People & Body'
}, {
  emoji: '🧜',
  names: ['merperson'],
  tags: [],
  description: 'merperson',
  category: 'People & Body'
}, {
  emoji: '🧜‍♂️',
  names: ['merman'],
  tags: [],
  description: 'merman',
  category: 'People & Body'
}, {
  emoji: '🧜‍♀️',
  names: ['mermaid'],
  tags: [],
  description: 'mermaid',
  category: 'People & Body'
}, {
  emoji: '🧝',
  names: ['elf'],
  tags: [],
  description: 'elf',
  category: 'People & Body'
}, {
  emoji: '🧝‍♂️',
  names: ['elf_man'],
  tags: [],
  description: 'man elf',
  category: 'People & Body'
}, {
  emoji: '🧝‍♀️',
  names: ['elf_woman'],
  tags: [],
  description: 'woman elf',
  category: 'People & Body'
}, {
  emoji: '🧞',
  names: ['genie'],
  tags: [],
  description: 'genie',
  category: 'People & Body'
}, {
  emoji: '🧞‍♂️',
  names: ['genie_man'],
  tags: [],
  description: 'man genie',
  category: 'People & Body'
}, {
  emoji: '🧞‍♀️',
  names: ['genie_woman'],
  tags: [],
  description: 'woman genie',
  category: 'People & Body'
}, {
  emoji: '🧟',
  names: ['zombie'],
  tags: [],
  description: 'zombie',
  category: 'People & Body'
}, {
  emoji: '🧟‍♂️',
  names: ['zombie_man'],
  tags: [],
  description: 'man zombie',
  category: 'People & Body'
}, {
  emoji: '🧟‍♀️',
  names: ['zombie_woman'],
  tags: [],
  description: 'woman zombie',
  category: 'People & Body'
}, {
  emoji: '💆',
  names: ['massage'],
  tags: ['spa'],
  description: 'person getting massage',
  category: 'People & Body'
}, {
  emoji: '💆‍♂️',
  names: ['massage_man'],
  tags: ['spa'],
  description: 'man getting massage',
  category: 'People & Body'
}, {
  emoji: '💆‍♀️',
  names: ['massage_woman'],
  tags: ['spa'],
  description: 'woman getting massage',
  category: 'People & Body'
}, {
  emoji: '💇',
  names: ['haircut'],
  tags: ['beauty'],
  description: 'person getting haircut',
  category: 'People & Body'
}, {
  emoji: '💇‍♂️',
  names: ['haircut_man'],
  tags: [],
  description: 'man getting haircut',
  category: 'People & Body'
}, {
  emoji: '💇‍♀️',
  names: ['haircut_woman'],
  tags: [],
  description: 'woman getting haircut',
  category: 'People & Body'
}, {
  emoji: '🚶',
  names: ['walking'],
  tags: [],
  description: 'person walking',
  category: 'People & Body'
}, {
  emoji: '🚶‍♂️',
  names: ['walking_man'],
  tags: [],
  description: 'man walking',
  category: 'People & Body'
}, {
  emoji: '🚶‍♀️',
  names: ['walking_woman'],
  tags: [],
  description: 'woman walking',
  category: 'People & Body'
}, {
  emoji: '🧍',
  names: ['standing_person'],
  tags: [],
  description: 'person standing',
  category: 'People & Body'
}, {
  emoji: '🧍‍♂️',
  names: ['standing_man'],
  tags: [],
  description: 'man standing',
  category: 'People & Body'
}, {
  emoji: '🧍‍♀️',
  names: ['standing_woman'],
  tags: [],
  description: 'woman standing',
  category: 'People & Body'
}, {
  emoji: '🧎',
  names: ['kneeling_person'],
  tags: [],
  description: 'person kneeling',
  category: 'People & Body'
}, {
  emoji: '🧎‍♂️',
  names: ['kneeling_man'],
  tags: [],
  description: 'man kneeling',
  category: 'People & Body'
}, {
  emoji: '🧎‍♀️',
  names: ['kneeling_woman'],
  tags: [],
  description: 'woman kneeling',
  category: 'People & Body'
}, {
  emoji: '🧑‍🦯',
  names: ['person_with_probing_cane'],
  tags: [],
  description: 'person with white cane',
  category: 'People & Body'
}, {
  emoji: '👨‍🦯',
  names: ['man_with_probing_cane'],
  tags: [],
  description: 'man with white cane',
  category: 'People & Body'
}, {
  emoji: '👩‍🦯',
  names: ['woman_with_probing_cane'],
  tags: [],
  description: 'woman with white cane',
  category: 'People & Body'
}, {
  emoji: '🧑‍🦼',
  names: ['person_in_motorized_wheelchair'],
  tags: [],
  description: 'person in motorized wheelchair',
  category: 'People & Body'
}, {
  emoji: '👨‍🦼',
  names: ['man_in_motorized_wheelchair'],
  tags: [],
  description: 'man in motorized wheelchair',
  category: 'People & Body'
}, {
  emoji: '👩‍🦼',
  names: ['woman_in_motorized_wheelchair'],
  tags: [],
  description: 'woman in motorized wheelchair',
  category: 'People & Body'
}, {
  emoji: '🧑‍🦽',
  names: ['person_in_manual_wheelchair'],
  tags: [],
  description: 'person in manual wheelchair',
  category: 'People & Body'
}, {
  emoji: '👨‍🦽',
  names: ['man_in_manual_wheelchair'],
  tags: [],
  description: 'man in manual wheelchair',
  category: 'People & Body'
}, {
  emoji: '👩‍🦽',
  names: ['woman_in_manual_wheelchair'],
  tags: [],
  description: 'woman in manual wheelchair',
  category: 'People & Body'
}, {
  emoji: '🏃',
  names: ['runner', 'running'],
  tags: ['exercise', 'workout', 'marathon'],
  description: 'person running',
  category: 'People & Body'
}, {
  emoji: '🏃‍♂️',
  names: ['running_man'],
  tags: ['exercise', 'workout', 'marathon'],
  description: 'man running',
  category: 'People & Body'
}, {
  emoji: '🏃‍♀️',
  names: ['running_woman'],
  tags: ['exercise', 'workout', 'marathon'],
  description: 'woman running',
  category: 'People & Body'
}, {
  emoji: '💃',
  names: ['woman_dancing', 'dancer'],
  tags: ['dress'],
  description: 'woman dancing',
  category: 'People & Body'
}, {
  emoji: '🕺',
  names: ['man_dancing'],
  tags: ['dancer'],
  description: 'man dancing',
  category: 'People & Body'
}, {
  emoji: '🕴️',
  names: ['business_suit_levitating'],
  tags: [],
  description: 'person in suit levitating',
  category: 'People & Body'
}, {
  emoji: '👯',
  names: ['dancers'],
  tags: ['bunny'],
  description: 'people with bunny ears',
  category: 'People & Body'
}, {
  emoji: '👯‍♂️',
  names: ['dancing_men'],
  tags: ['bunny'],
  description: 'men with bunny ears',
  category: 'People & Body'
}, {
  emoji: '👯‍♀️',
  names: ['dancing_women'],
  tags: ['bunny'],
  description: 'women with bunny ears',
  category: 'People & Body'
}, {
  emoji: '🧖',
  names: ['sauna_person'],
  tags: ['steamy'],
  description: 'person in steamy room',
  category: 'People & Body'
}, {
  emoji: '🧖‍♂️',
  names: ['sauna_man'],
  tags: ['steamy'],
  description: 'man in steamy room',
  category: 'People & Body'
}, {
  emoji: '🧖‍♀️',
  names: ['sauna_woman'],
  tags: ['steamy'],
  description: 'woman in steamy room',
  category: 'People & Body'
}, {
  emoji: '🧗',
  names: ['climbing'],
  tags: ['bouldering'],
  description: 'person climbing',
  category: 'People & Body'
}, {
  emoji: '🧗‍♂️',
  names: ['climbing_man'],
  tags: ['bouldering'],
  description: 'man climbing',
  category: 'People & Body'
}, {
  emoji: '🧗‍♀️',
  names: ['climbing_woman'],
  tags: ['bouldering'],
  description: 'woman climbing',
  category: 'People & Body'
}, {
  emoji: '🤺',
  names: ['person_fencing'],
  tags: [],
  description: 'person fencing',
  category: 'People & Body'
}, {
  emoji: '🏇',
  names: ['horse_racing'],
  tags: [],
  description: 'horse racing',
  category: 'People & Body'
}, {
  emoji: '⛷️',
  names: ['skier'],
  tags: [],
  description: 'skier',
  category: 'People & Body'
}, {
  emoji: '🏂',
  names: ['snowboarder'],
  tags: [],
  description: 'snowboarder',
  category: 'People & Body'
}, {
  emoji: '🏌️',
  names: ['golfing'],
  tags: [],
  description: 'person golfing',
  category: 'People & Body'
}, {
  emoji: '🏌️‍♂️',
  names: ['golfing_man'],
  tags: [],
  description: 'man golfing',
  category: 'People & Body'
}, {
  emoji: '🏌️‍♀️',
  names: ['golfing_woman'],
  tags: [],
  description: 'woman golfing',
  category: 'People & Body'
}, {
  emoji: '🏄',
  names: ['surfer'],
  tags: [],
  description: 'person surfing',
  category: 'People & Body'
}, {
  emoji: '🏄‍♂️',
  names: ['surfing_man'],
  tags: [],
  description: 'man surfing',
  category: 'People & Body'
}, {
  emoji: '🏄‍♀️',
  names: ['surfing_woman'],
  tags: [],
  description: 'woman surfing',
  category: 'People & Body'
}, {
  emoji: '🚣',
  names: ['rowboat'],
  tags: [],
  description: 'person rowing boat',
  category: 'People & Body'
}, {
  emoji: '🚣‍♂️',
  names: ['rowing_man'],
  tags: [],
  description: 'man rowing boat',
  category: 'People & Body'
}, {
  emoji: '🚣‍♀️',
  names: ['rowing_woman'],
  tags: [],
  description: 'woman rowing boat',
  category: 'People & Body'
}, {
  emoji: '🏊',
  names: ['swimmer'],
  tags: [],
  description: 'person swimming',
  category: 'People & Body'
}, {
  emoji: '🏊‍♂️',
  names: ['swimming_man'],
  tags: [],
  description: 'man swimming',
  category: 'People & Body'
}, {
  emoji: '🏊‍♀️',
  names: ['swimming_woman'],
  tags: [],
  description: 'woman swimming',
  category: 'People & Body'
}, {
  emoji: '⛹️',
  names: ['bouncing_ball_person'],
  tags: ['basketball'],
  description: 'person bouncing ball',
  category: 'People & Body'
}, {
  emoji: '⛹️‍♂️',
  names: ['bouncing_ball_man', 'basketball_man'],
  tags: [],
  description: 'man bouncing ball',
  category: 'People & Body'
}, {
  emoji: '⛹️‍♀️',
  names: ['bouncing_ball_woman', 'basketball_woman'],
  tags: [],
  description: 'woman bouncing ball',
  category: 'People & Body'
}, {
  emoji: '🏋️',
  names: ['weight_lifting'],
  tags: ['gym', 'workout'],
  description: 'person lifting weights',
  category: 'People & Body'
}, {
  emoji: '🏋️‍♂️',
  names: ['weight_lifting_man'],
  tags: ['gym', 'workout'],
  description: 'man lifting weights',
  category: 'People & Body'
}, {
  emoji: '🏋️‍♀️',
  names: ['weight_lifting_woman'],
  tags: ['gym', 'workout'],
  description: 'woman lifting weights',
  category: 'People & Body'
}, {
  emoji: '🚴',
  names: ['bicyclist'],
  tags: [],
  description: 'person biking',
  category: 'People & Body'
}, {
  emoji: '🚴‍♂️',
  names: ['biking_man'],
  tags: [],
  description: 'man biking',
  category: 'People & Body'
}, {
  emoji: '🚴‍♀️',
  names: ['biking_woman'],
  tags: [],
  description: 'woman biking',
  category: 'People & Body'
}, {
  emoji: '🚵',
  names: ['mountain_bicyclist'],
  tags: [],
  description: 'person mountain biking',
  category: 'People & Body'
}, {
  emoji: '🚵‍♂️',
  names: ['mountain_biking_man'],
  tags: [],
  description: 'man mountain biking',
  category: 'People & Body'
}, {
  emoji: '🚵‍♀️',
  names: ['mountain_biking_woman'],
  tags: [],
  description: 'woman mountain biking',
  category: 'People & Body'
}, {
  emoji: '🤸',
  names: ['cartwheeling'],
  tags: [],
  description: 'person cartwheeling',
  category: 'People & Body'
}, {
  emoji: '🤸‍♂️',
  names: ['man_cartwheeling'],
  tags: [],
  description: 'man cartwheeling',
  category: 'People & Body'
}, {
  emoji: '🤸‍♀️',
  names: ['woman_cartwheeling'],
  tags: [],
  description: 'woman cartwheeling',
  category: 'People & Body'
}, {
  emoji: '🤼',
  names: ['wrestling'],
  tags: [],
  description: 'people wrestling',
  category: 'People & Body'
}, {
  emoji: '🤼‍♂️',
  names: ['men_wrestling'],
  tags: [],
  description: 'men wrestling',
  category: 'People & Body'
}, {
  emoji: '🤼‍♀️',
  names: ['women_wrestling'],
  tags: [],
  description: 'women wrestling',
  category: 'People & Body'
}, {
  emoji: '🤽',
  names: ['water_polo'],
  tags: [],
  description: 'person playing water polo',
  category: 'People & Body'
}, {
  emoji: '🤽‍♂️',
  names: ['man_playing_water_polo'],
  tags: [],
  description: 'man playing water polo',
  category: 'People & Body'
}, {
  emoji: '🤽‍♀️',
  names: ['woman_playing_water_polo'],
  tags: [],
  description: 'woman playing water polo',
  category: 'People & Body'
}, {
  emoji: '🤾',
  names: ['handball_person'],
  tags: [],
  description: 'person playing handball',
  category: 'People & Body'
}, {
  emoji: '🤾‍♂️',
  names: ['man_playing_handball'],
  tags: [],
  description: 'man playing handball',
  category: 'People & Body'
}, {
  emoji: '🤾‍♀️',
  names: ['woman_playing_handball'],
  tags: [],
  description: 'woman playing handball',
  category: 'People & Body'
}, {
  emoji: '🤹',
  names: ['juggling_person'],
  tags: [],
  description: 'person juggling',
  category: 'People & Body'
}, {
  emoji: '🤹‍♂️',
  names: ['man_juggling'],
  tags: [],
  description: 'man juggling',
  category: 'People & Body'
}, {
  emoji: '🤹‍♀️',
  names: ['woman_juggling'],
  tags: [],
  description: 'woman juggling',
  category: 'People & Body'
}, {
  emoji: '🧘',
  names: ['lotus_position'],
  tags: ['meditation'],
  description: 'person in lotus position',
  category: 'People & Body'
}, {
  emoji: '🧘‍♂️',
  names: ['lotus_position_man'],
  tags: ['meditation'],
  description: 'man in lotus position',
  category: 'People & Body'
}, {
  emoji: '🧘‍♀️',
  names: ['lotus_position_woman'],
  tags: ['meditation'],
  description: 'woman in lotus position',
  category: 'People & Body'
}, {
  emoji: '🛀',
  names: ['bath'],
  tags: ['shower'],
  description: 'person taking bath',
  category: 'People & Body'
}, {
  emoji: '🛌',
  names: ['sleeping_bed'],
  tags: [],
  description: 'person in bed',
  category: 'People & Body'
}, {
  emoji: '🧑‍🤝‍🧑',
  names: ['people_holding_hands'],
  tags: ['couple', 'date'],
  description: 'people holding hands',
  category: 'People & Body'
}, {
  emoji: '👭',
  names: ['two_women_holding_hands'],
  tags: ['couple', 'date'],
  description: 'women holding hands',
  category: 'People & Body'
}, {
  emoji: '👫',
  names: ['couple'],
  tags: ['date'],
  description: 'woman and man holding hands',
  category: 'People & Body'
}, {
  emoji: '👬',
  names: ['two_men_holding_hands'],
  tags: ['couple', 'date'],
  description: 'men holding hands',
  category: 'People & Body'
}, {
  emoji: '💏',
  names: ['couplekiss'],
  tags: [],
  description: 'kiss',
  category: 'People & Body'
}, {
  emoji: '👩‍❤️‍💋‍👨',
  names: ['couplekiss_man_woman'],
  tags: [],
  description: 'kiss: woman, man',
  category: 'People & Body'
}, {
  emoji: '👨‍❤️‍💋‍👨',
  names: ['couplekiss_man_man'],
  tags: [],
  description: 'kiss: man, man',
  category: 'People & Body'
}, {
  emoji: '👩‍❤️‍💋‍👩',
  names: ['couplekiss_woman_woman'],
  tags: [],
  description: 'kiss: woman, woman',
  category: 'People & Body'
}, {
  emoji: '💑',
  names: ['couple_with_heart'],
  tags: [],
  description: 'couple with heart',
  category: 'People & Body'
}, {
  emoji: '👩‍❤️‍👨',
  names: ['couple_with_heart_woman_man'],
  tags: [],
  description: 'couple with heart: woman, man',
  category: 'People & Body'
}, {
  emoji: '👨‍❤️‍👨',
  names: ['couple_with_heart_man_man'],
  tags: [],
  description: 'couple with heart: man, man',
  category: 'People & Body'
}, {
  emoji: '👩‍❤️‍👩',
  names: ['couple_with_heart_woman_woman'],
  tags: [],
  description: 'couple with heart: woman, woman',
  category: 'People & Body'
}, {
  emoji: '👪',
  names: ['family'],
  tags: ['home', 'parents', 'child'],
  description: 'family',
  category: 'People & Body'
}, {
  emoji: '👨‍👩‍👦',
  names: ['family_man_woman_boy'],
  tags: [],
  description: 'family: man, woman, boy',
  category: 'People & Body'
}, {
  emoji: '👨‍👩‍👧',
  names: ['family_man_woman_girl'],
  tags: [],
  description: 'family: man, woman, girl',
  category: 'People & Body'
}, {
  emoji: '👨‍👩‍👧‍👦',
  names: ['family_man_woman_girl_boy'],
  tags: [],
  description: 'family: man, woman, girl, boy',
  category: 'People & Body'
}, {
  emoji: '👨‍👩‍👦‍👦',
  names: ['family_man_woman_boy_boy'],
  tags: [],
  description: 'family: man, woman, boy, boy',
  category: 'People & Body'
}, {
  emoji: '👨‍👩‍👧‍👧',
  names: ['family_man_woman_girl_girl'],
  tags: [],
  description: 'family: man, woman, girl, girl',
  category: 'People & Body'
}, {
  emoji: '👨‍👨‍👦',
  names: ['family_man_man_boy'],
  tags: [],
  description: 'family: man, man, boy',
  category: 'People & Body'
}, {
  emoji: '👨‍👨‍👧',
  names: ['family_man_man_girl'],
  tags: [],
  description: 'family: man, man, girl',
  category: 'People & Body'
}, {
  emoji: '👨‍👨‍👧‍👦',
  names: ['family_man_man_girl_boy'],
  tags: [],
  description: 'family: man, man, girl, boy',
  category: 'People & Body'
}, {
  emoji: '👨‍👨‍👦‍👦',
  names: ['family_man_man_boy_boy'],
  tags: [],
  description: 'family: man, man, boy, boy',
  category: 'People & Body'
}, {
  emoji: '👨‍👨‍👧‍👧',
  names: ['family_man_man_girl_girl'],
  tags: [],
  description: 'family: man, man, girl, girl',
  category: 'People & Body'
}, {
  emoji: '👩‍👩‍👦',
  names: ['family_woman_woman_boy'],
  tags: [],
  description: 'family: woman, woman, boy',
  category: 'People & Body'
}, {
  emoji: '👩‍👩‍👧',
  names: ['family_woman_woman_girl'],
  tags: [],
  description: 'family: woman, woman, girl',
  category: 'People & Body'
}, {
  emoji: '👩‍👩‍👧‍👦',
  names: ['family_woman_woman_girl_boy'],
  tags: [],
  description: 'family: woman, woman, girl, boy',
  category: 'People & Body'
}, {
  emoji: '👩‍👩‍👦‍👦',
  names: ['family_woman_woman_boy_boy'],
  tags: [],
  description: 'family: woman, woman, boy, boy',
  category: 'People & Body'
}, {
  emoji: '👩‍👩‍👧‍👧',
  names: ['family_woman_woman_girl_girl'],
  tags: [],
  description: 'family: woman, woman, girl, girl',
  category: 'People & Body'
}, {
  emoji: '👨‍👦',
  names: ['family_man_boy'],
  tags: [],
  description: 'family: man, boy',
  category: 'People & Body'
}, {
  emoji: '👨‍👦‍👦',
  names: ['family_man_boy_boy'],
  tags: [],
  description: 'family: man, boy, boy',
  category: 'People & Body'
}, {
  emoji: '👨‍👧',
  names: ['family_man_girl'],
  tags: [],
  description: 'family: man, girl',
  category: 'People & Body'
}, {
  emoji: '👨‍👧‍👦',
  names: ['family_man_girl_boy'],
  tags: [],
  description: 'family: man, girl, boy',
  category: 'People & Body'
}, {
  emoji: '👨‍👧‍👧',
  names: ['family_man_girl_girl'],
  tags: [],
  description: 'family: man, girl, girl',
  category: 'People & Body'
}, {
  emoji: '👩‍👦',
  names: ['family_woman_boy'],
  tags: [],
  description: 'family: woman, boy',
  category: 'People & Body'
}, {
  emoji: '👩‍👦‍👦',
  names: ['family_woman_boy_boy'],
  tags: [],
  description: 'family: woman, boy, boy',
  category: 'People & Body'
}, {
  emoji: '👩‍👧',
  names: ['family_woman_girl'],
  tags: [],
  description: 'family: woman, girl',
  category: 'People & Body'
}, {
  emoji: '👩‍👧‍👦',
  names: ['family_woman_girl_boy'],
  tags: [],
  description: 'family: woman, girl, boy',
  category: 'People & Body'
}, {
  emoji: '👩‍👧‍👧',
  names: ['family_woman_girl_girl'],
  tags: [],
  description: 'family: woman, girl, girl',
  category: 'People & Body'
}, {
  emoji: '🗣️',
  names: ['speaking_head'],
  tags: [],
  description: 'speaking head',
  category: 'People & Body'
}, {
  emoji: '👤',
  names: ['bust_in_silhouette'],
  tags: ['user'],
  description: 'bust in silhouette',
  category: 'People & Body'
}, {
  emoji: '👥',
  names: ['busts_in_silhouette'],
  tags: ['users', 'group', 'team'],
  description: 'busts in silhouette',
  category: 'People & Body'
}, {
  emoji: '🫂',
  names: ['people_hugging'],
  tags: [],
  description: 'people hugging',
  category: 'People & Body'
}, {
  emoji: '👣',
  names: ['footprints'],
  tags: ['feet', 'tracks'],
  description: 'footprints',
  category: 'People & Body'
}, {
  emoji: '🐵',
  names: ['monkey_face'],
  tags: [],
  description: 'monkey face',
  category: 'Animals & Nature'
}, {
  emoji: '🐒',
  names: ['monkey'],
  tags: [],
  description: 'monkey',
  category: 'Animals & Nature'
}, {
  emoji: '🦍',
  names: ['gorilla'],
  tags: [],
  description: 'gorilla',
  category: 'Animals & Nature'
}, {
  emoji: '🦧',
  names: ['orangutan'],
  tags: [],
  description: 'orangutan',
  category: 'Animals & Nature'
}, {
  emoji: '🐶',
  names: ['dog'],
  tags: ['pet'],
  description: 'dog face',
  category: 'Animals & Nature'
}, {
  emoji: '🐕',
  names: ['dog2'],
  tags: [],
  description: 'dog',
  category: 'Animals & Nature'
}, {
  emoji: '🦮',
  names: ['guide_dog'],
  tags: [],
  description: 'guide dog',
  category: 'Animals & Nature'
}, {
  emoji: '🐕‍🦺',
  names: ['service_dog'],
  tags: [],
  description: 'service dog',
  category: 'Animals & Nature'
}, {
  emoji: '🐩',
  names: ['poodle'],
  tags: ['dog'],
  description: 'poodle',
  category: 'Animals & Nature'
}, {
  emoji: '🐺',
  names: ['wolf'],
  tags: [],
  description: 'wolf',
  category: 'Animals & Nature'
}, {
  emoji: '🦊',
  names: ['fox_face'],
  tags: [],
  description: 'fox',
  category: 'Animals & Nature'
}, {
  emoji: '🦝',
  names: ['raccoon'],
  tags: [],
  description: 'raccoon',
  category: 'Animals & Nature'
}, {
  emoji: '🐱',
  names: ['cat'],
  tags: ['pet'],
  description: 'cat face',
  category: 'Animals & Nature'
}, {
  emoji: '🐈',
  names: ['cat2'],
  tags: [],
  description: 'cat',
  category: 'Animals & Nature'
}, {
  emoji: '🐈‍⬛',
  names: ['black_cat'],
  tags: [],
  description: 'black cat',
  category: 'Animals & Nature'
}, {
  emoji: '🦁',
  names: ['lion'],
  tags: [],
  description: 'lion',
  category: 'Animals & Nature'
}, {
  emoji: '🐯',
  names: ['tiger'],
  tags: [],
  description: 'tiger face',
  category: 'Animals & Nature'
}, {
  emoji: '🐅',
  names: ['tiger2'],
  tags: [],
  description: 'tiger',
  category: 'Animals & Nature'
}, {
  emoji: '🐆',
  names: ['leopard'],
  tags: [],
  description: 'leopard',
  category: 'Animals & Nature'
}, {
  emoji: '🐴',
  names: ['horse'],
  tags: [],
  description: 'horse face',
  category: 'Animals & Nature'
}, {
  emoji: '🐎',
  names: ['racehorse'],
  tags: ['speed'],
  description: 'horse',
  category: 'Animals & Nature'
}, {
  emoji: '🦄',
  names: ['unicorn'],
  tags: [],
  description: 'unicorn',
  category: 'Animals & Nature'
}, {
  emoji: '🦓',
  names: ['zebra'],
  tags: [],
  description: 'zebra',
  category: 'Animals & Nature'
}, {
  emoji: '🦌',
  names: ['deer'],
  tags: [],
  description: 'deer',
  category: 'Animals & Nature'
}, {
  emoji: '🦬',
  names: ['bison'],
  tags: [],
  description: 'bison',
  category: 'Animals & Nature'
}, {
  emoji: '🐮',
  names: ['cow'],
  tags: [],
  description: 'cow face',
  category: 'Animals & Nature'
}, {
  emoji: '🐂',
  names: ['ox'],
  tags: [],
  description: 'ox',
  category: 'Animals & Nature'
}, {
  emoji: '🐃',
  names: ['water_buffalo'],
  tags: [],
  description: 'water buffalo',
  category: 'Animals & Nature'
}, {
  emoji: '🐄',
  names: ['cow2'],
  tags: [],
  description: 'cow',
  category: 'Animals & Nature'
}, {
  emoji: '🐷',
  names: ['pig'],
  tags: [],
  description: 'pig face',
  category: 'Animals & Nature'
}, {
  emoji: '🐖',
  names: ['pig2'],
  tags: [],
  description: 'pig',
  category: 'Animals & Nature'
}, {
  emoji: '🐗',
  names: ['boar'],
  tags: [],
  description: 'boar',
  category: 'Animals & Nature'
}, {
  emoji: '🐽',
  names: ['pig_nose'],
  tags: [],
  description: 'pig nose',
  category: 'Animals & Nature'
}, {
  emoji: '🐏',
  names: ['ram'],
  tags: [],
  description: 'ram',
  category: 'Animals & Nature'
}, {
  emoji: '🐑',
  names: ['sheep'],
  tags: [],
  description: 'ewe',
  category: 'Animals & Nature'
}, {
  emoji: '🐐',
  names: ['goat'],
  tags: [],
  description: 'goat',
  category: 'Animals & Nature'
}, {
  emoji: '🐪',
  names: ['dromedary_camel'],
  tags: ['desert'],
  description: 'camel',
  category: 'Animals & Nature'
}, {
  emoji: '🐫',
  names: ['camel'],
  tags: [],
  description: 'two-hump camel',
  category: 'Animals & Nature'
}, {
  emoji: '🦙',
  names: ['llama'],
  tags: [],
  description: 'llama',
  category: 'Animals & Nature'
}, {
  emoji: '🦒',
  names: ['giraffe'],
  tags: [],
  description: 'giraffe',
  category: 'Animals & Nature'
}, {
  emoji: '🐘',
  names: ['elephant'],
  tags: [],
  description: 'elephant',
  category: 'Animals & Nature'
}, {
  emoji: '🦣',
  names: ['mammoth'],
  tags: [],
  description: 'mammoth',
  category: 'Animals & Nature'
}, {
  emoji: '🦏',
  names: ['rhinoceros'],
  tags: [],
  description: 'rhinoceros',
  category: 'Animals & Nature'
}, {
  emoji: '🦛',
  names: ['hippopotamus'],
  tags: [],
  description: 'hippopotamus',
  category: 'Animals & Nature'
}, {
  emoji: '🐭',
  names: ['mouse'],
  tags: [],
  description: 'mouse face',
  category: 'Animals & Nature'
}, {
  emoji: '🐁',
  names: ['mouse2'],
  tags: [],
  description: 'mouse',
  category: 'Animals & Nature'
}, {
  emoji: '🐀',
  names: ['rat'],
  tags: [],
  description: 'rat',
  category: 'Animals & Nature'
}, {
  emoji: '🐹',
  names: ['hamster'],
  tags: ['pet'],
  description: 'hamster',
  category: 'Animals & Nature'
}, {
  emoji: '🐰',
  names: ['rabbit'],
  tags: ['bunny'],
  description: 'rabbit face',
  category: 'Animals & Nature'
}, {
  emoji: '🐇',
  names: ['rabbit2'],
  tags: [],
  description: 'rabbit',
  category: 'Animals & Nature'
}, {
  emoji: '🐿️',
  names: ['chipmunk'],
  tags: [],
  description: 'chipmunk',
  category: 'Animals & Nature'
}, {
  emoji: '🦫',
  names: ['beaver'],
  tags: [],
  description: 'beaver',
  category: 'Animals & Nature'
}, {
  emoji: '🦔',
  names: ['hedgehog'],
  tags: [],
  description: 'hedgehog',
  category: 'Animals & Nature'
}, {
  emoji: '🦇',
  names: ['bat'],
  tags: [],
  description: 'bat',
  category: 'Animals & Nature'
}, {
  emoji: '🐻',
  names: ['bear'],
  tags: [],
  description: 'bear',
  category: 'Animals & Nature'
}, {
  emoji: '🐻‍❄️',
  names: ['polar_bear'],
  tags: [],
  description: 'polar bear',
  category: 'Animals & Nature'
}, {
  emoji: '🐨',
  names: ['koala'],
  tags: [],
  description: 'koala',
  category: 'Animals & Nature'
}, {
  emoji: '🐼',
  names: ['panda_face'],
  tags: [],
  description: 'panda',
  category: 'Animals & Nature'
}, {
  emoji: '🦥',
  names: ['sloth'],
  tags: [],
  description: 'sloth',
  category: 'Animals & Nature'
}, {
  emoji: '🦦',
  names: ['otter'],
  tags: [],
  description: 'otter',
  category: 'Animals & Nature'
}, {
  emoji: '🦨',
  names: ['skunk'],
  tags: [],
  description: 'skunk',
  category: 'Animals & Nature'
}, {
  emoji: '🦘',
  names: ['kangaroo'],
  tags: [],
  description: 'kangaroo',
  category: 'Animals & Nature'
}, {
  emoji: '🦡',
  names: ['badger'],
  tags: [],
  description: 'badger',
  category: 'Animals & Nature'
}, {
  emoji: '🐾',
  names: ['feet', 'paw_prints'],
  tags: [],
  description: 'paw prints',
  category: 'Animals & Nature'
}, {
  emoji: '🦃',
  names: ['turkey'],
  tags: ['thanksgiving'],
  description: 'turkey',
  category: 'Animals & Nature'
}, {
  emoji: '🐔',
  names: ['chicken'],
  tags: [],
  description: 'chicken',
  category: 'Animals & Nature'
}, {
  emoji: '🐓',
  names: ['rooster'],
  tags: [],
  description: 'rooster',
  category: 'Animals & Nature'
}, {
  emoji: '🐣',
  names: ['hatching_chick'],
  tags: [],
  description: 'hatching chick',
  category: 'Animals & Nature'
}, {
  emoji: '🐤',
  names: ['baby_chick'],
  tags: [],
  description: 'baby chick',
  category: 'Animals & Nature'
}, {
  emoji: '🐥',
  names: ['hatched_chick'],
  tags: [],
  description: 'front-facing baby chick',
  category: 'Animals & Nature'
}, {
  emoji: '🐦',
  names: ['bird'],
  tags: [],
  description: 'bird',
  category: 'Animals & Nature'
}, {
  emoji: '🐧',
  names: ['penguin'],
  tags: [],
  description: 'penguin',
  category: 'Animals & Nature'
}, {
  emoji: '🕊️',
  names: ['dove'],
  tags: ['peace'],
  description: 'dove',
  category: 'Animals & Nature'
}, {
  emoji: '🦅',
  names: ['eagle'],
  tags: [],
  description: 'eagle',
  category: 'Animals & Nature'
}, {
  emoji: '🦆',
  names: ['duck'],
  tags: [],
  description: 'duck',
  category: 'Animals & Nature'
}, {
  emoji: '🦢',
  names: ['swan'],
  tags: [],
  description: 'swan',
  category: 'Animals & Nature'
}, {
  emoji: '🦉',
  names: ['owl'],
  tags: [],
  description: 'owl',
  category: 'Animals & Nature'
}, {
  emoji: '🦤',
  names: ['dodo'],
  tags: [],
  description: 'dodo',
  category: 'Animals & Nature'
}, {
  emoji: '🪶',
  names: ['feather'],
  tags: [],
  description: 'feather',
  category: 'Animals & Nature'
}, {
  emoji: '🦩',
  names: ['flamingo'],
  tags: [],
  description: 'flamingo',
  category: 'Animals & Nature'
}, {
  emoji: '🦚',
  names: ['peacock'],
  tags: [],
  description: 'peacock',
  category: 'Animals & Nature'
}, {
  emoji: '🦜',
  names: ['parrot'],
  tags: [],
  description: 'parrot',
  category: 'Animals & Nature'
}, {
  emoji: '🐸',
  names: ['frog'],
  tags: [],
  description: 'frog',
  category: 'Animals & Nature'
}, {
  emoji: '🐊',
  names: ['crocodile'],
  tags: [],
  description: 'crocodile',
  category: 'Animals & Nature'
}, {
  emoji: '🐢',
  names: ['turtle'],
  tags: ['slow'],
  description: 'turtle',
  category: 'Animals & Nature'
}, {
  emoji: '🦎',
  names: ['lizard'],
  tags: [],
  description: 'lizard',
  category: 'Animals & Nature'
}, {
  emoji: '🐍',
  names: ['snake'],
  tags: [],
  description: 'snake',
  category: 'Animals & Nature'
}, {
  emoji: '🐲',
  names: ['dragon_face'],
  tags: [],
  description: 'dragon face',
  category: 'Animals & Nature'
}, {
  emoji: '🐉',
  names: ['dragon'],
  tags: [],
  description: 'dragon',
  category: 'Animals & Nature'
}, {
  emoji: '🦕',
  names: ['sauropod'],
  tags: ['dinosaur'],
  description: 'sauropod',
  category: 'Animals & Nature'
}, {
  emoji: '🦖',
  names: ['t-rex'],
  tags: ['dinosaur'],
  description: 'T-Rex',
  category: 'Animals & Nature'
}, {
  emoji: '🐳',
  names: ['whale'],
  tags: ['sea'],
  description: 'spouting whale',
  category: 'Animals & Nature'
}, {
  emoji: '🐋',
  names: ['whale2'],
  tags: [],
  description: 'whale',
  category: 'Animals & Nature'
}, {
  emoji: '🐬',
  names: ['dolphin', 'flipper'],
  tags: [],
  description: 'dolphin',
  category: 'Animals & Nature'
}, {
  emoji: '🦭',
  names: ['seal'],
  tags: [],
  description: 'seal',
  category: 'Animals & Nature'
}, {
  emoji: '🐟',
  names: ['fish'],
  tags: [],
  description: 'fish',
  category: 'Animals & Nature'
}, {
  emoji: '🐠',
  names: ['tropical_fish'],
  tags: [],
  description: 'tropical fish',
  category: 'Animals & Nature'
}, {
  emoji: '🐡',
  names: ['blowfish'],
  tags: [],
  description: 'blowfish',
  category: 'Animals & Nature'
}, {
  emoji: '🦈',
  names: ['shark'],
  tags: [],
  description: 'shark',
  category: 'Animals & Nature'
}, {
  emoji: '🐙',
  names: ['octopus'],
  tags: [],
  description: 'octopus',
  category: 'Animals & Nature'
}, {
  emoji: '🐚',
  names: ['shell'],
  tags: ['sea', 'beach'],
  description: 'spiral shell',
  category: 'Animals & Nature'
}, {
  emoji: '🐌',
  names: ['snail'],
  tags: ['slow'],
  description: 'snail',
  category: 'Animals & Nature'
}, {
  emoji: '🦋',
  names: ['butterfly'],
  tags: [],
  description: 'butterfly',
  category: 'Animals & Nature'
}, {
  emoji: '🐛',
  names: ['bug'],
  tags: [],
  description: 'bug',
  category: 'Animals & Nature'
}, {
  emoji: '🐜',
  names: ['ant'],
  tags: [],
  description: 'ant',
  category: 'Animals & Nature'
}, {
  emoji: '🐝',
  names: ['bee', 'honeybee'],
  tags: [],
  description: 'honeybee',
  category: 'Animals & Nature'
}, {
  emoji: '🪲',
  names: ['beetle'],
  tags: [],
  description: 'beetle',
  category: 'Animals & Nature'
}, {
  emoji: '🐞',
  names: ['lady_beetle'],
  tags: ['bug'],
  description: 'lady beetle',
  category: 'Animals & Nature'
}, {
  emoji: '🦗',
  names: ['cricket'],
  tags: [],
  description: 'cricket',
  category: 'Animals & Nature'
}, {
  emoji: '🪳',
  names: ['cockroach'],
  tags: [],
  description: 'cockroach',
  category: 'Animals & Nature'
}, {
  emoji: '🕷️',
  names: ['spider'],
  tags: [],
  description: 'spider',
  category: 'Animals & Nature'
}, {
  emoji: '🕸️',
  names: ['spider_web'],
  tags: [],
  description: 'spider web',
  category: 'Animals & Nature'
}, {
  emoji: '🦂',
  names: ['scorpion'],
  tags: [],
  description: 'scorpion',
  category: 'Animals & Nature'
}, {
  emoji: '🦟',
  names: ['mosquito'],
  tags: [],
  description: 'mosquito',
  category: 'Animals & Nature'
}, {
  emoji: '🪰',
  names: ['fly'],
  tags: [],
  description: 'fly',
  category: 'Animals & Nature'
}, {
  emoji: '🪱',
  names: ['worm'],
  tags: [],
  description: 'worm',
  category: 'Animals & Nature'
}, {
  emoji: '🦠',
  names: ['microbe'],
  tags: ['germ'],
  description: 'microbe',
  category: 'Animals & Nature'
}, {
  emoji: '💐',
  names: ['bouquet'],
  tags: ['flowers'],
  description: 'bouquet',
  category: 'Animals & Nature'
}, {
  emoji: '🌸',
  names: ['cherry_blossom'],
  tags: ['flower', 'spring'],
  description: 'cherry blossom',
  category: 'Animals & Nature'
}, {
  emoji: '💮',
  names: ['white_flower'],
  tags: [],
  description: 'white flower',
  category: 'Animals & Nature'
}, {
  emoji: '🏵️',
  names: ['rosette'],
  tags: [],
  description: 'rosette',
  category: 'Animals & Nature'
}, {
  emoji: '🌹',
  names: ['rose'],
  tags: ['flower'],
  description: 'rose',
  category: 'Animals & Nature'
}, {
  emoji: '🥀',
  names: ['wilted_flower'],
  tags: [],
  description: 'wilted flower',
  category: 'Animals & Nature'
}, {
  emoji: '🌺',
  names: ['hibiscus'],
  tags: [],
  description: 'hibiscus',
  category: 'Animals & Nature'
}, {
  emoji: '🌻',
  names: ['sunflower'],
  tags: [],
  description: 'sunflower',
  category: 'Animals & Nature'
}, {
  emoji: '🌼',
  names: ['blossom'],
  tags: [],
  description: 'blossom',
  category: 'Animals & Nature'
}, {
  emoji: '🌷',
  names: ['tulip'],
  tags: ['flower'],
  description: 'tulip',
  category: 'Animals & Nature'
}, {
  emoji: '🌱',
  names: ['seedling'],
  tags: ['plant'],
  description: 'seedling',
  category: 'Animals & Nature'
}, {
  emoji: '🪴',
  names: ['potted_plant'],
  tags: [],
  description: 'potted plant',
  category: 'Animals & Nature'
}, {
  emoji: '🌲',
  names: ['evergreen_tree'],
  tags: ['wood'],
  description: 'evergreen tree',
  category: 'Animals & Nature'
}, {
  emoji: '🌳',
  names: ['deciduous_tree'],
  tags: ['wood'],
  description: 'deciduous tree',
  category: 'Animals & Nature'
}, {
  emoji: '🌴',
  names: ['palm_tree'],
  tags: [],
  description: 'palm tree',
  category: 'Animals & Nature'
}, {
  emoji: '🌵',
  names: ['cactus'],
  tags: [],
  description: 'cactus',
  category: 'Animals & Nature'
}, {
  emoji: '🌾',
  names: ['ear_of_rice'],
  tags: [],
  description: 'sheaf of rice',
  category: 'Animals & Nature'
}, {
  emoji: '🌿',
  names: ['herb'],
  tags: [],
  description: 'herb',
  category: 'Animals & Nature'
}, {
  emoji: '☘️',
  names: ['shamrock'],
  tags: [],
  description: 'shamrock',
  category: 'Animals & Nature'
}, {
  emoji: '🍀',
  names: ['four_leaf_clover'],
  tags: ['luck'],
  description: 'four leaf clover',
  category: 'Animals & Nature'
}, {
  emoji: '🍁',
  names: ['maple_leaf'],
  tags: ['canada'],
  description: 'maple leaf',
  category: 'Animals & Nature'
}, {
  emoji: '🍂',
  names: ['fallen_leaf'],
  tags: ['autumn'],
  description: 'fallen leaf',
  category: 'Animals & Nature'
}, {
  emoji: '🍃',
  names: ['leaves'],
  tags: ['leaf'],
  description: 'leaf fluttering in wind',
  category: 'Animals & Nature'
}, {
  emoji: '🍇',
  names: ['grapes'],
  tags: [],
  description: 'grapes',
  category: 'Food & Drink'
}, {
  emoji: '🍈',
  names: ['melon'],
  tags: [],
  description: 'melon',
  category: 'Food & Drink'
}, {
  emoji: '🍉',
  names: ['watermelon'],
  tags: [],
  description: 'watermelon',
  category: 'Food & Drink'
}, {
  emoji: '🍊',
  names: ['tangerine', 'orange', 'mandarin'],
  tags: [],
  description: 'tangerine',
  category: 'Food & Drink'
}, {
  emoji: '🍋',
  names: ['lemon'],
  tags: [],
  description: 'lemon',
  category: 'Food & Drink'
}, {
  emoji: '🍌',
  names: ['banana'],
  tags: ['fruit'],
  description: 'banana',
  category: 'Food & Drink'
}, {
  emoji: '🍍',
  names: ['pineapple'],
  tags: [],
  description: 'pineapple',
  category: 'Food & Drink'
}, {
  emoji: '🥭',
  names: ['mango'],
  tags: [],
  description: 'mango',
  category: 'Food & Drink'
}, {
  emoji: '🍎',
  names: ['apple'],
  tags: [],
  description: 'red apple',
  category: 'Food & Drink'
}, {
  emoji: '🍏',
  names: ['green_apple'],
  tags: ['fruit'],
  description: 'green apple',
  category: 'Food & Drink'
}, {
  emoji: '🍐',
  names: ['pear'],
  tags: [],
  description: 'pear',
  category: 'Food & Drink'
}, {
  emoji: '🍑',
  names: ['peach'],
  tags: [],
  description: 'peach',
  category: 'Food & Drink'
}, {
  emoji: '🍒',
  names: ['cherries'],
  tags: ['fruit'],
  description: 'cherries',
  category: 'Food & Drink'
}, {
  emoji: '🍓',
  names: ['strawberry'],
  tags: ['fruit'],
  description: 'strawberry',
  category: 'Food & Drink'
}, {
  emoji: '🫐',
  names: ['blueberries'],
  tags: [],
  description: 'blueberries',
  category: 'Food & Drink'
}, {
  emoji: '🥝',
  names: ['kiwi_fruit'],
  tags: [],
  description: 'kiwi fruit',
  category: 'Food & Drink'
}, {
  emoji: '🍅',
  names: ['tomato'],
  tags: [],
  description: 'tomato',
  category: 'Food & Drink'
}, {
  emoji: '🫒',
  names: ['olive'],
  tags: [],
  description: 'olive',
  category: 'Food & Drink'
}, {
  emoji: '🥥',
  names: ['coconut'],
  tags: [],
  description: 'coconut',
  category: 'Food & Drink'
}, {
  emoji: '🥑',
  names: ['avocado'],
  tags: [],
  description: 'avocado',
  category: 'Food & Drink'
}, {
  emoji: '🍆',
  names: ['eggplant'],
  tags: ['aubergine'],
  description: 'eggplant',
  category: 'Food & Drink'
}, {
  emoji: '🥔',
  names: ['potato'],
  tags: [],
  description: 'potato',
  category: 'Food & Drink'
}, {
  emoji: '🥕',
  names: ['carrot'],
  tags: [],
  description: 'carrot',
  category: 'Food & Drink'
}, {
  emoji: '🌽',
  names: ['corn'],
  tags: [],
  description: 'ear of corn',
  category: 'Food & Drink'
}, {
  emoji: '🌶️',
  names: ['hot_pepper'],
  tags: ['spicy'],
  description: 'hot pepper',
  category: 'Food & Drink'
}, {
  emoji: '🫑',
  names: ['bell_pepper'],
  tags: [],
  description: 'bell pepper',
  category: 'Food & Drink'
}, {
  emoji: '🥒',
  names: ['cucumber'],
  tags: [],
  description: 'cucumber',
  category: 'Food & Drink'
}, {
  emoji: '🥬',
  names: ['leafy_green'],
  tags: [],
  description: 'leafy green',
  category: 'Food & Drink'
}, {
  emoji: '🥦',
  names: ['broccoli'],
  tags: [],
  description: 'broccoli',
  category: 'Food & Drink'
}, {
  emoji: '🧄',
  names: ['garlic'],
  tags: [],
  description: 'garlic',
  category: 'Food & Drink'
}, {
  emoji: '🧅',
  names: ['onion'],
  tags: [],
  description: 'onion',
  category: 'Food & Drink'
}, {
  emoji: '🍄',
  names: ['mushroom'],
  tags: [],
  description: 'mushroom',
  category: 'Food & Drink'
}, {
  emoji: '🥜',
  names: ['peanuts'],
  tags: [],
  description: 'peanuts',
  category: 'Food & Drink'
}, {
  emoji: '🌰',
  names: ['chestnut'],
  tags: [],
  description: 'chestnut',
  category: 'Food & Drink'
}, {
  emoji: '🍞',
  names: ['bread'],
  tags: ['toast'],
  description: 'bread',
  category: 'Food & Drink'
}, {
  emoji: '🥐',
  names: ['croissant'],
  tags: [],
  description: 'croissant',
  category: 'Food & Drink'
}, {
  emoji: '🥖',
  names: ['baguette_bread'],
  tags: [],
  description: 'baguette bread',
  category: 'Food & Drink'
}, {
  emoji: '🫓',
  names: ['flatbread'],
  tags: [],
  description: 'flatbread',
  category: 'Food & Drink'
}, {
  emoji: '🥨',
  names: ['pretzel'],
  tags: [],
  description: 'pretzel',
  category: 'Food & Drink'
}, {
  emoji: '🥯',
  names: ['bagel'],
  tags: [],
  description: 'bagel',
  category: 'Food & Drink'
}, {
  emoji: '🥞',
  names: ['pancakes'],
  tags: [],
  description: 'pancakes',
  category: 'Food & Drink'
}, {
  emoji: '🧇',
  names: ['waffle'],
  tags: [],
  description: 'waffle',
  category: 'Food & Drink'
}, {
  emoji: '🧀',
  names: ['cheese'],
  tags: [],
  description: 'cheese wedge',
  category: 'Food & Drink'
}, {
  emoji: '🍖',
  names: ['meat_on_bone'],
  tags: [],
  description: 'meat on bone',
  category: 'Food & Drink'
}, {
  emoji: '🍗',
  names: ['poultry_leg'],
  tags: ['meat', 'chicken'],
  description: 'poultry leg',
  category: 'Food & Drink'
}, {
  emoji: '🥩',
  names: ['cut_of_meat'],
  tags: [],
  description: 'cut of meat',
  category: 'Food & Drink'
}, {
  emoji: '🥓',
  names: ['bacon'],
  tags: [],
  description: 'bacon',
  category: 'Food & Drink'
}, {
  emoji: '🍔',
  names: ['hamburger'],
  tags: ['burger'],
  description: 'hamburger',
  category: 'Food & Drink'
}, {
  emoji: '🍟',
  names: ['fries'],
  tags: [],
  description: 'french fries',
  category: 'Food & Drink'
}, {
  emoji: '🍕',
  names: ['pizza'],
  tags: [],
  description: 'pizza',
  category: 'Food & Drink'
}, {
  emoji: '🌭',
  names: ['hotdog'],
  tags: [],
  description: 'hot dog',
  category: 'Food & Drink'
}, {
  emoji: '🥪',
  names: ['sandwich'],
  tags: [],
  description: 'sandwich',
  category: 'Food & Drink'
}, {
  emoji: '🌮',
  names: ['taco'],
  tags: [],
  description: 'taco',
  category: 'Food & Drink'
}, {
  emoji: '🌯',
  names: ['burrito'],
  tags: [],
  description: 'burrito',
  category: 'Food & Drink'
}, {
  emoji: '🫔',
  names: ['tamale'],
  tags: [],
  description: 'tamale',
  category: 'Food & Drink'
}, {
  emoji: '🥙',
  names: ['stuffed_flatbread'],
  tags: [],
  description: 'stuffed flatbread',
  category: 'Food & Drink'
}, {
  emoji: '🧆',
  names: ['falafel'],
  tags: [],
  description: 'falafel',
  category: 'Food & Drink'
}, {
  emoji: '🥚',
  names: ['egg'],
  tags: [],
  description: 'egg',
  category: 'Food & Drink'
}, {
  emoji: '🍳',
  names: ['fried_egg'],
  tags: ['breakfast'],
  description: 'cooking',
  category: 'Food & Drink'
}, {
  emoji: '🥘',
  names: ['shallow_pan_of_food'],
  tags: ['paella', 'curry'],
  description: 'shallow pan of food',
  category: 'Food & Drink'
}, {
  emoji: '🍲',
  names: ['stew'],
  tags: [],
  description: 'pot of food',
  category: 'Food & Drink'
}, {
  emoji: '🫕',
  names: ['fondue'],
  tags: [],
  description: 'fondue',
  category: 'Food & Drink'
}, {
  emoji: '🥣',
  names: ['bowl_with_spoon'],
  tags: [],
  description: 'bowl with spoon',
  category: 'Food & Drink'
}, {
  emoji: '🥗',
  names: ['green_salad'],
  tags: [],
  description: 'green salad',
  category: 'Food & Drink'
}, {
  emoji: '🍿',
  names: ['popcorn'],
  tags: [],
  description: 'popcorn',
  category: 'Food & Drink'
}, {
  emoji: '🧈',
  names: ['butter'],
  tags: [],
  description: 'butter',
  category: 'Food & Drink'
}, {
  emoji: '🧂',
  names: ['salt'],
  tags: [],
  description: 'salt',
  category: 'Food & Drink'
}, {
  emoji: '🥫',
  names: ['canned_food'],
  tags: [],
  description: 'canned food',
  category: 'Food & Drink'
}, {
  emoji: '🍱',
  names: ['bento'],
  tags: [],
  description: 'bento box',
  category: 'Food & Drink'
}, {
  emoji: '🍘',
  names: ['rice_cracker'],
  tags: [],
  description: 'rice cracker',
  category: 'Food & Drink'
}, {
  emoji: '🍙',
  names: ['rice_ball'],
  tags: [],
  description: 'rice ball',
  category: 'Food & Drink'
}, {
  emoji: '🍚',
  names: ['rice'],
  tags: [],
  description: 'cooked rice',
  category: 'Food & Drink'
}, {
  emoji: '🍛',
  names: ['curry'],
  tags: [],
  description: 'curry rice',
  category: 'Food & Drink'
}, {
  emoji: '🍜',
  names: ['ramen'],
  tags: ['noodle'],
  description: 'steaming bowl',
  category: 'Food & Drink'
}, {
  emoji: '🍝',
  names: ['spaghetti'],
  tags: ['pasta'],
  description: 'spaghetti',
  category: 'Food & Drink'
}, {
  emoji: '🍠',
  names: ['sweet_potato'],
  tags: [],
  description: 'roasted sweet potato',
  category: 'Food & Drink'
}, {
  emoji: '🍢',
  names: ['oden'],
  tags: [],
  description: 'oden',
  category: 'Food & Drink'
}, {
  emoji: '🍣',
  names: ['sushi'],
  tags: [],
  description: 'sushi',
  category: 'Food & Drink'
}, {
  emoji: '🍤',
  names: ['fried_shrimp'],
  tags: ['tempura'],
  description: 'fried shrimp',
  category: 'Food & Drink'
}, {
  emoji: '🍥',
  names: ['fish_cake'],
  tags: [],
  description: 'fish cake with swirl',
  category: 'Food & Drink'
}, {
  emoji: '🥮',
  names: ['moon_cake'],
  tags: [],
  description: 'moon cake',
  category: 'Food & Drink'
}, {
  emoji: '🍡',
  names: ['dango'],
  tags: [],
  description: 'dango',
  category: 'Food & Drink'
}, {
  emoji: '🥟',
  names: ['dumpling'],
  tags: [],
  description: 'dumpling',
  category: 'Food & Drink'
}, {
  emoji: '🥠',
  names: ['fortune_cookie'],
  tags: [],
  description: 'fortune cookie',
  category: 'Food & Drink'
}, {
  emoji: '🥡',
  names: ['takeout_box'],
  tags: [],
  description: 'takeout box',
  category: 'Food & Drink'
}, {
  emoji: '🦀',
  names: ['crab'],
  tags: [],
  description: 'crab',
  category: 'Food & Drink'
}, {
  emoji: '🦞',
  names: ['lobster'],
  tags: [],
  description: 'lobster',
  category: 'Food & Drink'
}, {
  emoji: '🦐',
  names: ['shrimp'],
  tags: [],
  description: 'shrimp',
  category: 'Food & Drink'
}, {
  emoji: '🦑',
  names: ['squid'],
  tags: [],
  description: 'squid',
  category: 'Food & Drink'
}, {
  emoji: '🦪',
  names: ['oyster'],
  tags: [],
  description: 'oyster',
  category: 'Food & Drink'
}, {
  emoji: '🍦',
  names: ['icecream'],
  tags: [],
  description: 'soft ice cream',
  category: 'Food & Drink'
}, {
  emoji: '🍧',
  names: ['shaved_ice'],
  tags: [],
  description: 'shaved ice',
  category: 'Food & Drink'
}, {
  emoji: '🍨',
  names: ['ice_cream'],
  tags: [],
  description: 'ice cream',
  category: 'Food & Drink'
}, {
  emoji: '🍩',
  names: ['doughnut'],
  tags: [],
  description: 'doughnut',
  category: 'Food & Drink'
}, {
  emoji: '🍪',
  names: ['cookie'],
  tags: [],
  description: 'cookie',
  category: 'Food & Drink'
}, {
  emoji: '🎂',
  names: ['birthday'],
  tags: ['party'],
  description: 'birthday cake',
  category: 'Food & Drink'
}, {
  emoji: '🍰',
  names: ['cake'],
  tags: ['dessert'],
  description: 'shortcake',
  category: 'Food & Drink'
}, {
  emoji: '🧁',
  names: ['cupcake'],
  tags: [],
  description: 'cupcake',
  category: 'Food & Drink'
}, {
  emoji: '🥧',
  names: ['pie'],
  tags: [],
  description: 'pie',
  category: 'Food & Drink'
}, {
  emoji: '🍫',
  names: ['chocolate_bar'],
  tags: [],
  description: 'chocolate bar',
  category: 'Food & Drink'
}, {
  emoji: '🍬',
  names: ['candy'],
  tags: ['sweet'],
  description: 'candy',
  category: 'Food & Drink'
}, {
  emoji: '🍭',
  names: ['lollipop'],
  tags: [],
  description: 'lollipop',
  category: 'Food & Drink'
}, {
  emoji: '🍮',
  names: ['custard'],
  tags: [],
  description: 'custard',
  category: 'Food & Drink'
}, {
  emoji: '🍯',
  names: ['honey_pot'],
  tags: [],
  description: 'honey pot',
  category: 'Food & Drink'
}, {
  emoji: '🍼',
  names: ['baby_bottle'],
  tags: ['milk'],
  description: 'baby bottle',
  category: 'Food & Drink'
}, {
  emoji: '🥛',
  names: ['milk_glass'],
  tags: [],
  description: 'glass of milk',
  category: 'Food & Drink'
}, {
  emoji: '☕',
  names: ['coffee'],
  tags: ['cafe', 'espresso'],
  description: 'hot beverage',
  category: 'Food & Drink'
}, {
  emoji: '🫖',
  names: ['teapot'],
  tags: [],
  description: 'teapot',
  category: 'Food & Drink'
}, {
  emoji: '🍵',
  names: ['tea'],
  tags: ['green', 'breakfast'],
  description: 'teacup without handle',
  category: 'Food & Drink'
}, {
  emoji: '🍶',
  names: ['sake'],
  tags: [],
  description: 'sake',
  category: 'Food & Drink'
}, {
  emoji: '🍾',
  names: ['champagne'],
  tags: ['bottle', 'bubbly', 'celebration'],
  description: 'bottle with popping cork',
  category: 'Food & Drink'
}, {
  emoji: '🍷',
  names: ['wine_glass'],
  tags: [],
  description: 'wine glass',
  category: 'Food & Drink'
}, {
  emoji: '🍸',
  names: ['cocktail'],
  tags: ['drink'],
  description: 'cocktail glass',
  category: 'Food & Drink'
}, {
  emoji: '🍹',
  names: ['tropical_drink'],
  tags: ['summer', 'vacation'],
  description: 'tropical drink',
  category: 'Food & Drink'
}, {
  emoji: '🍺',
  names: ['beer'],
  tags: ['drink'],
  description: 'beer mug',
  category: 'Food & Drink'
}, {
  emoji: '🍻',
  names: ['beers'],
  tags: ['drinks'],
  description: 'clinking beer mugs',
  category: 'Food & Drink'
}, {
  emoji: '🥂',
  names: ['clinking_glasses'],
  tags: ['cheers', 'toast'],
  description: 'clinking glasses',
  category: 'Food & Drink'
}, {
  emoji: '🥃',
  names: ['tumbler_glass'],
  tags: ['whisky'],
  description: 'tumbler glass',
  category: 'Food & Drink'
}, {
  emoji: '🥤',
  names: ['cup_with_straw'],
  tags: [],
  description: 'cup with straw',
  category: 'Food & Drink'
}, {
  emoji: '🧋',
  names: ['bubble_tea'],
  tags: [],
  description: 'bubble tea',
  category: 'Food & Drink'
}, {
  emoji: '🧃',
  names: ['beverage_box'],
  tags: [],
  description: 'beverage box',
  category: 'Food & Drink'
}, {
  emoji: '🧉',
  names: ['mate'],
  tags: [],
  description: 'mate',
  category: 'Food & Drink'
}, {
  emoji: '🧊',
  names: ['ice_cube'],
  tags: [],
  description: 'ice',
  category: 'Food & Drink'
}, {
  emoji: '🥢',
  names: ['chopsticks'],
  tags: [],
  description: 'chopsticks',
  category: 'Food & Drink'
}, {
  emoji: '🍽️',
  names: ['plate_with_cutlery'],
  tags: ['dining', 'dinner'],
  description: 'fork and knife with plate',
  category: 'Food & Drink'
}, {
  emoji: '🍴',
  names: ['fork_and_knife'],
  tags: ['cutlery'],
  description: 'fork and knife',
  category: 'Food & Drink'
}, {
  emoji: '🥄',
  names: ['spoon'],
  tags: [],
  description: 'spoon',
  category: 'Food & Drink'
}, {
  emoji: '🔪',
  names: ['hocho', 'knife'],
  tags: ['cut', 'chop'],
  description: 'kitchen knife',
  category: 'Food & Drink'
}, {
  emoji: '🏺',
  names: ['amphora'],
  tags: [],
  description: 'amphora',
  category: 'Food & Drink'
}, {
  emoji: '🌍',
  names: ['earth_africa'],
  tags: ['globe', 'world', 'international'],
  description: 'globe showing Europe-Africa',
  category: 'Travel & Places'
}, {
  emoji: '🌎',
  names: ['earth_americas'],
  tags: ['globe', 'world', 'international'],
  description: 'globe showing Americas',
  category: 'Travel & Places'
}, {
  emoji: '🌏',
  names: ['earth_asia'],
  tags: ['globe', 'world', 'international'],
  description: 'globe showing Asia-Australia',
  category: 'Travel & Places'
}, {
  emoji: '🌐',
  names: ['globe_with_meridians'],
  tags: ['world', 'global', 'international'],
  description: 'globe with meridians',
  category: 'Travel & Places'
}, {
  emoji: '🗺️',
  names: ['world_map'],
  tags: ['travel'],
  description: 'world map',
  category: 'Travel & Places'
}, {
  emoji: '🗾',
  names: ['japan'],
  tags: [],
  description: 'map of Japan',
  category: 'Travel & Places'
}, {
  emoji: '🧭',
  names: ['compass'],
  tags: [],
  description: 'compass',
  category: 'Travel & Places'
}, {
  emoji: '🏔️',
  names: ['mountain_snow'],
  tags: [],
  description: 'snow-capped mountain',
  category: 'Travel & Places'
}, {
  emoji: '⛰️',
  names: ['mountain'],
  tags: [],
  description: 'mountain',
  category: 'Travel & Places'
}, {
  emoji: '🌋',
  names: ['volcano'],
  tags: [],
  description: 'volcano',
  category: 'Travel & Places'
}, {
  emoji: '🗻',
  names: ['mount_fuji'],
  tags: [],
  description: 'mount fuji',
  category: 'Travel & Places'
}, {
  emoji: '🏕️',
  names: ['camping'],
  tags: [],
  description: 'camping',
  category: 'Travel & Places'
}, {
  emoji: '🏖️',
  names: ['beach_umbrella'],
  tags: [],
  description: 'beach with umbrella',
  category: 'Travel & Places'
}, {
  emoji: '🏜️',
  names: ['desert'],
  tags: [],
  description: 'desert',
  category: 'Travel & Places'
}, {
  emoji: '🏝️',
  names: ['desert_island'],
  tags: [],
  description: 'desert island',
  category: 'Travel & Places'
}, {
  emoji: '🏞️',
  names: ['national_park'],
  tags: [],
  description: 'national park',
  category: 'Travel & Places'
}, {
  emoji: '🏟️',
  names: ['stadium'],
  tags: [],
  description: 'stadium',
  category: 'Travel & Places'
}, {
  emoji: '🏛️',
  names: ['classical_building'],
  tags: [],
  description: 'classical building',
  category: 'Travel & Places'
}, {
  emoji: '🏗️',
  names: ['building_construction'],
  tags: [],
  description: 'building construction',
  category: 'Travel & Places'
}, {
  emoji: '🧱',
  names: ['bricks'],
  tags: [],
  description: 'brick',
  category: 'Travel & Places'
}, {
  emoji: '🪨',
  names: ['rock'],
  tags: [],
  description: 'rock',
  category: 'Travel & Places'
}, {
  emoji: '🪵',
  names: ['wood'],
  tags: [],
  description: 'wood',
  category: 'Travel & Places'
}, {
  emoji: '🛖',
  names: ['hut'],
  tags: [],
  description: 'hut',
  category: 'Travel & Places'
}, {
  emoji: '🏘️',
  names: ['houses'],
  tags: [],
  description: 'houses',
  category: 'Travel & Places'
}, {
  emoji: '🏚️',
  names: ['derelict_house'],
  tags: [],
  description: 'derelict house',
  category: 'Travel & Places'
}, {
  emoji: '🏠',
  names: ['house'],
  tags: [],
  description: 'house',
  category: 'Travel & Places'
}, {
  emoji: '🏡',
  names: ['house_with_garden'],
  tags: [],
  description: 'house with garden',
  category: 'Travel & Places'
}, {
  emoji: '🏢',
  names: ['office'],
  tags: [],
  description: 'office building',
  category: 'Travel & Places'
}, {
  emoji: '🏣',
  names: ['post_office'],
  tags: [],
  description: 'Japanese post office',
  category: 'Travel & Places'
}, {
  emoji: '🏤',
  names: ['european_post_office'],
  tags: [],
  description: 'post office',
  category: 'Travel & Places'
}, {
  emoji: '🏥',
  names: ['hospital'],
  tags: [],
  description: 'hospital',
  category: 'Travel & Places'
}, {
  emoji: '🏦',
  names: ['bank'],
  tags: [],
  description: 'bank',
  category: 'Travel & Places'
}, {
  emoji: '🏨',
  names: ['hotel'],
  tags: [],
  description: 'hotel',
  category: 'Travel & Places'
}, {
  emoji: '🏩',
  names: ['love_hotel'],
  tags: [],
  description: 'love hotel',
  category: 'Travel & Places'
}, {
  emoji: '🏪',
  names: ['convenience_store'],
  tags: [],
  description: 'convenience store',
  category: 'Travel & Places'
}, {
  emoji: '🏫',
  names: ['school'],
  tags: [],
  description: 'school',
  category: 'Travel & Places'
}, {
  emoji: '🏬',
  names: ['department_store'],
  tags: [],
  description: 'department store',
  category: 'Travel & Places'
}, {
  emoji: '🏭',
  names: ['factory'],
  tags: [],
  description: 'factory',
  category: 'Travel & Places'
}, {
  emoji: '🏯',
  names: ['japanese_castle'],
  tags: [],
  description: 'Japanese castle',
  category: 'Travel & Places'
}, {
  emoji: '🏰',
  names: ['european_castle'],
  tags: [],
  description: 'castle',
  category: 'Travel & Places'
}, {
  emoji: '💒',
  names: ['wedding'],
  tags: ['marriage'],
  description: 'wedding',
  category: 'Travel & Places'
}, {
  emoji: '🗼',
  names: ['tokyo_tower'],
  tags: [],
  description: 'Tokyo tower',
  category: 'Travel & Places'
}, {
  emoji: '🗽',
  names: ['statue_of_liberty'],
  tags: [],
  description: 'Statue of Liberty',
  category: 'Travel & Places'
}, {
  emoji: '⛪',
  names: ['church'],
  tags: [],
  description: 'church',
  category: 'Travel & Places'
}, {
  emoji: '🕌',
  names: ['mosque'],
  tags: [],
  description: 'mosque',
  category: 'Travel & Places'
}, {
  emoji: '🛕',
  names: ['hindu_temple'],
  tags: [],
  description: 'hindu temple',
  category: 'Travel & Places'
}, {
  emoji: '🕍',
  names: ['synagogue'],
  tags: [],
  description: 'synagogue',
  category: 'Travel & Places'
}, {
  emoji: '⛩️',
  names: ['shinto_shrine'],
  tags: [],
  description: 'shinto shrine',
  category: 'Travel & Places'
}, {
  emoji: '🕋',
  names: ['kaaba'],
  tags: [],
  description: 'kaaba',
  category: 'Travel & Places'
}, {
  emoji: '⛲',
  names: ['fountain'],
  tags: [],
  description: 'fountain',
  category: 'Travel & Places'
}, {
  emoji: '⛺',
  names: ['tent'],
  tags: ['camping'],
  description: 'tent',
  category: 'Travel & Places'
}, {
  emoji: '🌁',
  names: ['foggy'],
  tags: ['karl'],
  description: 'foggy',
  category: 'Travel & Places'
}, {
  emoji: '🌃',
  names: ['night_with_stars'],
  tags: [],
  description: 'night with stars',
  category: 'Travel & Places'
}, {
  emoji: '🏙️',
  names: ['cityscape'],
  tags: ['skyline'],
  description: 'cityscape',
  category: 'Travel & Places'
}, {
  emoji: '🌄',
  names: ['sunrise_over_mountains'],
  tags: [],
  description: 'sunrise over mountains',
  category: 'Travel & Places'
}, {
  emoji: '🌅',
  names: ['sunrise'],
  tags: [],
  description: 'sunrise',
  category: 'Travel & Places'
}, {
  emoji: '🌆',
  names: ['city_sunset'],
  tags: [],
  description: 'cityscape at dusk',
  category: 'Travel & Places'
}, {
  emoji: '🌇',
  names: ['city_sunrise'],
  tags: [],
  description: 'sunset',
  category: 'Travel & Places'
}, {
  emoji: '🌉',
  names: ['bridge_at_night'],
  tags: [],
  description: 'bridge at night',
  category: 'Travel & Places'
}, {
  emoji: '♨️',
  names: ['hotsprings'],
  tags: [],
  description: 'hot springs',
  category: 'Travel & Places'
}, {
  emoji: '🎠',
  names: ['carousel_horse'],
  tags: [],
  description: 'carousel horse',
  category: 'Travel & Places'
}, {
  emoji: '🎡',
  names: ['ferris_wheel'],
  tags: [],
  description: 'ferris wheel',
  category: 'Travel & Places'
}, {
  emoji: '🎢',
  names: ['roller_coaster'],
  tags: [],
  description: 'roller coaster',
  category: 'Travel & Places'
}, {
  emoji: '💈',
  names: ['barber'],
  tags: [],
  description: 'barber pole',
  category: 'Travel & Places'
}, {
  emoji: '🎪',
  names: ['circus_tent'],
  tags: [],
  description: 'circus tent',
  category: 'Travel & Places'
}, {
  emoji: '🚂',
  names: ['steam_locomotive'],
  tags: ['train'],
  description: 'locomotive',
  category: 'Travel & Places'
}, {
  emoji: '🚃',
  names: ['railway_car'],
  tags: [],
  description: 'railway car',
  category: 'Travel & Places'
}, {
  emoji: '🚄',
  names: ['bullettrain_side'],
  tags: ['train'],
  description: 'high-speed train',
  category: 'Travel & Places'
}, {
  emoji: '🚅',
  names: ['bullettrain_front'],
  tags: ['train'],
  description: 'bullet train',
  category: 'Travel & Places'
}, {
  emoji: '🚆',
  names: ['train2'],
  tags: [],
  description: 'train',
  category: 'Travel & Places'
}, {
  emoji: '🚇',
  names: ['metro'],
  tags: [],
  description: 'metro',
  category: 'Travel & Places'
}, {
  emoji: '🚈',
  names: ['light_rail'],
  tags: [],
  description: 'light rail',
  category: 'Travel & Places'
}, {
  emoji: '🚉',
  names: ['station'],
  tags: [],
  description: 'station',
  category: 'Travel & Places'
}, {
  emoji: '🚊',
  names: ['tram'],
  tags: [],
  description: 'tram',
  category: 'Travel & Places'
}, {
  emoji: '🚝',
  names: ['monorail'],
  tags: [],
  description: 'monorail',
  category: 'Travel & Places'
}, {
  emoji: '🚞',
  names: ['mountain_railway'],
  tags: [],
  description: 'mountain railway',
  category: 'Travel & Places'
}, {
  emoji: '🚋',
  names: ['train'],
  tags: [],
  description: 'tram car',
  category: 'Travel & Places'
}, {
  emoji: '🚌',
  names: ['bus'],
  tags: [],
  description: 'bus',
  category: 'Travel & Places'
}, {
  emoji: '🚍',
  names: ['oncoming_bus'],
  tags: [],
  description: 'oncoming bus',
  category: 'Travel & Places'
}, {
  emoji: '🚎',
  names: ['trolleybus'],
  tags: [],
  description: 'trolleybus',
  category: 'Travel & Places'
}, {
  emoji: '🚐',
  names: ['minibus'],
  tags: [],
  description: 'minibus',
  category: 'Travel & Places'
}, {
  emoji: '🚑',
  names: ['ambulance'],
  tags: [],
  description: 'ambulance',
  category: 'Travel & Places'
}, {
  emoji: '🚒',
  names: ['fire_engine'],
  tags: [],
  description: 'fire engine',
  category: 'Travel & Places'
}, {
  emoji: '🚓',
  names: ['police_car'],
  tags: [],
  description: 'police car',
  category: 'Travel & Places'
}, {
  emoji: '🚔',
  names: ['oncoming_police_car'],
  tags: [],
  description: 'oncoming police car',
  category: 'Travel & Places'
}, {
  emoji: '🚕',
  names: ['taxi'],
  tags: [],
  description: 'taxi',
  category: 'Travel & Places'
}, {
  emoji: '🚖',
  names: ['oncoming_taxi'],
  tags: [],
  description: 'oncoming taxi',
  category: 'Travel & Places'
}, {
  emoji: '🚗',
  names: ['car', 'red_car'],
  tags: [],
  description: 'automobile',
  category: 'Travel & Places'
}, {
  emoji: '🚘',
  names: ['oncoming_automobile'],
  tags: [],
  description: 'oncoming automobile',
  category: 'Travel & Places'
}, {
  emoji: '🚙',
  names: ['blue_car'],
  tags: [],
  description: 'sport utility vehicle',
  category: 'Travel & Places'
}, {
  emoji: '🛻',
  names: ['pickup_truck'],
  tags: [],
  description: 'pickup truck',
  category: 'Travel & Places'
}, {
  emoji: '🚚',
  names: ['truck'],
  tags: [],
  description: 'delivery truck',
  category: 'Travel & Places'
}, {
  emoji: '🚛',
  names: ['articulated_lorry'],
  tags: [],
  description: 'articulated lorry',
  category: 'Travel & Places'
}, {
  emoji: '🚜',
  names: ['tractor'],
  tags: [],
  description: 'tractor',
  category: 'Travel & Places'
}, {
  emoji: '🏎️',
  names: ['racing_car'],
  tags: [],
  description: 'racing car',
  category: 'Travel & Places'
}, {
  emoji: '🏍️',
  names: ['motorcycle'],
  tags: [],
  description: 'motorcycle',
  category: 'Travel & Places'
}, {
  emoji: '🛵',
  names: ['motor_scooter'],
  tags: [],
  description: 'motor scooter',
  category: 'Travel & Places'
}, {
  emoji: '🦽',
  names: ['manual_wheelchair'],
  tags: [],
  description: 'manual wheelchair',
  category: 'Travel & Places'
}, {
  emoji: '🦼',
  names: ['motorized_wheelchair'],
  tags: [],
  description: 'motorized wheelchair',
  category: 'Travel & Places'
}, {
  emoji: '🛺',
  names: ['auto_rickshaw'],
  tags: [],
  description: 'auto rickshaw',
  category: 'Travel & Places'
}, {
  emoji: '🚲',
  names: ['bike'],
  tags: ['bicycle'],
  description: 'bicycle',
  category: 'Travel & Places'
}, {
  emoji: '🛴',
  names: ['kick_scooter'],
  tags: [],
  description: 'kick scooter',
  category: 'Travel & Places'
}, {
  emoji: '🛹',
  names: ['skateboard'],
  tags: [],
  description: 'skateboard',
  category: 'Travel & Places'
}, {
  emoji: '🛼',
  names: ['roller_skate'],
  tags: [],
  description: 'roller skate',
  category: 'Travel & Places'
}, {
  emoji: '🚏',
  names: ['busstop'],
  tags: [],
  description: 'bus stop',
  category: 'Travel & Places'
}, {
  emoji: '🛣️',
  names: ['motorway'],
  tags: [],
  description: 'motorway',
  category: 'Travel & Places'
}, {
  emoji: '🛤️',
  names: ['railway_track'],
  tags: [],
  description: 'railway track',
  category: 'Travel & Places'
}, {
  emoji: '🛢️',
  names: ['oil_drum'],
  tags: [],
  description: 'oil drum',
  category: 'Travel & Places'
}, {
  emoji: '⛽',
  names: ['fuelpump'],
  tags: [],
  description: 'fuel pump',
  category: 'Travel & Places'
}, {
  emoji: '🚨',
  names: ['rotating_light'],
  tags: ['911', 'emergency'],
  description: 'police car light',
  category: 'Travel & Places'
}, {
  emoji: '🚥',
  names: ['traffic_light'],
  tags: [],
  description: 'horizontal traffic light',
  category: 'Travel & Places'
}, {
  emoji: '🚦',
  names: ['vertical_traffic_light'],
  tags: ['semaphore'],
  description: 'vertical traffic light',
  category: 'Travel & Places'
}, {
  emoji: '🛑',
  names: ['stop_sign'],
  tags: [],
  description: 'stop sign',
  category: 'Travel & Places'
}, {
  emoji: '🚧',
  names: ['construction'],
  tags: ['wip'],
  description: 'construction',
  category: 'Travel & Places'
}, {
  emoji: '⚓',
  names: ['anchor'],
  tags: ['ship'],
  description: 'anchor',
  category: 'Travel & Places'
}, {
  emoji: '⛵',
  names: ['boat', 'sailboat'],
  tags: [],
  description: 'sailboat',
  category: 'Travel & Places'
}, {
  emoji: '🛶',
  names: ['canoe'],
  tags: [],
  description: 'canoe',
  category: 'Travel & Places'
}, {
  emoji: '🚤',
  names: ['speedboat'],
  tags: ['ship'],
  description: 'speedboat',
  category: 'Travel & Places'
}, {
  emoji: '🛳️',
  names: ['passenger_ship'],
  tags: ['cruise'],
  description: 'passenger ship',
  category: 'Travel & Places'
}, {
  emoji: '⛴️',
  names: ['ferry'],
  tags: [],
  description: 'ferry',
  category: 'Travel & Places'
}, {
  emoji: '🛥️',
  names: ['motor_boat'],
  tags: [],
  description: 'motor boat',
  category: 'Travel & Places'
}, {
  emoji: '🚢',
  names: ['ship'],
  tags: [],
  description: 'ship',
  category: 'Travel & Places'
}, {
  emoji: '✈️',
  names: ['airplane'],
  tags: ['flight'],
  description: 'airplane',
  category: 'Travel & Places'
}, {
  emoji: '🛩️',
  names: ['small_airplane'],
  tags: ['flight'],
  description: 'small airplane',
  category: 'Travel & Places'
}, {
  emoji: '🛫',
  names: ['flight_departure'],
  tags: [],
  description: 'airplane departure',
  category: 'Travel & Places'
}, {
  emoji: '🛬',
  names: ['flight_arrival'],
  tags: [],
  description: 'airplane arrival',
  category: 'Travel & Places'
}, {
  emoji: '🪂',
  names: ['parachute'],
  tags: [],
  description: 'parachute',
  category: 'Travel & Places'
}, {
  emoji: '💺',
  names: ['seat'],
  tags: [],
  description: 'seat',
  category: 'Travel & Places'
}, {
  emoji: '🚁',
  names: ['helicopter'],
  tags: [],
  description: 'helicopter',
  category: 'Travel & Places'
}, {
  emoji: '🚟',
  names: ['suspension_railway'],
  tags: [],
  description: 'suspension railway',
  category: 'Travel & Places'
}, {
  emoji: '🚠',
  names: ['mountain_cableway'],
  tags: [],
  description: 'mountain cableway',
  category: 'Travel & Places'
}, {
  emoji: '🚡',
  names: ['aerial_tramway'],
  tags: [],
  description: 'aerial tramway',
  category: 'Travel & Places'
}, {
  emoji: '🛰️',
  names: ['artificial_satellite'],
  tags: ['orbit', 'space'],
  description: 'satellite',
  category: 'Travel & Places'
}, {
  emoji: '🚀',
  names: ['rocket'],
  tags: ['ship', 'launch'],
  description: 'rocket',
  category: 'Travel & Places'
}, {
  emoji: '🛸',
  names: ['flying_saucer'],
  tags: ['ufo'],
  description: 'flying saucer',
  category: 'Travel & Places'
}, {
  emoji: '🛎️',
  names: ['bellhop_bell'],
  tags: [],
  description: 'bellhop bell',
  category: 'Travel & Places'
}, {
  emoji: '🧳',
  names: ['luggage'],
  tags: [],
  description: 'luggage',
  category: 'Travel & Places'
}, {
  emoji: '⌛',
  names: ['hourglass'],
  tags: ['time'],
  description: 'hourglass done',
  category: 'Travel & Places'
}, {
  emoji: '⏳',
  names: ['hourglass_flowing_sand'],
  tags: ['time'],
  description: 'hourglass not done',
  category: 'Travel & Places'
}, {
  emoji: '⌚',
  names: ['watch'],
  tags: ['time'],
  description: 'watch',
  category: 'Travel & Places'
}, {
  emoji: '⏰',
  names: ['alarm_clock'],
  tags: ['morning'],
  description: 'alarm clock',
  category: 'Travel & Places'
}, {
  emoji: '⏱️',
  names: ['stopwatch'],
  tags: [],
  description: 'stopwatch',
  category: 'Travel & Places'
}, {
  emoji: '⏲️',
  names: ['timer_clock'],
  tags: [],
  description: 'timer clock',
  category: 'Travel & Places'
}, {
  emoji: '🕰️',
  names: ['mantelpiece_clock'],
  tags: [],
  description: 'mantelpiece clock',
  category: 'Travel & Places'
}, {
  emoji: '🕛',
  names: ['clock12'],
  tags: [],
  description: 'twelve o’clock',
  category: 'Travel & Places'
}, {
  emoji: '🕧',
  names: ['clock1230'],
  tags: [],
  description: 'twelve-thirty',
  category: 'Travel & Places'
}, {
  emoji: '🕐',
  names: ['clock1'],
  tags: [],
  description: 'one o’clock',
  category: 'Travel & Places'
}, {
  emoji: '🕜',
  names: ['clock130'],
  tags: [],
  description: 'one-thirty',
  category: 'Travel & Places'
}, {
  emoji: '🕑',
  names: ['clock2'],
  tags: [],
  description: 'two o’clock',
  category: 'Travel & Places'
}, {
  emoji: '🕝',
  names: ['clock230'],
  tags: [],
  description: 'two-thirty',
  category: 'Travel & Places'
}, {
  emoji: '🕒',
  names: ['clock3'],
  tags: [],
  description: 'three o’clock',
  category: 'Travel & Places'
}, {
  emoji: '🕞',
  names: ['clock330'],
  tags: [],
  description: 'three-thirty',
  category: 'Travel & Places'
}, {
  emoji: '🕓',
  names: ['clock4'],
  tags: [],
  description: 'four o’clock',
  category: 'Travel & Places'
}, {
  emoji: '🕟',
  names: ['clock430'],
  tags: [],
  description: 'four-thirty',
  category: 'Travel & Places'
}, {
  emoji: '🕔',
  names: ['clock5'],
  tags: [],
  description: 'five o’clock',
  category: 'Travel & Places'
}, {
  emoji: '🕠',
  names: ['clock530'],
  tags: [],
  description: 'five-thirty',
  category: 'Travel & Places'
}, {
  emoji: '🕕',
  names: ['clock6'],
  tags: [],
  description: 'six o’clock',
  category: 'Travel & Places'
}, {
  emoji: '🕡',
  names: ['clock630'],
  tags: [],
  description: 'six-thirty',
  category: 'Travel & Places'
}, {
  emoji: '🕖',
  names: ['clock7'],
  tags: [],
  description: 'seven o’clock',
  category: 'Travel & Places'
}, {
  emoji: '🕢',
  names: ['clock730'],
  tags: [],
  description: 'seven-thirty',
  category: 'Travel & Places'
}, {
  emoji: '🕗',
  names: ['clock8'],
  tags: [],
  description: 'eight o’clock',
  category: 'Travel & Places'
}, {
  emoji: '🕣',
  names: ['clock830'],
  tags: [],
  description: 'eight-thirty',
  category: 'Travel & Places'
}, {
  emoji: '🕘',
  names: ['clock9'],
  tags: [],
  description: 'nine o’clock',
  category: 'Travel & Places'
}, {
  emoji: '🕤',
  names: ['clock930'],
  tags: [],
  description: 'nine-thirty',
  category: 'Travel & Places'
}, {
  emoji: '🕙',
  names: ['clock10'],
  tags: [],
  description: 'ten o’clock',
  category: 'Travel & Places'
}, {
  emoji: '🕥',
  names: ['clock1030'],
  tags: [],
  description: 'ten-thirty',
  category: 'Travel & Places'
}, {
  emoji: '🕚',
  names: ['clock11'],
  tags: [],
  description: 'eleven o’clock',
  category: 'Travel & Places'
}, {
  emoji: '🕦',
  names: ['clock1130'],
  tags: [],
  description: 'eleven-thirty',
  category: 'Travel & Places'
}, {
  emoji: '🌑',
  names: ['new_moon'],
  tags: [],
  description: 'new moon',
  category: 'Travel & Places'
}, {
  emoji: '🌒',
  names: ['waxing_crescent_moon'],
  tags: [],
  description: 'waxing crescent moon',
  category: 'Travel & Places'
}, {
  emoji: '🌓',
  names: ['first_quarter_moon'],
  tags: [],
  description: 'first quarter moon',
  category: 'Travel & Places'
}, {
  emoji: '🌔',
  names: ['moon', 'waxing_gibbous_moon'],
  tags: [],
  description: 'waxing gibbous moon',
  category: 'Travel & Places'
}, {
  emoji: '🌕',
  names: ['full_moon'],
  tags: [],
  description: 'full moon',
  category: 'Travel & Places'
}, {
  emoji: '🌖',
  names: ['waning_gibbous_moon'],
  tags: [],
  description: 'waning gibbous moon',
  category: 'Travel & Places'
}, {
  emoji: '🌗',
  names: ['last_quarter_moon'],
  tags: [],
  description: 'last quarter moon',
  category: 'Travel & Places'
}, {
  emoji: '🌘',
  names: ['waning_crescent_moon'],
  tags: [],
  description: 'waning crescent moon',
  category: 'Travel & Places'
}, {
  emoji: '🌙',
  names: ['crescent_moon'],
  tags: ['night'],
  description: 'crescent moon',
  category: 'Travel & Places'
}, {
  emoji: '🌚',
  names: ['new_moon_with_face'],
  tags: [],
  description: 'new moon face',
  category: 'Travel & Places'
}, {
  emoji: '🌛',
  names: ['first_quarter_moon_with_face'],
  tags: [],
  description: 'first quarter moon face',
  category: 'Travel & Places'
}, {
  emoji: '🌜',
  names: ['last_quarter_moon_with_face'],
  tags: [],
  description: 'last quarter moon face',
  category: 'Travel & Places'
}, {
  emoji: '🌡️',
  names: ['thermometer'],
  tags: [],
  description: 'thermometer',
  category: 'Travel & Places'
}, {
  emoji: '☀️',
  names: ['sunny'],
  tags: ['weather'],
  description: 'sun',
  category: 'Travel & Places'
}, {
  emoji: '🌝',
  names: ['full_moon_with_face'],
  tags: [],
  description: 'full moon face',
  category: 'Travel & Places'
}, {
  emoji: '🌞',
  names: ['sun_with_face'],
  tags: ['summer'],
  description: 'sun with face',
  category: 'Travel & Places'
}, {
  emoji: '🪐',
  names: ['ringed_planet'],
  tags: [],
  description: 'ringed planet',
  category: 'Travel & Places'
}, {
  emoji: '⭐',
  names: ['star'],
  tags: [],
  description: 'star',
  category: 'Travel & Places'
}, {
  emoji: '🌟',
  names: ['star2'],
  tags: [],
  description: 'glowing star',
  category: 'Travel & Places'
}, {
  emoji: '🌠',
  names: ['stars'],
  tags: [],
  description: 'shooting star',
  category: 'Travel & Places'
}, {
  emoji: '🌌',
  names: ['milky_way'],
  tags: [],
  description: 'milky way',
  category: 'Travel & Places'
}, {
  emoji: '☁️',
  names: ['cloud'],
  tags: [],
  description: 'cloud',
  category: 'Travel & Places'
}, {
  emoji: '⛅',
  names: ['partly_sunny'],
  tags: ['weather', 'cloud'],
  description: 'sun behind cloud',
  category: 'Travel & Places'
}, {
  emoji: '⛈️',
  names: ['cloud_with_lightning_and_rain'],
  tags: [],
  description: 'cloud with lightning and rain',
  category: 'Travel & Places'
}, {
  emoji: '🌤️',
  names: ['sun_behind_small_cloud'],
  tags: [],
  description: 'sun behind small cloud',
  category: 'Travel & Places'
}, {
  emoji: '🌥️',
  names: ['sun_behind_large_cloud'],
  tags: [],
  description: 'sun behind large cloud',
  category: 'Travel & Places'
}, {
  emoji: '🌦️',
  names: ['sun_behind_rain_cloud'],
  tags: [],
  description: 'sun behind rain cloud',
  category: 'Travel & Places'
}, {
  emoji: '🌧️',
  names: ['cloud_with_rain'],
  tags: [],
  description: 'cloud with rain',
  category: 'Travel & Places'
}, {
  emoji: '🌨️',
  names: ['cloud_with_snow'],
  tags: [],
  description: 'cloud with snow',
  category: 'Travel & Places'
}, {
  emoji: '🌩️',
  names: ['cloud_with_lightning'],
  tags: [],
  description: 'cloud with lightning',
  category: 'Travel & Places'
}, {
  emoji: '🌪️',
  names: ['tornado'],
  tags: [],
  description: 'tornado',
  category: 'Travel & Places'
}, {
  emoji: '🌫️',
  names: ['fog'],
  tags: [],
  description: 'fog',
  category: 'Travel & Places'
}, {
  emoji: '🌬️',
  names: ['wind_face'],
  tags: [],
  description: 'wind face',
  category: 'Travel & Places'
}, {
  emoji: '🌀',
  names: ['cyclone'],
  tags: ['swirl'],
  description: 'cyclone',
  category: 'Travel & Places'
}, {
  emoji: '🌈',
  names: ['rainbow'],
  tags: [],
  description: 'rainbow',
  category: 'Travel & Places'
}, {
  emoji: '🌂',
  names: ['closed_umbrella'],
  tags: ['weather', 'rain'],
  description: 'closed umbrella',
  category: 'Travel & Places'
}, {
  emoji: '☂️',
  names: ['open_umbrella'],
  tags: [],
  description: 'umbrella',
  category: 'Travel & Places'
}, {
  emoji: '☔',
  names: ['umbrella'],
  tags: ['rain', 'weather'],
  description: 'umbrella with rain drops',
  category: 'Travel & Places'
}, {
  emoji: '⛱️',
  names: ['parasol_on_ground'],
  tags: ['beach_umbrella'],
  description: 'umbrella on ground',
  category: 'Travel & Places'
}, {
  emoji: '⚡',
  names: ['zap'],
  tags: ['lightning', 'thunder'],
  description: 'high voltage',
  category: 'Travel & Places'
}, {
  emoji: '❄️',
  names: ['snowflake'],
  tags: ['winter', 'cold', 'weather'],
  description: 'snowflake',
  category: 'Travel & Places'
}, {
  emoji: '☃️',
  names: ['snowman_with_snow'],
  tags: ['winter', 'christmas'],
  description: 'snowman',
  category: 'Travel & Places'
}, {
  emoji: '⛄',
  names: ['snowman'],
  tags: ['winter'],
  description: 'snowman without snow',
  category: 'Travel & Places'
}, {
  emoji: '☄️',
  names: ['comet'],
  tags: [],
  description: 'comet',
  category: 'Travel & Places'
}, {
  emoji: '🔥',
  names: ['fire'],
  tags: ['burn'],
  description: 'fire',
  category: 'Travel & Places'
}, {
  emoji: '💧',
  names: ['droplet'],
  tags: ['water'],
  description: 'droplet',
  category: 'Travel & Places'
}, {
  emoji: '🌊',
  names: ['ocean'],
  tags: ['sea'],
  description: 'water wave',
  category: 'Travel & Places'
}, {
  emoji: '🎃',
  names: ['jack_o_lantern'],
  tags: ['halloween'],
  description: 'jack-o-lantern',
  category: 'Activities'
}, {
  emoji: '🎄',
  names: ['christmas_tree'],
  tags: [],
  description: 'Christmas tree',
  category: 'Activities'
}, {
  emoji: '🎆',
  names: ['fireworks'],
  tags: ['festival', 'celebration'],
  description: 'fireworks',
  category: 'Activities'
}, {
  emoji: '🎇',
  names: ['sparkler'],
  tags: [],
  description: 'sparkler',
  category: 'Activities'
}, {
  emoji: '🧨',
  names: ['firecracker'],
  tags: [],
  description: 'firecracker',
  category: 'Activities'
}, {
  emoji: '✨',
  names: ['sparkles'],
  tags: ['shiny'],
  description: 'sparkles',
  category: 'Activities'
}, {
  emoji: '🎈',
  names: ['balloon'],
  tags: ['party', 'birthday'],
  description: 'balloon',
  category: 'Activities'
}, {
  emoji: '🎉',
  names: ['tada'],
  tags: ['hooray', 'party'],
  description: 'party popper',
  category: 'Activities'
}, {
  emoji: '🎊',
  names: ['confetti_ball'],
  tags: [],
  description: 'confetti ball',
  category: 'Activities'
}, {
  emoji: '🎋',
  names: ['tanabata_tree'],
  tags: [],
  description: 'tanabata tree',
  category: 'Activities'
}, {
  emoji: '🎍',
  names: ['bamboo'],
  tags: [],
  description: 'pine decoration',
  category: 'Activities'
}, {
  emoji: '🎎',
  names: ['dolls'],
  tags: [],
  description: 'Japanese dolls',
  category: 'Activities'
}, {
  emoji: '🎏',
  names: ['flags'],
  tags: [],
  description: 'carp streamer',
  category: 'Activities'
}, {
  emoji: '🎐',
  names: ['wind_chime'],
  tags: [],
  description: 'wind chime',
  category: 'Activities'
}, {
  emoji: '🎑',
  names: ['rice_scene'],
  tags: [],
  description: 'moon viewing ceremony',
  category: 'Activities'
}, {
  emoji: '🧧',
  names: ['red_envelope'],
  tags: [],
  description: 'red envelope',
  category: 'Activities'
}, {
  emoji: '🎀',
  names: ['ribbon'],
  tags: [],
  description: 'ribbon',
  category: 'Activities'
}, {
  emoji: '🎁',
  names: ['gift'],
  tags: ['present', 'birthday', 'christmas'],
  description: 'wrapped gift',
  category: 'Activities'
}, {
  emoji: '🎗️',
  names: ['reminder_ribbon'],
  tags: [],
  description: 'reminder ribbon',
  category: 'Activities'
}, {
  emoji: '🎟️',
  names: ['tickets'],
  tags: [],
  description: 'admission tickets',
  category: 'Activities'
}, {
  emoji: '🎫',
  names: ['ticket'],
  tags: [],
  description: 'ticket',
  category: 'Activities'
}, {
  emoji: '🎖️',
  names: ['medal_military'],
  tags: [],
  description: 'military medal',
  category: 'Activities'
}, {
  emoji: '🏆',
  names: ['trophy'],
  tags: ['award', 'contest', 'winner'],
  description: 'trophy',
  category: 'Activities'
}, {
  emoji: '🏅',
  names: ['medal_sports'],
  tags: ['gold', 'winner'],
  description: 'sports medal',
  category: 'Activities'
}, {
  emoji: '🥇',
  names: ['1st_place_medal'],
  tags: ['gold'],
  description: '1st place medal',
  category: 'Activities'
}, {
  emoji: '🥈',
  names: ['2nd_place_medal'],
  tags: ['silver'],
  description: '2nd place medal',
  category: 'Activities'
}, {
  emoji: '🥉',
  names: ['3rd_place_medal'],
  tags: ['bronze'],
  description: '3rd place medal',
  category: 'Activities'
}, {
  emoji: '⚽',
  names: ['soccer'],
  tags: ['sports'],
  description: 'soccer ball',
  category: 'Activities'
}, {
  emoji: '⚾',
  names: ['baseball'],
  tags: ['sports'],
  description: 'baseball',
  category: 'Activities'
}, {
  emoji: '🥎',
  names: ['softball'],
  tags: [],
  description: 'softball',
  category: 'Activities'
}, {
  emoji: '🏀',
  names: ['basketball'],
  tags: ['sports'],
  description: 'basketball',
  category: 'Activities'
}, {
  emoji: '🏐',
  names: ['volleyball'],
  tags: [],
  description: 'volleyball',
  category: 'Activities'
}, {
  emoji: '🏈',
  names: ['football'],
  tags: ['sports'],
  description: 'american football',
  category: 'Activities'
}, {
  emoji: '🏉',
  names: ['rugby_football'],
  tags: [],
  description: 'rugby football',
  category: 'Activities'
}, {
  emoji: '🎾',
  names: ['tennis'],
  tags: ['sports'],
  description: 'tennis',
  category: 'Activities'
}, {
  emoji: '🥏',
  names: ['flying_disc'],
  tags: [],
  description: 'flying disc',
  category: 'Activities'
}, {
  emoji: '🎳',
  names: ['bowling'],
  tags: [],
  description: 'bowling',
  category: 'Activities'
}, {
  emoji: '🏏',
  names: ['cricket_game'],
  tags: [],
  description: 'cricket game',
  category: 'Activities'
}, {
  emoji: '🏑',
  names: ['field_hockey'],
  tags: [],
  description: 'field hockey',
  category: 'Activities'
}, {
  emoji: '🏒',
  names: ['ice_hockey'],
  tags: [],
  description: 'ice hockey',
  category: 'Activities'
}, {
  emoji: '🥍',
  names: ['lacrosse'],
  tags: [],
  description: 'lacrosse',
  category: 'Activities'
}, {
  emoji: '🏓',
  names: ['ping_pong'],
  tags: [],
  description: 'ping pong',
  category: 'Activities'
}, {
  emoji: '🏸',
  names: ['badminton'],
  tags: [],
  description: 'badminton',
  category: 'Activities'
}, {
  emoji: '🥊',
  names: ['boxing_glove'],
  tags: [],
  description: 'boxing glove',
  category: 'Activities'
}, {
  emoji: '🥋',
  names: ['martial_arts_uniform'],
  tags: [],
  description: 'martial arts uniform',
  category: 'Activities'
}, {
  emoji: '🥅',
  names: ['goal_net'],
  tags: [],
  description: 'goal net',
  category: 'Activities'
}, {
  emoji: '⛳',
  names: ['golf'],
  tags: [],
  description: 'flag in hole',
  category: 'Activities'
}, {
  emoji: '⛸️',
  names: ['ice_skate'],
  tags: ['skating'],
  description: 'ice skate',
  category: 'Activities'
}, {
  emoji: '🎣',
  names: ['fishing_pole_and_fish'],
  tags: [],
  description: 'fishing pole',
  category: 'Activities'
}, {
  emoji: '🤿',
  names: ['diving_mask'],
  tags: [],
  description: 'diving mask',
  category: 'Activities'
}, {
  emoji: '🎽',
  names: ['running_shirt_with_sash'],
  tags: ['marathon'],
  description: 'running shirt',
  category: 'Activities'
}, {
  emoji: '🎿',
  names: ['ski'],
  tags: [],
  description: 'skis',
  category: 'Activities'
}, {
  emoji: '🛷',
  names: ['sled'],
  tags: [],
  description: 'sled',
  category: 'Activities'
}, {
  emoji: '🥌',
  names: ['curling_stone'],
  tags: [],
  description: 'curling stone',
  category: 'Activities'
}, {
  emoji: '🎯',
  names: ['dart'],
  tags: ['target'],
  description: 'bullseye',
  category: 'Activities'
}, {
  emoji: '🪀',
  names: ['yo_yo'],
  tags: [],
  description: 'yo-yo',
  category: 'Activities'
}, {
  emoji: '🪁',
  names: ['kite'],
  tags: [],
  description: 'kite',
  category: 'Activities'
}, {
  emoji: '🎱',
  names: ['8ball'],
  tags: ['pool', 'billiards'],
  description: 'pool 8 ball',
  category: 'Activities'
}, {
  emoji: '🔮',
  names: ['crystal_ball'],
  tags: ['fortune'],
  description: 'crystal ball',
  category: 'Activities'
}, {
  emoji: '🪄',
  names: ['magic_wand'],
  tags: [],
  description: 'magic wand',
  category: 'Activities'
}, {
  emoji: '🧿',
  names: ['nazar_amulet'],
  tags: [],
  description: 'nazar amulet',
  category: 'Activities'
}, {
  emoji: '🎮',
  names: ['video_game'],
  tags: ['play', 'controller', 'console'],
  description: 'video game',
  category: 'Activities'
}, {
  emoji: '🕹️',
  names: ['joystick'],
  tags: [],
  description: 'joystick',
  category: 'Activities'
}, {
  emoji: '🎰',
  names: ['slot_machine'],
  tags: [],
  description: 'slot machine',
  category: 'Activities'
}, {
  emoji: '🎲',
  names: ['game_die'],
  tags: ['dice', 'gambling'],
  description: 'game die',
  category: 'Activities'
}, {
  emoji: '🧩',
  names: ['jigsaw'],
  tags: [],
  description: 'puzzle piece',
  category: 'Activities'
}, {
  emoji: '🧸',
  names: ['teddy_bear'],
  tags: [],
  description: 'teddy bear',
  category: 'Activities'
}, {
  emoji: '🪅',
  names: ['pinata'],
  tags: [],
  description: 'piñata',
  category: 'Activities'
}, {
  emoji: '🪆',
  names: ['nesting_dolls'],
  tags: [],
  description: 'nesting dolls',
  category: 'Activities'
}, {
  emoji: '♠️',
  names: ['spades'],
  tags: [],
  description: 'spade suit',
  category: 'Activities'
}, {
  emoji: '♥️',
  names: ['hearts'],
  tags: [],
  description: 'heart suit',
  category: 'Activities'
}, {
  emoji: '♦️',
  names: ['diamonds'],
  tags: [],
  description: 'diamond suit',
  category: 'Activities'
}, {
  emoji: '♣️',
  names: ['clubs'],
  tags: [],
  description: 'club suit',
  category: 'Activities'
}, {
  emoji: '♟️',
  names: ['chess_pawn'],
  tags: [],
  description: 'chess pawn',
  category: 'Activities'
}, {
  emoji: '🃏',
  names: ['black_joker'],
  tags: [],
  description: 'joker',
  category: 'Activities'
}, {
  emoji: '🀄',
  names: ['mahjong'],
  tags: [],
  description: 'mahjong red dragon',
  category: 'Activities'
}, {
  emoji: '🎴',
  names: ['flower_playing_cards'],
  tags: [],
  description: 'flower playing cards',
  category: 'Activities'
}, {
  emoji: '🎭',
  names: ['performing_arts'],
  tags: ['theater', 'drama'],
  description: 'performing arts',
  category: 'Activities'
}, {
  emoji: '🖼️',
  names: ['framed_picture'],
  tags: [],
  description: 'framed picture',
  category: 'Activities'
}, {
  emoji: '🎨',
  names: ['art'],
  tags: ['design', 'paint'],
  description: 'artist palette',
  category: 'Activities'
}, {
  emoji: '🧵',
  names: ['thread'],
  tags: [],
  description: 'thread',
  category: 'Activities'
}, {
  emoji: '🪡',
  names: ['sewing_needle'],
  tags: [],
  description: 'sewing needle',
  category: 'Activities'
}, {
  emoji: '🧶',
  names: ['yarn'],
  tags: [],
  description: 'yarn',
  category: 'Activities'
}, {
  emoji: '🪢',
  names: ['knot'],
  tags: [],
  description: 'knot',
  category: 'Activities'
}, {
  emoji: '👓',
  names: ['eyeglasses'],
  tags: ['glasses'],
  description: 'glasses',
  category: 'Objects'
}, {
  emoji: '🕶️',
  names: ['dark_sunglasses'],
  tags: [],
  description: 'sunglasses',
  category: 'Objects'
}, {
  emoji: '🥽',
  names: ['goggles'],
  tags: [],
  description: 'goggles',
  category: 'Objects'
}, {
  emoji: '🥼',
  names: ['lab_coat'],
  tags: [],
  description: 'lab coat',
  category: 'Objects'
}, {
  emoji: '🦺',
  names: ['safety_vest'],
  tags: [],
  description: 'safety vest',
  category: 'Objects'
}, {
  emoji: '👔',
  names: ['necktie'],
  tags: ['shirt', 'formal'],
  description: 'necktie',
  category: 'Objects'
}, {
  emoji: '👕',
  names: ['shirt', 'tshirt'],
  tags: [],
  description: 't-shirt',
  category: 'Objects'
}, {
  emoji: '👖',
  names: ['jeans'],
  tags: ['pants'],
  description: 'jeans',
  category: 'Objects'
}, {
  emoji: '🧣',
  names: ['scarf'],
  tags: [],
  description: 'scarf',
  category: 'Objects'
}, {
  emoji: '🧤',
  names: ['gloves'],
  tags: [],
  description: 'gloves',
  category: 'Objects'
}, {
  emoji: '🧥',
  names: ['coat'],
  tags: [],
  description: 'coat',
  category: 'Objects'
}, {
  emoji: '🧦',
  names: ['socks'],
  tags: [],
  description: 'socks',
  category: 'Objects'
}, {
  emoji: '👗',
  names: ['dress'],
  tags: [],
  description: 'dress',
  category: 'Objects'
}, {
  emoji: '👘',
  names: ['kimono'],
  tags: [],
  description: 'kimono',
  category: 'Objects'
}, {
  emoji: '🥻',
  names: ['sari'],
  tags: [],
  description: 'sari',
  category: 'Objects'
}, {
  emoji: '🩱',
  names: ['one_piece_swimsuit'],
  tags: [],
  description: 'one-piece swimsuit',
  category: 'Objects'
}, {
  emoji: '🩲',
  names: ['swim_brief'],
  tags: [],
  description: 'briefs',
  category: 'Objects'
}, {
  emoji: '🩳',
  names: ['shorts'],
  tags: [],
  description: 'shorts',
  category: 'Objects'
}, {
  emoji: '👙',
  names: ['bikini'],
  tags: ['beach'],
  description: 'bikini',
  category: 'Objects'
}, {
  emoji: '👚',
  names: ['womans_clothes'],
  tags: [],
  description: 'woman’s clothes',
  category: 'Objects'
}, {
  emoji: '👛',
  names: ['purse'],
  tags: [],
  description: 'purse',
  category: 'Objects'
}, {
  emoji: '👜',
  names: ['handbag'],
  tags: ['bag'],
  description: 'handbag',
  category: 'Objects'
}, {
  emoji: '👝',
  names: ['pouch'],
  tags: ['bag'],
  description: 'clutch bag',
  category: 'Objects'
}, {
  emoji: '🛍️',
  names: ['shopping'],
  tags: ['bags'],
  description: 'shopping bags',
  category: 'Objects'
}, {
  emoji: '🎒',
  names: ['school_satchel'],
  tags: [],
  description: 'backpack',
  category: 'Objects'
}, {
  emoji: '🩴',
  names: ['thong_sandal'],
  tags: [],
  description: 'thong sandal',
  category: 'Objects'
}, {
  emoji: '👞',
  names: ['mans_shoe', 'shoe'],
  tags: [],
  description: 'man’s shoe',
  category: 'Objects'
}, {
  emoji: '👟',
  names: ['athletic_shoe'],
  tags: ['sneaker', 'sport', 'running'],
  description: 'running shoe',
  category: 'Objects'
}, {
  emoji: '🥾',
  names: ['hiking_boot'],
  tags: [],
  description: 'hiking boot',
  category: 'Objects'
}, {
  emoji: '🥿',
  names: ['flat_shoe'],
  tags: [],
  description: 'flat shoe',
  category: 'Objects'
}, {
  emoji: '👠',
  names: ['high_heel'],
  tags: ['shoe'],
  description: 'high-heeled shoe',
  category: 'Objects'
}, {
  emoji: '👡',
  names: ['sandal'],
  tags: ['shoe'],
  description: 'woman’s sandal',
  category: 'Objects'
}, {
  emoji: '🩰',
  names: ['ballet_shoes'],
  tags: [],
  description: 'ballet shoes',
  category: 'Objects'
}, {
  emoji: '👢',
  names: ['boot'],
  tags: [],
  description: 'woman’s boot',
  category: 'Objects'
}, {
  emoji: '👑',
  names: ['crown'],
  tags: ['king', 'queen', 'royal'],
  description: 'crown',
  category: 'Objects'
}, {
  emoji: '👒',
  names: ['womans_hat'],
  tags: [],
  description: 'woman’s hat',
  category: 'Objects'
}, {
  emoji: '🎩',
  names: ['tophat'],
  tags: ['hat', 'classy'],
  description: 'top hat',
  category: 'Objects'
}, {
  emoji: '🎓',
  names: ['mortar_board'],
  tags: ['education', 'college', 'university', 'graduation'],
  description: 'graduation cap',
  category: 'Objects'
}, {
  emoji: '🧢',
  names: ['billed_cap'],
  tags: [],
  description: 'billed cap',
  category: 'Objects'
}, {
  emoji: '🪖',
  names: ['military_helmet'],
  tags: [],
  description: 'military helmet',
  category: 'Objects'
}, {
  emoji: '⛑️',
  names: ['rescue_worker_helmet'],
  tags: [],
  description: 'rescue worker’s helmet',
  category: 'Objects'
}, {
  emoji: '📿',
  names: ['prayer_beads'],
  tags: [],
  description: 'prayer beads',
  category: 'Objects'
}, {
  emoji: '💄',
  names: ['lipstick'],
  tags: ['makeup'],
  description: 'lipstick',
  category: 'Objects'
}, {
  emoji: '💍',
  names: ['ring'],
  tags: ['wedding', 'marriage', 'engaged'],
  description: 'ring',
  category: 'Objects'
}, {
  emoji: '💎',
  names: ['gem'],
  tags: ['diamond'],
  description: 'gem stone',
  category: 'Objects'
}, {
  emoji: '🔇',
  names: ['mute'],
  tags: ['sound', 'volume'],
  description: 'muted speaker',
  category: 'Objects'
}, {
  emoji: '🔈',
  names: ['speaker'],
  tags: [],
  description: 'speaker low volume',
  category: 'Objects'
}, {
  emoji: '🔉',
  names: ['sound'],
  tags: ['volume'],
  description: 'speaker medium volume',
  category: 'Objects'
}, {
  emoji: '🔊',
  names: ['loud_sound'],
  tags: ['volume'],
  description: 'speaker high volume',
  category: 'Objects'
}, {
  emoji: '📢',
  names: ['loudspeaker'],
  tags: ['announcement'],
  description: 'loudspeaker',
  category: 'Objects'
}, {
  emoji: '📣',
  names: ['mega'],
  tags: [],
  description: 'megaphone',
  category: 'Objects'
}, {
  emoji: '📯',
  names: ['postal_horn'],
  tags: [],
  description: 'postal horn',
  category: 'Objects'
}, {
  emoji: '🔔',
  names: ['bell'],
  tags: ['sound', 'notification'],
  description: 'bell',
  category: 'Objects'
}, {
  emoji: '🔕',
  names: ['no_bell'],
  tags: ['volume', 'off'],
  description: 'bell with slash',
  category: 'Objects'
}, {
  emoji: '🎼',
  names: ['musical_score'],
  tags: [],
  description: 'musical score',
  category: 'Objects'
}, {
  emoji: '🎵',
  names: ['musical_note'],
  tags: [],
  description: 'musical note',
  category: 'Objects'
}, {
  emoji: '🎶',
  names: ['notes'],
  tags: ['music'],
  description: 'musical notes',
  category: 'Objects'
}, {
  emoji: '🎙️',
  names: ['studio_microphone'],
  tags: ['podcast'],
  description: 'studio microphone',
  category: 'Objects'
}, {
  emoji: '🎚️',
  names: ['level_slider'],
  tags: [],
  description: 'level slider',
  category: 'Objects'
}, {
  emoji: '🎛️',
  names: ['control_knobs'],
  tags: [],
  description: 'control knobs',
  category: 'Objects'
}, {
  emoji: '🎤',
  names: ['microphone'],
  tags: ['sing'],
  description: 'microphone',
  category: 'Objects'
}, {
  emoji: '🎧',
  names: ['headphones'],
  tags: ['music', 'earphones'],
  description: 'headphone',
  category: 'Objects'
}, {
  emoji: '📻',
  names: ['radio'],
  tags: ['podcast'],
  description: 'radio',
  category: 'Objects'
}, {
  emoji: '🎷',
  names: ['saxophone'],
  tags: [],
  description: 'saxophone',
  category: 'Objects'
}, {
  emoji: '🪗',
  names: ['accordion'],
  tags: [],
  description: 'accordion',
  category: 'Objects'
}, {
  emoji: '🎸',
  names: ['guitar'],
  tags: ['rock'],
  description: 'guitar',
  category: 'Objects'
}, {
  emoji: '🎹',
  names: ['musical_keyboard'],
  tags: ['piano'],
  description: 'musical keyboard',
  category: 'Objects'
}, {
  emoji: '🎺',
  names: ['trumpet'],
  tags: [],
  description: 'trumpet',
  category: 'Objects'
}, {
  emoji: '🎻',
  names: ['violin'],
  tags: [],
  description: 'violin',
  category: 'Objects'
}, {
  emoji: '🪕',
  names: ['banjo'],
  tags: [],
  description: 'banjo',
  category: 'Objects'
}, {
  emoji: '🥁',
  names: ['drum'],
  tags: [],
  description: 'drum',
  category: 'Objects'
}, {
  emoji: '🪘',
  names: ['long_drum'],
  tags: [],
  description: 'long drum',
  category: 'Objects'
}, {
  emoji: '📱',
  names: ['iphone'],
  tags: ['smartphone', 'mobile'],
  description: 'mobile phone',
  category: 'Objects'
}, {
  emoji: '📲',
  names: ['calling'],
  tags: ['call', 'incoming'],
  description: 'mobile phone with arrow',
  category: 'Objects'
}, {
  emoji: '☎️',
  names: ['phone', 'telephone'],
  tags: [],
  description: 'telephone',
  category: 'Objects'
}, {
  emoji: '📞',
  names: ['telephone_receiver'],
  tags: ['phone', 'call'],
  description: 'telephone receiver',
  category: 'Objects'
}, {
  emoji: '📟',
  names: ['pager'],
  tags: [],
  description: 'pager',
  category: 'Objects'
}, {
  emoji: '📠',
  names: ['fax'],
  tags: [],
  description: 'fax machine',
  category: 'Objects'
}, {
  emoji: '🔋',
  names: ['battery'],
  tags: ['power'],
  description: 'battery',
  category: 'Objects'
}, {
  emoji: '🔌',
  names: ['electric_plug'],
  tags: [],
  description: 'electric plug',
  category: 'Objects'
}, {
  emoji: '💻',
  names: ['computer'],
  tags: ['desktop', 'screen'],
  description: 'laptop',
  category: 'Objects'
}, {
  emoji: '🖥️',
  names: ['desktop_computer'],
  tags: [],
  description: 'desktop computer',
  category: 'Objects'
}, {
  emoji: '🖨️',
  names: ['printer'],
  tags: [],
  description: 'printer',
  category: 'Objects'
}, {
  emoji: '⌨️',
  names: ['keyboard'],
  tags: [],
  description: 'keyboard',
  category: 'Objects'
}, {
  emoji: '🖱️',
  names: ['computer_mouse'],
  tags: [],
  description: 'computer mouse',
  category: 'Objects'
}, {
  emoji: '🖲️',
  names: ['trackball'],
  tags: [],
  description: 'trackball',
  category: 'Objects'
}, {
  emoji: '💽',
  names: ['minidisc'],
  tags: [],
  description: 'computer disk',
  category: 'Objects'
}, {
  emoji: '💾',
  names: ['floppy_disk'],
  tags: ['save'],
  description: 'floppy disk',
  category: 'Objects'
}, {
  emoji: '💿',
  names: ['cd'],
  tags: [],
  description: 'optical disk',
  category: 'Objects'
}, {
  emoji: '📀',
  names: ['dvd'],
  tags: [],
  description: 'dvd',
  category: 'Objects'
}, {
  emoji: '🧮',
  names: ['abacus'],
  tags: [],
  description: 'abacus',
  category: 'Objects'
}, {
  emoji: '🎥',
  names: ['movie_camera'],
  tags: ['film', 'video'],
  description: 'movie camera',
  category: 'Objects'
}, {
  emoji: '🎞️',
  names: ['film_strip'],
  tags: [],
  description: 'film frames',
  category: 'Objects'
}, {
  emoji: '📽️',
  names: ['film_projector'],
  tags: [],
  description: 'film projector',
  category: 'Objects'
}, {
  emoji: '🎬',
  names: ['clapper'],
  tags: ['film'],
  description: 'clapper board',
  category: 'Objects'
}, {
  emoji: '📺',
  names: ['tv'],
  tags: [],
  description: 'television',
  category: 'Objects'
}, {
  emoji: '📷',
  names: ['camera'],
  tags: ['photo'],
  description: 'camera',
  category: 'Objects'
}, {
  emoji: '📸',
  names: ['camera_flash'],
  tags: ['photo'],
  description: 'camera with flash',
  category: 'Objects'
}, {
  emoji: '📹',
  names: ['video_camera'],
  tags: [],
  description: 'video camera',
  category: 'Objects'
}, {
  emoji: '📼',
  names: ['vhs'],
  tags: [],
  description: 'videocassette',
  category: 'Objects'
}, {
  emoji: '🔍',
  names: ['mag'],
  tags: ['search', 'zoom'],
  description: 'magnifying glass tilted left',
  category: 'Objects'
}, {
  emoji: '🔎',
  names: ['mag_right'],
  tags: [],
  description: 'magnifying glass tilted right',
  category: 'Objects'
}, {
  emoji: '🕯️',
  names: ['candle'],
  tags: [],
  description: 'candle',
  category: 'Objects'
}, {
  emoji: '💡',
  names: ['bulb'],
  tags: ['idea', 'light'],
  description: 'light bulb',
  category: 'Objects'
}, {
  emoji: '🔦',
  names: ['flashlight'],
  tags: [],
  description: 'flashlight',
  category: 'Objects'
}, {
  emoji: '🏮',
  names: ['izakaya_lantern', 'lantern'],
  tags: [],
  description: 'red paper lantern',
  category: 'Objects'
}, {
  emoji: '🪔',
  names: ['diya_lamp'],
  tags: [],
  description: 'diya lamp',
  category: 'Objects'
}, {
  emoji: '📔',
  names: ['notebook_with_decorative_cover'],
  tags: [],
  description: 'notebook with decorative cover',
  category: 'Objects'
}, {
  emoji: '📕',
  names: ['closed_book'],
  tags: [],
  description: 'closed book',
  category: 'Objects'
}, {
  emoji: '📖',
  names: ['book', 'open_book'],
  tags: [],
  description: 'open book',
  category: 'Objects'
}, {
  emoji: '📗',
  names: ['green_book'],
  tags: [],
  description: 'green book',
  category: 'Objects'
}, {
  emoji: '📘',
  names: ['blue_book'],
  tags: [],
  description: 'blue book',
  category: 'Objects'
}, {
  emoji: '📙',
  names: ['orange_book'],
  tags: [],
  description: 'orange book',
  category: 'Objects'
}, {
  emoji: '📚',
  names: ['books'],
  tags: ['library'],
  description: 'books',
  category: 'Objects'
}, {
  emoji: '📓',
  names: ['notebook'],
  tags: [],
  description: 'notebook',
  category: 'Objects'
}, {
  emoji: '📒',
  names: ['ledger'],
  tags: [],
  description: 'ledger',
  category: 'Objects'
}, {
  emoji: '📃',
  names: ['page_with_curl'],
  tags: [],
  description: 'page with curl',
  category: 'Objects'
}, {
  emoji: '📜',
  names: ['scroll'],
  tags: ['document'],
  description: 'scroll',
  category: 'Objects'
}, {
  emoji: '📄',
  names: ['page_facing_up'],
  tags: ['document'],
  description: 'page facing up',
  category: 'Objects'
}, {
  emoji: '📰',
  names: ['newspaper'],
  tags: ['press'],
  description: 'newspaper',
  category: 'Objects'
}, {
  emoji: '🗞️',
  names: ['newspaper_roll'],
  tags: ['press'],
  description: 'rolled-up newspaper',
  category: 'Objects'
}, {
  emoji: '📑',
  names: ['bookmark_tabs'],
  tags: [],
  description: 'bookmark tabs',
  category: 'Objects'
}, {
  emoji: '🔖',
  names: ['bookmark'],
  tags: [],
  description: 'bookmark',
  category: 'Objects'
}, {
  emoji: '🏷️',
  names: ['label'],
  tags: ['tag'],
  description: 'label',
  category: 'Objects'
}, {
  emoji: '💰',
  names: ['moneybag'],
  tags: ['dollar', 'cream'],
  description: 'money bag',
  category: 'Objects'
}, {
  emoji: '🪙',
  names: ['coin'],
  tags: [],
  description: 'coin',
  category: 'Objects'
}, {
  emoji: '💴',
  names: ['yen'],
  tags: [],
  description: 'yen banknote',
  category: 'Objects'
}, {
  emoji: '💵',
  names: ['dollar'],
  tags: ['money'],
  description: 'dollar banknote',
  category: 'Objects'
}, {
  emoji: '💶',
  names: ['euro'],
  tags: [],
  description: 'euro banknote',
  category: 'Objects'
}, {
  emoji: '💷',
  names: ['pound'],
  tags: [],
  description: 'pound banknote',
  category: 'Objects'
}, {
  emoji: '💸',
  names: ['money_with_wings'],
  tags: ['dollar'],
  description: 'money with wings',
  category: 'Objects'
}, {
  emoji: '💳',
  names: ['credit_card'],
  tags: ['subscription'],
  description: 'credit card',
  category: 'Objects'
}, {
  emoji: '🧾',
  names: ['receipt'],
  tags: [],
  description: 'receipt',
  category: 'Objects'
}, {
  emoji: '💹',
  names: ['chart'],
  tags: [],
  description: 'chart increasing with yen',
  category: 'Objects'
}, {
  emoji: '✉️',
  names: ['envelope'],
  tags: ['letter', 'email'],
  description: 'envelope',
  category: 'Objects'
}, {
  emoji: '📧',
  names: ['email', 'e-mail'],
  tags: [],
  description: 'e-mail',
  category: 'Objects'
}, {
  emoji: '📨',
  names: ['incoming_envelope'],
  tags: [],
  description: 'incoming envelope',
  category: 'Objects'
}, {
  emoji: '📩',
  names: ['envelope_with_arrow'],
  tags: [],
  description: 'envelope with arrow',
  category: 'Objects'
}, {
  emoji: '📤',
  names: ['outbox_tray'],
  tags: [],
  description: 'outbox tray',
  category: 'Objects'
}, {
  emoji: '📥',
  names: ['inbox_tray'],
  tags: [],
  description: 'inbox tray',
  category: 'Objects'
}, {
  emoji: '📦',
  names: ['package'],
  tags: ['shipping'],
  description: 'package',
  category: 'Objects'
}, {
  emoji: '📫',
  names: ['mailbox'],
  tags: [],
  description: 'closed mailbox with raised flag',
  category: 'Objects'
}, {
  emoji: '📪',
  names: ['mailbox_closed'],
  tags: [],
  description: 'closed mailbox with lowered flag',
  category: 'Objects'
}, {
  emoji: '📬',
  names: ['mailbox_with_mail'],
  tags: [],
  description: 'open mailbox with raised flag',
  category: 'Objects'
}, {
  emoji: '📭',
  names: ['mailbox_with_no_mail'],
  tags: [],
  description: 'open mailbox with lowered flag',
  category: 'Objects'
}, {
  emoji: '📮',
  names: ['postbox'],
  tags: [],
  description: 'postbox',
  category: 'Objects'
}, {
  emoji: '🗳️',
  names: ['ballot_box'],
  tags: [],
  description: 'ballot box with ballot',
  category: 'Objects'
}, {
  emoji: '✏️',
  names: ['pencil2'],
  tags: [],
  description: 'pencil',
  category: 'Objects'
}, {
  emoji: '✒️',
  names: ['black_nib'],
  tags: [],
  description: 'black nib',
  category: 'Objects'
}, {
  emoji: '🖋️',
  names: ['fountain_pen'],
  tags: [],
  description: 'fountain pen',
  category: 'Objects'
}, {
  emoji: '🖊️',
  names: ['pen'],
  tags: [],
  description: 'pen',
  category: 'Objects'
}, {
  emoji: '🖌️',
  names: ['paintbrush'],
  tags: [],
  description: 'paintbrush',
  category: 'Objects'
}, {
  emoji: '🖍️',
  names: ['crayon'],
  tags: [],
  description: 'crayon',
  category: 'Objects'
}, {
  emoji: '📝',
  names: ['memo', 'pencil'],
  tags: ['document', 'note'],
  description: 'memo',
  category: 'Objects'
}, {
  emoji: '💼',
  names: ['briefcase'],
  tags: ['business'],
  description: 'briefcase',
  category: 'Objects'
}, {
  emoji: '📁',
  names: ['file_folder'],
  tags: ['directory'],
  description: 'file folder',
  category: 'Objects'
}, {
  emoji: '📂',
  names: ['open_file_folder'],
  tags: [],
  description: 'open file folder',
  category: 'Objects'
}, {
  emoji: '🗂️',
  names: ['card_index_dividers'],
  tags: [],
  description: 'card index dividers',
  category: 'Objects'
}, {
  emoji: '📅',
  names: ['date'],
  tags: ['calendar', 'schedule'],
  description: 'calendar',
  category: 'Objects'
}, {
  emoji: '📆',
  names: ['calendar'],
  tags: ['schedule'],
  description: 'tear-off calendar',
  category: 'Objects'
}, {
  emoji: '🗒️',
  names: ['spiral_notepad'],
  tags: [],
  description: 'spiral notepad',
  category: 'Objects'
}, {
  emoji: '🗓️',
  names: ['spiral_calendar'],
  tags: [],
  description: 'spiral calendar',
  category: 'Objects'
}, {
  emoji: '📇',
  names: ['card_index'],
  tags: [],
  description: 'card index',
  category: 'Objects'
}, {
  emoji: '📈',
  names: ['chart_with_upwards_trend'],
  tags: ['graph', 'metrics'],
  description: 'chart increasing',
  category: 'Objects'
}, {
  emoji: '📉',
  names: ['chart_with_downwards_trend'],
  tags: ['graph', 'metrics'],
  description: 'chart decreasing',
  category: 'Objects'
}, {
  emoji: '📊',
  names: ['bar_chart'],
  tags: ['stats', 'metrics'],
  description: 'bar chart',
  category: 'Objects'
}, {
  emoji: '📋',
  names: ['clipboard'],
  tags: [],
  description: 'clipboard',
  category: 'Objects'
}, {
  emoji: '📌',
  names: ['pushpin'],
  tags: ['location'],
  description: 'pushpin',
  category: 'Objects'
}, {
  emoji: '📍',
  names: ['round_pushpin'],
  tags: ['location'],
  description: 'round pushpin',
  category: 'Objects'
}, {
  emoji: '📎',
  names: ['paperclip'],
  tags: [],
  description: 'paperclip',
  category: 'Objects'
}, {
  emoji: '🖇️',
  names: ['paperclips'],
  tags: [],
  description: 'linked paperclips',
  category: 'Objects'
}, {
  emoji: '📏',
  names: ['straight_ruler'],
  tags: [],
  description: 'straight ruler',
  category: 'Objects'
}, {
  emoji: '📐',
  names: ['triangular_ruler'],
  tags: [],
  description: 'triangular ruler',
  category: 'Objects'
}, {
  emoji: '✂️',
  names: ['scissors'],
  tags: ['cut'],
  description: 'scissors',
  category: 'Objects'
}, {
  emoji: '🗃️',
  names: ['card_file_box'],
  tags: [],
  description: 'card file box',
  category: 'Objects'
}, {
  emoji: '🗄️',
  names: ['file_cabinet'],
  tags: [],
  description: 'file cabinet',
  category: 'Objects'
}, {
  emoji: '🗑️',
  names: ['wastebasket'],
  tags: ['trash'],
  description: 'wastebasket',
  category: 'Objects'
}, {
  emoji: '🔒',
  names: ['lock'],
  tags: ['security', 'private'],
  description: 'locked',
  category: 'Objects'
}, {
  emoji: '🔓',
  names: ['unlock'],
  tags: ['security'],
  description: 'unlocked',
  category: 'Objects'
}, {
  emoji: '🔏',
  names: ['lock_with_ink_pen'],
  tags: [],
  description: 'locked with pen',
  category: 'Objects'
}, {
  emoji: '🔐',
  names: ['closed_lock_with_key'],
  tags: ['security'],
  description: 'locked with key',
  category: 'Objects'
}, {
  emoji: '🔑',
  names: ['key'],
  tags: ['lock', 'password'],
  description: 'key',
  category: 'Objects'
}, {
  emoji: '🗝️',
  names: ['old_key'],
  tags: [],
  description: 'old key',
  category: 'Objects'
}, {
  emoji: '🔨',
  names: ['hammer'],
  tags: ['tool'],
  description: 'hammer',
  category: 'Objects'
}, {
  emoji: '🪓',
  names: ['axe'],
  tags: [],
  description: 'axe',
  category: 'Objects'
}, {
  emoji: '⛏️',
  names: ['pick'],
  tags: [],
  description: 'pick',
  category: 'Objects'
}, {
  emoji: '⚒️',
  names: ['hammer_and_pick'],
  tags: [],
  description: 'hammer and pick',
  category: 'Objects'
}, {
  emoji: '🛠️',
  names: ['hammer_and_wrench'],
  tags: [],
  description: 'hammer and wrench',
  category: 'Objects'
}, {
  emoji: '🗡️',
  names: ['dagger'],
  tags: [],
  description: 'dagger',
  category: 'Objects'
}, {
  emoji: '⚔️',
  names: ['crossed_swords'],
  tags: [],
  description: 'crossed swords',
  category: 'Objects'
}, {
  emoji: '🔫',
  names: ['gun'],
  tags: ['shoot', 'weapon'],
  description: 'water pistol',
  category: 'Objects'
}, {
  emoji: '🪃',
  names: ['boomerang'],
  tags: [],
  description: 'boomerang',
  category: 'Objects'
}, {
  emoji: '🏹',
  names: ['bow_and_arrow'],
  tags: ['archery'],
  description: 'bow and arrow',
  category: 'Objects'
}, {
  emoji: '🛡️',
  names: ['shield'],
  tags: [],
  description: 'shield',
  category: 'Objects'
}, {
  emoji: '🪚',
  names: ['carpentry_saw'],
  tags: [],
  description: 'carpentry saw',
  category: 'Objects'
}, {
  emoji: '🔧',
  names: ['wrench'],
  tags: ['tool'],
  description: 'wrench',
  category: 'Objects'
}, {
  emoji: '🪛',
  names: ['screwdriver'],
  tags: [],
  description: 'screwdriver',
  category: 'Objects'
}, {
  emoji: '🔩',
  names: ['nut_and_bolt'],
  tags: [],
  description: 'nut and bolt',
  category: 'Objects'
}, {
  emoji: '⚙️',
  names: ['gear'],
  tags: [],
  description: 'gear',
  category: 'Objects'
}, {
  emoji: '🗜️',
  names: ['clamp'],
  tags: [],
  description: 'clamp',
  category: 'Objects'
}, {
  emoji: '⚖️',
  names: ['balance_scale'],
  tags: [],
  description: 'balance scale',
  category: 'Objects'
}, {
  emoji: '🦯',
  names: ['probing_cane'],
  tags: [],
  description: 'white cane',
  category: 'Objects'
}, {
  emoji: '🔗',
  names: ['link'],
  tags: [],
  description: 'link',
  category: 'Objects'
}, {
  emoji: '⛓️',
  names: ['chains'],
  tags: [],
  description: 'chains',
  category: 'Objects'
}, {
  emoji: '🪝',
  names: ['hook'],
  tags: [],
  description: 'hook',
  category: 'Objects'
}, {
  emoji: '🧰',
  names: ['toolbox'],
  tags: [],
  description: 'toolbox',
  category: 'Objects'
}, {
  emoji: '🧲',
  names: ['magnet'],
  tags: [],
  description: 'magnet',
  category: 'Objects'
}, {
  emoji: '🪜',
  names: ['ladder'],
  tags: [],
  description: 'ladder',
  category: 'Objects'
}, {
  emoji: '⚗️',
  names: ['alembic'],
  tags: [],
  description: 'alembic',
  category: 'Objects'
}, {
  emoji: '🧪',
  names: ['test_tube'],
  tags: [],
  description: 'test tube',
  category: 'Objects'
}, {
  emoji: '🧫',
  names: ['petri_dish'],
  tags: [],
  description: 'petri dish',
  category: 'Objects'
}, {
  emoji: '🧬',
  names: ['dna'],
  tags: [],
  description: 'dna',
  category: 'Objects'
}, {
  emoji: '🔬',
  names: ['microscope'],
  tags: ['science', 'laboratory', 'investigate'],
  description: 'microscope',
  category: 'Objects'
}, {
  emoji: '🔭',
  names: ['telescope'],
  tags: [],
  description: 'telescope',
  category: 'Objects'
}, {
  emoji: '📡',
  names: ['satellite'],
  tags: ['signal'],
  description: 'satellite antenna',
  category: 'Objects'
}, {
  emoji: '💉',
  names: ['syringe'],
  tags: ['health', 'hospital', 'needle'],
  description: 'syringe',
  category: 'Objects'
}, {
  emoji: '🩸',
  names: ['drop_of_blood'],
  tags: [],
  description: 'drop of blood',
  category: 'Objects'
}, {
  emoji: '💊',
  names: ['pill'],
  tags: ['health', 'medicine'],
  description: 'pill',
  category: 'Objects'
}, {
  emoji: '🩹',
  names: ['adhesive_bandage'],
  tags: [],
  description: 'adhesive bandage',
  category: 'Objects'
}, {
  emoji: '🩺',
  names: ['stethoscope'],
  tags: [],
  description: 'stethoscope',
  category: 'Objects'
}, {
  emoji: '🚪',
  names: ['door'],
  tags: [],
  description: 'door',
  category: 'Objects'
}, {
  emoji: '🛗',
  names: ['elevator'],
  tags: [],
  description: 'elevator',
  category: 'Objects'
}, {
  emoji: '🪞',
  names: ['mirror'],
  tags: [],
  description: 'mirror',
  category: 'Objects'
}, {
  emoji: '🪟',
  names: ['window'],
  tags: [],
  description: 'window',
  category: 'Objects'
}, {
  emoji: '🛏️',
  names: ['bed'],
  tags: [],
  description: 'bed',
  category: 'Objects'
}, {
  emoji: '🛋️',
  names: ['couch_and_lamp'],
  tags: [],
  description: 'couch and lamp',
  category: 'Objects'
}, {
  emoji: '🪑',
  names: ['chair'],
  tags: [],
  description: 'chair',
  category: 'Objects'
}, {
  emoji: '🚽',
  names: ['toilet'],
  tags: ['wc'],
  description: 'toilet',
  category: 'Objects'
}, {
  emoji: '🪠',
  names: ['plunger'],
  tags: [],
  description: 'plunger',
  category: 'Objects'
}, {
  emoji: '🚿',
  names: ['shower'],
  tags: ['bath'],
  description: 'shower',
  category: 'Objects'
}, {
  emoji: '🛁',
  names: ['bathtub'],
  tags: [],
  description: 'bathtub',
  category: 'Objects'
}, {
  emoji: '🪤',
  names: ['mouse_trap'],
  tags: [],
  description: 'mouse trap',
  category: 'Objects'
}, {
  emoji: '🪒',
  names: ['razor'],
  tags: [],
  description: 'razor',
  category: 'Objects'
}, {
  emoji: '🧴',
  names: ['lotion_bottle'],
  tags: [],
  description: 'lotion bottle',
  category: 'Objects'
}, {
  emoji: '🧷',
  names: ['safety_pin'],
  tags: [],
  description: 'safety pin',
  category: 'Objects'
}, {
  emoji: '🧹',
  names: ['broom'],
  tags: [],
  description: 'broom',
  category: 'Objects'
}, {
  emoji: '🧺',
  names: ['basket'],
  tags: [],
  description: 'basket',
  category: 'Objects'
}, {
  emoji: '🧻',
  names: ['roll_of_paper'],
  tags: ['toilet'],
  description: 'roll of paper',
  category: 'Objects'
}, {
  emoji: '🪣',
  names: ['bucket'],
  tags: [],
  description: 'bucket',
  category: 'Objects'
}, {
  emoji: '🧼',
  names: ['soap'],
  tags: [],
  description: 'soap',
  category: 'Objects'
}, {
  emoji: '🪥',
  names: ['toothbrush'],
  tags: [],
  description: 'toothbrush',
  category: 'Objects'
}, {
  emoji: '🧽',
  names: ['sponge'],
  tags: [],
  description: 'sponge',
  category: 'Objects'
}, {
  emoji: '🧯',
  names: ['fire_extinguisher'],
  tags: [],
  description: 'fire extinguisher',
  category: 'Objects'
}, {
  emoji: '🛒',
  names: ['shopping_cart'],
  tags: [],
  description: 'shopping cart',
  category: 'Objects'
}, {
  emoji: '🚬',
  names: ['smoking'],
  tags: ['cigarette'],
  description: 'cigarette',
  category: 'Objects'
}, {
  emoji: '⚰️',
  names: ['coffin'],
  tags: ['funeral'],
  description: 'coffin',
  category: 'Objects'
}, {
  emoji: '🪦',
  names: ['headstone'],
  tags: [],
  description: 'headstone',
  category: 'Objects'
}, {
  emoji: '⚱️',
  names: ['funeral_urn'],
  tags: [],
  description: 'funeral urn',
  category: 'Objects'
}, {
  emoji: '🗿',
  names: ['moyai'],
  tags: ['stone'],
  description: 'moai',
  category: 'Objects'
}, {
  emoji: '🪧',
  names: ['placard'],
  tags: [],
  description: 'placard',
  category: 'Objects'
}, {
  emoji: '🏧',
  names: ['atm'],
  tags: [],
  description: 'ATM sign',
  category: 'Symbols'
}, {
  emoji: '🚮',
  names: ['put_litter_in_its_place'],
  tags: [],
  description: 'litter in bin sign',
  category: 'Symbols'
}, {
  emoji: '🚰',
  names: ['potable_water'],
  tags: [],
  description: 'potable water',
  category: 'Symbols'
}, {
  emoji: '♿',
  names: ['wheelchair'],
  tags: ['accessibility'],
  description: 'wheelchair symbol',
  category: 'Symbols'
}, {
  emoji: '🚹',
  names: ['mens'],
  tags: [],
  description: 'men’s room',
  category: 'Symbols'
}, {
  emoji: '🚺',
  names: ['womens'],
  tags: [],
  description: 'women’s room',
  category: 'Symbols'
}, {
  emoji: '🚻',
  names: ['restroom'],
  tags: ['toilet'],
  description: 'restroom',
  category: 'Symbols'
}, {
  emoji: '🚼',
  names: ['baby_symbol'],
  tags: [],
  description: 'baby symbol',
  category: 'Symbols'
}, {
  emoji: '🚾',
  names: ['wc'],
  tags: ['toilet', 'restroom'],
  description: 'water closet',
  category: 'Symbols'
}, {
  emoji: '🛂',
  names: ['passport_control'],
  tags: [],
  description: 'passport control',
  category: 'Symbols'
}, {
  emoji: '🛃',
  names: ['customs'],
  tags: [],
  description: 'customs',
  category: 'Symbols'
}, {
  emoji: '🛄',
  names: ['baggage_claim'],
  tags: ['airport'],
  description: 'baggage claim',
  category: 'Symbols'
}, {
  emoji: '🛅',
  names: ['left_luggage'],
  tags: [],
  description: 'left luggage',
  category: 'Symbols'
}, {
  emoji: '⚠️',
  names: ['warning'],
  tags: ['wip'],
  description: 'warning',
  category: 'Symbols'
}, {
  emoji: '🚸',
  names: ['children_crossing'],
  tags: [],
  description: 'children crossing',
  category: 'Symbols'
}, {
  emoji: '⛔',
  names: ['no_entry'],
  tags: ['limit'],
  description: 'no entry',
  category: 'Symbols'
}, {
  emoji: '🚫',
  names: ['no_entry_sign'],
  tags: ['block', 'forbidden'],
  description: 'prohibited',
  category: 'Symbols'
}, {
  emoji: '🚳',
  names: ['no_bicycles'],
  tags: [],
  description: 'no bicycles',
  category: 'Symbols'
}, {
  emoji: '🚭',
  names: ['no_smoking'],
  tags: [],
  description: 'no smoking',
  category: 'Symbols'
}, {
  emoji: '🚯',
  names: ['do_not_litter'],
  tags: [],
  description: 'no littering',
  category: 'Symbols'
}, {
  emoji: '🚱',
  names: ['non-potable_water'],
  tags: [],
  description: 'non-potable water',
  category: 'Symbols'
}, {
  emoji: '🚷',
  names: ['no_pedestrians'],
  tags: [],
  description: 'no pedestrians',
  category: 'Symbols'
}, {
  emoji: '📵',
  names: ['no_mobile_phones'],
  tags: [],
  description: 'no mobile phones',
  category: 'Symbols'
}, {
  emoji: '🔞',
  names: ['underage'],
  tags: [],
  description: 'no one under eighteen',
  category: 'Symbols'
}, {
  emoji: '☢️',
  names: ['radioactive'],
  tags: [],
  description: 'radioactive',
  category: 'Symbols'
}, {
  emoji: '☣️',
  names: ['biohazard'],
  tags: [],
  description: 'biohazard',
  category: 'Symbols'
}, {
  emoji: '⬆️',
  names: ['arrow_up'],
  tags: [],
  description: 'up arrow',
  category: 'Symbols'
}, {
  emoji: '↗️',
  names: ['arrow_upper_right'],
  tags: [],
  description: 'up-right arrow',
  category: 'Symbols'
}, {
  emoji: '➡️',
  names: ['arrow_right'],
  tags: [],
  description: 'right arrow',
  category: 'Symbols'
}, {
  emoji: '↘️',
  names: ['arrow_lower_right'],
  tags: [],
  description: 'down-right arrow',
  category: 'Symbols'
}, {
  emoji: '⬇️',
  names: ['arrow_down'],
  tags: [],
  description: 'down arrow',
  category: 'Symbols'
}, {
  emoji: '↙️',
  names: ['arrow_lower_left'],
  tags: [],
  description: 'down-left arrow',
  category: 'Symbols'
}, {
  emoji: '⬅️',
  names: ['arrow_left'],
  tags: [],
  description: 'left arrow',
  category: 'Symbols'
}, {
  emoji: '↖️',
  names: ['arrow_upper_left'],
  tags: [],
  description: 'up-left arrow',
  category: 'Symbols'
}, {
  emoji: '↕️',
  names: ['arrow_up_down'],
  tags: [],
  description: 'up-down arrow',
  category: 'Symbols'
}, {
  emoji: '↔️',
  names: ['left_right_arrow'],
  tags: [],
  description: 'left-right arrow',
  category: 'Symbols'
}, {
  emoji: '↩️',
  names: ['leftwards_arrow_with_hook'],
  tags: ['return'],
  description: 'right arrow curving left',
  category: 'Symbols'
}, {
  emoji: '↪️',
  names: ['arrow_right_hook'],
  tags: [],
  description: 'left arrow curving right',
  category: 'Symbols'
}, {
  emoji: '⤴️',
  names: ['arrow_heading_up'],
  tags: [],
  description: 'right arrow curving up',
  category: 'Symbols'
}, {
  emoji: '⤵️',
  names: ['arrow_heading_down'],
  tags: [],
  description: 'right arrow curving down',
  category: 'Symbols'
}, {
  emoji: '🔃',
  names: ['arrows_clockwise'],
  tags: [],
  description: 'clockwise vertical arrows',
  category: 'Symbols'
}, {
  emoji: '🔄',
  names: ['arrows_counterclockwise'],
  tags: ['sync'],
  description: 'counterclockwise arrows button',
  category: 'Symbols'
}, {
  emoji: '🔙',
  names: ['back'],
  tags: [],
  description: 'BACK arrow',
  category: 'Symbols'
}, {
  emoji: '🔚',
  names: ['end'],
  tags: [],
  description: 'END arrow',
  category: 'Symbols'
}, {
  emoji: '🔛',
  names: ['on'],
  tags: [],
  description: 'ON! arrow',
  category: 'Symbols'
}, {
  emoji: '🔜',
  names: ['soon'],
  tags: [],
  description: 'SOON arrow',
  category: 'Symbols'
}, {
  emoji: '🔝',
  names: ['top'],
  tags: [],
  description: 'TOP arrow',
  category: 'Symbols'
}, {
  emoji: '🛐',
  names: ['place_of_worship'],
  tags: [],
  description: 'place of worship',
  category: 'Symbols'
}, {
  emoji: '⚛️',
  names: ['atom_symbol'],
  tags: [],
  description: 'atom symbol',
  category: 'Symbols'
}, {
  emoji: '🕉️',
  names: ['om'],
  tags: [],
  description: 'om',
  category: 'Symbols'
}, {
  emoji: '✡️',
  names: ['star_of_david'],
  tags: [],
  description: 'star of David',
  category: 'Symbols'
}, {
  emoji: '☸️',
  names: ['wheel_of_dharma'],
  tags: [],
  description: 'wheel of dharma',
  category: 'Symbols'
}, {
  emoji: '☯️',
  names: ['yin_yang'],
  tags: [],
  description: 'yin yang',
  category: 'Symbols'
}, {
  emoji: '✝️',
  names: ['latin_cross'],
  tags: [],
  description: 'latin cross',
  category: 'Symbols'
}, {
  emoji: '☦️',
  names: ['orthodox_cross'],
  tags: [],
  description: 'orthodox cross',
  category: 'Symbols'
}, {
  emoji: '☪️',
  names: ['star_and_crescent'],
  tags: [],
  description: 'star and crescent',
  category: 'Symbols'
}, {
  emoji: '☮️',
  names: ['peace_symbol'],
  tags: [],
  description: 'peace symbol',
  category: 'Symbols'
}, {
  emoji: '🕎',
  names: ['menorah'],
  tags: [],
  description: 'menorah',
  category: 'Symbols'
}, {
  emoji: '🔯',
  names: ['six_pointed_star'],
  tags: [],
  description: 'dotted six-pointed star',
  category: 'Symbols'
}, {
  emoji: '♈',
  names: ['aries'],
  tags: [],
  description: 'Aries',
  category: 'Symbols'
}, {
  emoji: '♉',
  names: ['taurus'],
  tags: [],
  description: 'Taurus',
  category: 'Symbols'
}, {
  emoji: '♊',
  names: ['gemini'],
  tags: [],
  description: 'Gemini',
  category: 'Symbols'
}, {
  emoji: '♋',
  names: ['cancer'],
  tags: [],
  description: 'Cancer',
  category: 'Symbols'
}, {
  emoji: '♌',
  names: ['leo'],
  tags: [],
  description: 'Leo',
  category: 'Symbols'
}, {
  emoji: '♍',
  names: ['virgo'],
  tags: [],
  description: 'Virgo',
  category: 'Symbols'
}, {
  emoji: '♎',
  names: ['libra'],
  tags: [],
  description: 'Libra',
  category: 'Symbols'
}, {
  emoji: '♏',
  names: ['scorpius'],
  tags: [],
  description: 'Scorpio',
  category: 'Symbols'
}, {
  emoji: '♐',
  names: ['sagittarius'],
  tags: [],
  description: 'Sagittarius',
  category: 'Symbols'
}, {
  emoji: '♑',
  names: ['capricorn'],
  tags: [],
  description: 'Capricorn',
  category: 'Symbols'
}, {
  emoji: '♒',
  names: ['aquarius'],
  tags: [],
  description: 'Aquarius',
  category: 'Symbols'
}, {
  emoji: '♓',
  names: ['pisces'],
  tags: [],
  description: 'Pisces',
  category: 'Symbols'
}, {
  emoji: '⛎',
  names: ['ophiuchus'],
  tags: [],
  description: 'Ophiuchus',
  category: 'Symbols'
}, {
  emoji: '🔀',
  names: ['twisted_rightwards_arrows'],
  tags: ['shuffle'],
  description: 'shuffle tracks button',
  category: 'Symbols'
}, {
  emoji: '🔁',
  names: ['repeat'],
  tags: ['loop'],
  description: 'repeat button',
  category: 'Symbols'
}, {
  emoji: '🔂',
  names: ['repeat_one'],
  tags: [],
  description: 'repeat single button',
  category: 'Symbols'
}, {
  emoji: '▶️',
  names: ['arrow_forward'],
  tags: [],
  description: 'play button',
  category: 'Symbols'
}, {
  emoji: '⏩',
  names: ['fast_forward'],
  tags: [],
  description: 'fast-forward button',
  category: 'Symbols'
}, {
  emoji: '⏭️',
  names: ['next_track_button'],
  tags: [],
  description: 'next track button',
  category: 'Symbols'
}, {
  emoji: '⏯️',
  names: ['play_or_pause_button'],
  tags: [],
  description: 'play or pause button',
  category: 'Symbols'
}, {
  emoji: '◀️',
  names: ['arrow_backward'],
  tags: [],
  description: 'reverse button',
  category: 'Symbols'
}, {
  emoji: '⏪',
  names: ['rewind'],
  tags: [],
  description: 'fast reverse button',
  category: 'Symbols'
}, {
  emoji: '⏮️',
  names: ['previous_track_button'],
  tags: [],
  description: 'last track button',
  category: 'Symbols'
}, {
  emoji: '🔼',
  names: ['arrow_up_small'],
  tags: [],
  description: 'upwards button',
  category: 'Symbols'
}, {
  emoji: '⏫',
  names: ['arrow_double_up'],
  tags: [],
  description: 'fast up button',
  category: 'Symbols'
}, {
  emoji: '🔽',
  names: ['arrow_down_small'],
  tags: [],
  description: 'downwards button',
  category: 'Symbols'
}, {
  emoji: '⏬',
  names: ['arrow_double_down'],
  tags: [],
  description: 'fast down button',
  category: 'Symbols'
}, {
  emoji: '⏸️',
  names: ['pause_button'],
  tags: [],
  description: 'pause button',
  category: 'Symbols'
}, {
  emoji: '⏹️',
  names: ['stop_button'],
  tags: [],
  description: 'stop button',
  category: 'Symbols'
}, {
  emoji: '⏺️',
  names: ['record_button'],
  tags: [],
  description: 'record button',
  category: 'Symbols'
}, {
  emoji: '⏏️',
  names: ['eject_button'],
  tags: [],
  description: 'eject button',
  category: 'Symbols'
}, {
  emoji: '🎦',
  names: ['cinema'],
  tags: ['film', 'movie'],
  description: 'cinema',
  category: 'Symbols'
}, {
  emoji: '🔅',
  names: ['low_brightness'],
  tags: [],
  description: 'dim button',
  category: 'Symbols'
}, {
  emoji: '🔆',
  names: ['high_brightness'],
  tags: [],
  description: 'bright button',
  category: 'Symbols'
}, {
  emoji: '📶',
  names: ['signal_strength'],
  tags: ['wifi'],
  description: 'antenna bars',
  category: 'Symbols'
}, {
  emoji: '📳',
  names: ['vibration_mode'],
  tags: [],
  description: 'vibration mode',
  category: 'Symbols'
}, {
  emoji: '📴',
  names: ['mobile_phone_off'],
  tags: ['mute', 'off'],
  description: 'mobile phone off',
  category: 'Symbols'
}, {
  emoji: '♀️',
  names: ['female_sign'],
  tags: [],
  description: 'female sign',
  category: 'Symbols'
}, {
  emoji: '♂️',
  names: ['male_sign'],
  tags: [],
  description: 'male sign',
  category: 'Symbols'
}, {
  emoji: '⚧️',
  names: ['transgender_symbol'],
  tags: [],
  description: 'transgender symbol',
  category: 'Symbols'
}, {
  emoji: '✖️',
  names: ['heavy_multiplication_x'],
  tags: [],
  description: 'multiply',
  category: 'Symbols'
}, {
  emoji: '➕',
  names: ['heavy_plus_sign'],
  tags: [],
  description: 'plus',
  category: 'Symbols'
}, {
  emoji: '➖',
  names: ['heavy_minus_sign'],
  tags: [],
  description: 'minus',
  category: 'Symbols'
}, {
  emoji: '➗',
  names: ['heavy_division_sign'],
  tags: [],
  description: 'divide',
  category: 'Symbols'
}, {
  emoji: '♾️',
  names: ['infinity'],
  tags: [],
  description: 'infinity',
  category: 'Symbols'
}, {
  emoji: '‼️',
  names: ['bangbang'],
  tags: [],
  description: 'double exclamation mark',
  category: 'Symbols'
}, {
  emoji: '⁉️',
  names: ['interrobang'],
  tags: [],
  description: 'exclamation question mark',
  category: 'Symbols'
}, {
  emoji: '❓',
  names: ['question'],
  tags: ['confused'],
  description: 'red question mark',
  category: 'Symbols'
}, {
  emoji: '❔',
  names: ['grey_question'],
  tags: [],
  description: 'white question mark',
  category: 'Symbols'
}, {
  emoji: '❕',
  names: ['grey_exclamation'],
  tags: [],
  description: 'white exclamation mark',
  category: 'Symbols'
}, {
  emoji: '❗',
  names: ['exclamation', 'heavy_exclamation_mark'],
  tags: ['bang'],
  description: 'red exclamation mark',
  category: 'Symbols'
}, {
  emoji: '〰️',
  names: ['wavy_dash'],
  tags: [],
  description: 'wavy dash',
  category: 'Symbols'
}, {
  emoji: '💱',
  names: ['currency_exchange'],
  tags: [],
  description: 'currency exchange',
  category: 'Symbols'
}, {
  emoji: '💲',
  names: ['heavy_dollar_sign'],
  tags: [],
  description: 'heavy dollar sign',
  category: 'Symbols'
}, {
  emoji: '⚕️',
  names: ['medical_symbol'],
  tags: [],
  description: 'medical symbol',
  category: 'Symbols'
}, {
  emoji: '♻️',
  names: ['recycle'],
  tags: ['environment', 'green'],
  description: 'recycling symbol',
  category: 'Symbols'
}, {
  emoji: '⚜️',
  names: ['fleur_de_lis'],
  tags: [],
  description: 'fleur-de-lis',
  category: 'Symbols'
}, {
  emoji: '🔱',
  names: ['trident'],
  tags: [],
  description: 'trident emblem',
  category: 'Symbols'
}, {
  emoji: '📛',
  names: ['name_badge'],
  tags: [],
  description: 'name badge',
  category: 'Symbols'
}, {
  emoji: '🔰',
  names: ['beginner'],
  tags: [],
  description: 'Japanese symbol for beginner',
  category: 'Symbols'
}, {
  emoji: '⭕',
  names: ['o'],
  tags: [],
  description: 'hollow red circle',
  category: 'Symbols'
}, {
  emoji: '✅',
  names: ['white_check_mark'],
  tags: [],
  description: 'check mark button',
  category: 'Symbols'
}, {
  emoji: '☑️',
  names: ['ballot_box_with_check'],
  tags: [],
  description: 'check box with check',
  category: 'Symbols'
}, {
  emoji: '✔️',
  names: ['heavy_check_mark'],
  tags: [],
  description: 'check mark',
  category: 'Symbols'
}, {
  emoji: '❌',
  names: ['x'],
  tags: [],
  description: 'cross mark',
  category: 'Symbols'
}, {
  emoji: '❎',
  names: ['negative_squared_cross_mark'],
  tags: [],
  description: 'cross mark button',
  category: 'Symbols'
}, {
  emoji: '➰',
  names: ['curly_loop'],
  tags: [],
  description: 'curly loop',
  category: 'Symbols'
}, {
  emoji: '➿',
  names: ['loop'],
  tags: [],
  description: 'double curly loop',
  category: 'Symbols'
}, {
  emoji: '〽️',
  names: ['part_alternation_mark'],
  tags: [],
  description: 'part alternation mark',
  category: 'Symbols'
}, {
  emoji: '✳️',
  names: ['eight_spoked_asterisk'],
  tags: [],
  description: 'eight-spoked asterisk',
  category: 'Symbols'
}, {
  emoji: '✴️',
  names: ['eight_pointed_black_star'],
  tags: [],
  description: 'eight-pointed star',
  category: 'Symbols'
}, {
  emoji: '❇️',
  names: ['sparkle'],
  tags: [],
  description: 'sparkle',
  category: 'Symbols'
}, {
  emoji: '©️',
  names: ['copyright'],
  tags: [],
  description: 'copyright',
  category: 'Symbols'
}, {
  emoji: '®️',
  names: ['registered'],
  tags: [],
  description: 'registered',
  category: 'Symbols'
}, {
  emoji: '™️',
  names: ['tm'],
  tags: ['trademark'],
  description: 'trade mark',
  category: 'Symbols'
}, {
  emoji: '#️⃣',
  names: ['hash'],
  tags: ['number'],
  description: 'keycap: #',
  category: 'Symbols'
}, {
  emoji: '*️⃣',
  names: ['asterisk'],
  tags: [],
  description: 'keycap: *',
  category: 'Symbols'
}, {
  emoji: '0️⃣',
  names: ['zero'],
  tags: [],
  description: 'keycap: 0',
  category: 'Symbols'
}, {
  emoji: '1️⃣',
  names: ['one'],
  tags: [],
  description: 'keycap: 1',
  category: 'Symbols'
}, {
  emoji: '2️⃣',
  names: ['two'],
  tags: [],
  description: 'keycap: 2',
  category: 'Symbols'
}, {
  emoji: '3️⃣',
  names: ['three'],
  tags: [],
  description: 'keycap: 3',
  category: 'Symbols'
}, {
  emoji: '4️⃣',
  names: ['four'],
  tags: [],
  description: 'keycap: 4',
  category: 'Symbols'
}, {
  emoji: '5️⃣',
  names: ['five'],
  tags: [],
  description: 'keycap: 5',
  category: 'Symbols'
}, {
  emoji: '6️⃣',
  names: ['six'],
  tags: [],
  description: 'keycap: 6',
  category: 'Symbols'
}, {
  emoji: '7️⃣',
  names: ['seven'],
  tags: [],
  description: 'keycap: 7',
  category: 'Symbols'
}, {
  emoji: '8️⃣',
  names: ['eight'],
  tags: [],
  description: 'keycap: 8',
  category: 'Symbols'
}, {
  emoji: '9️⃣',
  names: ['nine'],
  tags: [],
  description: 'keycap: 9',
  category: 'Symbols'
}, {
  emoji: '🔟',
  names: ['keycap_ten'],
  tags: [],
  description: 'keycap: 10',
  category: 'Symbols'
}, {
  emoji: '🔠',
  names: ['capital_abcd'],
  tags: ['letters'],
  description: 'input latin uppercase',
  category: 'Symbols'
}, {
  emoji: '🔡',
  names: ['abcd'],
  tags: [],
  description: 'input latin lowercase',
  category: 'Symbols'
}, {
  emoji: '🔢',
  names: ['1234'],
  tags: ['numbers'],
  description: 'input numbers',
  category: 'Symbols'
}, {
  emoji: '🔣',
  names: ['symbols'],
  tags: [],
  description: 'input symbols',
  category: 'Symbols'
}, {
  emoji: '🔤',
  names: ['abc'],
  tags: ['alphabet'],
  description: 'input latin letters',
  category: 'Symbols'
}, {
  emoji: '🅰️',
  names: ['a'],
  tags: [],
  description: 'A button (blood type)',
  category: 'Symbols'
}, {
  emoji: '🆎',
  names: ['ab'],
  tags: [],
  description: 'AB button (blood type)',
  category: 'Symbols'
}, {
  emoji: '🅱️',
  names: ['b'],
  tags: [],
  description: 'B button (blood type)',
  category: 'Symbols'
}, {
  emoji: '🆑',
  names: ['cl'],
  tags: [],
  description: 'CL button',
  category: 'Symbols'
}, {
  emoji: '🆒',
  names: ['cool'],
  tags: [],
  description: 'COOL button',
  category: 'Symbols'
}, {
  emoji: '🆓',
  names: ['free'],
  tags: [],
  description: 'FREE button',
  category: 'Symbols'
}, {
  emoji: 'ℹ️',
  names: ['information_source'],
  tags: [],
  description: 'information',
  category: 'Symbols'
}, {
  emoji: '🆔',
  names: ['id'],
  tags: [],
  description: 'ID button',
  category: 'Symbols'
}, {
  emoji: 'Ⓜ️',
  names: ['m'],
  tags: [],
  description: 'circled M',
  category: 'Symbols'
}, {
  emoji: '🆕',
  names: ['new'],
  tags: ['fresh'],
  description: 'NEW button',
  category: 'Symbols'
}, {
  emoji: '🆖',
  names: ['ng'],
  tags: [],
  description: 'NG button',
  category: 'Symbols'
}, {
  emoji: '🅾️',
  names: ['o2'],
  tags: [],
  description: 'O button (blood type)',
  category: 'Symbols'
}, {
  emoji: '🆗',
  names: ['ok'],
  tags: ['yes'],
  description: 'OK button',
  category: 'Symbols'
}, {
  emoji: '🅿️',
  names: ['parking'],
  tags: [],
  description: 'P button',
  category: 'Symbols'
}, {
  emoji: '🆘',
  names: ['sos'],
  tags: ['help', 'emergency'],
  description: 'SOS button',
  category: 'Symbols'
}, {
  emoji: '🆙',
  names: ['up'],
  tags: [],
  description: 'UP! button',
  category: 'Symbols'
}, {
  emoji: '🆚',
  names: ['vs'],
  tags: [],
  description: 'VS button',
  category: 'Symbols'
}, {
  emoji: '🈁',
  names: ['koko'],
  tags: [],
  description: 'Japanese “here” button',
  category: 'Symbols'
}, {
  emoji: '🈂️',
  names: ['sa'],
  tags: [],
  description: 'Japanese “service charge” button',
  category: 'Symbols'
}, {
  emoji: '🈷️',
  names: ['u6708'],
  tags: [],
  description: 'Japanese “monthly amount” button',
  category: 'Symbols'
}, {
  emoji: '🈶',
  names: ['u6709'],
  tags: [],
  description: 'Japanese “not free of charge” button',
  category: 'Symbols'
}, {
  emoji: '🈯',
  names: ['u6307'],
  tags: [],
  description: 'Japanese “reserved” button',
  category: 'Symbols'
}, {
  emoji: '🉐',
  names: ['ideograph_advantage'],
  tags: [],
  description: 'Japanese “bargain” button',
  category: 'Symbols'
}, {
  emoji: '🈹',
  names: ['u5272'],
  tags: [],
  description: 'Japanese “discount” button',
  category: 'Symbols'
}, {
  emoji: '🈚',
  names: ['u7121'],
  tags: [],
  description: 'Japanese “free of charge” button',
  category: 'Symbols'
}, {
  emoji: '🈲',
  names: ['u7981'],
  tags: [],
  description: 'Japanese “prohibited” button',
  category: 'Symbols'
}, {
  emoji: '🉑',
  names: ['accept'],
  tags: [],
  description: 'Japanese “acceptable” button',
  category: 'Symbols'
}, {
  emoji: '🈸',
  names: ['u7533'],
  tags: [],
  description: 'Japanese “application” button',
  category: 'Symbols'
}, {
  emoji: '🈴',
  names: ['u5408'],
  tags: [],
  description: 'Japanese “passing grade” button',
  category: 'Symbols'
}, {
  emoji: '🈳',
  names: ['u7a7a'],
  tags: [],
  description: 'Japanese “vacancy” button',
  category: 'Symbols'
}, {
  emoji: '㊗️',
  names: ['congratulations'],
  tags: [],
  description: 'Japanese “congratulations” button',
  category: 'Symbols'
}, {
  emoji: '㊙️',
  names: ['secret'],
  tags: [],
  description: 'Japanese “secret” button',
  category: 'Symbols'
}, {
  emoji: '🈺',
  names: ['u55b6'],
  tags: [],
  description: 'Japanese “open for business” button',
  category: 'Symbols'
}, {
  emoji: '🈵',
  names: ['u6e80'],
  tags: [],
  description: 'Japanese “no vacancy” button',
  category: 'Symbols'
}, {
  emoji: '🔴',
  names: ['red_circle'],
  tags: [],
  description: 'red circle',
  category: 'Symbols'
}, {
  emoji: '🟠',
  names: ['orange_circle'],
  tags: [],
  description: 'orange circle',
  category: 'Symbols'
}, {
  emoji: '🟡',
  names: ['yellow_circle'],
  tags: [],
  description: 'yellow circle',
  category: 'Symbols'
}, {
  emoji: '🟢',
  names: ['green_circle'],
  tags: [],
  description: 'green circle',
  category: 'Symbols'
}, {
  emoji: '🔵',
  names: ['large_blue_circle'],
  tags: [],
  description: 'blue circle',
  category: 'Symbols'
}, {
  emoji: '🟣',
  names: ['purple_circle'],
  tags: [],
  description: 'purple circle',
  category: 'Symbols'
}, {
  emoji: '🟤',
  names: ['brown_circle'],
  tags: [],
  description: 'brown circle',
  category: 'Symbols'
}, {
  emoji: '⚫',
  names: ['black_circle'],
  tags: [],
  description: 'black circle',
  category: 'Symbols'
}, {
  emoji: '⚪',
  names: ['white_circle'],
  tags: [],
  description: 'white circle',
  category: 'Symbols'
}, {
  emoji: '🟥',
  names: ['red_square'],
  tags: [],
  description: 'red square',
  category: 'Symbols'
}, {
  emoji: '🟧',
  names: ['orange_square'],
  tags: [],
  description: 'orange square',
  category: 'Symbols'
}, {
  emoji: '🟨',
  names: ['yellow_square'],
  tags: [],
  description: 'yellow square',
  category: 'Symbols'
}, {
  emoji: '🟩',
  names: ['green_square'],
  tags: [],
  description: 'green square',
  category: 'Symbols'
}, {
  emoji: '🟦',
  names: ['blue_square'],
  tags: [],
  description: 'blue square',
  category: 'Symbols'
}, {
  emoji: '🟪',
  names: ['purple_square'],
  tags: [],
  description: 'purple square',
  category: 'Symbols'
}, {
  emoji: '🟫',
  names: ['brown_square'],
  tags: [],
  description: 'brown square',
  category: 'Symbols'
}, {
  emoji: '⬛',
  names: ['black_large_square'],
  tags: [],
  description: 'black large square',
  category: 'Symbols'
}, {
  emoji: '⬜',
  names: ['white_large_square'],
  tags: [],
  description: 'white large square',
  category: 'Symbols'
}, {
  emoji: '◼️',
  names: ['black_medium_square'],
  tags: [],
  description: 'black medium square',
  category: 'Symbols'
}, {
  emoji: '◻️',
  names: ['white_medium_square'],
  tags: [],
  description: 'white medium square',
  category: 'Symbols'
}, {
  emoji: '◾',
  names: ['black_medium_small_square'],
  tags: [],
  description: 'black medium-small square',
  category: 'Symbols'
}, {
  emoji: '◽',
  names: ['white_medium_small_square'],
  tags: [],
  description: 'white medium-small square',
  category: 'Symbols'
}, {
  emoji: '▪️',
  names: ['black_small_square'],
  tags: [],
  description: 'black small square',
  category: 'Symbols'
}, {
  emoji: '▫️',
  names: ['white_small_square'],
  tags: [],
  description: 'white small square',
  category: 'Symbols'
}, {
  emoji: '🔶',
  names: ['large_orange_diamond'],
  tags: [],
  description: 'large orange diamond',
  category: 'Symbols'
}, {
  emoji: '🔷',
  names: ['large_blue_diamond'],
  tags: [],
  description: 'large blue diamond',
  category: 'Symbols'
}, {
  emoji: '🔸',
  names: ['small_orange_diamond'],
  tags: [],
  description: 'small orange diamond',
  category: 'Symbols'
}, {
  emoji: '🔹',
  names: ['small_blue_diamond'],
  tags: [],
  description: 'small blue diamond',
  category: 'Symbols'
}, {
  emoji: '🔺',
  names: ['small_red_triangle'],
  tags: [],
  description: 'red triangle pointed up',
  category: 'Symbols'
}, {
  emoji: '🔻',
  names: ['small_red_triangle_down'],
  tags: [],
  description: 'red triangle pointed down',
  category: 'Symbols'
}, {
  emoji: '💠',
  names: ['diamond_shape_with_a_dot_inside'],
  tags: [],
  description: 'diamond with a dot',
  category: 'Symbols'
}, {
  emoji: '🔘',
  names: ['radio_button'],
  tags: [],
  description: 'radio button',
  category: 'Symbols'
}, {
  emoji: '🔳',
  names: ['white_square_button'],
  tags: [],
  description: 'white square button',
  category: 'Symbols'
}, {
  emoji: '🔲',
  names: ['black_square_button'],
  tags: [],
  description: 'black square button',
  category: 'Symbols'
}, {
  emoji: '🏁',
  names: ['checkered_flag'],
  tags: ['milestone', 'finish'],
  description: 'chequered flag',
  category: 'Flags'
}, {
  emoji: '🚩',
  names: ['triangular_flag_on_post'],
  tags: [],
  description: 'triangular flag',
  category: 'Flags'
}, {
  emoji: '🎌',
  names: ['crossed_flags'],
  tags: [],
  description: 'crossed flags',
  category: 'Flags'
}, {
  emoji: '🏴',
  names: ['black_flag'],
  tags: [],
  description: 'black flag',
  category: 'Flags'
}, {
  emoji: '🏳️',
  names: ['white_flag'],
  tags: [],
  description: 'white flag',
  category: 'Flags'
}, {
  emoji: '🏳️‍🌈',
  names: ['rainbow_flag'],
  tags: ['pride'],
  description: 'rainbow flag',
  category: 'Flags'
}, {
  emoji: '🏳️‍⚧️',
  names: ['transgender_flag'],
  tags: [],
  description: 'transgender flag',
  category: 'Flags'
}, {
  emoji: '🏴‍☠️',
  names: ['pirate_flag'],
  tags: [],
  description: 'pirate flag',
  category: 'Flags'
}, {
  emoji: '🇦🇨',
  names: ['ascension_island'],
  tags: [],
  description: 'flag: Ascension Island',
  category: 'Flags'
}, {
  emoji: '🇦🇩',
  names: ['andorra'],
  tags: [],
  description: 'flag: Andorra',
  category: 'Flags'
}, {
  emoji: '🇦🇪',
  names: ['united_arab_emirates'],
  tags: [],
  description: 'flag: United Arab Emirates',
  category: 'Flags'
}, {
  emoji: '🇦🇫',
  names: ['afghanistan'],
  tags: [],
  description: 'flag: Afghanistan',
  category: 'Flags'
}, {
  emoji: '🇦🇬',
  names: ['antigua_barbuda'],
  tags: [],
  description: 'flag: Antigua & Barbuda',
  category: 'Flags'
}, {
  emoji: '🇦🇮',
  names: ['anguilla'],
  tags: [],
  description: 'flag: Anguilla',
  category: 'Flags'
}, {
  emoji: '🇦🇱',
  names: ['albania'],
  tags: [],
  description: 'flag: Albania',
  category: 'Flags'
}, {
  emoji: '🇦🇲',
  names: ['armenia'],
  tags: [],
  description: 'flag: Armenia',
  category: 'Flags'
}, {
  emoji: '🇦🇴',
  names: ['angola'],
  tags: [],
  description: 'flag: Angola',
  category: 'Flags'
}, {
  emoji: '🇦🇶',
  names: ['antarctica'],
  tags: [],
  description: 'flag: Antarctica',
  category: 'Flags'
}, {
  emoji: '🇦🇷',
  names: ['argentina'],
  tags: [],
  description: 'flag: Argentina',
  category: 'Flags'
}, {
  emoji: '🇦🇸',
  names: ['american_samoa'],
  tags: [],
  description: 'flag: American Samoa',
  category: 'Flags'
}, {
  emoji: '🇦🇹',
  names: ['austria'],
  tags: [],
  description: 'flag: Austria',
  category: 'Flags'
}, {
  emoji: '🇦🇺',
  names: ['australia'],
  tags: [],
  description: 'flag: Australia',
  category: 'Flags'
}, {
  emoji: '🇦🇼',
  names: ['aruba'],
  tags: [],
  description: 'flag: Aruba',
  category: 'Flags'
}, {
  emoji: '🇦🇽',
  names: ['aland_islands'],
  tags: [],
  description: 'flag: Åland Islands',
  category: 'Flags'
}, {
  emoji: '🇦🇿',
  names: ['azerbaijan'],
  tags: [],
  description: 'flag: Azerbaijan',
  category: 'Flags'
}, {
  emoji: '🇧🇦',
  names: ['bosnia_herzegovina'],
  tags: [],
  description: 'flag: Bosnia & Herzegovina',
  category: 'Flags'
}, {
  emoji: '🇧🇧',
  names: ['barbados'],
  tags: [],
  description: 'flag: Barbados',
  category: 'Flags'
}, {
  emoji: '🇧🇩',
  names: ['bangladesh'],
  tags: [],
  description: 'flag: Bangladesh',
  category: 'Flags'
}, {
  emoji: '🇧🇪',
  names: ['belgium'],
  tags: [],
  description: 'flag: Belgium',
  category: 'Flags'
}, {
  emoji: '🇧🇫',
  names: ['burkina_faso'],
  tags: [],
  description: 'flag: Burkina Faso',
  category: 'Flags'
}, {
  emoji: '🇧🇬',
  names: ['bulgaria'],
  tags: [],
  description: 'flag: Bulgaria',
  category: 'Flags'
}, {
  emoji: '🇧🇭',
  names: ['bahrain'],
  tags: [],
  description: 'flag: Bahrain',
  category: 'Flags'
}, {
  emoji: '🇧🇮',
  names: ['burundi'],
  tags: [],
  description: 'flag: Burundi',
  category: 'Flags'
}, {
  emoji: '🇧🇯',
  names: ['benin'],
  tags: [],
  description: 'flag: Benin',
  category: 'Flags'
}, {
  emoji: '🇧🇱',
  names: ['st_barthelemy'],
  tags: [],
  description: 'flag: St. Barthélemy',
  category: 'Flags'
}, {
  emoji: '🇧🇲',
  names: ['bermuda'],
  tags: [],
  description: 'flag: Bermuda',
  category: 'Flags'
}, {
  emoji: '🇧🇳',
  names: ['brunei'],
  tags: [],
  description: 'flag: Brunei',
  category: 'Flags'
}, {
  emoji: '🇧🇴',
  names: ['bolivia'],
  tags: [],
  description: 'flag: Bolivia',
  category: 'Flags'
}, {
  emoji: '🇧🇶',
  names: ['caribbean_netherlands'],
  tags: [],
  description: 'flag: Caribbean Netherlands',
  category: 'Flags'
}, {
  emoji: '🇧🇷',
  names: ['brazil'],
  tags: [],
  description: 'flag: Brazil',
  category: 'Flags'
}, {
  emoji: '🇧🇸',
  names: ['bahamas'],
  tags: [],
  description: 'flag: Bahamas',
  category: 'Flags'
}, {
  emoji: '🇧🇹',
  names: ['bhutan'],
  tags: [],
  description: 'flag: Bhutan',
  category: 'Flags'
}, {
  emoji: '🇧🇻',
  names: ['bouvet_island'],
  tags: [],
  description: 'flag: Bouvet Island',
  category: 'Flags'
}, {
  emoji: '🇧🇼',
  names: ['botswana'],
  tags: [],
  description: 'flag: Botswana',
  category: 'Flags'
}, {
  emoji: '🇧🇾',
  names: ['belarus'],
  tags: [],
  description: 'flag: Belarus',
  category: 'Flags'
}, {
  emoji: '🇧🇿',
  names: ['belize'],
  tags: [],
  description: 'flag: Belize',
  category: 'Flags'
}, {
  emoji: '🇨🇦',
  names: ['canada'],
  tags: [],
  description: 'flag: Canada',
  category: 'Flags'
}, {
  emoji: '🇨🇨',
  names: ['cocos_islands'],
  tags: ['keeling'],
  description: 'flag: Cocos (Keeling) Islands',
  category: 'Flags'
}, {
  emoji: '🇨🇩',
  names: ['congo_kinshasa'],
  tags: [],
  description: 'flag: Congo - Kinshasa',
  category: 'Flags'
}, {
  emoji: '🇨🇫',
  names: ['central_african_republic'],
  tags: [],
  description: 'flag: Central African Republic',
  category: 'Flags'
}, {
  emoji: '🇨🇬',
  names: ['congo_brazzaville'],
  tags: [],
  description: 'flag: Congo - Brazzaville',
  category: 'Flags'
}, {
  emoji: '🇨🇭',
  names: ['switzerland'],
  tags: [],
  description: 'flag: Switzerland',
  category: 'Flags'
}, {
  emoji: '🇨🇮',
  names: ['cote_divoire'],
  tags: ['ivory'],
  description: 'flag: Côte d’Ivoire',
  category: 'Flags'
}, {
  emoji: '🇨🇰',
  names: ['cook_islands'],
  tags: [],
  description: 'flag: Cook Islands',
  category: 'Flags'
}, {
  emoji: '🇨🇱',
  names: ['chile'],
  tags: [],
  description: 'flag: Chile',
  category: 'Flags'
}, {
  emoji: '🇨🇲',
  names: ['cameroon'],
  tags: [],
  description: 'flag: Cameroon',
  category: 'Flags'
}, {
  emoji: '🇨🇳',
  names: ['cn'],
  tags: ['china'],
  description: 'flag: China',
  category: 'Flags'
}, {
  emoji: '🇨🇴',
  names: ['colombia'],
  tags: [],
  description: 'flag: Colombia',
  category: 'Flags'
}, {
  emoji: '🇨🇵',
  names: ['clipperton_island'],
  tags: [],
  description: 'flag: Clipperton Island',
  category: 'Flags'
}, {
  emoji: '🇨🇷',
  names: ['costa_rica'],
  tags: [],
  description: 'flag: Costa Rica',
  category: 'Flags'
}, {
  emoji: '🇨🇺',
  names: ['cuba'],
  tags: [],
  description: 'flag: Cuba',
  category: 'Flags'
}, {
  emoji: '🇨🇻',
  names: ['cape_verde'],
  tags: [],
  description: 'flag: Cape Verde',
  category: 'Flags'
}, {
  emoji: '🇨🇼',
  names: ['curacao'],
  tags: [],
  description: 'flag: Curaçao',
  category: 'Flags'
}, {
  emoji: '🇨🇽',
  names: ['christmas_island'],
  tags: [],
  description: 'flag: Christmas Island',
  category: 'Flags'
}, {
  emoji: '🇨🇾',
  names: ['cyprus'],
  tags: [],
  description: 'flag: Cyprus',
  category: 'Flags'
}, {
  emoji: '🇨🇿',
  names: ['czech_republic'],
  tags: [],
  description: 'flag: Czechia',
  category: 'Flags'
}, {
  emoji: '🇩🇪',
  names: ['de'],
  tags: ['flag', 'germany'],
  description: 'flag: Germany',
  category: 'Flags'
}, {
  emoji: '🇩🇬',
  names: ['diego_garcia'],
  tags: [],
  description: 'flag: Diego Garcia',
  category: 'Flags'
}, {
  emoji: '🇩🇯',
  names: ['djibouti'],
  tags: [],
  description: 'flag: Djibouti',
  category: 'Flags'
}, {
  emoji: '🇩🇰',
  names: ['denmark'],
  tags: [],
  description: 'flag: Denmark',
  category: 'Flags'
}, {
  emoji: '🇩🇲',
  names: ['dominica'],
  tags: [],
  description: 'flag: Dominica',
  category: 'Flags'
}, {
  emoji: '🇩🇴',
  names: ['dominican_republic'],
  tags: [],
  description: 'flag: Dominican Republic',
  category: 'Flags'
}, {
  emoji: '🇩🇿',
  names: ['algeria'],
  tags: [],
  description: 'flag: Algeria',
  category: 'Flags'
}, {
  emoji: '🇪🇦',
  names: ['ceuta_melilla'],
  tags: [],
  description: 'flag: Ceuta & Melilla',
  category: 'Flags'
}, {
  emoji: '🇪🇨',
  names: ['ecuador'],
  tags: [],
  description: 'flag: Ecuador',
  category: 'Flags'
}, {
  emoji: '🇪🇪',
  names: ['estonia'],
  tags: [],
  description: 'flag: Estonia',
  category: 'Flags'
}, {
  emoji: '🇪🇬',
  names: ['egypt'],
  tags: [],
  description: 'flag: Egypt',
  category: 'Flags'
}, {
  emoji: '🇪🇭',
  names: ['western_sahara'],
  tags: [],
  description: 'flag: Western Sahara',
  category: 'Flags'
}, {
  emoji: '🇪🇷',
  names: ['eritrea'],
  tags: [],
  description: 'flag: Eritrea',
  category: 'Flags'
}, {
  emoji: '🇪🇸',
  names: ['es'],
  tags: ['spain'],
  description: 'flag: Spain',
  category: 'Flags'
}, {
  emoji: '🇪🇹',
  names: ['ethiopia'],
  tags: [],
  description: 'flag: Ethiopia',
  category: 'Flags'
}, {
  emoji: '🇪🇺',
  names: ['eu', 'european_union'],
  tags: [],
  description: 'flag: European Union',
  category: 'Flags'
}, {
  emoji: '🇫🇮',
  names: ['finland'],
  tags: [],
  description: 'flag: Finland',
  category: 'Flags'
}, {
  emoji: '🇫🇯',
  names: ['fiji'],
  tags: [],
  description: 'flag: Fiji',
  category: 'Flags'
}, {
  emoji: '🇫🇰',
  names: ['falkland_islands'],
  tags: [],
  description: 'flag: Falkland Islands',
  category: 'Flags'
}, {
  emoji: '🇫🇲',
  names: ['micronesia'],
  tags: [],
  description: 'flag: Micronesia',
  category: 'Flags'
}, {
  emoji: '🇫🇴',
  names: ['faroe_islands'],
  tags: [],
  description: 'flag: Faroe Islands',
  category: 'Flags'
}, {
  emoji: '🇫🇷',
  names: ['fr'],
  tags: ['france', 'french'],
  description: 'flag: France',
  category: 'Flags'
}, {
  emoji: '🇬🇦',
  names: ['gabon'],
  tags: [],
  description: 'flag: Gabon',
  category: 'Flags'
}, {
  emoji: '🇬🇧',
  names: ['gb', 'uk'],
  tags: ['flag', 'british'],
  description: 'flag: United Kingdom',
  category: 'Flags'
}, {
  emoji: '🇬🇩',
  names: ['grenada'],
  tags: [],
  description: 'flag: Grenada',
  category: 'Flags'
}, {
  emoji: '🇬🇪',
  names: ['georgia'],
  tags: [],
  description: 'flag: Georgia',
  category: 'Flags'
}, {
  emoji: '🇬🇫',
  names: ['french_guiana'],
  tags: [],
  description: 'flag: French Guiana',
  category: 'Flags'
}, {
  emoji: '🇬🇬',
  names: ['guernsey'],
  tags: [],
  description: 'flag: Guernsey',
  category: 'Flags'
}, {
  emoji: '🇬🇭',
  names: ['ghana'],
  tags: [],
  description: 'flag: Ghana',
  category: 'Flags'
}, {
  emoji: '🇬🇮',
  names: ['gibraltar'],
  tags: [],
  description: 'flag: Gibraltar',
  category: 'Flags'
}, {
  emoji: '🇬🇱',
  names: ['greenland'],
  tags: [],
  description: 'flag: Greenland',
  category: 'Flags'
}, {
  emoji: '🇬🇲',
  names: ['gambia'],
  tags: [],
  description: 'flag: Gambia',
  category: 'Flags'
}, {
  emoji: '🇬🇳',
  names: ['guinea'],
  tags: [],
  description: 'flag: Guinea',
  category: 'Flags'
}, {
  emoji: '🇬🇵',
  names: ['guadeloupe'],
  tags: [],
  description: 'flag: Guadeloupe',
  category: 'Flags'
}, {
  emoji: '🇬🇶',
  names: ['equatorial_guinea'],
  tags: [],
  description: 'flag: Equatorial Guinea',
  category: 'Flags'
}, {
  emoji: '🇬🇷',
  names: ['greece'],
  tags: [],
  description: 'flag: Greece',
  category: 'Flags'
}, {
  emoji: '🇬🇸',
  names: ['south_georgia_south_sandwich_islands'],
  tags: [],
  description: 'flag: South Georgia & South Sandwich Islands',
  category: 'Flags'
}, {
  emoji: '🇬🇹',
  names: ['guatemala'],
  tags: [],
  description: 'flag: Guatemala',
  category: 'Flags'
}, {
  emoji: '🇬🇺',
  names: ['guam'],
  tags: [],
  description: 'flag: Guam',
  category: 'Flags'
}, {
  emoji: '🇬🇼',
  names: ['guinea_bissau'],
  tags: [],
  description: 'flag: Guinea-Bissau',
  category: 'Flags'
}, {
  emoji: '🇬🇾',
  names: ['guyana'],
  tags: [],
  description: 'flag: Guyana',
  category: 'Flags'
}, {
  emoji: '🇭🇰',
  names: ['hong_kong'],
  tags: [],
  description: 'flag: Hong Kong SAR China',
  category: 'Flags'
}, {
  emoji: '🇭🇲',
  names: ['heard_mcdonald_islands'],
  tags: [],
  description: 'flag: Heard & McDonald Islands',
  category: 'Flags'
}, {
  emoji: '🇭🇳',
  names: ['honduras'],
  tags: [],
  description: 'flag: Honduras',
  category: 'Flags'
}, {
  emoji: '🇭🇷',
  names: ['croatia'],
  tags: [],
  description: 'flag: Croatia',
  category: 'Flags'
}, {
  emoji: '🇭🇹',
  names: ['haiti'],
  tags: [],
  description: 'flag: Haiti',
  category: 'Flags'
}, {
  emoji: '🇭🇺',
  names: ['hungary'],
  tags: [],
  description: 'flag: Hungary',
  category: 'Flags'
}, {
  emoji: '🇮🇨',
  names: ['canary_islands'],
  tags: [],
  description: 'flag: Canary Islands',
  category: 'Flags'
}, {
  emoji: '🇮🇩',
  names: ['indonesia'],
  tags: [],
  description: 'flag: Indonesia',
  category: 'Flags'
}, {
  emoji: '🇮🇪',
  names: ['ireland'],
  tags: [],
  description: 'flag: Ireland',
  category: 'Flags'
}, {
  emoji: '🇮🇱',
  names: ['israel'],
  tags: [],
  description: 'flag: Israel',
  category: 'Flags'
}, {
  emoji: '🇮🇲',
  names: ['isle_of_man'],
  tags: [],
  description: 'flag: Isle of Man',
  category: 'Flags'
}, {
  emoji: '🇮🇳',
  names: ['india'],
  tags: [],
  description: 'flag: India',
  category: 'Flags'
}, {
  emoji: '🇮🇴',
  names: ['british_indian_ocean_territory'],
  tags: [],
  description: 'flag: British Indian Ocean Territory',
  category: 'Flags'
}, {
  emoji: '🇮🇶',
  names: ['iraq'],
  tags: [],
  description: 'flag: Iraq',
  category: 'Flags'
}, {
  emoji: '🇮🇷',
  names: ['iran'],
  tags: [],
  description: 'flag: Iran',
  category: 'Flags'
}, {
  emoji: '🇮🇸',
  names: ['iceland'],
  tags: [],
  description: 'flag: Iceland',
  category: 'Flags'
}, {
  emoji: '🇮🇹',
  names: ['it'],
  tags: ['italy'],
  description: 'flag: Italy',
  category: 'Flags'
}, {
  emoji: '🇯🇪',
  names: ['jersey'],
  tags: [],
  description: 'flag: Jersey',
  category: 'Flags'
}, {
  emoji: '🇯🇲',
  names: ['jamaica'],
  tags: [],
  description: 'flag: Jamaica',
  category: 'Flags'
}, {
  emoji: '🇯🇴',
  names: ['jordan'],
  tags: [],
  description: 'flag: Jordan',
  category: 'Flags'
}, {
  emoji: '🇯🇵',
  names: ['jp'],
  tags: ['japan'],
  description: 'flag: Japan',
  category: 'Flags'
}, {
  emoji: '🇰🇪',
  names: ['kenya'],
  tags: [],
  description: 'flag: Kenya',
  category: 'Flags'
}, {
  emoji: '🇰🇬',
  names: ['kyrgyzstan'],
  tags: [],
  description: 'flag: Kyrgyzstan',
  category: 'Flags'
}, {
  emoji: '🇰🇭',
  names: ['cambodia'],
  tags: [],
  description: 'flag: Cambodia',
  category: 'Flags'
}, {
  emoji: '🇰🇮',
  names: ['kiribati'],
  tags: [],
  description: 'flag: Kiribati',
  category: 'Flags'
}, {
  emoji: '🇰🇲',
  names: ['comoros'],
  tags: [],
  description: 'flag: Comoros',
  category: 'Flags'
}, {
  emoji: '🇰🇳',
  names: ['st_kitts_nevis'],
  tags: [],
  description: 'flag: St. Kitts & Nevis',
  category: 'Flags'
}, {
  emoji: '🇰🇵',
  names: ['north_korea'],
  tags: [],
  description: 'flag: North Korea',
  category: 'Flags'
}, {
  emoji: '🇰🇷',
  names: ['kr'],
  tags: ['korea'],
  description: 'flag: South Korea',
  category: 'Flags'
}, {
  emoji: '🇰🇼',
  names: ['kuwait'],
  tags: [],
  description: 'flag: Kuwait',
  category: 'Flags'
}, {
  emoji: '🇰🇾',
  names: ['cayman_islands'],
  tags: [],
  description: 'flag: Cayman Islands',
  category: 'Flags'
}, {
  emoji: '🇰🇿',
  names: ['kazakhstan'],
  tags: [],
  description: 'flag: Kazakhstan',
  category: 'Flags'
}, {
  emoji: '🇱🇦',
  names: ['laos'],
  tags: [],
  description: 'flag: Laos',
  category: 'Flags'
}, {
  emoji: '🇱🇧',
  names: ['lebanon'],
  tags: [],
  description: 'flag: Lebanon',
  category: 'Flags'
}, {
  emoji: '🇱🇨',
  names: ['st_lucia'],
  tags: [],
  description: 'flag: St. Lucia',
  category: 'Flags'
}, {
  emoji: '🇱🇮',
  names: ['liechtenstein'],
  tags: [],
  description: 'flag: Liechtenstein',
  category: 'Flags'
}, {
  emoji: '🇱🇰',
  names: ['sri_lanka'],
  tags: [],
  description: 'flag: Sri Lanka',
  category: 'Flags'
}, {
  emoji: '🇱🇷',
  names: ['liberia'],
  tags: [],
  description: 'flag: Liberia',
  category: 'Flags'
}, {
  emoji: '🇱🇸',
  names: ['lesotho'],
  tags: [],
  description: 'flag: Lesotho',
  category: 'Flags'
}, {
  emoji: '🇱🇹',
  names: ['lithuania'],
  tags: [],
  description: 'flag: Lithuania',
  category: 'Flags'
}, {
  emoji: '🇱🇺',
  names: ['luxembourg'],
  tags: [],
  description: 'flag: Luxembourg',
  category: 'Flags'
}, {
  emoji: '🇱🇻',
  names: ['latvia'],
  tags: [],
  description: 'flag: Latvia',
  category: 'Flags'
}, {
  emoji: '🇱🇾',
  names: ['libya'],
  tags: [],
  description: 'flag: Libya',
  category: 'Flags'
}, {
  emoji: '🇲🇦',
  names: ['morocco'],
  tags: [],
  description: 'flag: Morocco',
  category: 'Flags'
}, {
  emoji: '🇲🇨',
  names: ['monaco'],
  tags: [],
  description: 'flag: Monaco',
  category: 'Flags'
}, {
  emoji: '🇲🇩',
  names: ['moldova'],
  tags: [],
  description: 'flag: Moldova',
  category: 'Flags'
}, {
  emoji: '🇲🇪',
  names: ['montenegro'],
  tags: [],
  description: 'flag: Montenegro',
  category: 'Flags'
}, {
  emoji: '🇲🇫',
  names: ['st_martin'],
  tags: [],
  description: 'flag: St. Martin',
  category: 'Flags'
}, {
  emoji: '🇲🇬',
  names: ['madagascar'],
  tags: [],
  description: 'flag: Madagascar',
  category: 'Flags'
}, {
  emoji: '🇲🇭',
  names: ['marshall_islands'],
  tags: [],
  description: 'flag: Marshall Islands',
  category: 'Flags'
}, {
  emoji: '🇲🇰',
  names: ['macedonia'],
  tags: [],
  description: 'flag: North Macedonia',
  category: 'Flags'
}, {
  emoji: '🇲🇱',
  names: ['mali'],
  tags: [],
  description: 'flag: Mali',
  category: 'Flags'
}, {
  emoji: '🇲🇲',
  names: ['myanmar'],
  tags: ['burma'],
  description: 'flag: Myanmar (Burma)',
  category: 'Flags'
}, {
  emoji: '🇲🇳',
  names: ['mongolia'],
  tags: [],
  description: 'flag: Mongolia',
  category: 'Flags'
}, {
  emoji: '🇲🇴',
  names: ['macau'],
  tags: [],
  description: 'flag: Macao SAR China',
  category: 'Flags'
}, {
  emoji: '🇲🇵',
  names: ['northern_mariana_islands'],
  tags: [],
  description: 'flag: Northern Mariana Islands',
  category: 'Flags'
}, {
  emoji: '🇲🇶',
  names: ['martinique'],
  tags: [],
  description: 'flag: Martinique',
  category: 'Flags'
}, {
  emoji: '🇲🇷',
  names: ['mauritania'],
  tags: [],
  description: 'flag: Mauritania',
  category: 'Flags'
}, {
  emoji: '🇲🇸',
  names: ['montserrat'],
  tags: [],
  description: 'flag: Montserrat',
  category: 'Flags'
}, {
  emoji: '🇲🇹',
  names: ['malta'],
  tags: [],
  description: 'flag: Malta',
  category: 'Flags'
}, {
  emoji: '🇲🇺',
  names: ['mauritius'],
  tags: [],
  description: 'flag: Mauritius',
  category: 'Flags'
}, {
  emoji: '🇲🇻',
  names: ['maldives'],
  tags: [],
  description: 'flag: Maldives',
  category: 'Flags'
}, {
  emoji: '🇲🇼',
  names: ['malawi'],
  tags: [],
  description: 'flag: Malawi',
  category: 'Flags'
}, {
  emoji: '🇲🇽',
  names: ['mexico'],
  tags: [],
  description: 'flag: Mexico',
  category: 'Flags'
}, {
  emoji: '🇲🇾',
  names: ['malaysia'],
  tags: [],
  description: 'flag: Malaysia',
  category: 'Flags'
}, {
  emoji: '🇲🇿',
  names: ['mozambique'],
  tags: [],
  description: 'flag: Mozambique',
  category: 'Flags'
}, {
  emoji: '🇳🇦',
  names: ['namibia'],
  tags: [],
  description: 'flag: Namibia',
  category: 'Flags'
}, {
  emoji: '🇳🇨',
  names: ['new_caledonia'],
  tags: [],
  description: 'flag: New Caledonia',
  category: 'Flags'
}, {
  emoji: '🇳🇪',
  names: ['niger'],
  tags: [],
  description: 'flag: Niger',
  category: 'Flags'
}, {
  emoji: '🇳🇫',
  names: ['norfolk_island'],
  tags: [],
  description: 'flag: Norfolk Island',
  category: 'Flags'
}, {
  emoji: '🇳🇬',
  names: ['nigeria'],
  tags: [],
  description: 'flag: Nigeria',
  category: 'Flags'
}, {
  emoji: '🇳🇮',
  names: ['nicaragua'],
  tags: [],
  description: 'flag: Nicaragua',
  category: 'Flags'
}, {
  emoji: '🇳🇱',
  names: ['netherlands'],
  tags: [],
  description: 'flag: Netherlands',
  category: 'Flags'
}, {
  emoji: '🇳🇴',
  names: ['norway'],
  tags: [],
  description: 'flag: Norway',
  category: 'Flags'
}, {
  emoji: '🇳🇵',
  names: ['nepal'],
  tags: [],
  description: 'flag: Nepal',
  category: 'Flags'
}, {
  emoji: '🇳🇷',
  names: ['nauru'],
  tags: [],
  description: 'flag: Nauru',
  category: 'Flags'
}, {
  emoji: '🇳🇺',
  names: ['niue'],
  tags: [],
  description: 'flag: Niue',
  category: 'Flags'
}, {
  emoji: '🇳🇿',
  names: ['new_zealand'],
  tags: [],
  description: 'flag: New Zealand',
  category: 'Flags'
}, {
  emoji: '🇴🇲',
  names: ['oman'],
  tags: [],
  description: 'flag: Oman',
  category: 'Flags'
}, {
  emoji: '🇵🇦',
  names: ['panama'],
  tags: [],
  description: 'flag: Panama',
  category: 'Flags'
}, {
  emoji: '🇵🇪',
  names: ['peru'],
  tags: [],
  description: 'flag: Peru',
  category: 'Flags'
}, {
  emoji: '🇵🇫',
  names: ['french_polynesia'],
  tags: [],
  description: 'flag: French Polynesia',
  category: 'Flags'
}, {
  emoji: '🇵🇬',
  names: ['papua_new_guinea'],
  tags: [],
  description: 'flag: Papua New Guinea',
  category: 'Flags'
}, {
  emoji: '🇵🇭',
  names: ['philippines'],
  tags: [],
  description: 'flag: Philippines',
  category: 'Flags'
}, {
  emoji: '🇵🇰',
  names: ['pakistan'],
  tags: [],
  description: 'flag: Pakistan',
  category: 'Flags'
}, {
  emoji: '🇵🇱',
  names: ['poland'],
  tags: [],
  description: 'flag: Poland',
  category: 'Flags'
}, {
  emoji: '🇵🇲',
  names: ['st_pierre_miquelon'],
  tags: [],
  description: 'flag: St. Pierre & Miquelon',
  category: 'Flags'
}, {
  emoji: '🇵🇳',
  names: ['pitcairn_islands'],
  tags: [],
  description: 'flag: Pitcairn Islands',
  category: 'Flags'
}, {
  emoji: '🇵🇷',
  names: ['puerto_rico'],
  tags: [],
  description: 'flag: Puerto Rico',
  category: 'Flags'
}, {
  emoji: '🇵🇸',
  names: ['palestinian_territories'],
  tags: [],
  description: 'flag: Palestinian Territories',
  category: 'Flags'
}, {
  emoji: '🇵🇹',
  names: ['portugal'],
  tags: [],
  description: 'flag: Portugal',
  category: 'Flags'
}, {
  emoji: '🇵🇼',
  names: ['palau'],
  tags: [],
  description: 'flag: Palau',
  category: 'Flags'
}, {
  emoji: '🇵🇾',
  names: ['paraguay'],
  tags: [],
  description: 'flag: Paraguay',
  category: 'Flags'
}, {
  emoji: '🇶🇦',
  names: ['qatar'],
  tags: [],
  description: 'flag: Qatar',
  category: 'Flags'
}, {
  emoji: '🇷🇪',
  names: ['reunion'],
  tags: [],
  description: 'flag: Réunion',
  category: 'Flags'
}, {
  emoji: '🇷🇴',
  names: ['romania'],
  tags: [],
  description: 'flag: Romania',
  category: 'Flags'
}, {
  emoji: '🇷🇸',
  names: ['serbia'],
  tags: [],
  description: 'flag: Serbia',
  category: 'Flags'
}, {
  emoji: '🇷🇺',
  names: ['ru'],
  tags: ['russia'],
  description: 'flag: Russia',
  category: 'Flags'
}, {
  emoji: '🇷🇼',
  names: ['rwanda'],
  tags: [],
  description: 'flag: Rwanda',
  category: 'Flags'
}, {
  emoji: '🇸🇦',
  names: ['saudi_arabia'],
  tags: [],
  description: 'flag: Saudi Arabia',
  category: 'Flags'
}, {
  emoji: '🇸🇧',
  names: ['solomon_islands'],
  tags: [],
  description: 'flag: Solomon Islands',
  category: 'Flags'
}, {
  emoji: '🇸🇨',
  names: ['seychelles'],
  tags: [],
  description: 'flag: Seychelles',
  category: 'Flags'
}, {
  emoji: '🇸🇩',
  names: ['sudan'],
  tags: [],
  description: 'flag: Sudan',
  category: 'Flags'
}, {
  emoji: '🇸🇪',
  names: ['sweden'],
  tags: [],
  description: 'flag: Sweden',
  category: 'Flags'
}, {
  emoji: '🇸🇬',
  names: ['singapore'],
  tags: [],
  description: 'flag: Singapore',
  category: 'Flags'
}, {
  emoji: '🇸🇭',
  names: ['st_helena'],
  tags: [],
  description: 'flag: St. Helena',
  category: 'Flags'
}, {
  emoji: '🇸🇮',
  names: ['slovenia'],
  tags: [],
  description: 'flag: Slovenia',
  category: 'Flags'
}, {
  emoji: '🇸🇯',
  names: ['svalbard_jan_mayen'],
  tags: [],
  description: 'flag: Svalbard & Jan Mayen',
  category: 'Flags'
}, {
  emoji: '🇸🇰',
  names: ['slovakia'],
  tags: [],
  description: 'flag: Slovakia',
  category: 'Flags'
}, {
  emoji: '🇸🇱',
  names: ['sierra_leone'],
  tags: [],
  description: 'flag: Sierra Leone',
  category: 'Flags'
}, {
  emoji: '🇸🇲',
  names: ['san_marino'],
  tags: [],
  description: 'flag: San Marino',
  category: 'Flags'
}, {
  emoji: '🇸🇳',
  names: ['senegal'],
  tags: [],
  description: 'flag: Senegal',
  category: 'Flags'
}, {
  emoji: '🇸🇴',
  names: ['somalia'],
  tags: [],
  description: 'flag: Somalia',
  category: 'Flags'
}, {
  emoji: '🇸🇷',
  names: ['suriname'],
  tags: [],
  description: 'flag: Suriname',
  category: 'Flags'
}, {
  emoji: '🇸🇸',
  names: ['south_sudan'],
  tags: [],
  description: 'flag: South Sudan',
  category: 'Flags'
}, {
  emoji: '🇸🇹',
  names: ['sao_tome_principe'],
  tags: [],
  description: 'flag: São Tomé & Príncipe',
  category: 'Flags'
}, {
  emoji: '🇸🇻',
  names: ['el_salvador'],
  tags: [],
  description: 'flag: El Salvador',
  category: 'Flags'
}, {
  emoji: '🇸🇽',
  names: ['sint_maarten'],
  tags: [],
  description: 'flag: Sint Maarten',
  category: 'Flags'
}, {
  emoji: '🇸🇾',
  names: ['syria'],
  tags: [],
  description: 'flag: Syria',
  category: 'Flags'
}, {
  emoji: '🇸🇿',
  names: ['swaziland'],
  tags: [],
  description: 'flag: Eswatini',
  category: 'Flags'
}, {
  emoji: '🇹🇦',
  names: ['tristan_da_cunha'],
  tags: [],
  description: 'flag: Tristan da Cunha',
  category: 'Flags'
}, {
  emoji: '🇹🇨',
  names: ['turks_caicos_islands'],
  tags: [],
  description: 'flag: Turks & Caicos Islands',
  category: 'Flags'
}, {
  emoji: '🇹🇩',
  names: ['chad'],
  tags: [],
  description: 'flag: Chad',
  category: 'Flags'
}, {
  emoji: '🇹🇫',
  names: ['french_southern_territories'],
  tags: [],
  description: 'flag: French Southern Territories',
  category: 'Flags'
}, {
  emoji: '🇹🇬',
  names: ['togo'],
  tags: [],
  description: 'flag: Togo',
  category: 'Flags'
}, {
  emoji: '🇹🇭',
  names: ['thailand'],
  tags: [],
  description: 'flag: Thailand',
  category: 'Flags'
}, {
  emoji: '🇹🇯',
  names: ['tajikistan'],
  tags: [],
  description: 'flag: Tajikistan',
  category: 'Flags'
}, {
  emoji: '🇹🇰',
  names: ['tokelau'],
  tags: [],
  description: 'flag: Tokelau',
  category: 'Flags'
}, {
  emoji: '🇹🇱',
  names: ['timor_leste'],
  tags: [],
  description: 'flag: Timor-Leste',
  category: 'Flags'
}, {
  emoji: '🇹🇲',
  names: ['turkmenistan'],
  tags: [],
  description: 'flag: Turkmenistan',
  category: 'Flags'
}, {
  emoji: '🇹🇳',
  names: ['tunisia'],
  tags: [],
  description: 'flag: Tunisia',
  category: 'Flags'
}, {
  emoji: '🇹🇴',
  names: ['tonga'],
  tags: [],
  description: 'flag: Tonga',
  category: 'Flags'
}, {
  emoji: '🇹🇷',
  names: ['tr'],
  tags: ['turkey'],
  description: 'flag: Turkey',
  category: 'Flags'
}, {
  emoji: '🇹🇹',
  names: ['trinidad_tobago'],
  tags: [],
  description: 'flag: Trinidad & Tobago',
  category: 'Flags'
}, {
  emoji: '🇹🇻',
  names: ['tuvalu'],
  tags: [],
  description: 'flag: Tuvalu',
  category: 'Flags'
}, {
  emoji: '🇹🇼',
  names: ['taiwan'],
  tags: [],
  description: 'flag: Taiwan',
  category: 'Flags'
}, {
  emoji: '🇹🇿',
  names: ['tanzania'],
  tags: [],
  description: 'flag: Tanzania',
  category: 'Flags'
}, {
  emoji: '🇺🇦',
  names: ['ukraine'],
  tags: [],
  description: 'flag: Ukraine',
  category: 'Flags'
}, {
  emoji: '🇺🇬',
  names: ['uganda'],
  tags: [],
  description: 'flag: Uganda',
  category: 'Flags'
}, {
  emoji: '🇺🇲',
  names: ['us_outlying_islands'],
  tags: [],
  description: 'flag: U.S. Outlying Islands',
  category: 'Flags'
}, {
  emoji: '🇺🇳',
  names: ['united_nations'],
  tags: [],
  description: 'flag: United Nations',
  category: 'Flags'
}, {
  emoji: '🇺🇸',
  names: ['us'],
  tags: ['flag', 'united', 'america'],
  description: 'flag: United States',
  category: 'Flags'
}, {
  emoji: '🇺🇾',
  names: ['uruguay'],
  tags: [],
  description: 'flag: Uruguay',
  category: 'Flags'
}, {
  emoji: '🇺🇿',
  names: ['uzbekistan'],
  tags: [],
  description: 'flag: Uzbekistan',
  category: 'Flags'
}, {
  emoji: '🇻🇦',
  names: ['vatican_city'],
  tags: [],
  description: 'flag: Vatican City',
  category: 'Flags'
}, {
  emoji: '🇻🇨',
  names: ['st_vincent_grenadines'],
  tags: [],
  description: 'flag: St. Vincent & Grenadines',
  category: 'Flags'
}, {
  emoji: '🇻🇪',
  names: ['venezuela'],
  tags: [],
  description: 'flag: Venezuela',
  category: 'Flags'
}, {
  emoji: '🇻🇬',
  names: ['british_virgin_islands'],
  tags: [],
  description: 'flag: British Virgin Islands',
  category: 'Flags'
}, {
  emoji: '🇻🇮',
  names: ['us_virgin_islands'],
  tags: [],
  description: 'flag: U.S. Virgin Islands',
  category: 'Flags'
}, {
  emoji: '🇻🇳',
  names: ['vietnam'],
  tags: [],
  description: 'flag: Vietnam',
  category: 'Flags'
}, {
  emoji: '🇻🇺',
  names: ['vanuatu'],
  tags: [],
  description: 'flag: Vanuatu',
  category: 'Flags'
}, {
  emoji: '🇼🇫',
  names: ['wallis_futuna'],
  tags: [],
  description: 'flag: Wallis & Futuna',
  category: 'Flags'
}, {
  emoji: '🇼🇸',
  names: ['samoa'],
  tags: [],
  description: 'flag: Samoa',
  category: 'Flags'
}, {
  emoji: '🇽🇰',
  names: ['kosovo'],
  tags: [],
  description: 'flag: Kosovo',
  category: 'Flags'
}, {
  emoji: '🇾🇪',
  names: ['yemen'],
  tags: [],
  description: 'flag: Yemen',
  category: 'Flags'
}, {
  emoji: '🇾🇹',
  names: ['mayotte'],
  tags: [],
  description: 'flag: Mayotte',
  category: 'Flags'
}, {
  emoji: '🇿🇦',
  names: ['south_africa'],
  tags: [],
  description: 'flag: South Africa',
  category: 'Flags'
}, {
  emoji: '🇿🇲',
  names: ['zambia'],
  tags: [],
  description: 'flag: Zambia',
  category: 'Flags'
}, {
  emoji: '🇿🇼',
  names: ['zimbabwe'],
  tags: [],
  description: 'flag: Zimbabwe',
  category: 'Flags'
}, {
  emoji: '🏴󠁧󠁢󠁥󠁮󠁧󠁿',
  names: ['england'],
  tags: [],
  description: 'flag: England',
  category: 'Flags'
}, {
  emoji: '🏴󠁧󠁢󠁳󠁣󠁴󠁿',
  names: ['scotland'],
  tags: [],
  description: 'flag: Scotland',
  category: 'Flags'
}, {
  emoji: '🏴󠁧󠁢󠁷󠁬󠁳󠁿',
  names: ['wales'],
  tags: [],
  description: 'flag: Wales',
  category: 'Flags'
}];
/**
 * Map of names to emoji.
 *
 * @type {Record<string, string>}
 */

var nameToEmoji = {
  100: '💯',
  1234: '🔢',
  grinning: '😀',
  smiley: '😃',
  smile: '😄',
  grin: '😁',
  laughing: '😆',
  satisfied: '😆',
  sweat_smile: '😅',
  rofl: '🤣',
  joy: '😂',
  slightly_smiling_face: '🙂',
  upside_down_face: '🙃',
  wink: '😉',
  blush: '😊',
  innocent: '😇',
  smiling_face_with_three_hearts: '🥰',
  heart_eyes: '😍',
  star_struck: '🤩',
  kissing_heart: '😘',
  kissing: '😗',
  relaxed: '☺️',
  kissing_closed_eyes: '😚',
  kissing_smiling_eyes: '😙',
  smiling_face_with_tear: '🥲',
  yum: '😋',
  stuck_out_tongue: '😛',
  stuck_out_tongue_winking_eye: '😜',
  zany_face: '🤪',
  stuck_out_tongue_closed_eyes: '😝',
  money_mouth_face: '🤑',
  hugs: '🤗',
  hand_over_mouth: '🤭',
  shushing_face: '🤫',
  thinking: '🤔',
  zipper_mouth_face: '🤐',
  raised_eyebrow: '🤨',
  neutral_face: '😐',
  expressionless: '😑',
  no_mouth: '😶',
  face_in_clouds: '😶‍🌫️',
  smirk: '😏',
  unamused: '😒',
  roll_eyes: '🙄',
  grimacing: '😬',
  face_exhaling: '😮‍💨',
  lying_face: '🤥',
  relieved: '😌',
  pensive: '😔',
  sleepy: '😪',
  drooling_face: '🤤',
  sleeping: '😴',
  mask: '😷',
  face_with_thermometer: '🤒',
  face_with_head_bandage: '🤕',
  nauseated_face: '🤢',
  vomiting_face: '🤮',
  sneezing_face: '🤧',
  hot_face: '🥵',
  cold_face: '🥶',
  woozy_face: '🥴',
  dizzy_face: '😵',
  face_with_spiral_eyes: '😵‍💫',
  exploding_head: '🤯',
  cowboy_hat_face: '🤠',
  partying_face: '🥳',
  disguised_face: '🥸',
  sunglasses: '😎',
  nerd_face: '🤓',
  monocle_face: '🧐',
  confused: '😕',
  worried: '😟',
  slightly_frowning_face: '🙁',
  frowning_face: '☹️',
  open_mouth: '😮',
  hushed: '😯',
  astonished: '😲',
  flushed: '😳',
  pleading_face: '🥺',
  frowning: '😦',
  anguished: '😧',
  fearful: '😨',
  cold_sweat: '😰',
  disappointed_relieved: '😥',
  cry: '😢',
  sob: '😭',
  scream: '😱',
  confounded: '😖',
  persevere: '😣',
  disappointed: '😞',
  sweat: '😓',
  weary: '😩',
  tired_face: '😫',
  yawning_face: '🥱',
  triumph: '😤',
  rage: '😡',
  pout: '😡',
  angry: '😠',
  cursing_face: '🤬',
  smiling_imp: '😈',
  imp: '👿',
  skull: '💀',
  skull_and_crossbones: '☠️',
  hankey: '💩',
  poop: '💩',
  shit: '💩',
  clown_face: '🤡',
  japanese_ogre: '👹',
  japanese_goblin: '👺',
  ghost: '👻',
  alien: '👽',
  space_invader: '👾',
  robot: '🤖',
  smiley_cat: '😺',
  smile_cat: '😸',
  joy_cat: '😹',
  heart_eyes_cat: '😻',
  smirk_cat: '😼',
  kissing_cat: '😽',
  scream_cat: '🙀',
  crying_cat_face: '😿',
  pouting_cat: '😾',
  see_no_evil: '🙈',
  hear_no_evil: '🙉',
  speak_no_evil: '🙊',
  kiss: '💋',
  love_letter: '💌',
  cupid: '💘',
  gift_heart: '💝',
  sparkling_heart: '💖',
  heartpulse: '💗',
  heartbeat: '💓',
  revolving_hearts: '💞',
  two_hearts: '💕',
  heart_decoration: '💟',
  heavy_heart_exclamation: '❣️',
  broken_heart: '💔',
  heart_on_fire: '❤️‍🔥',
  mending_heart: '❤️‍🩹',
  heart: '❤️',
  orange_heart: '🧡',
  yellow_heart: '💛',
  green_heart: '💚',
  blue_heart: '💙',
  purple_heart: '💜',
  brown_heart: '🤎',
  black_heart: '🖤',
  white_heart: '🤍',
  anger: '💢',
  boom: '💥',
  collision: '💥',
  dizzy: '💫',
  sweat_drops: '💦',
  dash: '💨',
  hole: '🕳️',
  bomb: '💣',
  speech_balloon: '💬',
  eye_speech_bubble: '👁️‍🗨️',
  left_speech_bubble: '🗨️',
  right_anger_bubble: '🗯️',
  thought_balloon: '💭',
  zzz: '💤',
  wave: '👋',
  raised_back_of_hand: '🤚',
  raised_hand_with_fingers_splayed: '🖐️',
  hand: '✋',
  raised_hand: '✋',
  vulcan_salute: '🖖',
  ok_hand: '👌',
  pinched_fingers: '🤌',
  pinching_hand: '🤏',
  v: '✌️',
  crossed_fingers: '🤞',
  love_you_gesture: '🤟',
  metal: '🤘',
  call_me_hand: '🤙',
  point_left: '👈',
  point_right: '👉',
  point_up_2: '👆',
  middle_finger: '🖕',
  fu: '🖕',
  point_down: '👇',
  point_up: '☝️',
  '+1': '👍',
  thumbsup: '👍',
  '-1': '👎',
  thumbsdown: '👎',
  fist_raised: '✊',
  fist: '✊',
  fist_oncoming: '👊',
  facepunch: '👊',
  punch: '👊',
  fist_left: '🤛',
  fist_right: '🤜',
  clap: '👏',
  raised_hands: '🙌',
  open_hands: '👐',
  palms_up_together: '🤲',
  handshake: '🤝',
  pray: '🙏',
  writing_hand: '✍️',
  nail_care: '💅',
  selfie: '🤳',
  muscle: '💪',
  mechanical_arm: '🦾',
  mechanical_leg: '🦿',
  leg: '🦵',
  foot: '🦶',
  ear: '👂',
  ear_with_hearing_aid: '🦻',
  nose: '👃',
  brain: '🧠',
  anatomical_heart: '🫀',
  lungs: '🫁',
  tooth: '🦷',
  bone: '🦴',
  eyes: '👀',
  eye: '👁️',
  tongue: '👅',
  lips: '👄',
  baby: '👶',
  child: '🧒',
  boy: '👦',
  girl: '👧',
  adult: '🧑',
  blond_haired_person: '👱',
  man: '👨',
  bearded_person: '🧔',
  man_beard: '🧔‍♂️',
  woman_beard: '🧔‍♀️',
  red_haired_man: '👨‍🦰',
  curly_haired_man: '👨‍🦱',
  white_haired_man: '👨‍🦳',
  bald_man: '👨‍🦲',
  woman: '👩',
  red_haired_woman: '👩‍🦰',
  person_red_hair: '🧑‍🦰',
  curly_haired_woman: '👩‍🦱',
  person_curly_hair: '🧑‍🦱',
  white_haired_woman: '👩‍🦳',
  person_white_hair: '🧑‍🦳',
  bald_woman: '👩‍🦲',
  person_bald: '🧑‍🦲',
  blond_haired_woman: '👱‍♀️',
  blonde_woman: '👱‍♀️',
  blond_haired_man: '👱‍♂️',
  older_adult: '🧓',
  older_man: '👴',
  older_woman: '👵',
  frowning_person: '🙍',
  frowning_man: '🙍‍♂️',
  frowning_woman: '🙍‍♀️',
  pouting_face: '🙎',
  pouting_man: '🙎‍♂️',
  pouting_woman: '🙎‍♀️',
  no_good: '🙅',
  no_good_man: '🙅‍♂️',
  ng_man: '🙅‍♂️',
  no_good_woman: '🙅‍♀️',
  ng_woman: '🙅‍♀️',
  ok_person: '🙆',
  ok_man: '🙆‍♂️',
  ok_woman: '🙆‍♀️',
  tipping_hand_person: '💁',
  information_desk_person: '💁',
  tipping_hand_man: '💁‍♂️',
  sassy_man: '💁‍♂️',
  tipping_hand_woman: '💁‍♀️',
  sassy_woman: '💁‍♀️',
  raising_hand: '🙋',
  raising_hand_man: '🙋‍♂️',
  raising_hand_woman: '🙋‍♀️',
  deaf_person: '🧏',
  deaf_man: '🧏‍♂️',
  deaf_woman: '🧏‍♀️',
  bow: '🙇',
  bowing_man: '🙇‍♂️',
  bowing_woman: '🙇‍♀️',
  facepalm: '🤦',
  man_facepalming: '🤦‍♂️',
  woman_facepalming: '🤦‍♀️',
  shrug: '🤷',
  man_shrugging: '🤷‍♂️',
  woman_shrugging: '🤷‍♀️',
  health_worker: '🧑‍⚕️',
  man_health_worker: '👨‍⚕️',
  woman_health_worker: '👩‍⚕️',
  student: '🧑‍🎓',
  man_student: '👨‍🎓',
  woman_student: '👩‍🎓',
  teacher: '🧑‍🏫',
  man_teacher: '👨‍🏫',
  woman_teacher: '👩‍🏫',
  judge: '🧑‍⚖️',
  man_judge: '👨‍⚖️',
  woman_judge: '👩‍⚖️',
  farmer: '🧑‍🌾',
  man_farmer: '👨‍🌾',
  woman_farmer: '👩‍🌾',
  cook: '🧑‍🍳',
  man_cook: '👨‍🍳',
  woman_cook: '👩‍🍳',
  mechanic: '🧑‍🔧',
  man_mechanic: '👨‍🔧',
  woman_mechanic: '👩‍🔧',
  factory_worker: '🧑‍🏭',
  man_factory_worker: '👨‍🏭',
  woman_factory_worker: '👩‍🏭',
  office_worker: '🧑‍💼',
  man_office_worker: '👨‍💼',
  woman_office_worker: '👩‍💼',
  scientist: '🧑‍🔬',
  man_scientist: '👨‍🔬',
  woman_scientist: '👩‍🔬',
  technologist: '🧑‍💻',
  man_technologist: '👨‍💻',
  woman_technologist: '👩‍💻',
  singer: '🧑‍🎤',
  man_singer: '👨‍🎤',
  woman_singer: '👩‍🎤',
  artist: '🧑‍🎨',
  man_artist: '👨‍🎨',
  woman_artist: '👩‍🎨',
  pilot: '🧑‍✈️',
  man_pilot: '👨‍✈️',
  woman_pilot: '👩‍✈️',
  astronaut: '🧑‍🚀',
  man_astronaut: '👨‍🚀',
  woman_astronaut: '👩‍🚀',
  firefighter: '🧑‍🚒',
  man_firefighter: '👨‍🚒',
  woman_firefighter: '👩‍🚒',
  police_officer: '👮',
  cop: '👮',
  policeman: '👮‍♂️',
  policewoman: '👮‍♀️',
  detective: '🕵️',
  male_detective: '🕵️‍♂️',
  female_detective: '🕵️‍♀️',
  guard: '💂',
  guardsman: '💂‍♂️',
  guardswoman: '💂‍♀️',
  ninja: '🥷',
  construction_worker: '👷',
  construction_worker_man: '👷‍♂️',
  construction_worker_woman: '👷‍♀️',
  prince: '🤴',
  princess: '👸',
  person_with_turban: '👳',
  man_with_turban: '👳‍♂️',
  woman_with_turban: '👳‍♀️',
  man_with_gua_pi_mao: '👲',
  woman_with_headscarf: '🧕',
  person_in_tuxedo: '🤵',
  man_in_tuxedo: '🤵‍♂️',
  woman_in_tuxedo: '🤵‍♀️',
  person_with_veil: '👰',
  man_with_veil: '👰‍♂️',
  woman_with_veil: '👰‍♀️',
  bride_with_veil: '👰‍♀️',
  pregnant_woman: '🤰',
  breast_feeding: '🤱',
  woman_feeding_baby: '👩‍🍼',
  man_feeding_baby: '👨‍🍼',
  person_feeding_baby: '🧑‍🍼',
  angel: '👼',
  santa: '🎅',
  mrs_claus: '🤶',
  mx_claus: '🧑‍🎄',
  superhero: '🦸',
  superhero_man: '🦸‍♂️',
  superhero_woman: '🦸‍♀️',
  supervillain: '🦹',
  supervillain_man: '🦹‍♂️',
  supervillain_woman: '🦹‍♀️',
  mage: '🧙',
  mage_man: '🧙‍♂️',
  mage_woman: '🧙‍♀️',
  fairy: '🧚',
  fairy_man: '🧚‍♂️',
  fairy_woman: '🧚‍♀️',
  vampire: '🧛',
  vampire_man: '🧛‍♂️',
  vampire_woman: '🧛‍♀️',
  merperson: '🧜',
  merman: '🧜‍♂️',
  mermaid: '🧜‍♀️',
  elf: '🧝',
  elf_man: '🧝‍♂️',
  elf_woman: '🧝‍♀️',
  genie: '🧞',
  genie_man: '🧞‍♂️',
  genie_woman: '🧞‍♀️',
  zombie: '🧟',
  zombie_man: '🧟‍♂️',
  zombie_woman: '🧟‍♀️',
  massage: '💆',
  massage_man: '💆‍♂️',
  massage_woman: '💆‍♀️',
  haircut: '💇',
  haircut_man: '💇‍♂️',
  haircut_woman: '💇‍♀️',
  walking: '🚶',
  walking_man: '🚶‍♂️',
  walking_woman: '🚶‍♀️',
  standing_person: '🧍',
  standing_man: '🧍‍♂️',
  standing_woman: '🧍‍♀️',
  kneeling_person: '🧎',
  kneeling_man: '🧎‍♂️',
  kneeling_woman: '🧎‍♀️',
  person_with_probing_cane: '🧑‍🦯',
  man_with_probing_cane: '👨‍🦯',
  woman_with_probing_cane: '👩‍🦯',
  person_in_motorized_wheelchair: '🧑‍🦼',
  man_in_motorized_wheelchair: '👨‍🦼',
  woman_in_motorized_wheelchair: '👩‍🦼',
  person_in_manual_wheelchair: '🧑‍🦽',
  man_in_manual_wheelchair: '👨‍🦽',
  woman_in_manual_wheelchair: '👩‍🦽',
  runner: '🏃',
  running: '🏃',
  running_man: '🏃‍♂️',
  running_woman: '🏃‍♀️',
  woman_dancing: '💃',
  dancer: '💃',
  man_dancing: '🕺',
  business_suit_levitating: '🕴️',
  dancers: '👯',
  dancing_men: '👯‍♂️',
  dancing_women: '👯‍♀️',
  sauna_person: '🧖',
  sauna_man: '🧖‍♂️',
  sauna_woman: '🧖‍♀️',
  climbing: '🧗',
  climbing_man: '🧗‍♂️',
  climbing_woman: '🧗‍♀️',
  person_fencing: '🤺',
  horse_racing: '🏇',
  skier: '⛷️',
  snowboarder: '🏂',
  golfing: '🏌️',
  golfing_man: '🏌️‍♂️',
  golfing_woman: '🏌️‍♀️',
  surfer: '🏄',
  surfing_man: '🏄‍♂️',
  surfing_woman: '🏄‍♀️',
  rowboat: '🚣',
  rowing_man: '🚣‍♂️',
  rowing_woman: '🚣‍♀️',
  swimmer: '🏊',
  swimming_man: '🏊‍♂️',
  swimming_woman: '🏊‍♀️',
  bouncing_ball_person: '⛹️',
  bouncing_ball_man: '⛹️‍♂️',
  basketball_man: '⛹️‍♂️',
  bouncing_ball_woman: '⛹️‍♀️',
  basketball_woman: '⛹️‍♀️',
  weight_lifting: '🏋️',
  weight_lifting_man: '🏋️‍♂️',
  weight_lifting_woman: '🏋️‍♀️',
  bicyclist: '🚴',
  biking_man: '🚴‍♂️',
  biking_woman: '🚴‍♀️',
  mountain_bicyclist: '🚵',
  mountain_biking_man: '🚵‍♂️',
  mountain_biking_woman: '🚵‍♀️',
  cartwheeling: '🤸',
  man_cartwheeling: '🤸‍♂️',
  woman_cartwheeling: '🤸‍♀️',
  wrestling: '🤼',
  men_wrestling: '🤼‍♂️',
  women_wrestling: '🤼‍♀️',
  water_polo: '🤽',
  man_playing_water_polo: '🤽‍♂️',
  woman_playing_water_polo: '🤽‍♀️',
  handball_person: '🤾',
  man_playing_handball: '🤾‍♂️',
  woman_playing_handball: '🤾‍♀️',
  juggling_person: '🤹',
  man_juggling: '🤹‍♂️',
  woman_juggling: '🤹‍♀️',
  lotus_position: '🧘',
  lotus_position_man: '🧘‍♂️',
  lotus_position_woman: '🧘‍♀️',
  bath: '🛀',
  sleeping_bed: '🛌',
  people_holding_hands: '🧑‍🤝‍🧑',
  two_women_holding_hands: '👭',
  couple: '👫',
  two_men_holding_hands: '👬',
  couplekiss: '💏',
  couplekiss_man_woman: '👩‍❤️‍💋‍👨',
  couplekiss_man_man: '👨‍❤️‍💋‍👨',
  couplekiss_woman_woman: '👩‍❤️‍💋‍👩',
  couple_with_heart: '💑',
  couple_with_heart_woman_man: '👩‍❤️‍👨',
  couple_with_heart_man_man: '👨‍❤️‍👨',
  couple_with_heart_woman_woman: '👩‍❤️‍👩',
  family: '👪',
  family_man_woman_boy: '👨‍👩‍👦',
  family_man_woman_girl: '👨‍👩‍👧',
  family_man_woman_girl_boy: '👨‍👩‍👧‍👦',
  family_man_woman_boy_boy: '👨‍👩‍👦‍👦',
  family_man_woman_girl_girl: '👨‍👩‍👧‍👧',
  family_man_man_boy: '👨‍👨‍👦',
  family_man_man_girl: '👨‍👨‍👧',
  family_man_man_girl_boy: '👨‍👨‍👧‍👦',
  family_man_man_boy_boy: '👨‍👨‍👦‍👦',
  family_man_man_girl_girl: '👨‍👨‍👧‍👧',
  family_woman_woman_boy: '👩‍👩‍👦',
  family_woman_woman_girl: '👩‍👩‍👧',
  family_woman_woman_girl_boy: '👩‍👩‍👧‍👦',
  family_woman_woman_boy_boy: '👩‍👩‍👦‍👦',
  family_woman_woman_girl_girl: '👩‍👩‍👧‍👧',
  family_man_boy: '👨‍👦',
  family_man_boy_boy: '👨‍👦‍👦',
  family_man_girl: '👨‍👧',
  family_man_girl_boy: '👨‍👧‍👦',
  family_man_girl_girl: '👨‍👧‍👧',
  family_woman_boy: '👩‍👦',
  family_woman_boy_boy: '👩‍👦‍👦',
  family_woman_girl: '👩‍👧',
  family_woman_girl_boy: '👩‍👧‍👦',
  family_woman_girl_girl: '👩‍👧‍👧',
  speaking_head: '🗣️',
  bust_in_silhouette: '👤',
  busts_in_silhouette: '👥',
  people_hugging: '🫂',
  footprints: '👣',
  monkey_face: '🐵',
  monkey: '🐒',
  gorilla: '🦍',
  orangutan: '🦧',
  dog: '🐶',
  dog2: '🐕',
  guide_dog: '🦮',
  service_dog: '🐕‍🦺',
  poodle: '🐩',
  wolf: '🐺',
  fox_face: '🦊',
  raccoon: '🦝',
  cat: '🐱',
  cat2: '🐈',
  black_cat: '🐈‍⬛',
  lion: '🦁',
  tiger: '🐯',
  tiger2: '🐅',
  leopard: '🐆',
  horse: '🐴',
  racehorse: '🐎',
  unicorn: '🦄',
  zebra: '🦓',
  deer: '🦌',
  bison: '🦬',
  cow: '🐮',
  ox: '🐂',
  water_buffalo: '🐃',
  cow2: '🐄',
  pig: '🐷',
  pig2: '🐖',
  boar: '🐗',
  pig_nose: '🐽',
  ram: '🐏',
  sheep: '🐑',
  goat: '🐐',
  dromedary_camel: '🐪',
  camel: '🐫',
  llama: '🦙',
  giraffe: '🦒',
  elephant: '🐘',
  mammoth: '🦣',
  rhinoceros: '🦏',
  hippopotamus: '🦛',
  mouse: '🐭',
  mouse2: '🐁',
  rat: '🐀',
  hamster: '🐹',
  rabbit: '🐰',
  rabbit2: '🐇',
  chipmunk: '🐿️',
  beaver: '🦫',
  hedgehog: '🦔',
  bat: '🦇',
  bear: '🐻',
  polar_bear: '🐻‍❄️',
  koala: '🐨',
  panda_face: '🐼',
  sloth: '🦥',
  otter: '🦦',
  skunk: '🦨',
  kangaroo: '🦘',
  badger: '🦡',
  feet: '🐾',
  paw_prints: '🐾',
  turkey: '🦃',
  chicken: '🐔',
  rooster: '🐓',
  hatching_chick: '🐣',
  baby_chick: '🐤',
  hatched_chick: '🐥',
  bird: '🐦',
  penguin: '🐧',
  dove: '🕊️',
  eagle: '🦅',
  duck: '🦆',
  swan: '🦢',
  owl: '🦉',
  dodo: '🦤',
  feather: '🪶',
  flamingo: '🦩',
  peacock: '🦚',
  parrot: '🦜',
  frog: '🐸',
  crocodile: '🐊',
  turtle: '🐢',
  lizard: '🦎',
  snake: '🐍',
  dragon_face: '🐲',
  dragon: '🐉',
  sauropod: '🦕',
  't-rex': '🦖',
  whale: '🐳',
  whale2: '🐋',
  dolphin: '🐬',
  flipper: '🐬',
  seal: '🦭',
  fish: '🐟',
  tropical_fish: '🐠',
  blowfish: '🐡',
  shark: '🦈',
  octopus: '🐙',
  shell: '🐚',
  snail: '🐌',
  butterfly: '🦋',
  bug: '🐛',
  ant: '🐜',
  bee: '🐝',
  honeybee: '🐝',
  beetle: '🪲',
  lady_beetle: '🐞',
  cricket: '🦗',
  cockroach: '🪳',
  spider: '🕷️',
  spider_web: '🕸️',
  scorpion: '🦂',
  mosquito: '🦟',
  fly: '🪰',
  worm: '🪱',
  microbe: '🦠',
  bouquet: '💐',
  cherry_blossom: '🌸',
  white_flower: '💮',
  rosette: '🏵️',
  rose: '🌹',
  wilted_flower: '🥀',
  hibiscus: '🌺',
  sunflower: '🌻',
  blossom: '🌼',
  tulip: '🌷',
  seedling: '🌱',
  potted_plant: '🪴',
  evergreen_tree: '🌲',
  deciduous_tree: '🌳',
  palm_tree: '🌴',
  cactus: '🌵',
  ear_of_rice: '🌾',
  herb: '🌿',
  shamrock: '☘️',
  four_leaf_clover: '🍀',
  maple_leaf: '🍁',
  fallen_leaf: '🍂',
  leaves: '🍃',
  grapes: '🍇',
  melon: '🍈',
  watermelon: '🍉',
  tangerine: '🍊',
  orange: '🍊',
  mandarin: '🍊',
  lemon: '🍋',
  banana: '🍌',
  pineapple: '🍍',
  mango: '🥭',
  apple: '🍎',
  green_apple: '🍏',
  pear: '🍐',
  peach: '🍑',
  cherries: '🍒',
  strawberry: '🍓',
  blueberries: '🫐',
  kiwi_fruit: '🥝',
  tomato: '🍅',
  olive: '🫒',
  coconut: '🥥',
  avocado: '🥑',
  eggplant: '🍆',
  potato: '🥔',
  carrot: '🥕',
  corn: '🌽',
  hot_pepper: '🌶️',
  bell_pepper: '🫑',
  cucumber: '🥒',
  leafy_green: '🥬',
  broccoli: '🥦',
  garlic: '🧄',
  onion: '🧅',
  mushroom: '🍄',
  peanuts: '🥜',
  chestnut: '🌰',
  bread: '🍞',
  croissant: '🥐',
  baguette_bread: '🥖',
  flatbread: '🫓',
  pretzel: '🥨',
  bagel: '🥯',
  pancakes: '🥞',
  waffle: '🧇',
  cheese: '🧀',
  meat_on_bone: '🍖',
  poultry_leg: '🍗',
  cut_of_meat: '🥩',
  bacon: '🥓',
  hamburger: '🍔',
  fries: '🍟',
  pizza: '🍕',
  hotdog: '🌭',
  sandwich: '🥪',
  taco: '🌮',
  burrito: '🌯',
  tamale: '🫔',
  stuffed_flatbread: '🥙',
  falafel: '🧆',
  egg: '🥚',
  fried_egg: '🍳',
  shallow_pan_of_food: '🥘',
  stew: '🍲',
  fondue: '🫕',
  bowl_with_spoon: '🥣',
  green_salad: '🥗',
  popcorn: '🍿',
  butter: '🧈',
  salt: '🧂',
  canned_food: '🥫',
  bento: '🍱',
  rice_cracker: '🍘',
  rice_ball: '🍙',
  rice: '🍚',
  curry: '🍛',
  ramen: '🍜',
  spaghetti: '🍝',
  sweet_potato: '🍠',
  oden: '🍢',
  sushi: '🍣',
  fried_shrimp: '🍤',
  fish_cake: '🍥',
  moon_cake: '🥮',
  dango: '🍡',
  dumpling: '🥟',
  fortune_cookie: '🥠',
  takeout_box: '🥡',
  crab: '🦀',
  lobster: '🦞',
  shrimp: '🦐',
  squid: '🦑',
  oyster: '🦪',
  icecream: '🍦',
  shaved_ice: '🍧',
  ice_cream: '🍨',
  doughnut: '🍩',
  cookie: '🍪',
  birthday: '🎂',
  cake: '🍰',
  cupcake: '🧁',
  pie: '🥧',
  chocolate_bar: '🍫',
  candy: '🍬',
  lollipop: '🍭',
  custard: '🍮',
  honey_pot: '🍯',
  baby_bottle: '🍼',
  milk_glass: '🥛',
  coffee: '☕',
  teapot: '🫖',
  tea: '🍵',
  sake: '🍶',
  champagne: '🍾',
  wine_glass: '🍷',
  cocktail: '🍸',
  tropical_drink: '🍹',
  beer: '🍺',
  beers: '🍻',
  clinking_glasses: '🥂',
  tumbler_glass: '🥃',
  cup_with_straw: '🥤',
  bubble_tea: '🧋',
  beverage_box: '🧃',
  mate: '🧉',
  ice_cube: '🧊',
  chopsticks: '🥢',
  plate_with_cutlery: '🍽️',
  fork_and_knife: '🍴',
  spoon: '🥄',
  hocho: '🔪',
  knife: '🔪',
  amphora: '🏺',
  earth_africa: '🌍',
  earth_americas: '🌎',
  earth_asia: '🌏',
  globe_with_meridians: '🌐',
  world_map: '🗺️',
  japan: '🗾',
  compass: '🧭',
  mountain_snow: '🏔️',
  mountain: '⛰️',
  volcano: '🌋',
  mount_fuji: '🗻',
  camping: '🏕️',
  beach_umbrella: '🏖️',
  desert: '🏜️',
  desert_island: '🏝️',
  national_park: '🏞️',
  stadium: '🏟️',
  classical_building: '🏛️',
  building_construction: '🏗️',
  bricks: '🧱',
  rock: '🪨',
  wood: '🪵',
  hut: '🛖',
  houses: '🏘️',
  derelict_house: '🏚️',
  house: '🏠',
  house_with_garden: '🏡',
  office: '🏢',
  post_office: '🏣',
  european_post_office: '🏤',
  hospital: '🏥',
  bank: '🏦',
  hotel: '🏨',
  love_hotel: '🏩',
  convenience_store: '🏪',
  school: '🏫',
  department_store: '🏬',
  factory: '🏭',
  japanese_castle: '🏯',
  european_castle: '🏰',
  wedding: '💒',
  tokyo_tower: '🗼',
  statue_of_liberty: '🗽',
  church: '⛪',
  mosque: '🕌',
  hindu_temple: '🛕',
  synagogue: '🕍',
  shinto_shrine: '⛩️',
  kaaba: '🕋',
  fountain: '⛲',
  tent: '⛺',
  foggy: '🌁',
  night_with_stars: '🌃',
  cityscape: '🏙️',
  sunrise_over_mountains: '🌄',
  sunrise: '🌅',
  city_sunset: '🌆',
  city_sunrise: '🌇',
  bridge_at_night: '🌉',
  hotsprings: '♨️',
  carousel_horse: '🎠',
  ferris_wheel: '🎡',
  roller_coaster: '🎢',
  barber: '💈',
  circus_tent: '🎪',
  steam_locomotive: '🚂',
  railway_car: '🚃',
  bullettrain_side: '🚄',
  bullettrain_front: '🚅',
  train2: '🚆',
  metro: '🚇',
  light_rail: '🚈',
  station: '🚉',
  tram: '🚊',
  monorail: '🚝',
  mountain_railway: '🚞',
  train: '🚋',
  bus: '🚌',
  oncoming_bus: '🚍',
  trolleybus: '🚎',
  minibus: '🚐',
  ambulance: '🚑',
  fire_engine: '🚒',
  police_car: '🚓',
  oncoming_police_car: '🚔',
  taxi: '🚕',
  oncoming_taxi: '🚖',
  car: '🚗',
  red_car: '🚗',
  oncoming_automobile: '🚘',
  blue_car: '🚙',
  pickup_truck: '🛻',
  truck: '🚚',
  articulated_lorry: '🚛',
  tractor: '🚜',
  racing_car: '🏎️',
  motorcycle: '🏍️',
  motor_scooter: '🛵',
  manual_wheelchair: '🦽',
  motorized_wheelchair: '🦼',
  auto_rickshaw: '🛺',
  bike: '🚲',
  kick_scooter: '🛴',
  skateboard: '🛹',
  roller_skate: '🛼',
  busstop: '🚏',
  motorway: '🛣️',
  railway_track: '🛤️',
  oil_drum: '🛢️',
  fuelpump: '⛽',
  rotating_light: '🚨',
  traffic_light: '🚥',
  vertical_traffic_light: '🚦',
  stop_sign: '🛑',
  construction: '🚧',
  anchor: '⚓',
  boat: '⛵',
  sailboat: '⛵',
  canoe: '🛶',
  speedboat: '🚤',
  passenger_ship: '🛳️',
  ferry: '⛴️',
  motor_boat: '🛥️',
  ship: '🚢',
  airplane: '✈️',
  small_airplane: '🛩️',
  flight_departure: '🛫',
  flight_arrival: '🛬',
  parachute: '🪂',
  seat: '💺',
  helicopter: '🚁',
  suspension_railway: '🚟',
  mountain_cableway: '🚠',
  aerial_tramway: '🚡',
  artificial_satellite: '🛰️',
  rocket: '🚀',
  flying_saucer: '🛸',
  bellhop_bell: '🛎️',
  luggage: '🧳',
  hourglass: '⌛',
  hourglass_flowing_sand: '⏳',
  watch: '⌚',
  alarm_clock: '⏰',
  stopwatch: '⏱️',
  timer_clock: '⏲️',
  mantelpiece_clock: '🕰️',
  clock12: '🕛',
  clock1230: '🕧',
  clock1: '🕐',
  clock130: '🕜',
  clock2: '🕑',
  clock230: '🕝',
  clock3: '🕒',
  clock330: '🕞',
  clock4: '🕓',
  clock430: '🕟',
  clock5: '🕔',
  clock530: '🕠',
  clock6: '🕕',
  clock630: '🕡',
  clock7: '🕖',
  clock730: '🕢',
  clock8: '🕗',
  clock830: '🕣',
  clock9: '🕘',
  clock930: '🕤',
  clock10: '🕙',
  clock1030: '🕥',
  clock11: '🕚',
  clock1130: '🕦',
  new_moon: '🌑',
  waxing_crescent_moon: '🌒',
  first_quarter_moon: '🌓',
  moon: '🌔',
  waxing_gibbous_moon: '🌔',
  full_moon: '🌕',
  waning_gibbous_moon: '🌖',
  last_quarter_moon: '🌗',
  waning_crescent_moon: '🌘',
  crescent_moon: '🌙',
  new_moon_with_face: '🌚',
  first_quarter_moon_with_face: '🌛',
  last_quarter_moon_with_face: '🌜',
  thermometer: '🌡️',
  sunny: '☀️',
  full_moon_with_face: '🌝',
  sun_with_face: '🌞',
  ringed_planet: '🪐',
  star: '⭐',
  star2: '🌟',
  stars: '🌠',
  milky_way: '🌌',
  cloud: '☁️',
  partly_sunny: '⛅',
  cloud_with_lightning_and_rain: '⛈️',
  sun_behind_small_cloud: '🌤️',
  sun_behind_large_cloud: '🌥️',
  sun_behind_rain_cloud: '🌦️',
  cloud_with_rain: '🌧️',
  cloud_with_snow: '🌨️',
  cloud_with_lightning: '🌩️',
  tornado: '🌪️',
  fog: '🌫️',
  wind_face: '🌬️',
  cyclone: '🌀',
  rainbow: '🌈',
  closed_umbrella: '🌂',
  open_umbrella: '☂️',
  umbrella: '☔',
  parasol_on_ground: '⛱️',
  zap: '⚡',
  snowflake: '❄️',
  snowman_with_snow: '☃️',
  snowman: '⛄',
  comet: '☄️',
  fire: '🔥',
  droplet: '💧',
  ocean: '🌊',
  jack_o_lantern: '🎃',
  christmas_tree: '🎄',
  fireworks: '🎆',
  sparkler: '🎇',
  firecracker: '🧨',
  sparkles: '✨',
  balloon: '🎈',
  tada: '🎉',
  confetti_ball: '🎊',
  tanabata_tree: '🎋',
  bamboo: '🎍',
  dolls: '🎎',
  flags: '🎏',
  wind_chime: '🎐',
  rice_scene: '🎑',
  red_envelope: '🧧',
  ribbon: '🎀',
  gift: '🎁',
  reminder_ribbon: '🎗️',
  tickets: '🎟️',
  ticket: '🎫',
  medal_military: '🎖️',
  trophy: '🏆',
  medal_sports: '🏅',
  '1st_place_medal': '🥇',
  '2nd_place_medal': '🥈',
  '3rd_place_medal': '🥉',
  soccer: '⚽',
  baseball: '⚾',
  softball: '🥎',
  basketball: '🏀',
  volleyball: '🏐',
  football: '🏈',
  rugby_football: '🏉',
  tennis: '🎾',
  flying_disc: '🥏',
  bowling: '🎳',
  cricket_game: '🏏',
  field_hockey: '🏑',
  ice_hockey: '🏒',
  lacrosse: '🥍',
  ping_pong: '🏓',
  badminton: '🏸',
  boxing_glove: '🥊',
  martial_arts_uniform: '🥋',
  goal_net: '🥅',
  golf: '⛳',
  ice_skate: '⛸️',
  fishing_pole_and_fish: '🎣',
  diving_mask: '🤿',
  running_shirt_with_sash: '🎽',
  ski: '🎿',
  sled: '🛷',
  curling_stone: '🥌',
  dart: '🎯',
  yo_yo: '🪀',
  kite: '🪁',
  '8ball': '🎱',
  crystal_ball: '🔮',
  magic_wand: '🪄',
  nazar_amulet: '🧿',
  video_game: '🎮',
  joystick: '🕹️',
  slot_machine: '🎰',
  game_die: '🎲',
  jigsaw: '🧩',
  teddy_bear: '🧸',
  pinata: '🪅',
  nesting_dolls: '🪆',
  spades: '♠️',
  hearts: '♥️',
  diamonds: '♦️',
  clubs: '♣️',
  chess_pawn: '♟️',
  black_joker: '🃏',
  mahjong: '🀄',
  flower_playing_cards: '🎴',
  performing_arts: '🎭',
  framed_picture: '🖼️',
  art: '🎨',
  thread: '🧵',
  sewing_needle: '🪡',
  yarn: '🧶',
  knot: '🪢',
  eyeglasses: '👓',
  dark_sunglasses: '🕶️',
  goggles: '🥽',
  lab_coat: '🥼',
  safety_vest: '🦺',
  necktie: '👔',
  shirt: '👕',
  tshirt: '👕',
  jeans: '👖',
  scarf: '🧣',
  gloves: '🧤',
  coat: '🧥',
  socks: '🧦',
  dress: '👗',
  kimono: '👘',
  sari: '🥻',
  one_piece_swimsuit: '🩱',
  swim_brief: '🩲',
  shorts: '🩳',
  bikini: '👙',
  womans_clothes: '👚',
  purse: '👛',
  handbag: '👜',
  pouch: '👝',
  shopping: '🛍️',
  school_satchel: '🎒',
  thong_sandal: '🩴',
  mans_shoe: '👞',
  shoe: '👞',
  athletic_shoe: '👟',
  hiking_boot: '🥾',
  flat_shoe: '🥿',
  high_heel: '👠',
  sandal: '👡',
  ballet_shoes: '🩰',
  boot: '👢',
  crown: '👑',
  womans_hat: '👒',
  tophat: '🎩',
  mortar_board: '🎓',
  billed_cap: '🧢',
  military_helmet: '🪖',
  rescue_worker_helmet: '⛑️',
  prayer_beads: '📿',
  lipstick: '💄',
  ring: '💍',
  gem: '💎',
  mute: '🔇',
  speaker: '🔈',
  sound: '🔉',
  loud_sound: '🔊',
  loudspeaker: '📢',
  mega: '📣',
  postal_horn: '📯',
  bell: '🔔',
  no_bell: '🔕',
  musical_score: '🎼',
  musical_note: '🎵',
  notes: '🎶',
  studio_microphone: '🎙️',
  level_slider: '🎚️',
  control_knobs: '🎛️',
  microphone: '🎤',
  headphones: '🎧',
  radio: '📻',
  saxophone: '🎷',
  accordion: '🪗',
  guitar: '🎸',
  musical_keyboard: '🎹',
  trumpet: '🎺',
  violin: '🎻',
  banjo: '🪕',
  drum: '🥁',
  long_drum: '🪘',
  iphone: '📱',
  calling: '📲',
  phone: '☎️',
  telephone: '☎️',
  telephone_receiver: '📞',
  pager: '📟',
  fax: '📠',
  battery: '🔋',
  electric_plug: '🔌',
  computer: '💻',
  desktop_computer: '🖥️',
  printer: '🖨️',
  keyboard: '⌨️',
  computer_mouse: '🖱️',
  trackball: '🖲️',
  minidisc: '💽',
  floppy_disk: '💾',
  cd: '💿',
  dvd: '📀',
  abacus: '🧮',
  movie_camera: '🎥',
  film_strip: '🎞️',
  film_projector: '📽️',
  clapper: '🎬',
  tv: '📺',
  camera: '📷',
  camera_flash: '📸',
  video_camera: '📹',
  vhs: '📼',
  mag: '🔍',
  mag_right: '🔎',
  candle: '🕯️',
  bulb: '💡',
  flashlight: '🔦',
  izakaya_lantern: '🏮',
  lantern: '🏮',
  diya_lamp: '🪔',
  notebook_with_decorative_cover: '📔',
  closed_book: '📕',
  book: '📖',
  open_book: '📖',
  green_book: '📗',
  blue_book: '📘',
  orange_book: '📙',
  books: '📚',
  notebook: '📓',
  ledger: '📒',
  page_with_curl: '📃',
  scroll: '📜',
  page_facing_up: '📄',
  newspaper: '📰',
  newspaper_roll: '🗞️',
  bookmark_tabs: '📑',
  bookmark: '🔖',
  label: '🏷️',
  moneybag: '💰',
  coin: '🪙',
  yen: '💴',
  dollar: '💵',
  euro: '💶',
  pound: '💷',
  money_with_wings: '💸',
  credit_card: '💳',
  receipt: '🧾',
  chart: '💹',
  envelope: '✉️',
  email: '📧',
  'e-mail': '📧',
  incoming_envelope: '📨',
  envelope_with_arrow: '📩',
  outbox_tray: '📤',
  inbox_tray: '📥',
  "package": '📦',
  mailbox: '📫',
  mailbox_closed: '📪',
  mailbox_with_mail: '📬',
  mailbox_with_no_mail: '📭',
  postbox: '📮',
  ballot_box: '🗳️',
  pencil2: '✏️',
  black_nib: '✒️',
  fountain_pen: '🖋️',
  pen: '🖊️',
  paintbrush: '🖌️',
  crayon: '🖍️',
  memo: '📝',
  pencil: '📝',
  briefcase: '💼',
  file_folder: '📁',
  open_file_folder: '📂',
  card_index_dividers: '🗂️',
  date: '📅',
  calendar: '📆',
  spiral_notepad: '🗒️',
  spiral_calendar: '🗓️',
  card_index: '📇',
  chart_with_upwards_trend: '📈',
  chart_with_downwards_trend: '📉',
  bar_chart: '📊',
  clipboard: '📋',
  pushpin: '📌',
  round_pushpin: '📍',
  paperclip: '📎',
  paperclips: '🖇️',
  straight_ruler: '📏',
  triangular_ruler: '📐',
  scissors: '✂️',
  card_file_box: '🗃️',
  file_cabinet: '🗄️',
  wastebasket: '🗑️',
  lock: '🔒',
  unlock: '🔓',
  lock_with_ink_pen: '🔏',
  closed_lock_with_key: '🔐',
  key: '🔑',
  old_key: '🗝️',
  hammer: '🔨',
  axe: '🪓',
  pick: '⛏️',
  hammer_and_pick: '⚒️',
  hammer_and_wrench: '🛠️',
  dagger: '🗡️',
  crossed_swords: '⚔️',
  gun: '🔫',
  boomerang: '🪃',
  bow_and_arrow: '🏹',
  shield: '🛡️',
  carpentry_saw: '🪚',
  wrench: '🔧',
  screwdriver: '🪛',
  nut_and_bolt: '🔩',
  gear: '⚙️',
  clamp: '🗜️',
  balance_scale: '⚖️',
  probing_cane: '🦯',
  link: '🔗',
  chains: '⛓️',
  hook: '🪝',
  toolbox: '🧰',
  magnet: '🧲',
  ladder: '🪜',
  alembic: '⚗️',
  test_tube: '🧪',
  petri_dish: '🧫',
  dna: '🧬',
  microscope: '🔬',
  telescope: '🔭',
  satellite: '📡',
  syringe: '💉',
  drop_of_blood: '🩸',
  pill: '💊',
  adhesive_bandage: '🩹',
  stethoscope: '🩺',
  door: '🚪',
  elevator: '🛗',
  mirror: '🪞',
  window: '🪟',
  bed: '🛏️',
  couch_and_lamp: '🛋️',
  chair: '🪑',
  toilet: '🚽',
  plunger: '🪠',
  shower: '🚿',
  bathtub: '🛁',
  mouse_trap: '🪤',
  razor: '🪒',
  lotion_bottle: '🧴',
  safety_pin: '🧷',
  broom: '🧹',
  basket: '🧺',
  roll_of_paper: '🧻',
  bucket: '🪣',
  soap: '🧼',
  toothbrush: '🪥',
  sponge: '🧽',
  fire_extinguisher: '🧯',
  shopping_cart: '🛒',
  smoking: '🚬',
  coffin: '⚰️',
  headstone: '🪦',
  funeral_urn: '⚱️',
  moyai: '🗿',
  placard: '🪧',
  atm: '🏧',
  put_litter_in_its_place: '🚮',
  potable_water: '🚰',
  wheelchair: '♿',
  mens: '🚹',
  womens: '🚺',
  restroom: '🚻',
  baby_symbol: '🚼',
  wc: '🚾',
  passport_control: '🛂',
  customs: '🛃',
  baggage_claim: '🛄',
  left_luggage: '🛅',
  warning: '⚠️',
  children_crossing: '🚸',
  no_entry: '⛔',
  no_entry_sign: '🚫',
  no_bicycles: '🚳',
  no_smoking: '🚭',
  do_not_litter: '🚯',
  'non-potable_water': '🚱',
  no_pedestrians: '🚷',
  no_mobile_phones: '📵',
  underage: '🔞',
  radioactive: '☢️',
  biohazard: '☣️',
  arrow_up: '⬆️',
  arrow_upper_right: '↗️',
  arrow_right: '➡️',
  arrow_lower_right: '↘️',
  arrow_down: '⬇️',
  arrow_lower_left: '↙️',
  arrow_left: '⬅️',
  arrow_upper_left: '↖️',
  arrow_up_down: '↕️',
  left_right_arrow: '↔️',
  leftwards_arrow_with_hook: '↩️',
  arrow_right_hook: '↪️',
  arrow_heading_up: '⤴️',
  arrow_heading_down: '⤵️',
  arrows_clockwise: '🔃',
  arrows_counterclockwise: '🔄',
  back: '🔙',
  end: '🔚',
  on: '🔛',
  soon: '🔜',
  top: '🔝',
  place_of_worship: '🛐',
  atom_symbol: '⚛️',
  om: '🕉️',
  star_of_david: '✡️',
  wheel_of_dharma: '☸️',
  yin_yang: '☯️',
  latin_cross: '✝️',
  orthodox_cross: '☦️',
  star_and_crescent: '☪️',
  peace_symbol: '☮️',
  menorah: '🕎',
  six_pointed_star: '🔯',
  aries: '♈',
  taurus: '♉',
  gemini: '♊',
  cancer: '♋',
  leo: '♌',
  virgo: '♍',
  libra: '♎',
  scorpius: '♏',
  sagittarius: '♐',
  capricorn: '♑',
  aquarius: '♒',
  pisces: '♓',
  ophiuchus: '⛎',
  twisted_rightwards_arrows: '🔀',
  repeat: '🔁',
  repeat_one: '🔂',
  arrow_forward: '▶️',
  fast_forward: '⏩',
  next_track_button: '⏭️',
  play_or_pause_button: '⏯️',
  arrow_backward: '◀️',
  rewind: '⏪',
  previous_track_button: '⏮️',
  arrow_up_small: '🔼',
  arrow_double_up: '⏫',
  arrow_down_small: '🔽',
  arrow_double_down: '⏬',
  pause_button: '⏸️',
  stop_button: '⏹️',
  record_button: '⏺️',
  eject_button: '⏏️',
  cinema: '🎦',
  low_brightness: '🔅',
  high_brightness: '🔆',
  signal_strength: '📶',
  vibration_mode: '📳',
  mobile_phone_off: '📴',
  female_sign: '♀️',
  male_sign: '♂️',
  transgender_symbol: '⚧️',
  heavy_multiplication_x: '✖️',
  heavy_plus_sign: '➕',
  heavy_minus_sign: '➖',
  heavy_division_sign: '➗',
  infinity: '♾️',
  bangbang: '‼️',
  interrobang: '⁉️',
  question: '❓',
  grey_question: '❔',
  grey_exclamation: '❕',
  exclamation: '❗',
  heavy_exclamation_mark: '❗',
  wavy_dash: '〰️',
  currency_exchange: '💱',
  heavy_dollar_sign: '💲',
  medical_symbol: '⚕️',
  recycle: '♻️',
  fleur_de_lis: '⚜️',
  trident: '🔱',
  name_badge: '📛',
  beginner: '🔰',
  o: '⭕',
  white_check_mark: '✅',
  ballot_box_with_check: '☑️',
  heavy_check_mark: '✔️',
  x: '❌',
  negative_squared_cross_mark: '❎',
  curly_loop: '➰',
  loop: '➿',
  part_alternation_mark: '〽️',
  eight_spoked_asterisk: '✳️',
  eight_pointed_black_star: '✴️',
  sparkle: '❇️',
  copyright: '©️',
  registered: '®️',
  tm: '™️',
  hash: '#️⃣',
  asterisk: '*️⃣',
  zero: '0️⃣',
  one: '1️⃣',
  two: '2️⃣',
  three: '3️⃣',
  four: '4️⃣',
  five: '5️⃣',
  six: '6️⃣',
  seven: '7️⃣',
  eight: '8️⃣',
  nine: '9️⃣',
  keycap_ten: '🔟',
  capital_abcd: '🔠',
  abcd: '🔡',
  symbols: '🔣',
  abc: '🔤',
  a: '🅰️',
  ab: '🆎',
  b: '🅱️',
  cl: '🆑',
  cool: '🆒',
  free: '🆓',
  information_source: 'ℹ️',
  id: '🆔',
  m: 'Ⓜ️',
  "new": '🆕',
  ng: '🆖',
  o2: '🅾️',
  ok: '🆗',
  parking: '🅿️',
  sos: '🆘',
  up: '🆙',
  vs: '🆚',
  koko: '🈁',
  sa: '🈂️',
  u6708: '🈷️',
  u6709: '🈶',
  u6307: '🈯',
  ideograph_advantage: '🉐',
  u5272: '🈹',
  u7121: '🈚',
  u7981: '🈲',
  accept: '🉑',
  u7533: '🈸',
  u5408: '🈴',
  u7a7a: '🈳',
  congratulations: '㊗️',
  secret: '㊙️',
  u55b6: '🈺',
  u6e80: '🈵',
  red_circle: '🔴',
  orange_circle: '🟠',
  yellow_circle: '🟡',
  green_circle: '🟢',
  large_blue_circle: '🔵',
  purple_circle: '🟣',
  brown_circle: '🟤',
  black_circle: '⚫',
  white_circle: '⚪',
  red_square: '🟥',
  orange_square: '🟧',
  yellow_square: '🟨',
  green_square: '🟩',
  blue_square: '🟦',
  purple_square: '🟪',
  brown_square: '🟫',
  black_large_square: '⬛',
  white_large_square: '⬜',
  black_medium_square: '◼️',
  white_medium_square: '◻️',
  black_medium_small_square: '◾',
  white_medium_small_square: '◽',
  black_small_square: '▪️',
  white_small_square: '▫️',
  large_orange_diamond: '🔶',
  large_blue_diamond: '🔷',
  small_orange_diamond: '🔸',
  small_blue_diamond: '🔹',
  small_red_triangle: '🔺',
  small_red_triangle_down: '🔻',
  diamond_shape_with_a_dot_inside: '💠',
  radio_button: '🔘',
  white_square_button: '🔳',
  black_square_button: '🔲',
  checkered_flag: '🏁',
  triangular_flag_on_post: '🚩',
  crossed_flags: '🎌',
  black_flag: '🏴',
  white_flag: '🏳️',
  rainbow_flag: '🏳️‍🌈',
  transgender_flag: '🏳️‍⚧️',
  pirate_flag: '🏴‍☠️',
  ascension_island: '🇦🇨',
  andorra: '🇦🇩',
  united_arab_emirates: '🇦🇪',
  afghanistan: '🇦🇫',
  antigua_barbuda: '🇦🇬',
  anguilla: '🇦🇮',
  albania: '🇦🇱',
  armenia: '🇦🇲',
  angola: '🇦🇴',
  antarctica: '🇦🇶',
  argentina: '🇦🇷',
  american_samoa: '🇦🇸',
  austria: '🇦🇹',
  australia: '🇦🇺',
  aruba: '🇦🇼',
  aland_islands: '🇦🇽',
  azerbaijan: '🇦🇿',
  bosnia_herzegovina: '🇧🇦',
  barbados: '🇧🇧',
  bangladesh: '🇧🇩',
  belgium: '🇧🇪',
  burkina_faso: '🇧🇫',
  bulgaria: '🇧🇬',
  bahrain: '🇧🇭',
  burundi: '🇧🇮',
  benin: '🇧🇯',
  st_barthelemy: '🇧🇱',
  bermuda: '🇧🇲',
  brunei: '🇧🇳',
  bolivia: '🇧🇴',
  caribbean_netherlands: '🇧🇶',
  brazil: '🇧🇷',
  bahamas: '🇧🇸',
  bhutan: '🇧🇹',
  bouvet_island: '🇧🇻',
  botswana: '🇧🇼',
  belarus: '🇧🇾',
  belize: '🇧🇿',
  canada: '🇨🇦',
  cocos_islands: '🇨🇨',
  congo_kinshasa: '🇨🇩',
  central_african_republic: '🇨🇫',
  congo_brazzaville: '🇨🇬',
  switzerland: '🇨🇭',
  cote_divoire: '🇨🇮',
  cook_islands: '🇨🇰',
  chile: '🇨🇱',
  cameroon: '🇨🇲',
  cn: '🇨🇳',
  colombia: '🇨🇴',
  clipperton_island: '🇨🇵',
  costa_rica: '🇨🇷',
  cuba: '🇨🇺',
  cape_verde: '🇨🇻',
  curacao: '🇨🇼',
  christmas_island: '🇨🇽',
  cyprus: '🇨🇾',
  czech_republic: '🇨🇿',
  de: '🇩🇪',
  diego_garcia: '🇩🇬',
  djibouti: '🇩🇯',
  denmark: '🇩🇰',
  dominica: '🇩🇲',
  dominican_republic: '🇩🇴',
  algeria: '🇩🇿',
  ceuta_melilla: '🇪🇦',
  ecuador: '🇪🇨',
  estonia: '🇪🇪',
  egypt: '🇪🇬',
  western_sahara: '🇪🇭',
  eritrea: '🇪🇷',
  es: '🇪🇸',
  ethiopia: '🇪🇹',
  eu: '🇪🇺',
  european_union: '🇪🇺',
  finland: '🇫🇮',
  fiji: '🇫🇯',
  falkland_islands: '🇫🇰',
  micronesia: '🇫🇲',
  faroe_islands: '🇫🇴',
  fr: '🇫🇷',
  gabon: '🇬🇦',
  gb: '🇬🇧',
  uk: '🇬🇧',
  grenada: '🇬🇩',
  georgia: '🇬🇪',
  french_guiana: '🇬🇫',
  guernsey: '🇬🇬',
  ghana: '🇬🇭',
  gibraltar: '🇬🇮',
  greenland: '🇬🇱',
  gambia: '🇬🇲',
  guinea: '🇬🇳',
  guadeloupe: '🇬🇵',
  equatorial_guinea: '🇬🇶',
  greece: '🇬🇷',
  south_georgia_south_sandwich_islands: '🇬🇸',
  guatemala: '🇬🇹',
  guam: '🇬🇺',
  guinea_bissau: '🇬🇼',
  guyana: '🇬🇾',
  hong_kong: '🇭🇰',
  heard_mcdonald_islands: '🇭🇲',
  honduras: '🇭🇳',
  croatia: '🇭🇷',
  haiti: '🇭🇹',
  hungary: '🇭🇺',
  canary_islands: '🇮🇨',
  indonesia: '🇮🇩',
  ireland: '🇮🇪',
  israel: '🇮🇱',
  isle_of_man: '🇮🇲',
  india: '🇮🇳',
  british_indian_ocean_territory: '🇮🇴',
  iraq: '🇮🇶',
  iran: '🇮🇷',
  iceland: '🇮🇸',
  it: '🇮🇹',
  jersey: '🇯🇪',
  jamaica: '🇯🇲',
  jordan: '🇯🇴',
  jp: '🇯🇵',
  kenya: '🇰🇪',
  kyrgyzstan: '🇰🇬',
  cambodia: '🇰🇭',
  kiribati: '🇰🇮',
  comoros: '🇰🇲',
  st_kitts_nevis: '🇰🇳',
  north_korea: '🇰🇵',
  kr: '🇰🇷',
  kuwait: '🇰🇼',
  cayman_islands: '🇰🇾',
  kazakhstan: '🇰🇿',
  laos: '🇱🇦',
  lebanon: '🇱🇧',
  st_lucia: '🇱🇨',
  liechtenstein: '🇱🇮',
  sri_lanka: '🇱🇰',
  liberia: '🇱🇷',
  lesotho: '🇱🇸',
  lithuania: '🇱🇹',
  luxembourg: '🇱🇺',
  latvia: '🇱🇻',
  libya: '🇱🇾',
  morocco: '🇲🇦',
  monaco: '🇲🇨',
  moldova: '🇲🇩',
  montenegro: '🇲🇪',
  st_martin: '🇲🇫',
  madagascar: '🇲🇬',
  marshall_islands: '🇲🇭',
  macedonia: '🇲🇰',
  mali: '🇲🇱',
  myanmar: '🇲🇲',
  mongolia: '🇲🇳',
  macau: '🇲🇴',
  northern_mariana_islands: '🇲🇵',
  martinique: '🇲🇶',
  mauritania: '🇲🇷',
  montserrat: '🇲🇸',
  malta: '🇲🇹',
  mauritius: '🇲🇺',
  maldives: '🇲🇻',
  malawi: '🇲🇼',
  mexico: '🇲🇽',
  malaysia: '🇲🇾',
  mozambique: '🇲🇿',
  namibia: '🇳🇦',
  new_caledonia: '🇳🇨',
  niger: '🇳🇪',
  norfolk_island: '🇳🇫',
  nigeria: '🇳🇬',
  nicaragua: '🇳🇮',
  netherlands: '🇳🇱',
  norway: '🇳🇴',
  nepal: '🇳🇵',
  nauru: '🇳🇷',
  niue: '🇳🇺',
  new_zealand: '🇳🇿',
  oman: '🇴🇲',
  panama: '🇵🇦',
  peru: '🇵🇪',
  french_polynesia: '🇵🇫',
  papua_new_guinea: '🇵🇬',
  philippines: '🇵🇭',
  pakistan: '🇵🇰',
  poland: '🇵🇱',
  st_pierre_miquelon: '🇵🇲',
  pitcairn_islands: '🇵🇳',
  puerto_rico: '🇵🇷',
  palestinian_territories: '🇵🇸',
  portugal: '🇵🇹',
  palau: '🇵🇼',
  paraguay: '🇵🇾',
  qatar: '🇶🇦',
  reunion: '🇷🇪',
  romania: '🇷🇴',
  serbia: '🇷🇸',
  ru: '🇷🇺',
  rwanda: '🇷🇼',
  saudi_arabia: '🇸🇦',
  solomon_islands: '🇸🇧',
  seychelles: '🇸🇨',
  sudan: '🇸🇩',
  sweden: '🇸🇪',
  singapore: '🇸🇬',
  st_helena: '🇸🇭',
  slovenia: '🇸🇮',
  svalbard_jan_mayen: '🇸🇯',
  slovakia: '🇸🇰',
  sierra_leone: '🇸🇱',
  san_marino: '🇸🇲',
  senegal: '🇸🇳',
  somalia: '🇸🇴',
  suriname: '🇸🇷',
  south_sudan: '🇸🇸',
  sao_tome_principe: '🇸🇹',
  el_salvador: '🇸🇻',
  sint_maarten: '🇸🇽',
  syria: '🇸🇾',
  swaziland: '🇸🇿',
  tristan_da_cunha: '🇹🇦',
  turks_caicos_islands: '🇹🇨',
  chad: '🇹🇩',
  french_southern_territories: '🇹🇫',
  togo: '🇹🇬',
  thailand: '🇹🇭',
  tajikistan: '🇹🇯',
  tokelau: '🇹🇰',
  timor_leste: '🇹🇱',
  turkmenistan: '🇹🇲',
  tunisia: '🇹🇳',
  tonga: '🇹🇴',
  tr: '🇹🇷',
  trinidad_tobago: '🇹🇹',
  tuvalu: '🇹🇻',
  taiwan: '🇹🇼',
  tanzania: '🇹🇿',
  ukraine: '🇺🇦',
  uganda: '🇺🇬',
  us_outlying_islands: '🇺🇲',
  united_nations: '🇺🇳',
  us: '🇺🇸',
  uruguay: '🇺🇾',
  uzbekistan: '🇺🇿',
  vatican_city: '🇻🇦',
  st_vincent_grenadines: '🇻🇨',
  venezuela: '🇻🇪',
  british_virgin_islands: '🇻🇬',
  us_virgin_islands: '🇻🇮',
  vietnam: '🇻🇳',
  vanuatu: '🇻🇺',
  wallis_futuna: '🇼🇫',
  samoa: '🇼🇸',
  kosovo: '🇽🇰',
  yemen: '🇾🇪',
  mayotte: '🇾🇹',
  south_africa: '🇿🇦',
  zambia: '🇿🇲',
  zimbabwe: '🇿🇼',
  england: '🏴󠁧󠁢󠁥󠁮󠁧󠁿',
  scotland: '🏴󠁧󠁢󠁳󠁣󠁴󠁿',
  wales: '🏴󠁧󠁢󠁷󠁬󠁳󠁿'
};
/**
 * Map of emoji to primary name.
 *
 * @type {Record<string, string>}
 */

var emojiToName = {
  '😀': 'grinning',
  '😃': 'smiley',
  '😄': 'smile',
  '😁': 'grin',
  '😆': 'laughing',
  '😅': 'sweat_smile',
  '🤣': 'rofl',
  '😂': 'joy',
  '🙂': 'slightly_smiling_face',
  '🙃': 'upside_down_face',
  '😉': 'wink',
  '😊': 'blush',
  '😇': 'innocent',
  '🥰': 'smiling_face_with_three_hearts',
  '😍': 'heart_eyes',
  '🤩': 'star_struck',
  '😘': 'kissing_heart',
  '😗': 'kissing',
  '☺️': 'relaxed',
  '😚': 'kissing_closed_eyes',
  '😙': 'kissing_smiling_eyes',
  '🥲': 'smiling_face_with_tear',
  '😋': 'yum',
  '😛': 'stuck_out_tongue',
  '😜': 'stuck_out_tongue_winking_eye',
  '🤪': 'zany_face',
  '😝': 'stuck_out_tongue_closed_eyes',
  '🤑': 'money_mouth_face',
  '🤗': 'hugs',
  '🤭': 'hand_over_mouth',
  '🤫': 'shushing_face',
  '🤔': 'thinking',
  '🤐': 'zipper_mouth_face',
  '🤨': 'raised_eyebrow',
  '😐': 'neutral_face',
  '😑': 'expressionless',
  '😶': 'no_mouth',
  '😶‍🌫️': 'face_in_clouds',
  '😏': 'smirk',
  '😒': 'unamused',
  '🙄': 'roll_eyes',
  '😬': 'grimacing',
  '😮‍💨': 'face_exhaling',
  '🤥': 'lying_face',
  '😌': 'relieved',
  '😔': 'pensive',
  '😪': 'sleepy',
  '🤤': 'drooling_face',
  '😴': 'sleeping',
  '😷': 'mask',
  '🤒': 'face_with_thermometer',
  '🤕': 'face_with_head_bandage',
  '🤢': 'nauseated_face',
  '🤮': 'vomiting_face',
  '🤧': 'sneezing_face',
  '🥵': 'hot_face',
  '🥶': 'cold_face',
  '🥴': 'woozy_face',
  '😵': 'dizzy_face',
  '😵‍💫': 'face_with_spiral_eyes',
  '🤯': 'exploding_head',
  '🤠': 'cowboy_hat_face',
  '🥳': 'partying_face',
  '🥸': 'disguised_face',
  '😎': 'sunglasses',
  '🤓': 'nerd_face',
  '🧐': 'monocle_face',
  '😕': 'confused',
  '😟': 'worried',
  '🙁': 'slightly_frowning_face',
  '☹️': 'frowning_face',
  '😮': 'open_mouth',
  '😯': 'hushed',
  '😲': 'astonished',
  '😳': 'flushed',
  '🥺': 'pleading_face',
  '😦': 'frowning',
  '😧': 'anguished',
  '😨': 'fearful',
  '😰': 'cold_sweat',
  '😥': 'disappointed_relieved',
  '😢': 'cry',
  '😭': 'sob',
  '😱': 'scream',
  '😖': 'confounded',
  '😣': 'persevere',
  '😞': 'disappointed',
  '😓': 'sweat',
  '😩': 'weary',
  '😫': 'tired_face',
  '🥱': 'yawning_face',
  '😤': 'triumph',
  '😡': 'rage',
  '😠': 'angry',
  '🤬': 'cursing_face',
  '😈': 'smiling_imp',
  '👿': 'imp',
  '💀': 'skull',
  '☠️': 'skull_and_crossbones',
  '💩': 'hankey',
  '🤡': 'clown_face',
  '👹': 'japanese_ogre',
  '👺': 'japanese_goblin',
  '👻': 'ghost',
  '👽': 'alien',
  '👾': 'space_invader',
  '🤖': 'robot',
  '😺': 'smiley_cat',
  '😸': 'smile_cat',
  '😹': 'joy_cat',
  '😻': 'heart_eyes_cat',
  '😼': 'smirk_cat',
  '😽': 'kissing_cat',
  '🙀': 'scream_cat',
  '😿': 'crying_cat_face',
  '😾': 'pouting_cat',
  '🙈': 'see_no_evil',
  '🙉': 'hear_no_evil',
  '🙊': 'speak_no_evil',
  '💋': 'kiss',
  '💌': 'love_letter',
  '💘': 'cupid',
  '💝': 'gift_heart',
  '💖': 'sparkling_heart',
  '💗': 'heartpulse',
  '💓': 'heartbeat',
  '💞': 'revolving_hearts',
  '💕': 'two_hearts',
  '💟': 'heart_decoration',
  '❣️': 'heavy_heart_exclamation',
  '💔': 'broken_heart',
  '❤️‍🔥': 'heart_on_fire',
  '❤️‍🩹': 'mending_heart',
  '❤️': 'heart',
  '🧡': 'orange_heart',
  '💛': 'yellow_heart',
  '💚': 'green_heart',
  '💙': 'blue_heart',
  '💜': 'purple_heart',
  '🤎': 'brown_heart',
  '🖤': 'black_heart',
  '🤍': 'white_heart',
  '💯': '100',
  '💢': 'anger',
  '💥': 'boom',
  '💫': 'dizzy',
  '💦': 'sweat_drops',
  '💨': 'dash',
  '🕳️': 'hole',
  '💣': 'bomb',
  '💬': 'speech_balloon',
  '👁️‍🗨️': 'eye_speech_bubble',
  '🗨️': 'left_speech_bubble',
  '🗯️': 'right_anger_bubble',
  '💭': 'thought_balloon',
  '💤': 'zzz',
  '👋': 'wave',
  '🤚': 'raised_back_of_hand',
  '🖐️': 'raised_hand_with_fingers_splayed',
  '✋': 'hand',
  '🖖': 'vulcan_salute',
  '👌': 'ok_hand',
  '🤌': 'pinched_fingers',
  '🤏': 'pinching_hand',
  '✌️': 'v',
  '🤞': 'crossed_fingers',
  '🤟': 'love_you_gesture',
  '🤘': 'metal',
  '🤙': 'call_me_hand',
  '👈': 'point_left',
  '👉': 'point_right',
  '👆': 'point_up_2',
  '🖕': 'middle_finger',
  '👇': 'point_down',
  '☝️': 'point_up',
  '👍': '+1',
  '👎': '-1',
  '✊': 'fist_raised',
  '👊': 'fist_oncoming',
  '🤛': 'fist_left',
  '🤜': 'fist_right',
  '👏': 'clap',
  '🙌': 'raised_hands',
  '👐': 'open_hands',
  '🤲': 'palms_up_together',
  '🤝': 'handshake',
  '🙏': 'pray',
  '✍️': 'writing_hand',
  '💅': 'nail_care',
  '🤳': 'selfie',
  '💪': 'muscle',
  '🦾': 'mechanical_arm',
  '🦿': 'mechanical_leg',
  '🦵': 'leg',
  '🦶': 'foot',
  '👂': 'ear',
  '🦻': 'ear_with_hearing_aid',
  '👃': 'nose',
  '🧠': 'brain',
  '🫀': 'anatomical_heart',
  '🫁': 'lungs',
  '🦷': 'tooth',
  '🦴': 'bone',
  '👀': 'eyes',
  '👁️': 'eye',
  '👅': 'tongue',
  '👄': 'lips',
  '👶': 'baby',
  '🧒': 'child',
  '👦': 'boy',
  '👧': 'girl',
  '🧑': 'adult',
  '👱': 'blond_haired_person',
  '👨': 'man',
  '🧔': 'bearded_person',
  '🧔‍♂️': 'man_beard',
  '🧔‍♀️': 'woman_beard',
  '👨‍🦰': 'red_haired_man',
  '👨‍🦱': 'curly_haired_man',
  '👨‍🦳': 'white_haired_man',
  '👨‍🦲': 'bald_man',
  '👩': 'woman',
  '👩‍🦰': 'red_haired_woman',
  '🧑‍🦰': 'person_red_hair',
  '👩‍🦱': 'curly_haired_woman',
  '🧑‍🦱': 'person_curly_hair',
  '👩‍🦳': 'white_haired_woman',
  '🧑‍🦳': 'person_white_hair',
  '👩‍🦲': 'bald_woman',
  '🧑‍🦲': 'person_bald',
  '👱‍♀️': 'blond_haired_woman',
  '👱‍♂️': 'blond_haired_man',
  '🧓': 'older_adult',
  '👴': 'older_man',
  '👵': 'older_woman',
  '🙍': 'frowning_person',
  '🙍‍♂️': 'frowning_man',
  '🙍‍♀️': 'frowning_woman',
  '🙎': 'pouting_face',
  '🙎‍♂️': 'pouting_man',
  '🙎‍♀️': 'pouting_woman',
  '🙅': 'no_good',
  '🙅‍♂️': 'no_good_man',
  '🙅‍♀️': 'no_good_woman',
  '🙆': 'ok_person',
  '🙆‍♂️': 'ok_man',
  '🙆‍♀️': 'ok_woman',
  '💁': 'tipping_hand_person',
  '💁‍♂️': 'tipping_hand_man',
  '💁‍♀️': 'tipping_hand_woman',
  '🙋': 'raising_hand',
  '🙋‍♂️': 'raising_hand_man',
  '🙋‍♀️': 'raising_hand_woman',
  '🧏': 'deaf_person',
  '🧏‍♂️': 'deaf_man',
  '🧏‍♀️': 'deaf_woman',
  '🙇': 'bow',
  '🙇‍♂️': 'bowing_man',
  '🙇‍♀️': 'bowing_woman',
  '🤦': 'facepalm',
  '🤦‍♂️': 'man_facepalming',
  '🤦‍♀️': 'woman_facepalming',
  '🤷': 'shrug',
  '🤷‍♂️': 'man_shrugging',
  '🤷‍♀️': 'woman_shrugging',
  '🧑‍⚕️': 'health_worker',
  '👨‍⚕️': 'man_health_worker',
  '👩‍⚕️': 'woman_health_worker',
  '🧑‍🎓': 'student',
  '👨‍🎓': 'man_student',
  '👩‍🎓': 'woman_student',
  '🧑‍🏫': 'teacher',
  '👨‍🏫': 'man_teacher',
  '👩‍🏫': 'woman_teacher',
  '🧑‍⚖️': 'judge',
  '👨‍⚖️': 'man_judge',
  '👩‍⚖️': 'woman_judge',
  '🧑‍🌾': 'farmer',
  '👨‍🌾': 'man_farmer',
  '👩‍🌾': 'woman_farmer',
  '🧑‍🍳': 'cook',
  '👨‍🍳': 'man_cook',
  '👩‍🍳': 'woman_cook',
  '🧑‍🔧': 'mechanic',
  '👨‍🔧': 'man_mechanic',
  '👩‍🔧': 'woman_mechanic',
  '🧑‍🏭': 'factory_worker',
  '👨‍🏭': 'man_factory_worker',
  '👩‍🏭': 'woman_factory_worker',
  '🧑‍💼': 'office_worker',
  '👨‍💼': 'man_office_worker',
  '👩‍💼': 'woman_office_worker',
  '🧑‍🔬': 'scientist',
  '👨‍🔬': 'man_scientist',
  '👩‍🔬': 'woman_scientist',
  '🧑‍💻': 'technologist',
  '👨‍💻': 'man_technologist',
  '👩‍💻': 'woman_technologist',
  '🧑‍🎤': 'singer',
  '👨‍🎤': 'man_singer',
  '👩‍🎤': 'woman_singer',
  '🧑‍🎨': 'artist',
  '👨‍🎨': 'man_artist',
  '👩‍🎨': 'woman_artist',
  '🧑‍✈️': 'pilot',
  '👨‍✈️': 'man_pilot',
  '👩‍✈️': 'woman_pilot',
  '🧑‍🚀': 'astronaut',
  '👨‍🚀': 'man_astronaut',
  '👩‍🚀': 'woman_astronaut',
  '🧑‍🚒': 'firefighter',
  '👨‍🚒': 'man_firefighter',
  '👩‍🚒': 'woman_firefighter',
  '👮': 'police_officer',
  '👮‍♂️': 'policeman',
  '👮‍♀️': 'policewoman',
  '🕵️': 'detective',
  '🕵️‍♂️': 'male_detective',
  '🕵️‍♀️': 'female_detective',
  '💂': 'guard',
  '💂‍♂️': 'guardsman',
  '💂‍♀️': 'guardswoman',
  '🥷': 'ninja',
  '👷': 'construction_worker',
  '👷‍♂️': 'construction_worker_man',
  '👷‍♀️': 'construction_worker_woman',
  '🤴': 'prince',
  '👸': 'princess',
  '👳': 'person_with_turban',
  '👳‍♂️': 'man_with_turban',
  '👳‍♀️': 'woman_with_turban',
  '👲': 'man_with_gua_pi_mao',
  '🧕': 'woman_with_headscarf',
  '🤵': 'person_in_tuxedo',
  '🤵‍♂️': 'man_in_tuxedo',
  '🤵‍♀️': 'woman_in_tuxedo',
  '👰': 'person_with_veil',
  '👰‍♂️': 'man_with_veil',
  '👰‍♀️': 'woman_with_veil',
  '🤰': 'pregnant_woman',
  '🤱': 'breast_feeding',
  '👩‍🍼': 'woman_feeding_baby',
  '👨‍🍼': 'man_feeding_baby',
  '🧑‍🍼': 'person_feeding_baby',
  '👼': 'angel',
  '🎅': 'santa',
  '🤶': 'mrs_claus',
  '🧑‍🎄': 'mx_claus',
  '🦸': 'superhero',
  '🦸‍♂️': 'superhero_man',
  '🦸‍♀️': 'superhero_woman',
  '🦹': 'supervillain',
  '🦹‍♂️': 'supervillain_man',
  '🦹‍♀️': 'supervillain_woman',
  '🧙': 'mage',
  '🧙‍♂️': 'mage_man',
  '🧙‍♀️': 'mage_woman',
  '🧚': 'fairy',
  '🧚‍♂️': 'fairy_man',
  '🧚‍♀️': 'fairy_woman',
  '🧛': 'vampire',
  '🧛‍♂️': 'vampire_man',
  '🧛‍♀️': 'vampire_woman',
  '🧜': 'merperson',
  '🧜‍♂️': 'merman',
  '🧜‍♀️': 'mermaid',
  '🧝': 'elf',
  '🧝‍♂️': 'elf_man',
  '🧝‍♀️': 'elf_woman',
  '🧞': 'genie',
  '🧞‍♂️': 'genie_man',
  '🧞‍♀️': 'genie_woman',
  '🧟': 'zombie',
  '🧟‍♂️': 'zombie_man',
  '🧟‍♀️': 'zombie_woman',
  '💆': 'massage',
  '💆‍♂️': 'massage_man',
  '💆‍♀️': 'massage_woman',
  '💇': 'haircut',
  '💇‍♂️': 'haircut_man',
  '💇‍♀️': 'haircut_woman',
  '🚶': 'walking',
  '🚶‍♂️': 'walking_man',
  '🚶‍♀️': 'walking_woman',
  '🧍': 'standing_person',
  '🧍‍♂️': 'standing_man',
  '🧍‍♀️': 'standing_woman',
  '🧎': 'kneeling_person',
  '🧎‍♂️': 'kneeling_man',
  '🧎‍♀️': 'kneeling_woman',
  '🧑‍🦯': 'person_with_probing_cane',
  '👨‍🦯': 'man_with_probing_cane',
  '👩‍🦯': 'woman_with_probing_cane',
  '🧑‍🦼': 'person_in_motorized_wheelchair',
  '👨‍🦼': 'man_in_motorized_wheelchair',
  '👩‍🦼': 'woman_in_motorized_wheelchair',
  '🧑‍🦽': 'person_in_manual_wheelchair',
  '👨‍🦽': 'man_in_manual_wheelchair',
  '👩‍🦽': 'woman_in_manual_wheelchair',
  '🏃': 'runner',
  '🏃‍♂️': 'running_man',
  '🏃‍♀️': 'running_woman',
  '💃': 'woman_dancing',
  '🕺': 'man_dancing',
  '🕴️': 'business_suit_levitating',
  '👯': 'dancers',
  '👯‍♂️': 'dancing_men',
  '👯‍♀️': 'dancing_women',
  '🧖': 'sauna_person',
  '🧖‍♂️': 'sauna_man',
  '🧖‍♀️': 'sauna_woman',
  '🧗': 'climbing',
  '🧗‍♂️': 'climbing_man',
  '🧗‍♀️': 'climbing_woman',
  '🤺': 'person_fencing',
  '🏇': 'horse_racing',
  '⛷️': 'skier',
  '🏂': 'snowboarder',
  '🏌️': 'golfing',
  '🏌️‍♂️': 'golfing_man',
  '🏌️‍♀️': 'golfing_woman',
  '🏄': 'surfer',
  '🏄‍♂️': 'surfing_man',
  '🏄‍♀️': 'surfing_woman',
  '🚣': 'rowboat',
  '🚣‍♂️': 'rowing_man',
  '🚣‍♀️': 'rowing_woman',
  '🏊': 'swimmer',
  '🏊‍♂️': 'swimming_man',
  '🏊‍♀️': 'swimming_woman',
  '⛹️': 'bouncing_ball_person',
  '⛹️‍♂️': 'bouncing_ball_man',
  '⛹️‍♀️': 'bouncing_ball_woman',
  '🏋️': 'weight_lifting',
  '🏋️‍♂️': 'weight_lifting_man',
  '🏋️‍♀️': 'weight_lifting_woman',
  '🚴': 'bicyclist',
  '🚴‍♂️': 'biking_man',
  '🚴‍♀️': 'biking_woman',
  '🚵': 'mountain_bicyclist',
  '🚵‍♂️': 'mountain_biking_man',
  '🚵‍♀️': 'mountain_biking_woman',
  '🤸': 'cartwheeling',
  '🤸‍♂️': 'man_cartwheeling',
  '🤸‍♀️': 'woman_cartwheeling',
  '🤼': 'wrestling',
  '🤼‍♂️': 'men_wrestling',
  '🤼‍♀️': 'women_wrestling',
  '🤽': 'water_polo',
  '🤽‍♂️': 'man_playing_water_polo',
  '🤽‍♀️': 'woman_playing_water_polo',
  '🤾': 'handball_person',
  '🤾‍♂️': 'man_playing_handball',
  '🤾‍♀️': 'woman_playing_handball',
  '🤹': 'juggling_person',
  '🤹‍♂️': 'man_juggling',
  '🤹‍♀️': 'woman_juggling',
  '🧘': 'lotus_position',
  '🧘‍♂️': 'lotus_position_man',
  '🧘‍♀️': 'lotus_position_woman',
  '🛀': 'bath',
  '🛌': 'sleeping_bed',
  '🧑‍🤝‍🧑': 'people_holding_hands',
  '👭': 'two_women_holding_hands',
  '👫': 'couple',
  '👬': 'two_men_holding_hands',
  '💏': 'couplekiss',
  '👩‍❤️‍💋‍👨': 'couplekiss_man_woman',
  '👨‍❤️‍💋‍👨': 'couplekiss_man_man',
  '👩‍❤️‍💋‍👩': 'couplekiss_woman_woman',
  '💑': 'couple_with_heart',
  '👩‍❤️‍👨': 'couple_with_heart_woman_man',
  '👨‍❤️‍👨': 'couple_with_heart_man_man',
  '👩‍❤️‍👩': 'couple_with_heart_woman_woman',
  '👪': 'family',
  '👨‍👩‍👦': 'family_man_woman_boy',
  '👨‍👩‍👧': 'family_man_woman_girl',
  '👨‍👩‍👧‍👦': 'family_man_woman_girl_boy',
  '👨‍👩‍👦‍👦': 'family_man_woman_boy_boy',
  '👨‍👩‍👧‍👧': 'family_man_woman_girl_girl',
  '👨‍👨‍👦': 'family_man_man_boy',
  '👨‍👨‍👧': 'family_man_man_girl',
  '👨‍👨‍👧‍👦': 'family_man_man_girl_boy',
  '👨‍👨‍👦‍👦': 'family_man_man_boy_boy',
  '👨‍👨‍👧‍👧': 'family_man_man_girl_girl',
  '👩‍👩‍👦': 'family_woman_woman_boy',
  '👩‍👩‍👧': 'family_woman_woman_girl',
  '👩‍👩‍👧‍👦': 'family_woman_woman_girl_boy',
  '👩‍👩‍👦‍👦': 'family_woman_woman_boy_boy',
  '👩‍👩‍👧‍👧': 'family_woman_woman_girl_girl',
  '👨‍👦': 'family_man_boy',
  '👨‍👦‍👦': 'family_man_boy_boy',
  '👨‍👧': 'family_man_girl',
  '👨‍👧‍👦': 'family_man_girl_boy',
  '👨‍👧‍👧': 'family_man_girl_girl',
  '👩‍👦': 'family_woman_boy',
  '👩‍👦‍👦': 'family_woman_boy_boy',
  '👩‍👧': 'family_woman_girl',
  '👩‍👧‍👦': 'family_woman_girl_boy',
  '👩‍👧‍👧': 'family_woman_girl_girl',
  '🗣️': 'speaking_head',
  '👤': 'bust_in_silhouette',
  '👥': 'busts_in_silhouette',
  '🫂': 'people_hugging',
  '👣': 'footprints',
  '🐵': 'monkey_face',
  '🐒': 'monkey',
  '🦍': 'gorilla',
  '🦧': 'orangutan',
  '🐶': 'dog',
  '🐕': 'dog2',
  '🦮': 'guide_dog',
  '🐕‍🦺': 'service_dog',
  '🐩': 'poodle',
  '🐺': 'wolf',
  '🦊': 'fox_face',
  '🦝': 'raccoon',
  '🐱': 'cat',
  '🐈': 'cat2',
  '🐈‍⬛': 'black_cat',
  '🦁': 'lion',
  '🐯': 'tiger',
  '🐅': 'tiger2',
  '🐆': 'leopard',
  '🐴': 'horse',
  '🐎': 'racehorse',
  '🦄': 'unicorn',
  '🦓': 'zebra',
  '🦌': 'deer',
  '🦬': 'bison',
  '🐮': 'cow',
  '🐂': 'ox',
  '🐃': 'water_buffalo',
  '🐄': 'cow2',
  '🐷': 'pig',
  '🐖': 'pig2',
  '🐗': 'boar',
  '🐽': 'pig_nose',
  '🐏': 'ram',
  '🐑': 'sheep',
  '🐐': 'goat',
  '🐪': 'dromedary_camel',
  '🐫': 'camel',
  '🦙': 'llama',
  '🦒': 'giraffe',
  '🐘': 'elephant',
  '🦣': 'mammoth',
  '🦏': 'rhinoceros',
  '🦛': 'hippopotamus',
  '🐭': 'mouse',
  '🐁': 'mouse2',
  '🐀': 'rat',
  '🐹': 'hamster',
  '🐰': 'rabbit',
  '🐇': 'rabbit2',
  '🐿️': 'chipmunk',
  '🦫': 'beaver',
  '🦔': 'hedgehog',
  '🦇': 'bat',
  '🐻': 'bear',
  '🐻‍❄️': 'polar_bear',
  '🐨': 'koala',
  '🐼': 'panda_face',
  '🦥': 'sloth',
  '🦦': 'otter',
  '🦨': 'skunk',
  '🦘': 'kangaroo',
  '🦡': 'badger',
  '🐾': 'feet',
  '🦃': 'turkey',
  '🐔': 'chicken',
  '🐓': 'rooster',
  '🐣': 'hatching_chick',
  '🐤': 'baby_chick',
  '🐥': 'hatched_chick',
  '🐦': 'bird',
  '🐧': 'penguin',
  '🕊️': 'dove',
  '🦅': 'eagle',
  '🦆': 'duck',
  '🦢': 'swan',
  '🦉': 'owl',
  '🦤': 'dodo',
  '🪶': 'feather',
  '🦩': 'flamingo',
  '🦚': 'peacock',
  '🦜': 'parrot',
  '🐸': 'frog',
  '🐊': 'crocodile',
  '🐢': 'turtle',
  '🦎': 'lizard',
  '🐍': 'snake',
  '🐲': 'dragon_face',
  '🐉': 'dragon',
  '🦕': 'sauropod',
  '🦖': 't-rex',
  '🐳': 'whale',
  '🐋': 'whale2',
  '🐬': 'dolphin',
  '🦭': 'seal',
  '🐟': 'fish',
  '🐠': 'tropical_fish',
  '🐡': 'blowfish',
  '🦈': 'shark',
  '🐙': 'octopus',
  '🐚': 'shell',
  '🐌': 'snail',
  '🦋': 'butterfly',
  '🐛': 'bug',
  '🐜': 'ant',
  '🐝': 'bee',
  '🪲': 'beetle',
  '🐞': 'lady_beetle',
  '🦗': 'cricket',
  '🪳': 'cockroach',
  '🕷️': 'spider',
  '🕸️': 'spider_web',
  '🦂': 'scorpion',
  '🦟': 'mosquito',
  '🪰': 'fly',
  '🪱': 'worm',
  '🦠': 'microbe',
  '💐': 'bouquet',
  '🌸': 'cherry_blossom',
  '💮': 'white_flower',
  '🏵️': 'rosette',
  '🌹': 'rose',
  '🥀': 'wilted_flower',
  '🌺': 'hibiscus',
  '🌻': 'sunflower',
  '🌼': 'blossom',
  '🌷': 'tulip',
  '🌱': 'seedling',
  '🪴': 'potted_plant',
  '🌲': 'evergreen_tree',
  '🌳': 'deciduous_tree',
  '🌴': 'palm_tree',
  '🌵': 'cactus',
  '🌾': 'ear_of_rice',
  '🌿': 'herb',
  '☘️': 'shamrock',
  '🍀': 'four_leaf_clover',
  '🍁': 'maple_leaf',
  '🍂': 'fallen_leaf',
  '🍃': 'leaves',
  '🍇': 'grapes',
  '🍈': 'melon',
  '🍉': 'watermelon',
  '🍊': 'tangerine',
  '🍋': 'lemon',
  '🍌': 'banana',
  '🍍': 'pineapple',
  '🥭': 'mango',
  '🍎': 'apple',
  '🍏': 'green_apple',
  '🍐': 'pear',
  '🍑': 'peach',
  '🍒': 'cherries',
  '🍓': 'strawberry',
  '🫐': 'blueberries',
  '🥝': 'kiwi_fruit',
  '🍅': 'tomato',
  '🫒': 'olive',
  '🥥': 'coconut',
  '🥑': 'avocado',
  '🍆': 'eggplant',
  '🥔': 'potato',
  '🥕': 'carrot',
  '🌽': 'corn',
  '🌶️': 'hot_pepper',
  '🫑': 'bell_pepper',
  '🥒': 'cucumber',
  '🥬': 'leafy_green',
  '🥦': 'broccoli',
  '🧄': 'garlic',
  '🧅': 'onion',
  '🍄': 'mushroom',
  '🥜': 'peanuts',
  '🌰': 'chestnut',
  '🍞': 'bread',
  '🥐': 'croissant',
  '🥖': 'baguette_bread',
  '🫓': 'flatbread',
  '🥨': 'pretzel',
  '🥯': 'bagel',
  '🥞': 'pancakes',
  '🧇': 'waffle',
  '🧀': 'cheese',
  '🍖': 'meat_on_bone',
  '🍗': 'poultry_leg',
  '🥩': 'cut_of_meat',
  '🥓': 'bacon',
  '🍔': 'hamburger',
  '🍟': 'fries',
  '🍕': 'pizza',
  '🌭': 'hotdog',
  '🥪': 'sandwich',
  '🌮': 'taco',
  '🌯': 'burrito',
  '🫔': 'tamale',
  '🥙': 'stuffed_flatbread',
  '🧆': 'falafel',
  '🥚': 'egg',
  '🍳': 'fried_egg',
  '🥘': 'shallow_pan_of_food',
  '🍲': 'stew',
  '🫕': 'fondue',
  '🥣': 'bowl_with_spoon',
  '🥗': 'green_salad',
  '🍿': 'popcorn',
  '🧈': 'butter',
  '🧂': 'salt',
  '🥫': 'canned_food',
  '🍱': 'bento',
  '🍘': 'rice_cracker',
  '🍙': 'rice_ball',
  '🍚': 'rice',
  '🍛': 'curry',
  '🍜': 'ramen',
  '🍝': 'spaghetti',
  '🍠': 'sweet_potato',
  '🍢': 'oden',
  '🍣': 'sushi',
  '🍤': 'fried_shrimp',
  '🍥': 'fish_cake',
  '🥮': 'moon_cake',
  '🍡': 'dango',
  '🥟': 'dumpling',
  '🥠': 'fortune_cookie',
  '🥡': 'takeout_box',
  '🦀': 'crab',
  '🦞': 'lobster',
  '🦐': 'shrimp',
  '🦑': 'squid',
  '🦪': 'oyster',
  '🍦': 'icecream',
  '🍧': 'shaved_ice',
  '🍨': 'ice_cream',
  '🍩': 'doughnut',
  '🍪': 'cookie',
  '🎂': 'birthday',
  '🍰': 'cake',
  '🧁': 'cupcake',
  '🥧': 'pie',
  '🍫': 'chocolate_bar',
  '🍬': 'candy',
  '🍭': 'lollipop',
  '🍮': 'custard',
  '🍯': 'honey_pot',
  '🍼': 'baby_bottle',
  '🥛': 'milk_glass',
  '☕': 'coffee',
  '🫖': 'teapot',
  '🍵': 'tea',
  '🍶': 'sake',
  '🍾': 'champagne',
  '🍷': 'wine_glass',
  '🍸': 'cocktail',
  '🍹': 'tropical_drink',
  '🍺': 'beer',
  '🍻': 'beers',
  '🥂': 'clinking_glasses',
  '🥃': 'tumbler_glass',
  '🥤': 'cup_with_straw',
  '🧋': 'bubble_tea',
  '🧃': 'beverage_box',
  '🧉': 'mate',
  '🧊': 'ice_cube',
  '🥢': 'chopsticks',
  '🍽️': 'plate_with_cutlery',
  '🍴': 'fork_and_knife',
  '🥄': 'spoon',
  '🔪': 'hocho',
  '🏺': 'amphora',
  '🌍': 'earth_africa',
  '🌎': 'earth_americas',
  '🌏': 'earth_asia',
  '🌐': 'globe_with_meridians',
  '🗺️': 'world_map',
  '🗾': 'japan',
  '🧭': 'compass',
  '🏔️': 'mountain_snow',
  '⛰️': 'mountain',
  '🌋': 'volcano',
  '🗻': 'mount_fuji',
  '🏕️': 'camping',
  '🏖️': 'beach_umbrella',
  '🏜️': 'desert',
  '🏝️': 'desert_island',
  '🏞️': 'national_park',
  '🏟️': 'stadium',
  '🏛️': 'classical_building',
  '🏗️': 'building_construction',
  '🧱': 'bricks',
  '🪨': 'rock',
  '🪵': 'wood',
  '🛖': 'hut',
  '🏘️': 'houses',
  '🏚️': 'derelict_house',
  '🏠': 'house',
  '🏡': 'house_with_garden',
  '🏢': 'office',
  '🏣': 'post_office',
  '🏤': 'european_post_office',
  '🏥': 'hospital',
  '🏦': 'bank',
  '🏨': 'hotel',
  '🏩': 'love_hotel',
  '🏪': 'convenience_store',
  '🏫': 'school',
  '🏬': 'department_store',
  '🏭': 'factory',
  '🏯': 'japanese_castle',
  '🏰': 'european_castle',
  '💒': 'wedding',
  '🗼': 'tokyo_tower',
  '🗽': 'statue_of_liberty',
  '⛪': 'church',
  '🕌': 'mosque',
  '🛕': 'hindu_temple',
  '🕍': 'synagogue',
  '⛩️': 'shinto_shrine',
  '🕋': 'kaaba',
  '⛲': 'fountain',
  '⛺': 'tent',
  '🌁': 'foggy',
  '🌃': 'night_with_stars',
  '🏙️': 'cityscape',
  '🌄': 'sunrise_over_mountains',
  '🌅': 'sunrise',
  '🌆': 'city_sunset',
  '🌇': 'city_sunrise',
  '🌉': 'bridge_at_night',
  '♨️': 'hotsprings',
  '🎠': 'carousel_horse',
  '🎡': 'ferris_wheel',
  '🎢': 'roller_coaster',
  '💈': 'barber',
  '🎪': 'circus_tent',
  '🚂': 'steam_locomotive',
  '🚃': 'railway_car',
  '🚄': 'bullettrain_side',
  '🚅': 'bullettrain_front',
  '🚆': 'train2',
  '🚇': 'metro',
  '🚈': 'light_rail',
  '🚉': 'station',
  '🚊': 'tram',
  '🚝': 'monorail',
  '🚞': 'mountain_railway',
  '🚋': 'train',
  '🚌': 'bus',
  '🚍': 'oncoming_bus',
  '🚎': 'trolleybus',
  '🚐': 'minibus',
  '🚑': 'ambulance',
  '🚒': 'fire_engine',
  '🚓': 'police_car',
  '🚔': 'oncoming_police_car',
  '🚕': 'taxi',
  '🚖': 'oncoming_taxi',
  '🚗': 'car',
  '🚘': 'oncoming_automobile',
  '🚙': 'blue_car',
  '🛻': 'pickup_truck',
  '🚚': 'truck',
  '🚛': 'articulated_lorry',
  '🚜': 'tractor',
  '🏎️': 'racing_car',
  '🏍️': 'motorcycle',
  '🛵': 'motor_scooter',
  '🦽': 'manual_wheelchair',
  '🦼': 'motorized_wheelchair',
  '🛺': 'auto_rickshaw',
  '🚲': 'bike',
  '🛴': 'kick_scooter',
  '🛹': 'skateboard',
  '🛼': 'roller_skate',
  '🚏': 'busstop',
  '🛣️': 'motorway',
  '🛤️': 'railway_track',
  '🛢️': 'oil_drum',
  '⛽': 'fuelpump',
  '🚨': 'rotating_light',
  '🚥': 'traffic_light',
  '🚦': 'vertical_traffic_light',
  '🛑': 'stop_sign',
  '🚧': 'construction',
  '⚓': 'anchor',
  '⛵': 'boat',
  '🛶': 'canoe',
  '🚤': 'speedboat',
  '🛳️': 'passenger_ship',
  '⛴️': 'ferry',
  '🛥️': 'motor_boat',
  '🚢': 'ship',
  '✈️': 'airplane',
  '🛩️': 'small_airplane',
  '🛫': 'flight_departure',
  '🛬': 'flight_arrival',
  '🪂': 'parachute',
  '💺': 'seat',
  '🚁': 'helicopter',
  '🚟': 'suspension_railway',
  '🚠': 'mountain_cableway',
  '🚡': 'aerial_tramway',
  '🛰️': 'artificial_satellite',
  '🚀': 'rocket',
  '🛸': 'flying_saucer',
  '🛎️': 'bellhop_bell',
  '🧳': 'luggage',
  '⌛': 'hourglass',
  '⏳': 'hourglass_flowing_sand',
  '⌚': 'watch',
  '⏰': 'alarm_clock',
  '⏱️': 'stopwatch',
  '⏲️': 'timer_clock',
  '🕰️': 'mantelpiece_clock',
  '🕛': 'clock12',
  '🕧': 'clock1230',
  '🕐': 'clock1',
  '🕜': 'clock130',
  '🕑': 'clock2',
  '🕝': 'clock230',
  '🕒': 'clock3',
  '🕞': 'clock330',
  '🕓': 'clock4',
  '🕟': 'clock430',
  '🕔': 'clock5',
  '🕠': 'clock530',
  '🕕': 'clock6',
  '🕡': 'clock630',
  '🕖': 'clock7',
  '🕢': 'clock730',
  '🕗': 'clock8',
  '🕣': 'clock830',
  '🕘': 'clock9',
  '🕤': 'clock930',
  '🕙': 'clock10',
  '🕥': 'clock1030',
  '🕚': 'clock11',
  '🕦': 'clock1130',
  '🌑': 'new_moon',
  '🌒': 'waxing_crescent_moon',
  '🌓': 'first_quarter_moon',
  '🌔': 'moon',
  '🌕': 'full_moon',
  '🌖': 'waning_gibbous_moon',
  '🌗': 'last_quarter_moon',
  '🌘': 'waning_crescent_moon',
  '🌙': 'crescent_moon',
  '🌚': 'new_moon_with_face',
  '🌛': 'first_quarter_moon_with_face',
  '🌜': 'last_quarter_moon_with_face',
  '🌡️': 'thermometer',
  '☀️': 'sunny',
  '🌝': 'full_moon_with_face',
  '🌞': 'sun_with_face',
  '🪐': 'ringed_planet',
  '⭐': 'star',
  '🌟': 'star2',
  '🌠': 'stars',
  '🌌': 'milky_way',
  '☁️': 'cloud',
  '⛅': 'partly_sunny',
  '⛈️': 'cloud_with_lightning_and_rain',
  '🌤️': 'sun_behind_small_cloud',
  '🌥️': 'sun_behind_large_cloud',
  '🌦️': 'sun_behind_rain_cloud',
  '🌧️': 'cloud_with_rain',
  '🌨️': 'cloud_with_snow',
  '🌩️': 'cloud_with_lightning',
  '🌪️': 'tornado',
  '🌫️': 'fog',
  '🌬️': 'wind_face',
  '🌀': 'cyclone',
  '🌈': 'rainbow',
  '🌂': 'closed_umbrella',
  '☂️': 'open_umbrella',
  '☔': 'umbrella',
  '⛱️': 'parasol_on_ground',
  '⚡': 'zap',
  '❄️': 'snowflake',
  '☃️': 'snowman_with_snow',
  '⛄': 'snowman',
  '☄️': 'comet',
  '🔥': 'fire',
  '💧': 'droplet',
  '🌊': 'ocean',
  '🎃': 'jack_o_lantern',
  '🎄': 'christmas_tree',
  '🎆': 'fireworks',
  '🎇': 'sparkler',
  '🧨': 'firecracker',
  '✨': 'sparkles',
  '🎈': 'balloon',
  '🎉': 'tada',
  '🎊': 'confetti_ball',
  '🎋': 'tanabata_tree',
  '🎍': 'bamboo',
  '🎎': 'dolls',
  '🎏': 'flags',
  '🎐': 'wind_chime',
  '🎑': 'rice_scene',
  '🧧': 'red_envelope',
  '🎀': 'ribbon',
  '🎁': 'gift',
  '🎗️': 'reminder_ribbon',
  '🎟️': 'tickets',
  '🎫': 'ticket',
  '🎖️': 'medal_military',
  '🏆': 'trophy',
  '🏅': 'medal_sports',
  '🥇': '1st_place_medal',
  '🥈': '2nd_place_medal',
  '🥉': '3rd_place_medal',
  '⚽': 'soccer',
  '⚾': 'baseball',
  '🥎': 'softball',
  '🏀': 'basketball',
  '🏐': 'volleyball',
  '🏈': 'football',
  '🏉': 'rugby_football',
  '🎾': 'tennis',
  '🥏': 'flying_disc',
  '🎳': 'bowling',
  '🏏': 'cricket_game',
  '🏑': 'field_hockey',
  '🏒': 'ice_hockey',
  '🥍': 'lacrosse',
  '🏓': 'ping_pong',
  '🏸': 'badminton',
  '🥊': 'boxing_glove',
  '🥋': 'martial_arts_uniform',
  '🥅': 'goal_net',
  '⛳': 'golf',
  '⛸️': 'ice_skate',
  '🎣': 'fishing_pole_and_fish',
  '🤿': 'diving_mask',
  '🎽': 'running_shirt_with_sash',
  '🎿': 'ski',
  '🛷': 'sled',
  '🥌': 'curling_stone',
  '🎯': 'dart',
  '🪀': 'yo_yo',
  '🪁': 'kite',
  '🎱': '8ball',
  '🔮': 'crystal_ball',
  '🪄': 'magic_wand',
  '🧿': 'nazar_amulet',
  '🎮': 'video_game',
  '🕹️': 'joystick',
  '🎰': 'slot_machine',
  '🎲': 'game_die',
  '🧩': 'jigsaw',
  '🧸': 'teddy_bear',
  '🪅': 'pinata',
  '🪆': 'nesting_dolls',
  '♠️': 'spades',
  '♥️': 'hearts',
  '♦️': 'diamonds',
  '♣️': 'clubs',
  '♟️': 'chess_pawn',
  '🃏': 'black_joker',
  '🀄': 'mahjong',
  '🎴': 'flower_playing_cards',
  '🎭': 'performing_arts',
  '🖼️': 'framed_picture',
  '🎨': 'art',
  '🧵': 'thread',
  '🪡': 'sewing_needle',
  '🧶': 'yarn',
  '🪢': 'knot',
  '👓': 'eyeglasses',
  '🕶️': 'dark_sunglasses',
  '🥽': 'goggles',
  '🥼': 'lab_coat',
  '🦺': 'safety_vest',
  '👔': 'necktie',
  '👕': 'shirt',
  '👖': 'jeans',
  '🧣': 'scarf',
  '🧤': 'gloves',
  '🧥': 'coat',
  '🧦': 'socks',
  '👗': 'dress',
  '👘': 'kimono',
  '🥻': 'sari',
  '🩱': 'one_piece_swimsuit',
  '🩲': 'swim_brief',
  '🩳': 'shorts',
  '👙': 'bikini',
  '👚': 'womans_clothes',
  '👛': 'purse',
  '👜': 'handbag',
  '👝': 'pouch',
  '🛍️': 'shopping',
  '🎒': 'school_satchel',
  '🩴': 'thong_sandal',
  '👞': 'mans_shoe',
  '👟': 'athletic_shoe',
  '🥾': 'hiking_boot',
  '🥿': 'flat_shoe',
  '👠': 'high_heel',
  '👡': 'sandal',
  '🩰': 'ballet_shoes',
  '👢': 'boot',
  '👑': 'crown',
  '👒': 'womans_hat',
  '🎩': 'tophat',
  '🎓': 'mortar_board',
  '🧢': 'billed_cap',
  '🪖': 'military_helmet',
  '⛑️': 'rescue_worker_helmet',
  '📿': 'prayer_beads',
  '💄': 'lipstick',
  '💍': 'ring',
  '💎': 'gem',
  '🔇': 'mute',
  '🔈': 'speaker',
  '🔉': 'sound',
  '🔊': 'loud_sound',
  '📢': 'loudspeaker',
  '📣': 'mega',
  '📯': 'postal_horn',
  '🔔': 'bell',
  '🔕': 'no_bell',
  '🎼': 'musical_score',
  '🎵': 'musical_note',
  '🎶': 'notes',
  '🎙️': 'studio_microphone',
  '🎚️': 'level_slider',
  '🎛️': 'control_knobs',
  '🎤': 'microphone',
  '🎧': 'headphones',
  '📻': 'radio',
  '🎷': 'saxophone',
  '🪗': 'accordion',
  '🎸': 'guitar',
  '🎹': 'musical_keyboard',
  '🎺': 'trumpet',
  '🎻': 'violin',
  '🪕': 'banjo',
  '🥁': 'drum',
  '🪘': 'long_drum',
  '📱': 'iphone',
  '📲': 'calling',
  '☎️': 'phone',
  '📞': 'telephone_receiver',
  '📟': 'pager',
  '📠': 'fax',
  '🔋': 'battery',
  '🔌': 'electric_plug',
  '💻': 'computer',
  '🖥️': 'desktop_computer',
  '🖨️': 'printer',
  '⌨️': 'keyboard',
  '🖱️': 'computer_mouse',
  '🖲️': 'trackball',
  '💽': 'minidisc',
  '💾': 'floppy_disk',
  '💿': 'cd',
  '📀': 'dvd',
  '🧮': 'abacus',
  '🎥': 'movie_camera',
  '🎞️': 'film_strip',
  '📽️': 'film_projector',
  '🎬': 'clapper',
  '📺': 'tv',
  '📷': 'camera',
  '📸': 'camera_flash',
  '📹': 'video_camera',
  '📼': 'vhs',
  '🔍': 'mag',
  '🔎': 'mag_right',
  '🕯️': 'candle',
  '💡': 'bulb',
  '🔦': 'flashlight',
  '🏮': 'izakaya_lantern',
  '🪔': 'diya_lamp',
  '📔': 'notebook_with_decorative_cover',
  '📕': 'closed_book',
  '📖': 'book',
  '📗': 'green_book',
  '📘': 'blue_book',
  '📙': 'orange_book',
  '📚': 'books',
  '📓': 'notebook',
  '📒': 'ledger',
  '📃': 'page_with_curl',
  '📜': 'scroll',
  '📄': 'page_facing_up',
  '📰': 'newspaper',
  '🗞️': 'newspaper_roll',
  '📑': 'bookmark_tabs',
  '🔖': 'bookmark',
  '🏷️': 'label',
  '💰': 'moneybag',
  '🪙': 'coin',
  '💴': 'yen',
  '💵': 'dollar',
  '💶': 'euro',
  '💷': 'pound',
  '💸': 'money_with_wings',
  '💳': 'credit_card',
  '🧾': 'receipt',
  '💹': 'chart',
  '✉️': 'envelope',
  '📧': 'email',
  '📨': 'incoming_envelope',
  '📩': 'envelope_with_arrow',
  '📤': 'outbox_tray',
  '📥': 'inbox_tray',
  '📦': 'package',
  '📫': 'mailbox',
  '📪': 'mailbox_closed',
  '📬': 'mailbox_with_mail',
  '📭': 'mailbox_with_no_mail',
  '📮': 'postbox',
  '🗳️': 'ballot_box',
  '✏️': 'pencil2',
  '✒️': 'black_nib',
  '🖋️': 'fountain_pen',
  '🖊️': 'pen',
  '🖌️': 'paintbrush',
  '🖍️': 'crayon',
  '📝': 'memo',
  '💼': 'briefcase',
  '📁': 'file_folder',
  '📂': 'open_file_folder',
  '🗂️': 'card_index_dividers',
  '📅': 'date',
  '📆': 'calendar',
  '🗒️': 'spiral_notepad',
  '🗓️': 'spiral_calendar',
  '📇': 'card_index',
  '📈': 'chart_with_upwards_trend',
  '📉': 'chart_with_downwards_trend',
  '📊': 'bar_chart',
  '📋': 'clipboard',
  '📌': 'pushpin',
  '📍': 'round_pushpin',
  '📎': 'paperclip',
  '🖇️': 'paperclips',
  '📏': 'straight_ruler',
  '📐': 'triangular_ruler',
  '✂️': 'scissors',
  '🗃️': 'card_file_box',
  '🗄️': 'file_cabinet',
  '🗑️': 'wastebasket',
  '🔒': 'lock',
  '🔓': 'unlock',
  '🔏': 'lock_with_ink_pen',
  '🔐': 'closed_lock_with_key',
  '🔑': 'key',
  '🗝️': 'old_key',
  '🔨': 'hammer',
  '🪓': 'axe',
  '⛏️': 'pick',
  '⚒️': 'hammer_and_pick',
  '🛠️': 'hammer_and_wrench',
  '🗡️': 'dagger',
  '⚔️': 'crossed_swords',
  '🔫': 'gun',
  '🪃': 'boomerang',
  '🏹': 'bow_and_arrow',
  '🛡️': 'shield',
  '🪚': 'carpentry_saw',
  '🔧': 'wrench',
  '🪛': 'screwdriver',
  '🔩': 'nut_and_bolt',
  '⚙️': 'gear',
  '🗜️': 'clamp',
  '⚖️': 'balance_scale',
  '🦯': 'probing_cane',
  '🔗': 'link',
  '⛓️': 'chains',
  '🪝': 'hook',
  '🧰': 'toolbox',
  '🧲': 'magnet',
  '🪜': 'ladder',
  '⚗️': 'alembic',
  '🧪': 'test_tube',
  '🧫': 'petri_dish',
  '🧬': 'dna',
  '🔬': 'microscope',
  '🔭': 'telescope',
  '📡': 'satellite',
  '💉': 'syringe',
  '🩸': 'drop_of_blood',
  '💊': 'pill',
  '🩹': 'adhesive_bandage',
  '🩺': 'stethoscope',
  '🚪': 'door',
  '🛗': 'elevator',
  '🪞': 'mirror',
  '🪟': 'window',
  '🛏️': 'bed',
  '🛋️': 'couch_and_lamp',
  '🪑': 'chair',
  '🚽': 'toilet',
  '🪠': 'plunger',
  '🚿': 'shower',
  '🛁': 'bathtub',
  '🪤': 'mouse_trap',
  '🪒': 'razor',
  '🧴': 'lotion_bottle',
  '🧷': 'safety_pin',
  '🧹': 'broom',
  '🧺': 'basket',
  '🧻': 'roll_of_paper',
  '🪣': 'bucket',
  '🧼': 'soap',
  '🪥': 'toothbrush',
  '🧽': 'sponge',
  '🧯': 'fire_extinguisher',
  '🛒': 'shopping_cart',
  '🚬': 'smoking',
  '⚰️': 'coffin',
  '🪦': 'headstone',
  '⚱️': 'funeral_urn',
  '🗿': 'moyai',
  '🪧': 'placard',
  '🏧': 'atm',
  '🚮': 'put_litter_in_its_place',
  '🚰': 'potable_water',
  '♿': 'wheelchair',
  '🚹': 'mens',
  '🚺': 'womens',
  '🚻': 'restroom',
  '🚼': 'baby_symbol',
  '🚾': 'wc',
  '🛂': 'passport_control',
  '🛃': 'customs',
  '🛄': 'baggage_claim',
  '🛅': 'left_luggage',
  '⚠️': 'warning',
  '🚸': 'children_crossing',
  '⛔': 'no_entry',
  '🚫': 'no_entry_sign',
  '🚳': 'no_bicycles',
  '🚭': 'no_smoking',
  '🚯': 'do_not_litter',
  '🚱': 'non-potable_water',
  '🚷': 'no_pedestrians',
  '📵': 'no_mobile_phones',
  '🔞': 'underage',
  '☢️': 'radioactive',
  '☣️': 'biohazard',
  '⬆️': 'arrow_up',
  '↗️': 'arrow_upper_right',
  '➡️': 'arrow_right',
  '↘️': 'arrow_lower_right',
  '⬇️': 'arrow_down',
  '↙️': 'arrow_lower_left',
  '⬅️': 'arrow_left',
  '↖️': 'arrow_upper_left',
  '↕️': 'arrow_up_down',
  '↔️': 'left_right_arrow',
  '↩️': 'leftwards_arrow_with_hook',
  '↪️': 'arrow_right_hook',
  '⤴️': 'arrow_heading_up',
  '⤵️': 'arrow_heading_down',
  '🔃': 'arrows_clockwise',
  '🔄': 'arrows_counterclockwise',
  '🔙': 'back',
  '🔚': 'end',
  '🔛': 'on',
  '🔜': 'soon',
  '🔝': 'top',
  '🛐': 'place_of_worship',
  '⚛️': 'atom_symbol',
  '🕉️': 'om',
  '✡️': 'star_of_david',
  '☸️': 'wheel_of_dharma',
  '☯️': 'yin_yang',
  '✝️': 'latin_cross',
  '☦️': 'orthodox_cross',
  '☪️': 'star_and_crescent',
  '☮️': 'peace_symbol',
  '🕎': 'menorah',
  '🔯': 'six_pointed_star',
  '♈': 'aries',
  '♉': 'taurus',
  '♊': 'gemini',
  '♋': 'cancer',
  '♌': 'leo',
  '♍': 'virgo',
  '♎': 'libra',
  '♏': 'scorpius',
  '♐': 'sagittarius',
  '♑': 'capricorn',
  '♒': 'aquarius',
  '♓': 'pisces',
  '⛎': 'ophiuchus',
  '🔀': 'twisted_rightwards_arrows',
  '🔁': 'repeat',
  '🔂': 'repeat_one',
  '▶️': 'arrow_forward',
  '⏩': 'fast_forward',
  '⏭️': 'next_track_button',
  '⏯️': 'play_or_pause_button',
  '◀️': 'arrow_backward',
  '⏪': 'rewind',
  '⏮️': 'previous_track_button',
  '🔼': 'arrow_up_small',
  '⏫': 'arrow_double_up',
  '🔽': 'arrow_down_small',
  '⏬': 'arrow_double_down',
  '⏸️': 'pause_button',
  '⏹️': 'stop_button',
  '⏺️': 'record_button',
  '⏏️': 'eject_button',
  '🎦': 'cinema',
  '🔅': 'low_brightness',
  '🔆': 'high_brightness',
  '📶': 'signal_strength',
  '📳': 'vibration_mode',
  '📴': 'mobile_phone_off',
  '♀️': 'female_sign',
  '♂️': 'male_sign',
  '⚧️': 'transgender_symbol',
  '✖️': 'heavy_multiplication_x',
  '➕': 'heavy_plus_sign',
  '➖': 'heavy_minus_sign',
  '➗': 'heavy_division_sign',
  '♾️': 'infinity',
  '‼️': 'bangbang',
  '⁉️': 'interrobang',
  '❓': 'question',
  '❔': 'grey_question',
  '❕': 'grey_exclamation',
  '❗': 'exclamation',
  '〰️': 'wavy_dash',
  '💱': 'currency_exchange',
  '💲': 'heavy_dollar_sign',
  '⚕️': 'medical_symbol',
  '♻️': 'recycle',
  '⚜️': 'fleur_de_lis',
  '🔱': 'trident',
  '📛': 'name_badge',
  '🔰': 'beginner',
  '⭕': 'o',
  '✅': 'white_check_mark',
  '☑️': 'ballot_box_with_check',
  '✔️': 'heavy_check_mark',
  '❌': 'x',
  '❎': 'negative_squared_cross_mark',
  '➰': 'curly_loop',
  '➿': 'loop',
  '〽️': 'part_alternation_mark',
  '✳️': 'eight_spoked_asterisk',
  '✴️': 'eight_pointed_black_star',
  '❇️': 'sparkle',
  '©️': 'copyright',
  '®️': 'registered',
  '™️': 'tm',
  '#️⃣': 'hash',
  '*️⃣': 'asterisk',
  '0️⃣': 'zero',
  '1️⃣': 'one',
  '2️⃣': 'two',
  '3️⃣': 'three',
  '4️⃣': 'four',
  '5️⃣': 'five',
  '6️⃣': 'six',
  '7️⃣': 'seven',
  '8️⃣': 'eight',
  '9️⃣': 'nine',
  '🔟': 'keycap_ten',
  '🔠': 'capital_abcd',
  '🔡': 'abcd',
  '🔢': '1234',
  '🔣': 'symbols',
  '🔤': 'abc',
  '🅰️': 'a',
  '🆎': 'ab',
  '🅱️': 'b',
  '🆑': 'cl',
  '🆒': 'cool',
  '🆓': 'free',
  ℹ️: 'information_source',
  '🆔': 'id',
  'Ⓜ️': 'm',
  '🆕': 'new',
  '🆖': 'ng',
  '🅾️': 'o2',
  '🆗': 'ok',
  '🅿️': 'parking',
  '🆘': 'sos',
  '🆙': 'up',
  '🆚': 'vs',
  '🈁': 'koko',
  '🈂️': 'sa',
  '🈷️': 'u6708',
  '🈶': 'u6709',
  '🈯': 'u6307',
  '🉐': 'ideograph_advantage',
  '🈹': 'u5272',
  '🈚': 'u7121',
  '🈲': 'u7981',
  '🉑': 'accept',
  '🈸': 'u7533',
  '🈴': 'u5408',
  '🈳': 'u7a7a',
  '㊗️': 'congratulations',
  '㊙️': 'secret',
  '🈺': 'u55b6',
  '🈵': 'u6e80',
  '🔴': 'red_circle',
  '🟠': 'orange_circle',
  '🟡': 'yellow_circle',
  '🟢': 'green_circle',
  '🔵': 'large_blue_circle',
  '🟣': 'purple_circle',
  '🟤': 'brown_circle',
  '⚫': 'black_circle',
  '⚪': 'white_circle',
  '🟥': 'red_square',
  '🟧': 'orange_square',
  '🟨': 'yellow_square',
  '🟩': 'green_square',
  '🟦': 'blue_square',
  '🟪': 'purple_square',
  '🟫': 'brown_square',
  '⬛': 'black_large_square',
  '⬜': 'white_large_square',
  '◼️': 'black_medium_square',
  '◻️': 'white_medium_square',
  '◾': 'black_medium_small_square',
  '◽': 'white_medium_small_square',
  '▪️': 'black_small_square',
  '▫️': 'white_small_square',
  '🔶': 'large_orange_diamond',
  '🔷': 'large_blue_diamond',
  '🔸': 'small_orange_diamond',
  '🔹': 'small_blue_diamond',
  '🔺': 'small_red_triangle',
  '🔻': 'small_red_triangle_down',
  '💠': 'diamond_shape_with_a_dot_inside',
  '🔘': 'radio_button',
  '🔳': 'white_square_button',
  '🔲': 'black_square_button',
  '🏁': 'checkered_flag',
  '🚩': 'triangular_flag_on_post',
  '🎌': 'crossed_flags',
  '🏴': 'black_flag',
  '🏳️': 'white_flag',
  '🏳️‍🌈': 'rainbow_flag',
  '🏳️‍⚧️': 'transgender_flag',
  '🏴‍☠️': 'pirate_flag',
  '🇦🇨': 'ascension_island',
  '🇦🇩': 'andorra',
  '🇦🇪': 'united_arab_emirates',
  '🇦🇫': 'afghanistan',
  '🇦🇬': 'antigua_barbuda',
  '🇦🇮': 'anguilla',
  '🇦🇱': 'albania',
  '🇦🇲': 'armenia',
  '🇦🇴': 'angola',
  '🇦🇶': 'antarctica',
  '🇦🇷': 'argentina',
  '🇦🇸': 'american_samoa',
  '🇦🇹': 'austria',
  '🇦🇺': 'australia',
  '🇦🇼': 'aruba',
  '🇦🇽': 'aland_islands',
  '🇦🇿': 'azerbaijan',
  '🇧🇦': 'bosnia_herzegovina',
  '🇧🇧': 'barbados',
  '🇧🇩': 'bangladesh',
  '🇧🇪': 'belgium',
  '🇧🇫': 'burkina_faso',
  '🇧🇬': 'bulgaria',
  '🇧🇭': 'bahrain',
  '🇧🇮': 'burundi',
  '🇧🇯': 'benin',
  '🇧🇱': 'st_barthelemy',
  '🇧🇲': 'bermuda',
  '🇧🇳': 'brunei',
  '🇧🇴': 'bolivia',
  '🇧🇶': 'caribbean_netherlands',
  '🇧🇷': 'brazil',
  '🇧🇸': 'bahamas',
  '🇧🇹': 'bhutan',
  '🇧🇻': 'bouvet_island',
  '🇧🇼': 'botswana',
  '🇧🇾': 'belarus',
  '🇧🇿': 'belize',
  '🇨🇦': 'canada',
  '🇨🇨': 'cocos_islands',
  '🇨🇩': 'congo_kinshasa',
  '🇨🇫': 'central_african_republic',
  '🇨🇬': 'congo_brazzaville',
  '🇨🇭': 'switzerland',
  '🇨🇮': 'cote_divoire',
  '🇨🇰': 'cook_islands',
  '🇨🇱': 'chile',
  '🇨🇲': 'cameroon',
  '🇨🇳': 'cn',
  '🇨🇴': 'colombia',
  '🇨🇵': 'clipperton_island',
  '🇨🇷': 'costa_rica',
  '🇨🇺': 'cuba',
  '🇨🇻': 'cape_verde',
  '🇨🇼': 'curacao',
  '🇨🇽': 'christmas_island',
  '🇨🇾': 'cyprus',
  '🇨🇿': 'czech_republic',
  '🇩🇪': 'de',
  '🇩🇬': 'diego_garcia',
  '🇩🇯': 'djibouti',
  '🇩🇰': 'denmark',
  '🇩🇲': 'dominica',
  '🇩🇴': 'dominican_republic',
  '🇩🇿': 'algeria',
  '🇪🇦': 'ceuta_melilla',
  '🇪🇨': 'ecuador',
  '🇪🇪': 'estonia',
  '🇪🇬': 'egypt',
  '🇪🇭': 'western_sahara',
  '🇪🇷': 'eritrea',
  '🇪🇸': 'es',
  '🇪🇹': 'ethiopia',
  '🇪🇺': 'eu',
  '🇫🇮': 'finland',
  '🇫🇯': 'fiji',
  '🇫🇰': 'falkland_islands',
  '🇫🇲': 'micronesia',
  '🇫🇴': 'faroe_islands',
  '🇫🇷': 'fr',
  '🇬🇦': 'gabon',
  '🇬🇧': 'gb',
  '🇬🇩': 'grenada',
  '🇬🇪': 'georgia',
  '🇬🇫': 'french_guiana',
  '🇬🇬': 'guernsey',
  '🇬🇭': 'ghana',
  '🇬🇮': 'gibraltar',
  '🇬🇱': 'greenland',
  '🇬🇲': 'gambia',
  '🇬🇳': 'guinea',
  '🇬🇵': 'guadeloupe',
  '🇬🇶': 'equatorial_guinea',
  '🇬🇷': 'greece',
  '🇬🇸': 'south_georgia_south_sandwich_islands',
  '🇬🇹': 'guatemala',
  '🇬🇺': 'guam',
  '🇬🇼': 'guinea_bissau',
  '🇬🇾': 'guyana',
  '🇭🇰': 'hong_kong',
  '🇭🇲': 'heard_mcdonald_islands',
  '🇭🇳': 'honduras',
  '🇭🇷': 'croatia',
  '🇭🇹': 'haiti',
  '🇭🇺': 'hungary',
  '🇮🇨': 'canary_islands',
  '🇮🇩': 'indonesia',
  '🇮🇪': 'ireland',
  '🇮🇱': 'israel',
  '🇮🇲': 'isle_of_man',
  '🇮🇳': 'india',
  '🇮🇴': 'british_indian_ocean_territory',
  '🇮🇶': 'iraq',
  '🇮🇷': 'iran',
  '🇮🇸': 'iceland',
  '🇮🇹': 'it',
  '🇯🇪': 'jersey',
  '🇯🇲': 'jamaica',
  '🇯🇴': 'jordan',
  '🇯🇵': 'jp',
  '🇰🇪': 'kenya',
  '🇰🇬': 'kyrgyzstan',
  '🇰🇭': 'cambodia',
  '🇰🇮': 'kiribati',
  '🇰🇲': 'comoros',
  '🇰🇳': 'st_kitts_nevis',
  '🇰🇵': 'north_korea',
  '🇰🇷': 'kr',
  '🇰🇼': 'kuwait',
  '🇰🇾': 'cayman_islands',
  '🇰🇿': 'kazakhstan',
  '🇱🇦': 'laos',
  '🇱🇧': 'lebanon',
  '🇱🇨': 'st_lucia',
  '🇱🇮': 'liechtenstein',
  '🇱🇰': 'sri_lanka',
  '🇱🇷': 'liberia',
  '🇱🇸': 'lesotho',
  '🇱🇹': 'lithuania',
  '🇱🇺': 'luxembourg',
  '🇱🇻': 'latvia',
  '🇱🇾': 'libya',
  '🇲🇦': 'morocco',
  '🇲🇨': 'monaco',
  '🇲🇩': 'moldova',
  '🇲🇪': 'montenegro',
  '🇲🇫': 'st_martin',
  '🇲🇬': 'madagascar',
  '🇲🇭': 'marshall_islands',
  '🇲🇰': 'macedonia',
  '🇲🇱': 'mali',
  '🇲🇲': 'myanmar',
  '🇲🇳': 'mongolia',
  '🇲🇴': 'macau',
  '🇲🇵': 'northern_mariana_islands',
  '🇲🇶': 'martinique',
  '🇲🇷': 'mauritania',
  '🇲🇸': 'montserrat',
  '🇲🇹': 'malta',
  '🇲🇺': 'mauritius',
  '🇲🇻': 'maldives',
  '🇲🇼': 'malawi',
  '🇲🇽': 'mexico',
  '🇲🇾': 'malaysia',
  '🇲🇿': 'mozambique',
  '🇳🇦': 'namibia',
  '🇳🇨': 'new_caledonia',
  '🇳🇪': 'niger',
  '🇳🇫': 'norfolk_island',
  '🇳🇬': 'nigeria',
  '🇳🇮': 'nicaragua',
  '🇳🇱': 'netherlands',
  '🇳🇴': 'norway',
  '🇳🇵': 'nepal',
  '🇳🇷': 'nauru',
  '🇳🇺': 'niue',
  '🇳🇿': 'new_zealand',
  '🇴🇲': 'oman',
  '🇵🇦': 'panama',
  '🇵🇪': 'peru',
  '🇵🇫': 'french_polynesia',
  '🇵🇬': 'papua_new_guinea',
  '🇵🇭': 'philippines',
  '🇵🇰': 'pakistan',
  '🇵🇱': 'poland',
  '🇵🇲': 'st_pierre_miquelon',
  '🇵🇳': 'pitcairn_islands',
  '🇵🇷': 'puerto_rico',
  '🇵🇸': 'palestinian_territories',
  '🇵🇹': 'portugal',
  '🇵🇼': 'palau',
  '🇵🇾': 'paraguay',
  '🇶🇦': 'qatar',
  '🇷🇪': 'reunion',
  '🇷🇴': 'romania',
  '🇷🇸': 'serbia',
  '🇷🇺': 'ru',
  '🇷🇼': 'rwanda',
  '🇸🇦': 'saudi_arabia',
  '🇸🇧': 'solomon_islands',
  '🇸🇨': 'seychelles',
  '🇸🇩': 'sudan',
  '🇸🇪': 'sweden',
  '🇸🇬': 'singapore',
  '🇸🇭': 'st_helena',
  '🇸🇮': 'slovenia',
  '🇸🇯': 'svalbard_jan_mayen',
  '🇸🇰': 'slovakia',
  '🇸🇱': 'sierra_leone',
  '🇸🇲': 'san_marino',
  '🇸🇳': 'senegal',
  '🇸🇴': 'somalia',
  '🇸🇷': 'suriname',
  '🇸🇸': 'south_sudan',
  '🇸🇹': 'sao_tome_principe',
  '🇸🇻': 'el_salvador',
  '🇸🇽': 'sint_maarten',
  '🇸🇾': 'syria',
  '🇸🇿': 'swaziland',
  '🇹🇦': 'tristan_da_cunha',
  '🇹🇨': 'turks_caicos_islands',
  '🇹🇩': 'chad',
  '🇹🇫': 'french_southern_territories',
  '🇹🇬': 'togo',
  '🇹🇭': 'thailand',
  '🇹🇯': 'tajikistan',
  '🇹🇰': 'tokelau',
  '🇹🇱': 'timor_leste',
  '🇹🇲': 'turkmenistan',
  '🇹🇳': 'tunisia',
  '🇹🇴': 'tonga',
  '🇹🇷': 'tr',
  '🇹🇹': 'trinidad_tobago',
  '🇹🇻': 'tuvalu',
  '🇹🇼': 'taiwan',
  '🇹🇿': 'tanzania',
  '🇺🇦': 'ukraine',
  '🇺🇬': 'uganda',
  '🇺🇲': 'us_outlying_islands',
  '🇺🇳': 'united_nations',
  '🇺🇸': 'us',
  '🇺🇾': 'uruguay',
  '🇺🇿': 'uzbekistan',
  '🇻🇦': 'vatican_city',
  '🇻🇨': 'st_vincent_grenadines',
  '🇻🇪': 'venezuela',
  '🇻🇬': 'british_virgin_islands',
  '🇻🇮': 'us_virgin_islands',
  '🇻🇳': 'vietnam',
  '🇻🇺': 'vanuatu',
  '🇼🇫': 'wallis_futuna',
  '🇼🇸': 'samoa',
  '🇽🇰': 'kosovo',
  '🇾🇪': 'yemen',
  '🇾🇹': 'mayotte',
  '🇿🇦': 'south_africa',
  '🇿🇲': 'zambia',
  '🇿🇼': 'zimbabwe',
  '🏴󠁧󠁢󠁥󠁮󠁧󠁿': 'england',
  '🏴󠁧󠁢󠁳󠁣󠁴󠁿': 'scotland',
  '🏴󠁧󠁢󠁷󠁬󠁳󠁿': 'wales'
};
;// CONCATENATED MODULE: ./node_modules/remark-gemoji/node_modules/unist-util-visit/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 * @typedef {import('./complex-types').Visitor} Visitor
 */


/**
 * Visit children of tree which pass a test
 *
 * @param tree Abstract syntax tree to walk
 * @param test Test, optional
 * @param visitor Function to run for each node
 * @param reverse Fisit the tree in reverse, defaults to false
 */

var remark_gemoji_node_modules_unist_util_visit_visit =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {import('./complex-types').Visitor} visitor
 * @param {boolean} [reverse]
 */
function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  visitParents(tree, test, overload, reverse);
  /**
   * @param {Node} node
   * @param {Array.<Parent>} parents
   */

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};
;// CONCATENATED MODULE: ./node_modules/remark-gemoji/index.js
/**
 * @typedef {import('mdast').Root} Root
 */


var remark_gemoji_find = /:(\+1|[-\w]+):/g;
var remark_gemoji_own = {}.hasOwnProperty;
/**
 * Plugin to turn gemoji shortcodes (`:+1:`) into emoji (`👍`).
 *
 * @type {import('unified').Plugin<void[], Root>}
 */

function remarkGemoji() {
  return function (tree) {
    remark_gemoji_node_modules_unist_util_visit_visit(tree, 'text', function (node) {
      var value = node.value;
      /** @type {string[]} */

      var slices = [];
      remark_gemoji_find.lastIndex = 0;
      var match = remark_gemoji_find.exec(value);
      var start = 0;

      while (match) {
        var emoji =
        /** @type {keyof nameToEmoji} */
        match[1];
        var position = match.index;

        if (remark_gemoji_own.call(nameToEmoji, emoji)) {
          if (start !== position) {
            slices.push(value.slice(start, position));
          }

          slices.push(nameToEmoji[emoji]);
          start = position + match[0].length;
        } else {
          remark_gemoji_find.lastIndex = position + 1;
        }

        match = remark_gemoji_find.exec(value);
      }

      if (slices.length > 0) {
        slices.push(value.slice(start));
        node.value = slices.join('');
      }
    });
  };
}
;// CONCATENATED MODULE: ./node_modules/unist-builder/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist').Literal} Literal
 * @typedef {Object.<string, unknown>} Props
 * @typedef {Array.<Node>|string} ChildrenOrValue
 *
 * @typedef {(<T extends string, P extends Record<string, unknown>, C extends Node[]>(type: T, props: P, children: C) => {type: T, children: C} & P)} BuildParentWithProps
 * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P, value: string) => {type: T, value: string} & P)} BuildLiteralWithProps
 * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P) => {type: T} & P)} BuildVoidWithProps
 * @typedef {(<T extends string, C extends Node[]>(type: T, children: C) => {type: T, children: C})} BuildParent
 * @typedef {(<T extends string>(type: T, value: string) => {type: T, value: string})} BuildLiteral
 * @typedef {(<T extends string>(type: T) => {type: T})} BuildVoid
 */
var u =
/**
* @type {BuildVoid & BuildVoidWithProps & BuildLiteral & BuildLiteralWithProps & BuildParent & BuildParentWithProps}
*/

/**
 * @param {string} type Type of node
 * @param {Props|ChildrenOrValue} [props] Additional properties for node (or `children` or `value`)
 * @param {ChildrenOrValue} [value] `children` or `value` of node
 * @returns {Node}
 */
function u(type, props, value) {
  /** @type {Node} */
  var node = {
    type: String(type)
  };

  if ((value === undefined || value === null) && (typeof props === 'string' || Array.isArray(props))) {
    value = props;
  } else {
    Object.assign(node, props);
  }

  if (Array.isArray(value)) {
    node.children = value;
  } else if (value !== undefined && value !== null) {
    node.value = String(value);
  }

  return node;
};
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/node_modules/unist-util-visit/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 * @typedef {import('./complex-types').Visitor} Visitor
 */


/**
 * Visit children of tree which pass a test
 *
 * @param tree Abstract syntax tree to walk
 * @param test Test, optional
 * @param visitor Function to run for each node
 * @param reverse Fisit the tree in reverse, defaults to false
 */

var mdast_util_to_hast_node_modules_unist_util_visit_visit =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {import('./complex-types').Visitor} visitor
 * @param {boolean} [reverse]
 */
function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  visitParents(tree, test, overload, reverse);
  /**
   * @param {Node} node
   * @param {Array.<Parent>} parents
   */

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};
;// CONCATENATED MODULE: ./node_modules/unist-util-generated/index.js
/**
 * @typedef {Object} PointLike
 * @property {number} [line]
 * @property {number} [column]
 * @property {number} [offset]
 *
 * @typedef {Object} PositionLike
 * @property {PointLike} [start]
 * @property {PointLike} [end]
 *
 * @typedef {Object} NodeLike
 * @property {PositionLike} [position]
 */

/**
 * Check if `node` is *generated*.
 *
 * @param {NodeLike} [node]
 * @returns {boolean}
 */
function generated(node) {
  return !node || !node.position || !node.position.start || !node.position.start.line || !node.position.start.column || !node.position.end || !node.position.end.line || !node.position.end.column;
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-definitions/node_modules/unist-util-visit-parents/color.js
/**
 * @param {string} d
 * @returns {string}
 */
function unist_util_visit_parents_color_color(d) {
  return "\x1B[33m" + d + "\x1B[39m";
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-definitions/node_modules/unist-util-visit-parents/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 */

/**
 * @typedef {CONTINUE|SKIP|EXIT} Action Union of the action types
 * @typedef {number} Index Move to the sibling at index next (after node itself is completely traversed). Useful if mutating the tree, such as removing the node the visitor is currently on, or any of its previous siblings (or next siblings, in case of reverse) Results less than 0 or greater than or equal to children.length stop traversing the parent
 * @typedef {[(Action|null|undefined|void)?, (Index|null|undefined)?]} ActionTuple List with one or two values, the first an action, the second an index.
 * @typedef {null|undefined|Action|Index|ActionTuple|void} VisitorResult Any value that can be returned from a visitor
 */

/**
 * Invoked when a node (matching test, if given) is found.
 * Visitors are free to transform node.
 * They can also transform the parent of node (the last of ancestors).
 * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.
 * If adding or removing previous siblings (or next siblings, in case of reverse) of node,
 * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.
 * Adding or removing next siblings of node (or previous siblings, in case of reverse)
 * is handled as expected without needing to return a new index.
 * Removing the children property of an ancestor still results in them being traversed.
 *
 * @template {Node} V
 * @callback Visitor
 * @param {V} node Found node
 * @param {Array.<Parent>} ancestors Ancestors of node
 * @returns {VisitorResult}
 */


/**
 * Continue traversing as normal
 */

var node_modules_unist_util_visit_parents_CONTINUE = true;
/**
 * Do not traverse this node’s children
 */

var node_modules_unist_util_visit_parents_SKIP = 'skip';
/**
 * Stop traversing immediately
 */

var node_modules_unist_util_visit_parents_EXIT = false;
var node_modules_unist_util_visit_parents_visitParents =
/**
 * @type {(
 *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &
 *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &
 *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)
 * )}
 */

/**
 * Visit children of tree which pass a test
 *
 * @param {Node} tree Abstract syntax tree to walk
 * @param {Test} test test Test node
 * @param {Visitor<Node>} visitor Function to run for each node
 * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false
 */
function visitParents(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor; // @ts-ignore no visitor given, so `visitor` is test.

    visitor = test;
    test = null;
  }

  var is = convert(test);
  var step = reverse ? -1 : 1;
  factory(tree, null, [])();
  /**
   * @param {Node} node
   * @param {number?} index
   * @param {Array.<Parent>} parents
   */

  function factory(node, index, parents) {
    /** @type {Object.<string, unknown>} */
    var value = typeof node === 'object' && node !== null ? node : {};
    /** @type {string} */

    var name;

    if (typeof value.type === 'string') {
      name = typeof value.tagName === 'string' ? value.tagName : typeof value.name === 'string' ? value.name : undefined;
      Object.defineProperty(visit, 'name', {
        value: 'node (' + unist_util_visit_parents_color_color(value.type + (name ? '<' + name + '>' : '')) + ')'
      });
    }

    return visit;

    function visit() {
      /** @type {ActionTuple} */
      var result = [];
      /** @type {ActionTuple} */

      var subresult;
      /** @type {number} */

      var offset;
      /** @type {Array.<Parent>} */

      var grandparents;

      if (!test || is(node, index, parents[parents.length - 1] || null)) {
        result = node_modules_unist_util_visit_parents_toResult(visitor(node, parents));

        if (result[0] === node_modules_unist_util_visit_parents_EXIT) {
          return result;
        }
      }

      if (node.children && result[0] !== node_modules_unist_util_visit_parents_SKIP) {
        // @ts-ignore looks like a parent.
        offset = (reverse ? node.children.length : -1) + step; // @ts-ignore looks like a parent.

        grandparents = parents.concat(node); // @ts-ignore looks like a parent.

        while (offset > -1 && offset < node.children.length) {
          subresult = factory(node.children[offset], offset, grandparents)();

          if (subresult[0] === node_modules_unist_util_visit_parents_EXIT) {
            return subresult;
          }

          offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;
        }
      }

      return result;
    }
  }
};
/**
 * @param {VisitorResult} value
 * @returns {ActionTuple}
 */

function node_modules_unist_util_visit_parents_toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }

  if (typeof value === 'number') {
    return [node_modules_unist_util_visit_parents_CONTINUE, value];
  }

  return [value];
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 */

/**
 * Invoked when a node (matching test, if given) is found.
 * Visitors are free to transform node.
 * They can also transform the parent of node (the last of ancestors).
 * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.
 * If adding or removing previous siblings (or next siblings, in case of reverse) of node,
 * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.
 * Adding or removing next siblings of node (or previous siblings, in case of reverse)
 * is handled as expected without needing to return a new index.
 * Removing the children property of an ancestor still results in them being traversed.
 *
 * @template {Node} V
 * @callback Visitor
 * @param {V} node Found node
 * @param {number|null} index Position of `node` in `parent`
 * @param {Parent|null} parent Parent of `node`
 * @returns {VisitorResult}
 */


var mdast_util_definitions_node_modules_unist_util_visit_visit =
/**
 * @type {(
 *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &
 *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &
 *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)
 * )}
 */

/**
 * Visit children of tree which pass a test
 *
 * @param {Node} tree Abstract syntax tree to walk
 * @param {Test} test test Test node
 * @param {Visitor<Node>} visitor Function to run for each node
 * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false
 */
function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  node_modules_unist_util_visit_parents_visitParents(tree, test, overload, reverse);
  /**
   * @param {Node} node
   * @param {Array.<Parent>} parents
   */

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};
;// CONCATENATED MODULE: ./node_modules/mdast-util-definitions/index.js
/**
 * @typedef {import('mdast').Root|import('mdast').Content} Node
 * @typedef {import('mdast').Definition} Definition
 * @typedef {import('unist-util-visit').Visitor<Definition>} DefinitionVisitor
 */

var mdast_util_definitions_own = {}.hasOwnProperty;
/**
 *
 * @param {Node} node
 */

function definitions(node) {
  /** @type {Object.<string, Definition>} */
  var cache = Object.create(null);

  if (!node || !node.type) {
    throw new Error('mdast-util-definitions expected node');
  }

  mdast_util_definitions_node_modules_unist_util_visit_visit(node, 'definition', ondefinition);
  return getDefinition;
  /** @type {DefinitionVisitor} */

  function ondefinition(definition) {
    var id = clean(definition.identifier);

    if (id && !mdast_util_definitions_own.call(cache, id)) {
      cache[id] = definition;
    }
  }
  /**
   * Get a node from the bound definition-cache.
   *
   * @param {string} identifier
   * @returns {Definition|null}
   */


  function getDefinition(identifier) {
    var id = clean(identifier);
    return id && mdast_util_definitions_own.call(cache, id) ? cache[id] : null;
  }
}
/**
 * @param {string} [value]
 * @returns {string}
 */

function clean(value) {
  return String(value || '').toUpperCase();
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/traverse.js



/**
 * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode
 * @typedef {import('./index.js').H} H
 * @typedef {import('./index.js').Handler} Handler
 * @typedef {import('./index.js').Content} Content
 */

var traverse_own = {}.hasOwnProperty;
/**
 * Transform an unknown node.
 * @type {Handler}
 * @param {MdastNode} node
 */

function traverse_unknown(h, node) {
  var data = node.data || {};

  if ('value' in node && !(traverse_own.call(data, 'hName') || traverse_own.call(data, 'hProperties') || traverse_own.call(data, 'hChildren'))) {
    return h.augment(node, u('text', node.value));
  }

  return h(node, 'div', traverse_all(h, node));
}
/**
 * @type {Handler}
 * @param {MdastNode} node
 */


function traverse_one(h, node, parent) {
  var type = node && node.type;
  /** @type {Handler} */

  var fn; // Fail on non-nodes.

  if (!type) {
    throw new Error('Expected node, got `' + node + '`');
  }

  if (traverse_own.call(h.handlers, type)) {
    fn = h.handlers[type];
  } else if (h.passThrough && h.passThrough.includes(type)) {
    fn = returnNode;
  } else {
    fn = h.unknownHandler;
  }

  return (typeof fn === 'function' ? fn : traverse_unknown)(h, node, parent);
}
/**
 * @type {Handler}
 * @param {MdastNode} node
 */

function returnNode(h, node) {
  // @ts-expect-error: Pass through custom node.
  return 'children' in node ? _objectSpread2(_objectSpread2({}, node), {}, {
    children: traverse_all(h, node)
  }) : node;
}
/**
 * @param {H} h
 * @param {MdastNode} parent
 */


function traverse_all(h, parent) {
  /** @type {Array<Content>} */
  var values = [];

  if ('children' in parent) {
    var nodes = parent.children;
    var index = -1;

    while (++index < nodes.length) {
      var result = traverse_one(h, nodes[index], parent);

      if (result) {
        if (index && nodes[index - 1].type === 'break') {
          if (!Array.isArray(result) && result.type === 'text') {
            result.value = result.value.replace(/^\s+/, '');
          }

          if (!Array.isArray(result) && result.type === 'element') {
            var head = result.children[0];

            if (head && head.type === 'text') {
              head.value = head.value.replace(/^\s+/, '');
            }
          }
        }

        if (Array.isArray(result)) {
          values.push.apply(values, _toConsumableArray(result));
        } else {
          values.push(result);
        }
      }
    }
  }

  return values;
}
;// CONCATENATED MODULE: ./node_modules/micromark-util-encode/index.js
var characterReferences = {
  '"': 'quot',
  '&': 'amp',
  '<': 'lt',
  '>': 'gt'
};
/**
 * Encode only the dangerous HTML characters.
 *
 * This ensures that certain characters which have special meaning in HTML are
 * dealt with.
 * Technically, we can skip `>` and `"` in many cases, but CM includes them.
 *
 * @param {string} value
 * @returns {string}
 */

function encode(value) {
  return value.replace(/["&<>]/g, replace);
  /**
   * @param {string} value
   * @returns {string}
   */

  function replace(value) {
    // @ts-expect-error Hush, it’s fine.
    return '&' + characterReferences[value] + ';';
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-util-sanitize-uri/index.js


/**
 * Make a value safe for injection as a URL.
 *
 * This encodes unsafe characters with percent-encoding and skips already
 * encoded sequences (see `normalizeUri` below).
 * Further unsafe characters are encoded as character references (see
 * `micromark-util-encode`).
 *
 * Then, a regex of allowed protocols can be given, in which case the URL is
 * sanitized.
 * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,
 * or `/^https?$/i` for `img[src]`.
 * If the URL includes an unknown protocol (one not matched by `protocol`, such
 * as a dangerous example, `javascript:`), the value is ignored.
 *
 * @param {string|undefined} url
 * @param {RegExp} [protocol]
 * @returns {string}
 */

function sanitizeUri(url, protocol) {
  var value = encode(normalizeUri(url || ''));

  if (!protocol) {
    return value;
  }

  var colon = value.indexOf(':');
  var questionMark = value.indexOf('?');
  var numberSign = value.indexOf('#');
  var slash = value.indexOf('/');

  if ( // If there is no protocol, it’s relative.
  colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign || // It is a protocol, it should be allowed.
  protocol.test(value.slice(0, colon))) {
    return value;
  }

  return '';
}
/**
 * Normalize a URL (such as used in definitions).
 *
 * Encode unsafe characters with percent-encoding, skipping already encoded
 * sequences.
 *
 * @param {string} value
 * @returns {string}
 */

function normalizeUri(value) {
  /** @type {string[]} */
  var result = [];
  var index = -1;
  var start = 0;
  var skip = 0;

  while (++index < value.length) {
    var code = value.charCodeAt(index);
    /** @type {string} */

    var replace = ''; // A correct percent encoded value.

    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {
      skip = 2;
    } // ASCII.
    else if (code < 128) {
      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
        replace = String.fromCharCode(code);
      }
    } // Astral.
    else if (code > 55295 && code < 57344) {
      var next = value.charCodeAt(index + 1); // A correct surrogate pair.

      if (code < 56320 && next > 56319 && next < 57344) {
        replace = String.fromCharCode(code, next);
        skip = 1;
      } // Lone surrogate.
      else {
        replace = "\uFFFD";
      }
    } // Unicode.
    else {
      replace = String.fromCharCode(code);
    }

    if (replace) {
      result.push(value.slice(start, index), encodeURIComponent(replace));
      start = index + skip + 1;
      replace = '';
    }

    if (skip) {
      index += skip;
      skip = 0;
    }
  }

  return result.join('') + value.slice(start);
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/wrap.js
/**
 * @typedef {import('./index.js').Content} Content
 */

/**
 * Wrap `nodes` with line feeds between each entry.
 * Optionally adds line feeds at the start and end.
 *
 * @param {Array<Content>} nodes
 * @param {boolean} [loose=false]
 * @returns {Array<Content>}
 */

function wrap_wrap(nodes, loose) {
  /** @type {Array<Content>} */
  var result = [];
  var index = -1;

  if (loose) {
    result.push(u('text', '\n'));
  }

  while (++index < nodes.length) {
    if (index) result.push(u('text', '\n'));
    result.push(nodes[index]);
  }

  if (loose && nodes.length > 0) {
    result.push(u('text', '\n'));
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/footer.js
/**
 * @typedef {import('mdast').BlockContent} BlockContent
 * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('./index.js').H} H
 */




/**
 * @param {H} h
 */

function footer(h) {
  var index = -1;
  /** @type {Array<ElementContent>} */

  var listItems = [];

  while (++index < h.footnoteOrder.length) {
    var def = h.footnoteById[h.footnoteOrder[index].toUpperCase()];

    if (!def) {
      continue;
    }

    var content = traverse_all(h, def);
    var id = String(def.identifier);
    var safeId = sanitizeUri(id.toLowerCase());
    var referenceIndex = 0;
    /** @type {Array<ElementContent>} */

    var backReferences = [];

    while (++referenceIndex <= h.footnoteCounts[id]) {
      /** @type {Element} */
      var backReference = {
        type: 'element',
        tagName: 'a',
        properties: {
          href: '#' + h.clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : ''),
          dataFootnoteBackref: true,
          className: ['data-footnote-backref'],
          ariaLabel: h.footnoteBackLabel
        },
        children: [{
          type: 'text',
          value: '↩'
        }]
      };

      if (referenceIndex > 1) {
        backReference.children.push({
          type: 'element',
          tagName: 'sup',
          children: [{
            type: 'text',
            value: String(referenceIndex)
          }]
        });
      }

      if (backReferences.length > 0) {
        backReferences.push({
          type: 'text',
          value: ' '
        });
      }

      backReferences.push(backReference);
    }

    var tail = content[content.length - 1];

    if (tail && tail.type === 'element' && tail.tagName === 'p') {
      var _tail$children;

      var tailTail = tail.children[tail.children.length - 1];

      if (tailTail && tailTail.type === 'text') {
        tailTail.value += ' ';
      } else {
        tail.children.push({
          type: 'text',
          value: ' '
        });
      }

      (_tail$children = tail.children).push.apply(_tail$children, backReferences);
    } else {
      content.push.apply(content, backReferences);
    }
    /** @type {Element} */


    var listItem = {
      type: 'element',
      tagName: 'li',
      properties: {
        id: h.clobberPrefix + 'fn-' + safeId
      },
      children: wrap_wrap(content, true)
    };

    if (def.position) {
      listItem.position = def.position;
    }

    listItems.push(listItem);
  }

  if (listItems.length === 0) {
    return null;
  }

  return {
    type: 'element',
    tagName: 'section',
    properties: {
      dataFootnotes: true,
      className: ['footnotes']
    },
    children: [{
      type: 'element',
      tagName: 'h2',
      properties: {
        id: 'footnote-label',
        className: ['sr-only']
      },
      children: [u('text', h.footnoteLabel)]
    }, {
      type: 'text',
      value: '\n'
    }, {
      type: 'element',
      tagName: 'ol',
      properties: {},
      children: wrap_wrap(listItems, true)
    }, {
      type: 'text',
      value: '\n'
    }]
  };
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js
/**
 * @typedef {import('mdast').Blockquote} Blockquote
 * @typedef {import('../index.js').Handler} Handler
 */


/**
 * @type {Handler}
 * @param {Blockquote} node
 */

function blockquote(h, node) {
  return h(node, 'blockquote', wrap_wrap(traverse_all(h, node), true));
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/break.js
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Text} Text
 * @typedef {import('mdast').Break} Break
 * @typedef {import('../index.js').Handler} Handler
 */

/**
 * @type {Handler}
 * @param {Break} node
 * @returns {Array<Element|Text>}
 */

function hardBreak(h, node) {
  return [h(node, 'br'), u('text', '\n')];
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/code.js
/**
 * @typedef {import('mdast').Code} Code
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('../index.js').Handler} Handler
 */

/**
 * @type {Handler}
 * @param {Code} node
 */

function code_code(h, node) {
  var value = node.value ? node.value + '\n' : ''; // To do: next major, use `node.lang` w/o regex, the splitting’s been going
  // on for years in remark now.

  var lang = node.lang && node.lang.match(/^[^ \t]+(?=[ \t]|$)/);
  /** @type {Properties} */

  var props = {};

  if (lang) {
    props.className = ['language-' + lang];
  }

  var code = h(node, 'code', props, [u('text', value)]);

  if (node.meta) {
    code.data = {
      meta: node.meta
    };
  }

  return h(node.position, 'pre', [code]);
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/delete.js
/**
 * @typedef {import('mdast').Delete} Delete
 * @typedef {import('../index.js').Handler} Handler
 */

/**
 * @type {Handler}
 * @param {Delete} node
 */

function strikethrough(h, node) {
  return h(node, 'del', traverse_all(h, node));
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js
/**
 * @typedef {import('mdast').Emphasis} Emphasis
 * @typedef {import('../index.js').Handler} Handler
 */

/**
 * @type {Handler}
 * @param {Emphasis} node
 */

function emphasis(h, node) {
  return h(node, 'em', traverse_all(h, node));
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js
/**
 * @typedef {import('mdast').FootnoteReference} FootnoteReference
 * @typedef {import('../index.js').Handler} Handler
 */


/**
 * @type {Handler}
 * @param {FootnoteReference} node
 */

function footnoteReference(h, node) {
  var id = String(node.identifier);
  var safeId = sanitizeUri(id.toLowerCase());
  var index = h.footnoteOrder.indexOf(id);
  /** @type {number} */

  var counter;

  if (index === -1) {
    h.footnoteOrder.push(id);
    h.footnoteCounts[id] = 1;
    counter = h.footnoteOrder.length;
  } else {
    h.footnoteCounts[id]++;
    counter = index + 1;
  }

  var reuseCounter = h.footnoteCounts[id];
  return h(node, 'sup', [h(node.position, 'a', {
    href: '#' + h.clobberPrefix + 'fn-' + safeId,
    id: h.clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : ''),
    dataFootnoteRef: true,
    ariaDescribedBy: 'footnote-label'
  }, [u('text', String(counter))])]);
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/footnote.js
/**
 * @typedef {import('mdast').Footnote} Footnote
 * @typedef {import('../index.js').Handler} Handler
 *
 * @todo
 *   `footnote` (or “inline note”) are a pandoc footnotes feature (`^[a note]`)
 *   that does not exist in GFM.
 *   We still have support for it, so that things remain working with
 *   `micromark-extension-footnote` and `mdast-util-footnote`, but in the future
 *   we might be able to remove it?
 */

/**
 * @type {Handler}
 * @param {Footnote} node
 */

function footnote(h, node) {
  var footnoteById = h.footnoteById;
  var no = 1;

  while (no in footnoteById) {
    no++;
  }

  var identifier = String(no);
  footnoteById[identifier] = {
    type: 'footnoteDefinition',
    identifier: identifier,
    children: [{
      type: 'paragraph',
      children: node.children
    }],
    position: node.position
  };
  return footnoteReference(h, {
    type: 'footnoteReference',
    identifier: identifier,
    position: node.position
  });
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/heading.js
/**
 * @typedef {import('mdast').Heading} Heading
 * @typedef {import('../index.js').Handler} Handler
 */

/**
 * @type {Handler}
 * @param {Heading} node
 */

function heading(h, node) {
  return h(node, 'h' + node.depth, traverse_all(h, node));
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/html.js
/**
 * @typedef {import('mdast').HTML} HTML
 * @typedef {import('../index.js').Handler} Handler
 */

/**
 * Return either a `raw` node in dangerous mode, otherwise nothing.
 *
 * @type {Handler}
 * @param {HTML} node
 */

function handlers_html_html(h, node) {
  return h.dangerous ? h.augment(node, u('raw', node.value)) : null;
}
// EXTERNAL MODULE: ./node_modules/mdurl/encode.js
var mdurl_encode = __webpack_require__(4718);
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/revert.js
/**
 * @typedef {import('mdast').LinkReference} LinkReference
 * @typedef {import('mdast').ImageReference} ImageReference
 * @typedef {import('./index.js').Handler} Handler
 * @typedef {import('./index.js').Content} Content
 */


/**
 * Return the content of a reference without definition as plain text.
 *
 * @type {Handler}
 * @param {ImageReference|LinkReference} node
 * @returns {Content|Array<Content>}
 */

function revert(h, node) {
  var subtype = node.referenceType;
  var suffix = ']';

  if (subtype === 'collapsed') {
    suffix += '[]';
  } else if (subtype === 'full') {
    suffix += '[' + (node.label || node.identifier) + ']';
  }

  if (node.type === 'imageReference') {
    return u('text', '![' + node.alt + suffix);
  }

  var contents = traverse_all(h, node);
  var head = contents[0];

  if (head && head.type === 'text') {
    head.value = '[' + head.value;
  } else {
    contents.unshift(u('text', '['));
  }

  var tail = contents[contents.length - 1];

  if (tail && tail.type === 'text') {
    tail.value += suffix;
  } else {
    contents.push(u('text', suffix));
  }

  return contents;
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
/**
 * @typedef {import('mdast').ImageReference} ImageReference
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('../index.js').Handler} Handler
 */


/**
 * @type {Handler}
 * @param {ImageReference} node
 */

function imageReference(h, node) {
  var def = h.definition(node.identifier);

  if (!def) {
    return revert(h, node);
  }
  /** @type {Properties} */


  var props = {
    src: mdurl_encode(def.url || ''),
    alt: node.alt
  };

  if (def.title !== null && def.title !== undefined) {
    props.title = def.title;
  }

  return h(node, 'img', props);
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/image.js
/**
 * @typedef {import('mdast').Image} Image
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('../index.js').Handler} Handler
 */

/**
 * @type {Handler}
 * @param {Image} node
 */

function image_image(h, node) {
  /** @type {Properties} */
  var props = {
    src: mdurl_encode(node.url),
    alt: node.alt
  };

  if (node.title !== null && node.title !== undefined) {
    props.title = node.title;
  }

  return h(node, 'img', props);
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js
/**
 * @typedef {import('mdast').InlineCode} InlineCode
 * @typedef {import('../index.js').Handler} Handler
 */

/**
 * @type {Handler}
 * @param {InlineCode} node
 */

function inline_code_inlineCode(h, node) {
  return h(node, 'code', [u('text', node.value.replace(/\r?\n|\r/g, ' '))]);
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js
/**
 * @typedef {import('mdast').LinkReference} LinkReference
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('../index.js').Handler} Handler
 */



/**
 * @type {Handler}
 * @param {LinkReference} node
 */

function linkReference(h, node) {
  var def = h.definition(node.identifier);

  if (!def) {
    return revert(h, node);
  }
  /** @type {Properties} */


  var props = {
    href: mdurl_encode(def.url || '')
  };

  if (def.title !== null && def.title !== undefined) {
    props.title = def.title;
  }

  return h(node, 'a', props, traverse_all(h, node));
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/link.js
/**
 * @typedef {import('mdast').Link} Link
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('../index.js').Handler} Handler
 */


/**
 * @type {Handler}
 * @param {Link} node
 */

function link_link(h, node) {
  /** @type {Properties} */
  var props = {
    href: mdurl_encode(node.url)
  };

  if (node.title !== null && node.title !== undefined) {
    props.title = node.title;
  }

  return h(node, 'a', props, traverse_all(h, node));
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/list-item.js


/**
 * @typedef {import('mdast').ListItem} ListItem
 * @typedef {import('mdast').List} List
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('hast').Element} Element
 * @typedef {import('../index.js').Handler} Handler
 * @typedef {import('../index.js').Content} Content
 */


/**
 * @type {Handler}
 * @param {ListItem} node
 * @param {List} parent
 */

function list_item_listItem(h, node, parent) {
  var result = traverse_all(h, node);
  var loose = parent ? listLoose(parent) : listItemLoose(node);
  /** @type {Properties} */

  var props = {};
  /** @type {Array<Content>} */

  var wrapped = [];

  if (typeof node.checked === 'boolean') {
    /** @type {Element} */
    var paragraph;

    if (result[0] && result[0].type === 'element' && result[0].tagName === 'p') {
      paragraph = result[0];
    } else {
      paragraph = h(null, 'p', []);
      result.unshift(paragraph);
    }

    if (paragraph.children.length > 0) {
      paragraph.children.unshift(u('text', ' '));
    }

    paragraph.children.unshift(h(null, 'input', {
      type: 'checkbox',
      checked: node.checked,
      disabled: true
    })); // According to github-markdown-css, this class hides bullet.
    // See: <https://github.com/sindresorhus/github-markdown-css>.

    props.className = ['task-list-item'];
  }

  var index = -1;

  while (++index < result.length) {
    var child = result[index]; // Add eols before nodes, except if this is a loose, first paragraph.

    if (loose || index !== 0 || child.type !== 'element' || child.tagName !== 'p') {
      wrapped.push(u('text', '\n'));
    }

    if (child.type === 'element' && child.tagName === 'p' && !loose) {
      wrapped.push.apply(wrapped, _toConsumableArray(child.children));
    } else {
      wrapped.push(child);
    }
  }

  var tail = result[result.length - 1]; // Add a final eol.

  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {
    wrapped.push(u('text', '\n'));
  }

  return h(node, 'li', props, wrapped);
}
/**
 * @param {List} node
 * @return {Boolean}
 */

function listLoose(node) {
  var loose = node.spread;
  var children = node.children;
  var index = -1;

  while (!loose && ++index < children.length) {
    loose = listItemLoose(children[index]);
  }

  return Boolean(loose);
}
/**
 * @param {ListItem} node
 * @return {Boolean}
 */


function listItemLoose(node) {
  var spread = node.spread;
  return spread === undefined || spread === null ? node.children.length > 1 : spread;
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/list.js
/**
 * @typedef {import('mdast').List} List
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('../index.js').Handler} Handler
 */


/**
 * @type {Handler}
 * @param {List} node
 * @returns {Element}
 */

function list(h, node) {
  /** @type {Properties} */
  var props = {};
  var name = node.ordered ? 'ol' : 'ul';
  var items = traverse_all(h, node);
  var index = -1;

  if (typeof node.start === 'number' && node.start !== 1) {
    props.start = node.start;
  } // Like GitHub, add a class for custom styling.


  while (++index < items.length) {
    var item = items[index];

    if (item.type === 'element' && item.tagName === 'li' && item.properties && Array.isArray(item.properties.className) && item.properties.className.includes('task-list-item')) {
      props.className = ['contains-task-list'];
      break;
    }
  }

  return h(node, name, props, wrap_wrap(items, true));
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js
/**
 * @typedef {import('mdast').Paragraph} Paragraph
 * @typedef {import('../index.js').Handler} Handler
 */

/**
 * @type {Handler}
 * @param {Paragraph} node
 */

function paragraph(h, node) {
  return h(node, 'p', traverse_all(h, node));
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/root.js
/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('../index.js').Handler} Handler
 */



/**
 * @type {Handler}
 * @param {Root} node
 */

function root_root(h, node) {
  // @ts-expect-error `root`s are also fine.
  return h.augment(node, u('root', wrap_wrap(traverse_all(h, node))));
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/strong.js
/**
 * @typedef {import('mdast').Strong} Strong
 * @typedef {import('../index.js').Handler} Handler
 */

/**
 * @type {Handler}
 * @param {Strong} node
 */

function strong(h, node) {
  return h(node, 'strong', traverse_all(h, node));
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/table.js
/**
 * @typedef {import('mdast').Table} Table
 * @typedef {import('mdast').TableCell} TableCell
 * @typedef {import('hast').Element} Element
 * @typedef {import('../index.js').Handler} Handler
 * @typedef {import('../index.js').Content} Content
 */



/**
 * @type {Handler}
 * @param {Table} node
 */

function table(h, node) {
  var rows = node.children;
  var index = -1;
  var align = node.align || [];
  /** @type {Array<Element>} */

  var result = [];

  while (++index < rows.length) {
    var row = rows[index].children;
    var name = index === 0 ? 'th' : 'td';
    /** @type {Array<Content>} */

    var out = [];
    var cellIndex = -1;
    var length = node.align ? align.length : row.length;

    while (++cellIndex < length) {
      var cell = row[cellIndex];
      out.push(h(cell, name, {
        align: align[cellIndex]
      }, cell ? traverse_all(h, cell) : []));
    }

    result[index] = h(rows[index], 'tr', wrap_wrap(out, true));
  }

  return h(node, 'table', wrap_wrap([h(result[0].position, 'thead', wrap_wrap([result[0]], true))].concat(result[1] ? h({
    start: pointStart(result[1]),
    end: pointEnd(result[result.length - 1])
  }, 'tbody', wrap_wrap(result.slice(1), true)) : []), true));
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/text.js
/**
 * @typedef {import('mdast').Text} Text
 * @typedef {import('../index.js').Handler} Handler
 */

/**
 * @type {Handler}
 * @param {Text} node
 */

function handlers_text_text(h, node) {
  return h.augment(node, u('text', String(node.value).replace(/[ \t]*(\r?\n|\r)[ \t]*/g, '$1')));
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js
/**
 * @typedef {import('mdast').ThematicBreak} ThematicBreak
 * @typedef {import('hast').Element} Element
 * @typedef {import('../index.js').Handler} Handler
 */

/**
 * @type {Handler}
 * @param {ThematicBreak} [node]
 * @returns {Element}
 */
function thematicBreak(h, node) {
  return h(node, 'hr');
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/handlers/index.js






















var handlers_handlers = {
  blockquote: blockquote,
  "break": hardBreak,
  code: code_code,
  "delete": strikethrough,
  emphasis: emphasis,
  footnoteReference: footnoteReference,
  footnote: footnote,
  heading: heading,
  html: handlers_html_html,
  imageReference: imageReference,
  image: image_image,
  inlineCode: inline_code_inlineCode,
  linkReference: linkReference,
  link: link_link,
  listItem: list_item_listItem,
  list: list,
  paragraph: paragraph,
  root: root_root,
  strong: strong,
  table: table,
  text: handlers_text_text,
  thematicBreak: thematicBreak,
  toml: ignore,
  yaml: ignore,
  definition: ignore,
  footnoteDefinition: ignore
}; // Return nothing for nodes that are ignored.

function ignore() {
  return null;
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-hast/lib/index.js


/**
 * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode
 * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode
 * @typedef {import('mdast').Parent} Parent
 * @typedef {import('mdast').Definition} Definition
 * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('hast').Text} Text
 * @typedef {import('hast').Comment} Comment
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').ElementContent} Content
 * @typedef {import('unist-util-position').PositionLike} PositionLike
 *
 * @typedef EmbeddedHastFields
 * @property {string} [hName] Defines the tag name of an element
 * @property {Properties} [hProperties] Defines the properties of an element
 * @property {Array<Content>} [hChildren] Defines the (hast) children of an element
 *
 * @typedef {Record<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields
 *
 * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data
 *
 * @callback Handler
 * @param {H} h Handle context
 * @param {any} node mdast node to handle
 * @param {Parent|null} parent Parent of `node`
 * @returns {Content|Array<Content>|null|undefined} hast node
 *
 * @callback HFunctionProps
 * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position
 * @param {string} tagName HTML tag name
 * @param {Properties} props Properties
 * @param {Array<Content>?} [children] hast content
 * @returns {Element}
 *
 * @callback HFunctionNoProps
 * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position
 * @param {string} tagName HTML tag name
 * @param {Array<Content>?} [children] hast content
 * @returns {Element}
 *
 * @typedef HFields
 * @property {boolean} dangerous Whether HTML is allowed
 * @property {string} clobberPrefix Prefix to use to prevent DOM clobbering
 * @property {string} footnoteLabel Label to use to introduce the footnote section
 * @property {string} footnoteBackLabel Label to use to go back to a footnote call from the footnote section
 * @property {(identifier: string) => Definition|null} definition Definition cache
 * @property {Record<string, FootnoteDefinition>} footnoteById Footnote cache
 * @property {Array<string>} footnoteOrder Order in which footnotes occur
 * @property {Record<string, number>} footnoteCounts Counts the same footnote was used
 * @property {Handlers} handlers Applied handlers
 * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled
 * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.
 * @property {Array<string>} passThrough List of node types to pass through untouched (except for their children).
 *
 * @typedef Options
 * @property {boolean} [allowDangerousHtml=false]
 *   Whether to allow `html` nodes and inject them as `raw` HTML
 * @property {string} [clobberPrefix='user-content-']
 *   Prefix to use before the `id` attribute to prevent it from *clobbering*.
 *   attributes.
 *   DOM clobbering is this:
 *
 *   ```html
 *   <p id=x></p>
 *   <script>alert(x)</script>
 *   ```
 *
 *   Elements by their ID are made available in browsers on the `window` object.
 *   Using a prefix prevents this from being a problem.
 * @property {string} [footnoteLabel='Footnotes']
 *   Label to use for the footnotes section.
 *   Affects screen reader users.
 *   Change it if you’re authoring in a different language.
 * @property {string} [footnoteBackLabel='Back to content']
 *   Label to use from backreferences back to their footnote call.
 *   Affects screen reader users.
 *   Change it if you’re authoring in a different language.
 * @property {Handlers} [handlers]
 *   Object mapping mdast nodes to functions handling them
 * @property {Array<string>} [passThrough]
 *   List of custom mdast node types to pass through (keep) in hast
 * @property {Handler} [unknownHandler]
 *   Handler for all unknown nodes.
 *
 * @typedef {Record<string, Handler>} Handlers
 *   Map of node types to handlers
 * @typedef {HFunctionProps & HFunctionNoProps & HFields} H
 *   Handle context
 */








var mdast_util_to_hast_lib_own = {}.hasOwnProperty;
/**
 * Factory to transform.
 * @param {MdastNode} tree mdast node
 * @param {Options} [options] Configuration
 * @returns {H} `h` function
 */

function lib_factory(tree, options) {
  var settings = options || {};
  var dangerous = settings.allowDangerousHtml || false;
  /** @type {Record<string, FootnoteDefinition>} */

  var footnoteById = {};
  h.dangerous = dangerous;
  h.clobberPrefix = settings.clobberPrefix === undefined || settings.clobberPrefix === null ? 'user-content-' : settings.clobberPrefix;
  h.footnoteLabel = settings.footnoteLabel || 'Footnotes';
  h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content';
  h.definition = definitions(tree);
  h.footnoteById = footnoteById;
  /** @type {Array<string>} */

  h.footnoteOrder = [];
  /** @type {Record<string, number>} */

  h.footnoteCounts = {};
  h.augment = augment;
  h.handlers = _objectSpread2(_objectSpread2({}, handlers_handlers), settings.handlers);
  h.unknownHandler = settings.unknownHandler;
  h.passThrough = settings.passThrough;
  mdast_util_to_hast_node_modules_unist_util_visit_visit(tree, 'footnoteDefinition', function (definition) {
    var id = String(definition.identifier).toUpperCase(); // Mimick CM behavior of link definitions.
    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.

    if (!mdast_util_to_hast_lib_own.call(footnoteById, id)) {
      footnoteById[id] = definition;
    }
  }); // @ts-expect-error Hush, it’s fine!

  return h;
  /**
   * Finalise the created `right`, a hast node, from `left`, an mdast node.
   * @param {(NodeWithData|PositionLike)?} left
   * @param {Content} right
   * @returns {Content}
   */

  function augment(left, right) {
    // Handle `data.hName`, `data.hProperties, `data.hChildren`.
    if (left && 'data' in left && left.data) {
      /** @type {Data} */
      var data = left.data;

      if (data.hName) {
        if (right.type !== 'element') {
          right = {
            type: 'element',
            tagName: '',
            properties: {},
            children: []
          };
        }

        right.tagName = data.hName;
      }

      if (right.type === 'element' && data.hProperties) {
        right.properties = _objectSpread2(_objectSpread2({}, right.properties), data.hProperties);
      }

      if ('children' in right && right.children && data.hChildren) {
        right.children = data.hChildren;
      }
    }

    if (left) {
      var ctx = 'type' in left ? left : {
        position: left
      };

      if (!generated(ctx)) {
        right.position = {
          start: pointStart(ctx),
          end: pointEnd(ctx)
        };
      }
    }

    return right;
  }
  /**
   * Create an element for `node`.
   *
   * @type {HFunctionProps}
   */


  function h(node, tagName, props, children) {
    if (Array.isArray(props)) {
      children = props;
      props = {};
    } // @ts-expect-error augmenting an element yields an element.


    return augment(node, {
      type: 'element',
      tagName: tagName,
      properties: props || {},
      children: children || []
    });
  }
}
/**
 * Transform `tree` (an mdast node) to a hast node.
 *
 * @param {MdastNode} tree mdast node
 * @param {Options} [options] Configuration
 * @returns {HastNode|null|undefined} hast node
 */


function toHast(tree, options) {
  var h = lib_factory(tree, options);
  var node = traverse_one(h, tree, null);
  var foot = footer(h);

  if (foot) {
    // @ts-expect-error If there’s a footer, there were definitions, meaning block
    // content.
    // So assume `node` is a parent node.
    node.children.push(u('text', '\n'), foot);
  }

  return Array.isArray(node) ? {
    type: 'root',
    children: node
  } : node;
}

;// CONCATENATED MODULE: ./node_modules/remark-rehype/lib/index.js
/**
 * @typedef {import('hast').Root} HastRoot
 * @typedef {import('mdast').Root} MdastRoot
 * @typedef {import('mdast-util-to-hast').Options} Options
 * @typedef {import('unified').Processor<any, any, any, any>} Processor
 *
 * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree
 */
 // Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(

/**
 * Plugin that turns markdown into HTML to support rehype.
 *
 * *   If a destination processor is given, that processor runs with a new HTML
 *     (hast) tree (bridge-mode).
 *     As the given processor runs with a hast tree, and rehype plugins support
 *     hast, that means rehype plugins can be used with the given processor.
 *     The hast tree is discarded in the end.
 *     It’s highly unlikely that you want to do this.
 * *   The common case is to not pass a destination processor, in which case the
 *     current processor continues running with a new HTML (hast) tree
 *     (mutate-mode).
 *     As the current processor continues with a hast tree, and rehype plugins
 *     support hast, that means rehype plugins can be used after
 *     `remark-rehype`.
 *     It’s likely that this is what you want to do.
 *
 * @param destination
 *   Optional unified processor.
 * @param options
 *   Options passed to `mdast-util-to-hast`.
 */

var remarkRehype =
/** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */
function remarkRehype(destination, options) {
  return destination && 'run' in destination ? bridge(destination, options) : mutate(destination || options);
};

/* harmony default export */ const remark_rehype_lib = (remarkRehype);
/**
 * Bridge-mode.
 * Runs the destination with the new hast tree.
 *
 * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}
 */

function bridge(destination, options) {
  return function (node, file, next) {
    destination.run(toHast(node, options), file, function (error) {
      next(error);
    });
  };
}
/**
 * Mutate-mode.
 * Further plugins run on the hast tree.
 *
 * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}
 */


function mutate(options) {
  // @ts-expect-error: assume a corresponding node is returned by `toHast`.
  return function (node) {
    return toHast(node, options);
  };
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-to-string/index.js
/**
 * @typedef Options
 * @property {boolean} [includeImageAlt=true]
 */

/**
 * Get the text content of a node.
 * Prefer the node’s plain-text fields, otherwise serialize its children,
 * and if the given value is an array, serialize the nodes in it.
 *
 * @param {unknown} node
 * @param {Options} [options]
 * @returns {string}
 */
function mdast_util_to_string_toString(node, options) {
  var _ref = options || {},
      _ref$includeImageAlt = _ref.includeImageAlt,
      includeImageAlt = _ref$includeImageAlt === void 0 ? true : _ref$includeImageAlt;

  return mdast_util_to_string_one(node, includeImageAlt);
}
/**
 * @param {unknown} node
 * @param {boolean} includeImageAlt
 * @returns {string}
 */

function mdast_util_to_string_one(node, includeImageAlt) {
  return node && typeof node === 'object' && ( // @ts-ignore looks like a literal.
  node.value || ( // @ts-ignore looks like an image.
  includeImageAlt ? node.alt : '') || // @ts-ignore looks like a parent.
  'children' in node && mdast_util_to_string_all(node.children, includeImageAlt) || Array.isArray(node) && mdast_util_to_string_all(node, includeImageAlt)) || '';
}
/**
 * @param {Array.<unknown>} values
 * @param {boolean} includeImageAlt
 * @returns {string}
 */


function mdast_util_to_string_all(values, includeImageAlt) {
  /** @type {Array.<string>} */
  var result = [];
  var index = -1;

  while (++index < values.length) {
    result[index] = mdast_util_to_string_one(values[index], includeImageAlt);
  }

  return result.join('');
}
;// CONCATENATED MODULE: ./node_modules/micromark/lib/initialize/content.js
/**
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 */


/** @type {InitialConstruct} */

var content_content = {
  tokenize: initializeContent
};
/** @type {Initializer} */

function initializeContent(effects) {
  var contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);
  /** @type {Token} */

  var previous;
  return contentStart;
  /** @type {State} */

  function afterContentStartConstruct(code) {
    if (code === null) {
      effects.consume(code);
      return;
    }

    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');
    return factorySpace(effects, contentStart, 'linePrefix');
  }
  /** @type {State} */


  function paragraphInitial(code) {
    effects.enter('paragraph');
    return lineStart(code);
  }
  /** @type {State} */


  function lineStart(code) {
    var token = effects.enter('chunkText', {
      contentType: 'text',
      previous: previous
    });

    if (previous) {
      previous.next = token;
    }

    previous = token;
    return data(code);
  }
  /** @type {State} */


  function data(code) {
    if (code === null) {
      effects.exit('chunkText');
      effects.exit('paragraph');
      effects.consume(code);
      return;
    }

    if (markdownLineEnding(code)) {
      effects.consume(code);
      effects.exit('chunkText');
      return lineStart;
    } // Data.


    effects.consume(code);
    return data;
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark/lib/initialize/document.js
/**
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Point} Point
 */

/**
 * @typedef {Record<string, unknown>} StackState
 * @typedef {[Construct, StackState]} StackItem
 */



/** @type {InitialConstruct} */

var document_document = {
  tokenize: initializeDocument
};
/** @type {Construct} */

var containerConstruct = {
  tokenize: tokenizeContainer
};
/** @type {Initializer} */

function initializeDocument(effects) {
  var self = this;
  /** @type {StackItem[]} */

  var stack = [];
  var continued = 0;
  /** @type {TokenizeContext|undefined} */

  var childFlow;
  /** @type {Token|undefined} */

  var childToken;
  /** @type {number} */

  var lineStartOffset;
  return start;
  /** @type {State} */

  function start(code) {
    // First we iterate through the open blocks, starting with the root
    // document, and descending through last children down to the last open
    // block.
    // Each block imposes a condition that the line must satisfy if the block is
    // to remain open.
    // For example, a block quote requires a `>` character.
    // A paragraph requires a non-blank line.
    // In this phase we may match all or just some of the open blocks.
    // But we cannot close unmatched blocks yet, because we may have a lazy
    // continuation line.
    if (continued < stack.length) {
      var item = stack[continued];
      self.containerState = item[1];
      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);
    } // Done.


    return checkNewContainers(code);
  }
  /** @type {State} */


  function documentContinue(code) {
    continued++; // Note: this field is called `_closeFlow` but it also closes containers.
    // Perhaps a good idea to rename it but it’s already used in the wild by
    // extensions.

    if (self.containerState._closeFlow) {
      self.containerState._closeFlow = undefined;

      if (childFlow) {
        closeFlow();
      } // Note: this algorithm for moving events around is similar to the
      // algorithm when dealing with lazy lines in `writeToChild`.


      var indexBeforeExits = self.events.length;
      var indexBeforeFlow = indexBeforeExits;
      /** @type {Point|undefined} */

      var point; // Find the flow chunk.

      while (indexBeforeFlow--) {
        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {
          point = self.events[indexBeforeFlow][1].end;
          break;
        }
      }

      exitContainers(continued); // Fix positions.

      var index = indexBeforeExits;

      while (index < self.events.length) {
        self.events[index][1].end = Object.assign({}, point);
        index++;
      } // Inject the exits earlier (they’re still also at the end).


      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits)); // Discard the duplicate exits.

      self.events.length = index;
      return checkNewContainers(code);
    }

    return start(code);
  }
  /** @type {State} */


  function checkNewContainers(code) {
    // Next, after consuming the continuation markers for existing blocks, we
    // look for new block starts (e.g. `>` for a block quote).
    // If we encounter a new block start, we close any blocks unmatched in
    // step 1 before creating the new block as a child of the last matched
    // block.
    if (continued === stack.length) {
      // No need to `check` whether there’s a container, of `exitContainers`
      // would be moot.
      // We can instead immediately `attempt` to parse one.
      if (!childFlow) {
        return documentContinued(code);
      } // If we have concrete content, such as block HTML or fenced code,
      // we can’t have containers “pierce” into them, so we can immediately
      // start.


      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
        return flowStart(code);
      } // If we do have flow, it could still be a blank line,
      // but we’d be interrupting it w/ a new container if there’s a current
      // construct.


      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);
    } // Check if there is a new container.


    self.containerState = {};
    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);
  }
  /** @type {State} */


  function thereIsANewContainer(code) {
    if (childFlow) closeFlow();
    exitContainers(continued);
    return documentContinued(code);
  }
  /** @type {State} */


  function thereIsNoNewContainer(code) {
    self.parser.lazy[self.now().line] = continued !== stack.length;
    lineStartOffset = self.now().offset;
    return flowStart(code);
  }
  /** @type {State} */


  function documentContinued(code) {
    // Try new containers.
    self.containerState = {};
    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);
  }
  /** @type {State} */


  function containerContinue(code) {
    continued++;
    stack.push([self.currentConstruct, self.containerState]); // Try another.

    return documentContinued(code);
  }
  /** @type {State} */


  function flowStart(code) {
    if (code === null) {
      if (childFlow) closeFlow();
      exitContainers(0);
      effects.consume(code);
      return;
    }

    childFlow = childFlow || self.parser.flow(self.now());
    effects.enter('chunkFlow', {
      contentType: 'flow',
      previous: childToken,
      _tokenizer: childFlow
    });
    return flowContinue(code);
  }
  /** @type {State} */


  function flowContinue(code) {
    if (code === null) {
      writeToChild(effects.exit('chunkFlow'), true);
      exitContainers(0);
      effects.consume(code);
      return;
    }

    if (markdownLineEnding(code)) {
      effects.consume(code);
      writeToChild(effects.exit('chunkFlow')); // Get ready for the next line.

      continued = 0;
      self.interrupt = undefined;
      return start;
    }

    effects.consume(code);
    return flowContinue;
  }
  /**
   * @param {Token} token
   * @param {boolean} [eof]
   * @returns {void}
   */


  function writeToChild(token, eof) {
    var stream = self.sliceStream(token);
    if (eof) stream.push(null);
    token.previous = childToken;
    if (childToken) childToken.next = token;
    childToken = token;
    childFlow.defineSkip(token.start);
    childFlow.write(stream); // Alright, so we just added a lazy line:
    //
    // ```markdown
    // > a
    // b.
    //
    // Or:
    //
    // > ~~~c
    // d
    //
    // Or:
    //
    // > | e |
    // f
    // ```
    //
    // The construct in the second example (fenced code) does not accept lazy
    // lines, so it marked itself as done at the end of its first line, and
    // then the content construct parses `d`.
    // Most constructs in markdown match on the first line: if the first line
    // forms a construct, a non-lazy line can’t “unmake” it.
    //
    // The construct in the third example is potentially a GFM table, and
    // those are *weird*.
    // It *could* be a table, from the first line, if the following line
    // matches a condition.
    // In this case, that second line is lazy, which “unmakes” the first line
    // and turns the whole into one content block.
    //
    // We’ve now parsed the non-lazy and the lazy line, and can figure out
    // whether the lazy line started a new flow block.
    // If it did, we exit the current containers between the two flow blocks.

    if (self.parser.lazy[token.start.line]) {
      var index = childFlow.events.length;

      while (index--) {
        if ( // The token starts before the line ending…
        childFlow.events[index][1].start.offset < lineStartOffset && ( // …and either is not ended yet…
        !childFlow.events[index][1].end || // …or ends after it.
        childFlow.events[index][1].end.offset > lineStartOffset)) {
          // Exit: there’s still something open, which means it’s a lazy line
          // part of something.
          return;
        }
      } // Note: this algorithm for moving events around is similar to the
      // algorithm when closing flow in `documentContinue`.


      var indexBeforeExits = self.events.length;
      var indexBeforeFlow = indexBeforeExits;
      /** @type {boolean|undefined} */

      var seen;
      /** @type {Point|undefined} */

      var point; // Find the previous chunk (the one before the lazy line).

      while (indexBeforeFlow--) {
        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {
          if (seen) {
            point = self.events[indexBeforeFlow][1].end;
            break;
          }

          seen = true;
        }
      }

      exitContainers(continued); // Fix positions.

      index = indexBeforeExits;

      while (index < self.events.length) {
        self.events[index][1].end = Object.assign({}, point);
        index++;
      } // Inject the exits earlier (they’re still also at the end).


      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits)); // Discard the duplicate exits.

      self.events.length = index;
    }
  }
  /**
   * @param {number} size
   * @returns {void}
   */


  function exitContainers(size) {
    var index = stack.length; // Exit open containers.

    while (index-- > size) {
      var entry = stack[index];
      self.containerState = entry[1];
      entry[0].exit.call(self, effects);
    }

    stack.length = size;
  }

  function closeFlow() {
    childFlow.write([null]);
    childToken = undefined;
    childFlow = undefined;
    self.containerState._closeFlow = undefined;
  }
}
/** @type {Tokenizer} */


function tokenizeContainer(effects, ok, nok) {
  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), 'linePrefix', this.parser.constructs.disable["null"].includes('codeIndented') ? undefined : 4);
}
;// CONCATENATED MODULE: ./node_modules/micromark-util-subtokenize/index.js
/**
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Event} Event
 */

/**
 * Tokenize subcontent.
 *
 * @param {Event[]} events
 * @returns {boolean}
 */

function subtokenize(events) {
  /** @type {Record<string, number>} */
  var jumps = {};
  var index = -1;
  /** @type {Event} */

  var event;
  /** @type {number|undefined} */

  var lineIndex;
  /** @type {number} */

  var otherIndex;
  /** @type {Event} */

  var otherEvent;
  /** @type {Event[]} */

  var parameters;
  /** @type {Event[]} */

  var subevents;
  /** @type {boolean|undefined} */

  var more;

  while (++index < events.length) {
    while (index in jumps) {
      index = jumps[index];
    }

    event = events[index]; // Add a hook for the GFM tasklist extension, which needs to know if text
    // is in the first content of a list item.

    if (index && event[1].type === 'chunkFlow' && events[index - 1][1].type === 'listItemPrefix') {
      subevents = event[1]._tokenizer.events;
      otherIndex = 0;

      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'lineEndingBlank') {
        otherIndex += 2;
      }

      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'content') {
        while (++otherIndex < subevents.length) {
          if (subevents[otherIndex][1].type === 'content') {
            break;
          }

          if (subevents[otherIndex][1].type === 'chunkText') {
            subevents[otherIndex][1]._isInFirstContentOfListItem = true;
            otherIndex++;
          }
        }
      }
    } // Enter.


    if (event[0] === 'enter') {
      if (event[1].contentType) {
        Object.assign(jumps, subcontent(events, index));
        index = jumps[index];
        more = true;
      }
    } // Exit.
    else if (event[1]._container) {
      otherIndex = index;
      lineIndex = undefined;

      while (otherIndex--) {
        otherEvent = events[otherIndex];

        if (otherEvent[1].type === 'lineEnding' || otherEvent[1].type === 'lineEndingBlank') {
          if (otherEvent[0] === 'enter') {
            if (lineIndex) {
              events[lineIndex][1].type = 'lineEndingBlank';
            }

            otherEvent[1].type = 'lineEnding';
            lineIndex = otherIndex;
          }
        } else {
          break;
        }
      }

      if (lineIndex) {
        // Fix position.
        event[1].end = Object.assign({}, events[lineIndex][1].start); // Switch container exit w/ line endings.

        parameters = events.slice(lineIndex, index);
        parameters.unshift(event);
        splice(events, lineIndex, index - lineIndex + 1, parameters);
      }
    }
  }

  return !more;
}
/**
 * Tokenize embedded tokens.
 *
 * @param {Event[]} events
 * @param {number} eventIndex
 * @returns {Record<string, number>}
 */

function subcontent(events, eventIndex) {
  var token = events[eventIndex][1];
  var context = events[eventIndex][2];
  var startPosition = eventIndex - 1;
  /** @type {number[]} */

  var startPositions = [];
  var tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
  var childEvents = tokenizer.events;
  /** @type {[number, number][]} */

  var jumps = [];
  /** @type {Record<string, number>} */

  var gaps = {};
  /** @type {Chunk[]} */

  var stream;
  /** @type {Token|undefined} */

  var previous;
  var index = -1;
  /** @type {Token|undefined} */

  var current = token;
  var adjust = 0;
  var start = 0;
  var breaks = [start]; // Loop forward through the linked tokens to pass them in order to the
  // subtokenizer.

  while (current) {
    // Find the position of the event for this token.
    while (events[++startPosition][1] !== current) {// Empty.
    }

    startPositions.push(startPosition);

    if (!current._tokenizer) {
      stream = context.sliceStream(current);

      if (!current.next) {
        stream.push(null);
      }

      if (previous) {
        tokenizer.defineSkip(current.start);
      }

      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = true;
      }

      tokenizer.write(stream);

      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = undefined;
      }
    } // Unravel the next token.


    previous = current;
    current = current.next;
  } // Now, loop back through all events (and linked tokens), to figure out which
  // parts belong where.


  current = token;

  while (++index < childEvents.length) {
    if ( // Find a void token that includes a break.
    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {
      start = index + 1;
      breaks.push(start); // Help GC.

      current._tokenizer = undefined;
      current.previous = undefined;
      current = current.next;
    }
  } // Help GC.


  tokenizer.events = []; // If there’s one more token (which is the cases for lines that end in an
  // EOF), that’s perfect: the last point we found starts it.
  // If there isn’t then make sure any remaining content is added to it.

  if (current) {
    // Help GC.
    current._tokenizer = undefined;
    current.previous = undefined;
  } else {
    breaks.pop();
  } // Now splice the events from the subtokenizer into the current events,
  // moving back to front so that splice indices aren’t affected.


  index = breaks.length;

  while (index--) {
    var slice = childEvents.slice(breaks[index], breaks[index + 1]);

    var _start = startPositions.pop();

    jumps.unshift([_start, _start + slice.length - 1]);
    splice(events, _start, 2, slice);
  }

  index = -1;

  while (++index < jumps.length) {
    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
    adjust += jumps[index][1] - jumps[index][0] - 1;
  }

  return gaps;
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/content.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 */



/**
 * No name because it must not be turned off.
 * @type {Construct}
 */

var lib_content_content = {
  tokenize: tokenizeContent,
  resolve: resolveContent
};
/** @type {Construct} */

var continuationConstruct = {
  tokenize: tokenizeContinuation,
  partial: true
};
/**
 * Content is transparent: it’s parsed right now. That way, definitions are also
 * parsed right now: before text in paragraphs (specifically, media) are parsed.
 *
 * @type {Resolver}
 */

function resolveContent(events) {
  subtokenize(events);
  return events;
}
/** @type {Tokenizer} */


function tokenizeContent(effects, ok) {
  /** @type {Token} */
  var previous;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('content');
    previous = effects.enter('chunkContent', {
      contentType: 'content'
    });
    return data(code);
  }
  /** @type {State} */


  function data(code) {
    if (code === null) {
      return contentEnd(code);
    }

    if (markdownLineEnding(code)) {
      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);
    } // Data.


    effects.consume(code);
    return data;
  }
  /** @type {State} */


  function contentEnd(code) {
    effects.exit('chunkContent');
    effects.exit('content');
    return ok(code);
  }
  /** @type {State} */


  function contentContinue(code) {
    effects.consume(code);
    effects.exit('chunkContent');
    previous.next = effects.enter('chunkContent', {
      contentType: 'content',
      previous: previous
    });
    previous = previous.next;
    return data;
  }
}
/** @type {Tokenizer} */


function tokenizeContinuation(effects, ok, nok) {
  var self = this;
  return startLookahead;
  /** @type {State} */

  function startLookahead(code) {
    effects.exit('chunkContent');
    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');
    return factorySpace(effects, prefixed, 'linePrefix');
  }
  /** @type {State} */


  function prefixed(code) {
    if (code === null || markdownLineEnding(code)) {
      return nok(code);
    }

    var tail = self.events[self.events.length - 1];

    if (!self.parser.constructs.disable["null"].includes('codeIndented') && tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4) {
      return ok(code);
    }

    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark/lib/initialize/flow.js
/**
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').State} State
 */



/** @type {InitialConstruct} */

var flow = {
  tokenize: initializeFlow
};
/** @type {Initializer} */

function initializeFlow(effects) {
  var self = this;
  var initial = effects.attempt( // Try to parse a blank line.
  blankLine, atBlankEnding, // Try to parse initial flow (essentially, only code).
  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(lib_content_content, afterConstruct)), 'linePrefix')));
  return initial;
  /** @type {State} */

  function atBlankEnding(code) {
    if (code === null) {
      effects.consume(code);
      return;
    }

    effects.enter('lineEndingBlank');
    effects.consume(code);
    effects.exit('lineEndingBlank');
    self.currentConstruct = undefined;
    return initial;
  }
  /** @type {State} */


  function afterConstruct(code) {
    if (code === null) {
      effects.consume(code);
      return;
    }

    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');
    self.currentConstruct = undefined;
    return initial;
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark/lib/initialize/text.js
/**
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */
var resolver = {
  resolveAll: createResolver()
};
var string = initializeFactory('string');
var initialize_text_text = initializeFactory('text');
/**
 * @param {'string'|'text'} field
 * @returns {InitialConstruct}
 */

function initializeFactory(field) {
  return {
    tokenize: initializeText,
    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined)
  };
  /** @type {Initializer} */

  function initializeText(effects) {
    var self = this;
    var constructs = this.parser.constructs[field];
    var text = effects.attempt(constructs, start, notText);
    return start;
    /** @type {State} */

    function start(code) {
      return atBreak(code) ? text(code) : notText(code);
    }
    /** @type {State} */


    function notText(code) {
      if (code === null) {
        effects.consume(code);
        return;
      }

      effects.enter('data');
      effects.consume(code);
      return data;
    }
    /** @type {State} */


    function data(code) {
      if (atBreak(code)) {
        effects.exit('data');
        return text(code);
      } // Data.


      effects.consume(code);
      return data;
    }
    /**
     * @param {Code} code
     * @returns {boolean}
     */


    function atBreak(code) {
      if (code === null) {
        return true;
      }

      var list = constructs[code];
      var index = -1;

      if (list) {
        while (++index < list.length) {
          var item = list[index];

          if (!item.previous || item.previous.call(self, self.previous)) {
            return true;
          }
        }
      }

      return false;
    }
  }
}
/**
 * @param {Resolver} [extraResolver]
 * @returns {Resolver}
 */


function createResolver(extraResolver) {
  return resolveAllText;
  /** @type {Resolver} */

  function resolveAllText(events, context) {
    var index = -1;
    /** @type {number|undefined} */

    var enter; // A rather boring computation (to merge adjacent `data` events) which
    // improves mm performance by 29%.

    while (++index <= events.length) {
      if (enter === undefined) {
        if (events[index] && events[index][1].type === 'data') {
          enter = index;
          index++;
        }
      } else if (!events[index] || events[index][1].type !== 'data') {
        // Don’t do anything if there is one data token.
        if (index !== enter + 2) {
          events[enter][1].end = events[index - 1][1].end;
          events.splice(enter + 2, index - enter - 2);
          index = enter + 2;
        }

        enter = undefined;
      }
    }

    return extraResolver ? extraResolver(events, context) : events;
  }
}
/**
 * A rather ugly set of instructions which again looks at chunks in the input
 * stream.
 * The reason to do this here is that it is *much* faster to parse in reverse.
 * And that we can’t hook into `null` to split the line suffix before an EOF.
 * To do: figure out if we can make this into a clean utility, or even in core.
 * As it will be useful for GFMs literal autolink extension (and maybe even
 * tables?)
 *
 * @type {Resolver}
 */


function resolveAllLineSuffixes(events, context) {
  var eventIndex = 0; // Skip first.

  while (++eventIndex <= events.length) {
    if ((eventIndex === events.length || events[eventIndex][1].type === 'lineEnding') && events[eventIndex - 1][1].type === 'data') {
      var data = events[eventIndex - 1][1];
      var chunks = context.sliceStream(data);
      var index = chunks.length;
      var bufferIndex = -1;
      var size = 0;
      /** @type {boolean|undefined} */

      var tabs = void 0;

      while (index--) {
        var chunk = chunks[index];

        if (typeof chunk === 'string') {
          bufferIndex = chunk.length;

          while (chunk.charCodeAt(bufferIndex - 1) === 32) {
            size++;
            bufferIndex--;
          }

          if (bufferIndex) break;
          bufferIndex = -1;
        } // Number
        else if (chunk === -2) {
          tabs = true;
          size++;
        } else if (chunk === -1) {// Empty
        } else {
          // Replacement character, exit.
          index++;
          break;
        }
      }

      if (size) {
        var token = {
          type: eventIndex === events.length || tabs || size < 2 ? 'lineSuffix' : 'hardBreakTrailing',
          start: {
            line: data.end.line,
            column: data.end.column - size,
            offset: data.end.offset - size,
            _index: data.start._index + index,
            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex
          },
          end: Object.assign({}, data.end)
        };
        data.end = Object.assign({}, token.start);

        if (data.start.offset === data.end.offset) {
          Object.assign(data, token);
        } else {
          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);
          eventIndex += 2;
        }
      }

      eventIndex++;
    }
  }

  return events;
}
;// CONCATENATED MODULE: ./node_modules/micromark/lib/create-tokenizer.js


/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Point} Point
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').ParseContext} ParseContext
 */

/**
 * @typedef Info
 * @property {() => void} restore
 * @property {number} from
 *
 * @callback ReturnHandle
 *   Handle a successful run.
 * @param {Construct} construct
 * @param {Info} info
 * @returns {void}
 */



/**
 * Create a tokenizer.
 * Tokenizers deal with one type of data (e.g., containers, flow, text).
 * The parser is the object dealing with it all.
 * `initialize` works like other constructs, except that only its `tokenize`
 * function is used, in which case it doesn’t receive an `ok` or `nok`.
 * `from` can be given to set the point before the first character, although
 * when further lines are indented, they must be set with `defineSkip`.
 *
 * @param {ParseContext} parser
 * @param {InitialConstruct} initialize
 * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]
 * @returns {TokenizeContext}
 */

function createTokenizer(parser, initialize, from) {
  /** @type {Point} */
  var point = Object.assign(from ? Object.assign({}, from) : {
    line: 1,
    column: 1,
    offset: 0
  }, {
    _index: 0,
    _bufferIndex: -1
  });
  /** @type {Record<string, number>} */

  var columnStart = {};
  /** @type {Construct[]} */

  var resolveAllConstructs = [];
  /** @type {Chunk[]} */

  var chunks = [];
  /** @type {Token[]} */

  var stack = [];
  /** @type {boolean|undefined} */

  var consumed = true;
  /**
   * Tools used for tokenizing.
   *
   * @type {Effects}
   */

  var effects = {
    consume: consume,
    enter: enter,
    exit: exit,
    attempt: constructFactory(onsuccessfulconstruct),
    check: constructFactory(onsuccessfulcheck),
    interrupt: constructFactory(onsuccessfulcheck, {
      interrupt: true
    })
  };
  /**
   * State and tools for resolving and serializing.
   *
   * @type {TokenizeContext}
   */

  var context = {
    previous: null,
    code: null,
    containerState: {},
    events: [],
    parser: parser,
    sliceStream: sliceStream,
    sliceSerialize: sliceSerialize,
    now: now,
    defineSkip: defineSkip,
    write: write
  };
  /**
   * The state function.
   *
   * @type {State|void}
   */

  var state = initialize.tokenize.call(context, effects);
  /**
   * Track which character we expect to be consumed, to catch bugs.
   *
   * @type {Code}
   */

  var expectedCode;

  if (initialize.resolveAll) {
    resolveAllConstructs.push(initialize);
  }

  return context;
  /** @type {TokenizeContext['write']} */

  function write(slice) {
    chunks = push(chunks, slice);
    main(); // Exit if we’re not done, resolve might change stuff.

    if (chunks[chunks.length - 1] !== null) {
      return [];
    }

    addResult(initialize, 0); // Otherwise, resolve, and exit.

    context.events = resolveAll(resolveAllConstructs, context.events, context);
    return context.events;
  } //
  // Tools.
  //

  /** @type {TokenizeContext['sliceSerialize']} */


  function sliceSerialize(token, expandTabs) {
    return serializeChunks(sliceStream(token), expandTabs);
  }
  /** @type {TokenizeContext['sliceStream']} */


  function sliceStream(token) {
    return sliceChunks(chunks, token);
  }
  /** @type {TokenizeContext['now']} */


  function now() {
    return Object.assign({}, point);
  }
  /** @type {TokenizeContext['defineSkip']} */


  function defineSkip(value) {
    columnStart[value.line] = value.column;
    accountForPotentialSkip();
  } //
  // State management.
  //

  /**
   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
   * `consume`).
   * Here is where we walk through the chunks, which either include strings of
   * several characters, or numerical character codes.
   * The reason to do this in a loop instead of a call is so the stack can
   * drain.
   *
   * @returns {void}
   */


  function main() {
    /** @type {number} */
    var chunkIndex;

    while (point._index < chunks.length) {
      var chunk = chunks[point._index]; // If we’re in a buffer chunk, loop through it.

      if (typeof chunk === 'string') {
        chunkIndex = point._index;

        if (point._bufferIndex < 0) {
          point._bufferIndex = 0;
        }

        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {
          go(chunk.charCodeAt(point._bufferIndex));
        }
      } else {
        go(chunk);
      }
    }
  }
  /**
   * Deal with one code.
   *
   * @param {Code} code
   * @returns {void}
   */


  function go(code) {
    consumed = undefined;
    expectedCode = code;
    state = state(code);
  }
  /** @type {Effects['consume']} */


  function consume(code) {
    if (markdownLineEnding(code)) {
      point.line++;
      point.column = 1;
      point.offset += code === -3 ? 2 : 1;
      accountForPotentialSkip();
    } else if (code !== -1) {
      point.column++;
      point.offset++;
    } // Not in a string chunk.


    if (point._bufferIndex < 0) {
      point._index++;
    } else {
      point._bufferIndex++; // At end of string chunk.
      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference
      // strings.

      if (point._bufferIndex === chunks[point._index].length) {
        point._bufferIndex = -1;
        point._index++;
      }
    } // Expose the previous character.


    context.previous = code; // Mark as consumed.

    consumed = true;
  }
  /** @type {Effects['enter']} */


  function enter(type, fields) {
    /** @type {Token} */
    // @ts-expect-error Patch instead of assign required fields to help GC.
    var token = fields || {};
    token.type = type;
    token.start = now();
    context.events.push(['enter', token, context]);
    stack.push(token);
    return token;
  }
  /** @type {Effects['exit']} */


  function exit(type) {
    var token = stack.pop();
    token.end = now();
    context.events.push(['exit', token, context]);
    return token;
  }
  /**
   * Use results.
   *
   * @type {ReturnHandle}
   */


  function onsuccessfulconstruct(construct, info) {
    addResult(construct, info.from);
  }
  /**
   * Discard results.
   *
   * @type {ReturnHandle}
   */


  function onsuccessfulcheck(_, info) {
    info.restore();
  }
  /**
   * Factory to attempt/check/interrupt.
   *
   * @param {ReturnHandle} onreturn
   * @param {Record<string, unknown>} [fields]
   */


  function constructFactory(onreturn, fields) {
    return hook;
    /**
     * Handle either an object mapping codes to constructs, a list of
     * constructs, or a single construct.
     *
     * @param {Construct|Construct[]|ConstructRecord} constructs
     * @param {State} returnState
     * @param {State} [bogusState]
     * @returns {State}
     */

    function hook(constructs, returnState, bogusState) {
      /** @type {Construct[]} */
      var listOfConstructs;
      /** @type {number} */

      var constructIndex;
      /** @type {Construct} */

      var currentConstruct;
      /** @type {Info} */

      var info;
      return Array.isArray(constructs) ?
      /* c8 ignore next 1 */
      handleListOfConstructs(constructs) : 'tokenize' in constructs // @ts-expect-error Looks like a construct.
      ? handleListOfConstructs([constructs]) : handleMapOfConstructs(constructs);
      /**
       * Handle a list of construct.
       *
       * @param {ConstructRecord} map
       * @returns {State}
       */

      function handleMapOfConstructs(map) {
        return start;
        /** @type {State} */

        function start(code) {
          var def = code !== null && map[code];
          var all = code !== null && map["null"];
          var list = [].concat(_toConsumableArray(Array.isArray(def) ? def : def ? [def] : []), _toConsumableArray(Array.isArray(all) ? all : all ? [all] : []));
          return handleListOfConstructs(list)(code);
        }
      }
      /**
       * Handle a list of construct.
       *
       * @param {Construct[]} list
       * @returns {State}
       */


      function handleListOfConstructs(list) {
        listOfConstructs = list;
        constructIndex = 0;

        if (list.length === 0) {
          return bogusState;
        }

        return handleConstruct(list[constructIndex]);
      }
      /**
       * Handle a single construct.
       *
       * @param {Construct} construct
       * @returns {State}
       */


      function handleConstruct(construct) {
        return start;
        /** @type {State} */

        function start(code) {
          // To do: not needed to store if there is no bogus state, probably?
          // Currently doesn’t work because `inspect` in document does a check
          // w/o a bogus, which doesn’t make sense. But it does seem to help perf
          // by not storing.
          info = store();
          currentConstruct = construct;

          if (!construct.partial) {
            context.currentConstruct = construct;
          }

          if (construct.name && context.parser.constructs.disable["null"].includes(construct.name)) {
            return nok(code);
          }

          return construct.tokenize.call( // If we do have fields, create an object w/ `context` as its
          // prototype.
          // This allows a “live binding”, which is needed for `interrupt`.
          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);
        }
      }
      /** @type {State} */


      function ok(code) {
        consumed = true;
        onreturn(currentConstruct, info);
        return returnState;
      }
      /** @type {State} */


      function nok(code) {
        consumed = true;
        info.restore();

        if (++constructIndex < listOfConstructs.length) {
          return handleConstruct(listOfConstructs[constructIndex]);
        }

        return bogusState;
      }
    }
  }
  /**
   * @param {Construct} construct
   * @param {number} from
   * @returns {void}
   */


  function addResult(construct, from) {
    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
      resolveAllConstructs.push(construct);
    }

    if (construct.resolve) {
      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));
    }

    if (construct.resolveTo) {
      context.events = construct.resolveTo(context.events, context);
    }
  }
  /**
   * Store state.
   *
   * @returns {Info}
   */


  function store() {
    var startPoint = now();
    var startPrevious = context.previous;
    var startCurrentConstruct = context.currentConstruct;
    var startEventsIndex = context.events.length;
    var startStack = Array.from(stack);
    return {
      restore: restore,
      from: startEventsIndex
    };
    /**
     * Restore state.
     *
     * @returns {void}
     */

    function restore() {
      point = startPoint;
      context.previous = startPrevious;
      context.currentConstruct = startCurrentConstruct;
      context.events.length = startEventsIndex;
      stack = startStack;
      accountForPotentialSkip();
    }
  }
  /**
   * Move the current point a bit forward in the line when it’s on a column
   * skip.
   *
   * @returns {void}
   */


  function accountForPotentialSkip() {
    if (point.line in columnStart && point.column < 2) {
      point.column = columnStart[point.line];
      point.offset += columnStart[point.line] - 1;
    }
  }
}
/**
 * Get the chunks from a slice of chunks in the range of a token.
 *
 * @param {Chunk[]} chunks
 * @param {Pick<Token, 'start'|'end'>} token
 * @returns {Chunk[]}
 */

function sliceChunks(chunks, token) {
  var startIndex = token.start._index;
  var startBufferIndex = token.start._bufferIndex;
  var endIndex = token.end._index;
  var endBufferIndex = token.end._bufferIndex;
  /** @type {Chunk[]} */

  var view;

  if (startIndex === endIndex) {
    // @ts-expect-error `_bufferIndex` is used on string chunks.
    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
  } else {
    view = chunks.slice(startIndex, endIndex);

    if (startBufferIndex > -1) {
      // @ts-expect-error `_bufferIndex` is used on string chunks.
      view[0] = view[0].slice(startBufferIndex);
    }

    if (endBufferIndex > 0) {
      // @ts-expect-error `_bufferIndex` is used on string chunks.
      view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
  }

  return view;
}
/**
 * Get the string value of a slice of chunks.
 *
 * @param {Chunk[]} chunks
 * @param {boolean} [expandTabs=false]
 * @returns {string}
 */


function serializeChunks(chunks, expandTabs) {
  var index = -1;
  /** @type {string[]} */

  var result = [];
  /** @type {boolean|undefined} */

  var atTab;

  while (++index < chunks.length) {
    var chunk = chunks[index];
    /** @type {string} */

    var value = void 0;

    if (typeof chunk === 'string') {
      value = chunk;
    } else switch (chunk) {
      case -5:
        {
          value = '\r';
          break;
        }

      case -4:
        {
          value = '\n';
          break;
        }

      case -3:
        {
          value = '\r' + '\n';
          break;
        }

      case -2:
        {
          value = expandTabs ? ' ' : '\t';
          break;
        }

      case -1:
        {
          if (!expandTabs && atTab) continue;
          value = ' ';
          break;
        }

      default:
        {
          // Currently only replacement character.
          value = String.fromCharCode(chunk);
        }
    }

    atTab = chunk === -2;
    result.push(value);
  }

  return result.join('');
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/thematic-break.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */


/** @type {Construct} */

var thematic_break_thematicBreak = {
  name: 'thematicBreak',
  tokenize: tokenizeThematicBreak
};
/** @type {Tokenizer} */

function tokenizeThematicBreak(effects, ok, nok) {
  var size = 0;
  /** @type {NonNullable<Code>} */

  var marker;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('thematicBreak');
    marker = code;
    return atBreak(code);
  }
  /** @type {State} */


  function atBreak(code) {
    if (code === marker) {
      effects.enter('thematicBreakSequence');
      return sequence(code);
    }

    if (markdownSpace(code)) {
      return factorySpace(effects, atBreak, 'whitespace')(code);
    }

    if (size < 3 || code !== null && !markdownLineEnding(code)) {
      return nok(code);
    }

    effects.exit('thematicBreak');
    return ok(code);
  }
  /** @type {State} */


  function sequence(code) {
    if (code === marker) {
      effects.consume(code);
      size++;
      return sequence;
    }

    effects.exit('thematicBreakSequence');
    return atBreak(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/list.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Exiter} Exiter
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */

/**
 * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState
 * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState
 */




/** @type {Construct} */

var list_list = {
  name: 'list',
  tokenize: tokenizeListStart,
  continuation: {
    tokenize: tokenizeListContinuation
  },
  exit: tokenizeListEnd
};
/** @type {Construct} */

var listItemPrefixWhitespaceConstruct = {
  tokenize: tokenizeListItemPrefixWhitespace,
  partial: true
};
/** @type {Construct} */

var indentConstruct = {
  tokenize: list_tokenizeIndent,
  partial: true
};
/**
 * @type {Tokenizer}
 * @this {TokenizeContextWithState}
 */

function tokenizeListStart(effects, ok, nok) {
  var self = this;
  var tail = self.events[self.events.length - 1];
  var initialSize = tail && tail[1].type === 'linePrefix' ? tail[2].sliceSerialize(tail[1], true).length : 0;
  var size = 0;
  return start;
  /** @type {State} */

  function start(code) {
    var kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? 'listUnordered' : 'listOrdered');

    if (kind === 'listUnordered' ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {
      if (!self.containerState.type) {
        self.containerState.type = kind;
        effects.enter(kind, {
          _container: true
        });
      }

      if (kind === 'listUnordered') {
        effects.enter('listItemPrefix');
        return code === 42 || code === 45 ? effects.check(thematic_break_thematicBreak, nok, atMarker)(code) : atMarker(code);
      }

      if (!self.interrupt || code === 49) {
        effects.enter('listItemPrefix');
        effects.enter('listItemValue');
        return inside(code);
      }
    }

    return nok(code);
  }
  /** @type {State} */


  function inside(code) {
    if (asciiDigit(code) && ++size < 10) {
      effects.consume(code);
      return inside;
    }

    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {
      effects.exit('listItemValue');
      return atMarker(code);
    }

    return nok(code);
  }
  /**
   * @type {State}
   **/


  function atMarker(code) {
    effects.enter('listItemMarker');
    effects.consume(code);
    effects.exit('listItemMarker');
    self.containerState.marker = self.containerState.marker || code;
    return effects.check(blankLine, // Can’t be empty when interrupting.
    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));
  }
  /** @type {State} */


  function onBlank(code) {
    self.containerState.initialBlankLine = true;
    initialSize++;
    return endOfPrefix(code);
  }
  /** @type {State} */


  function otherPrefix(code) {
    if (markdownSpace(code)) {
      effects.enter('listItemPrefixWhitespace');
      effects.consume(code);
      effects.exit('listItemPrefixWhitespace');
      return endOfPrefix;
    }

    return nok(code);
  }
  /** @type {State} */


  function endOfPrefix(code) {
    self.containerState.size = initialSize + self.sliceSerialize(effects.exit('listItemPrefix'), true).length;
    return ok(code);
  }
}
/**
 * @type {Tokenizer}
 * @this {TokenizeContextWithState}
 */


function tokenizeListContinuation(effects, ok, nok) {
  var self = this;
  self.containerState._closeFlow = undefined;
  return effects.check(blankLine, onBlank, notBlank);
  /** @type {State} */

  function onBlank(code) {
    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine; // We have a blank line.
    // Still, try to consume at most the items size.

    return factorySpace(effects, ok, 'listItemIndent', self.containerState.size + 1)(code);
  }
  /** @type {State} */


  function notBlank(code) {
    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {
      self.containerState.furtherBlankLines = undefined;
      self.containerState.initialBlankLine = undefined;
      return notInCurrentItem(code);
    }

    self.containerState.furtherBlankLines = undefined;
    self.containerState.initialBlankLine = undefined;
    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);
  }
  /** @type {State} */


  function notInCurrentItem(code) {
    // While we do continue, we signal that the flow should be closed.
    self.containerState._closeFlow = true; // As we’re closing flow, we’re no longer interrupting.

    self.interrupt = undefined;
    return factorySpace(effects, effects.attempt(list_list, ok, nok), 'linePrefix', self.parser.constructs.disable["null"].includes('codeIndented') ? undefined : 4)(code);
  }
}
/**
 * @type {Tokenizer}
 * @this {TokenizeContextWithState}
 */


function list_tokenizeIndent(effects, ok, nok) {
  var self = this;
  return factorySpace(effects, afterPrefix, 'listItemIndent', self.containerState.size + 1);
  /** @type {State} */

  function afterPrefix(code) {
    var tail = self.events[self.events.length - 1];
    return tail && tail[1].type === 'listItemIndent' && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);
  }
}
/**
 * @type {Exiter}
 * @this {TokenizeContextWithState}
 */


function tokenizeListEnd(effects) {
  effects.exit(this.containerState.type);
}
/**
 * @type {Tokenizer}
 * @this {TokenizeContextWithState}
 */


function tokenizeListItemPrefixWhitespace(effects, ok, nok) {
  var self = this;
  return factorySpace(effects, afterPrefix, 'listItemPrefixWhitespace', self.parser.constructs.disable["null"].includes('codeIndented') ? undefined : 4 + 1);
  /** @type {State} */

  function afterPrefix(code) {
    var tail = self.events[self.events.length - 1];
    return !markdownSpace(code) && tail && tail[1].type === 'listItemPrefixWhitespace' ? ok(code) : nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/block-quote.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Exiter} Exiter
 * @typedef {import('micromark-util-types').State} State
 */


/** @type {Construct} */

var blockQuote = {
  name: 'blockQuote',
  tokenize: tokenizeBlockQuoteStart,
  continuation: {
    tokenize: tokenizeBlockQuoteContinuation
  },
  exit: block_quote_exit
};
/** @type {Tokenizer} */

function tokenizeBlockQuoteStart(effects, ok, nok) {
  var self = this;
  return start;
  /** @type {State} */

  function start(code) {
    if (code === 62) {
      var state = self.containerState;

      if (!state.open) {
        effects.enter('blockQuote', {
          _container: true
        });
        state.open = true;
      }

      effects.enter('blockQuotePrefix');
      effects.enter('blockQuoteMarker');
      effects.consume(code);
      effects.exit('blockQuoteMarker');
      return after;
    }

    return nok(code);
  }
  /** @type {State} */


  function after(code) {
    if (markdownSpace(code)) {
      effects.enter('blockQuotePrefixWhitespace');
      effects.consume(code);
      effects.exit('blockQuotePrefixWhitespace');
      effects.exit('blockQuotePrefix');
      return ok;
    }

    effects.exit('blockQuotePrefix');
    return ok(code);
  }
}
/** @type {Tokenizer} */


function tokenizeBlockQuoteContinuation(effects, ok, nok) {
  return factorySpace(effects, effects.attempt(blockQuote, ok, nok), 'linePrefix', this.parser.constructs.disable["null"].includes('codeIndented') ? undefined : 4);
}
/** @type {Exiter} */


function block_quote_exit(effects) {
  effects.exit('blockQuote');
}
;// CONCATENATED MODULE: ./node_modules/micromark-factory-destination/index.js
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 */

/**
 * @param {Effects} effects
 * @param {State} ok
 * @param {State} nok
 * @param {string} type
 * @param {string} literalType
 * @param {string} literalMarkerType
 * @param {string} rawType
 * @param {string} stringType
 * @param {number} [max=Infinity]
 * @returns {State}
 */
// eslint-disable-next-line max-params

function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
  var limit = max || Number.POSITIVE_INFINITY;
  var balance = 0;
  return start;
  /** @type {State} */

  function start(code) {
    if (code === 60) {
      effects.enter(type);
      effects.enter(literalType);
      effects.enter(literalMarkerType);
      effects.consume(code);
      effects.exit(literalMarkerType);
      return destinationEnclosedBefore;
    }

    if (code === null || code === 41 || asciiControl(code)) {
      return nok(code);
    }

    effects.enter(type);
    effects.enter(rawType);
    effects.enter(stringType);
    effects.enter('chunkString', {
      contentType: 'string'
    });
    return destinationRaw(code);
  }
  /** @type {State} */


  function destinationEnclosedBefore(code) {
    if (code === 62) {
      effects.enter(literalMarkerType);
      effects.consume(code);
      effects.exit(literalMarkerType);
      effects.exit(literalType);
      effects.exit(type);
      return ok;
    }

    effects.enter(stringType);
    effects.enter('chunkString', {
      contentType: 'string'
    });
    return destinationEnclosed(code);
  }
  /** @type {State} */


  function destinationEnclosed(code) {
    if (code === 62) {
      effects.exit('chunkString');
      effects.exit(stringType);
      return destinationEnclosedBefore(code);
    }

    if (code === null || code === 60 || markdownLineEnding(code)) {
      return nok(code);
    }

    effects.consume(code);
    return code === 92 ? destinationEnclosedEscape : destinationEnclosed;
  }
  /** @type {State} */


  function destinationEnclosedEscape(code) {
    if (code === 60 || code === 62 || code === 92) {
      effects.consume(code);
      return destinationEnclosed;
    }

    return destinationEnclosed(code);
  }
  /** @type {State} */


  function destinationRaw(code) {
    if (code === 40) {
      if (++balance > limit) return nok(code);
      effects.consume(code);
      return destinationRaw;
    }

    if (code === 41) {
      if (!balance--) {
        effects.exit('chunkString');
        effects.exit(stringType);
        effects.exit(rawType);
        effects.exit(type);
        return ok(code);
      }

      effects.consume(code);
      return destinationRaw;
    }

    if (code === null || markdownLineEndingOrSpace(code)) {
      if (balance) return nok(code);
      effects.exit('chunkString');
      effects.exit(stringType);
      effects.exit(rawType);
      effects.exit(type);
      return ok(code);
    }

    if (asciiControl(code)) return nok(code);
    effects.consume(code);
    return code === 92 ? destinationRawEscape : destinationRaw;
  }
  /** @type {State} */


  function destinationRawEscape(code) {
    if (code === 40 || code === 41 || code === 92) {
      effects.consume(code);
      return destinationRaw;
    }

    return destinationRaw(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-factory-label/index.js
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').State} State
 */

/**
 * @this {TokenizeContext}
 * @param {Effects} effects
 * @param {State} ok
 * @param {State} nok
 * @param {string} type
 * @param {string} markerType
 * @param {string} stringType
 * @returns {State}
 */
// eslint-disable-next-line max-params

function factoryLabel(effects, ok, nok, type, markerType, stringType) {
  var self = this;
  var size = 0;
  /** @type {boolean} */

  var data;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code);
    effects.exit(markerType);
    effects.enter(stringType);
    return atBreak;
  }
  /** @type {State} */


  function atBreak(code) {
    if (code === null || code === 91 || code === 93 && !data ||
    /* To do: remove in the future once we’ve switched from
     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
     * which doesn’t need this */

    /* Hidden footnotes hook */

    /* c8 ignore next 3 */
    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs || size > 999) {
      return nok(code);
    }

    if (code === 93) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok;
    }

    if (markdownLineEnding(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return atBreak;
    }

    effects.enter('chunkString', {
      contentType: 'string'
    });
    return label(code);
  }
  /** @type {State} */


  function label(code) {
    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {
      effects.exit('chunkString');
      return atBreak(code);
    }

    effects.consume(code);
    data = data || !markdownSpace(code);
    return code === 92 ? labelEscape : label;
  }
  /** @type {State} */


  function labelEscape(code) {
    if (code === 91 || code === 92 || code === 93) {
      effects.consume(code);
      size++;
      return label;
    }

    return label(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-factory-title/index.js
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */


/**
 * @param {Effects} effects
 * @param {State} ok
 * @param {State} nok
 * @param {string} type
 * @param {string} markerType
 * @param {string} stringType
 * @returns {State}
 */
// eslint-disable-next-line max-params

function factoryTitle(effects, ok, nok, type, markerType, stringType) {
  /** @type {NonNullable<Code>} */
  var marker;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code);
    effects.exit(markerType);
    marker = code === 40 ? 41 : code;
    return atFirstTitleBreak;
  }
  /** @type {State} */


  function atFirstTitleBreak(code) {
    if (code === marker) {
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok;
    }

    effects.enter(stringType);
    return atTitleBreak(code);
  }
  /** @type {State} */


  function atTitleBreak(code) {
    if (code === marker) {
      effects.exit(stringType);
      return atFirstTitleBreak(marker);
    }

    if (code === null) {
      return nok(code);
    } // Note: blank lines can’t exist in content.


    if (markdownLineEnding(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return factorySpace(effects, atTitleBreak, 'linePrefix');
    }

    effects.enter('chunkString', {
      contentType: 'string'
    });
    return title(code);
  }
  /** @type {State} */


  function title(code) {
    if (code === marker || code === null || markdownLineEnding(code)) {
      effects.exit('chunkString');
      return atTitleBreak(code);
    }

    effects.consume(code);
    return code === 92 ? titleEscape : title;
  }
  /** @type {State} */


  function titleEscape(code) {
    if (code === marker || code === 92) {
      effects.consume(code);
      return title;
    }

    return title(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-factory-whitespace/index.js
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 */


/**
 * @param {Effects} effects
 * @param {State} ok
 */

function factoryWhitespace(effects, ok) {
  /** @type {boolean} */
  var seen;
  return start;
  /** @type {State} */

  function start(code) {
    if (markdownLineEnding(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      seen = true;
      return start;
    }

    if (markdownSpace(code)) {
      return factorySpace(effects, start, seen ? 'linePrefix' : 'lineSuffix')(code);
    }

    return ok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/definition.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */







/** @type {Construct} */

var definition = {
  name: 'definition',
  tokenize: tokenizeDefinition
};
/** @type {Construct} */

var titleConstruct = {
  tokenize: tokenizeTitle,
  partial: true
};
/** @type {Tokenizer} */

function tokenizeDefinition(effects, ok, nok) {
  var self = this;
  /** @type {string} */

  var identifier;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('definition');
    return factoryLabel.call(self, effects, labelAfter, nok, 'definitionLabel', 'definitionLabelMarker', 'definitionLabelString')(code);
  }
  /** @type {State} */


  function labelAfter(code) {
    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));

    if (code === 58) {
      effects.enter('definitionMarker');
      effects.consume(code);
      effects.exit('definitionMarker'); // Note: blank lines can’t exist in content.

      return factoryWhitespace(effects, factoryDestination(effects, effects.attempt(titleConstruct, factorySpace(effects, after, 'whitespace'), factorySpace(effects, after, 'whitespace')), nok, 'definitionDestination', 'definitionDestinationLiteral', 'definitionDestinationLiteralMarker', 'definitionDestinationRaw', 'definitionDestinationString'));
    }

    return nok(code);
  }
  /** @type {State} */


  function after(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit('definition');

      if (!self.parser.defined.includes(identifier)) {
        self.parser.defined.push(identifier);
      }

      return ok(code);
    }

    return nok(code);
  }
}
/** @type {Tokenizer} */


function tokenizeTitle(effects, ok, nok) {
  return start;
  /** @type {State} */

  function start(code) {
    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, before)(code) : nok(code);
  }
  /** @type {State} */


  function before(code) {
    if (code === 34 || code === 39 || code === 40) {
      return factoryTitle(effects, factorySpace(effects, after, 'whitespace'), nok, 'definitionTitle', 'definitionTitleMarker', 'definitionTitleString')(code);
    }

    return nok(code);
  }
  /** @type {State} */


  function after(code) {
    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/code-indented.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 */


/** @type {Construct} */

var codeIndented = {
  name: 'codeIndented',
  tokenize: tokenizeCodeIndented
};
/** @type {Construct} */

var indentedContent = {
  tokenize: tokenizeIndentedContent,
  partial: true
};
/** @type {Tokenizer} */

function tokenizeCodeIndented(effects, ok, nok) {
  var self = this;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('codeIndented');
    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code);
  }
  /** @type {State} */


  function afterStartPrefix(code) {
    var tail = self.events[self.events.length - 1];
    return tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4 ? afterPrefix(code) : nok(code);
  }
  /** @type {State} */


  function afterPrefix(code) {
    if (code === null) {
      return after(code);
    }

    if (markdownLineEnding(code)) {
      return effects.attempt(indentedContent, afterPrefix, after)(code);
    }

    effects.enter('codeFlowValue');
    return content(code);
  }
  /** @type {State} */


  function content(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit('codeFlowValue');
      return afterPrefix(code);
    }

    effects.consume(code);
    return content;
  }
  /** @type {State} */


  function after(code) {
    effects.exit('codeIndented');
    return ok(code);
  }
}
/** @type {Tokenizer} */


function tokenizeIndentedContent(effects, ok, nok) {
  var self = this;
  return start;
  /** @type {State} */

  function start(code) {
    // If this is a lazy line, it can’t be code.
    if (self.parser.lazy[self.now().line]) {
      return nok(code);
    }

    if (markdownLineEnding(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return start;
    }

    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code);
  }
  /** @type {State} */


  function afterPrefix(code) {
    var tail = self.events[self.events.length - 1];
    return tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? start(code) : nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/heading-atx.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 */



/** @type {Construct} */

var headingAtx = {
  name: 'headingAtx',
  tokenize: tokenizeHeadingAtx,
  resolve: resolveHeadingAtx
};
/** @type {Resolver} */

function resolveHeadingAtx(events, context) {
  var contentEnd = events.length - 2;
  var contentStart = 3;
  /** @type {Token} */

  var content;
  /** @type {Token} */

  var text; // Prefix whitespace, part of the opening.

  if (events[contentStart][1].type === 'whitespace') {
    contentStart += 2;
  } // Suffix whitespace, part of the closing.


  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === 'whitespace') {
    contentEnd -= 2;
  }

  if (events[contentEnd][1].type === 'atxHeadingSequence' && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === 'whitespace')) {
    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
  }

  if (contentEnd > contentStart) {
    content = {
      type: 'atxHeadingText',
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end
    };
    text = {
      type: 'chunkText',
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end,
      // @ts-expect-error Constants are fine to assign.
      contentType: 'text'
    };
    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);
  }

  return events;
}
/** @type {Tokenizer} */


function tokenizeHeadingAtx(effects, ok, nok) {
  var self = this;
  var size = 0;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('atxHeading');
    effects.enter('atxHeadingSequence');
    return fenceOpenInside(code);
  }
  /** @type {State} */


  function fenceOpenInside(code) {
    if (code === 35 && size++ < 6) {
      effects.consume(code);
      return fenceOpenInside;
    }

    if (code === null || markdownLineEndingOrSpace(code)) {
      effects.exit('atxHeadingSequence');
      return self.interrupt ? ok(code) : headingBreak(code);
    }

    return nok(code);
  }
  /** @type {State} */


  function headingBreak(code) {
    if (code === 35) {
      effects.enter('atxHeadingSequence');
      return sequence(code);
    }

    if (code === null || markdownLineEnding(code)) {
      effects.exit('atxHeading');
      return ok(code);
    }

    if (markdownSpace(code)) {
      return factorySpace(effects, headingBreak, 'whitespace')(code);
    }

    effects.enter('atxHeadingText');
    return data(code);
  }
  /** @type {State} */


  function sequence(code) {
    if (code === 35) {
      effects.consume(code);
      return sequence;
    }

    effects.exit('atxHeadingSequence');
    return headingBreak(code);
  }
  /** @type {State} */


  function data(code) {
    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {
      effects.exit('atxHeadingText');
      return headingBreak(code);
    }

    effects.consume(code);
    return data;
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/setext-underline.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */


/** @type {Construct} */

var setextUnderline = {
  name: 'setextUnderline',
  tokenize: tokenizeSetextUnderline,
  resolveTo: resolveToSetextUnderline
};
/** @type {Resolver} */

function resolveToSetextUnderline(events, context) {
  var index = events.length;
  /** @type {number|undefined} */

  var content;
  /** @type {number|undefined} */

  var text;
  /** @type {number|undefined} */

  var definition; // Find the opening of the content.
  // It’ll always exist: we don’t tokenize if it isn’t there.

  while (index--) {
    if (events[index][0] === 'enter') {
      if (events[index][1].type === 'content') {
        content = index;
        break;
      }

      if (events[index][1].type === 'paragraph') {
        text = index;
      }
    } // Exit
    else {
      if (events[index][1].type === 'content') {
        // Remove the content end (if needed we’ll add it later)
        events.splice(index, 1);
      }

      if (!definition && events[index][1].type === 'definition') {
        definition = index;
      }
    }
  }

  var heading = {
    type: 'setextHeading',
    start: Object.assign({}, events[text][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  }; // Change the paragraph to setext heading text.

  events[text][1].type = 'setextHeadingText'; // If we have definitions in the content, we’ll keep on having content,
  // but we need move it.

  if (definition) {
    events.splice(text, 0, ['enter', heading, context]);
    events.splice(definition + 1, 0, ['exit', events[content][1], context]);
    events[content][1].end = Object.assign({}, events[definition][1].end);
  } else {
    events[content][1] = heading;
  } // Add the heading exit at the end.


  events.push(['exit', heading, context]);
  return events;
}
/** @type {Tokenizer} */


function tokenizeSetextUnderline(effects, ok, nok) {
  var self = this;
  var index = self.events.length;
  /** @type {NonNullable<Code>} */

  var marker;
  /** @type {boolean} */

  var paragraph; // Find an opening.

  while (index--) {
    // Skip enter/exit of line ending, line prefix, and content.
    // We can now either have a definition or a paragraph.
    if (self.events[index][1].type !== 'lineEnding' && self.events[index][1].type !== 'linePrefix' && self.events[index][1].type !== 'content') {
      paragraph = self.events[index][1].type === 'paragraph';
      break;
    }
  }

  return start;
  /** @type {State} */

  function start(code) {
    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {
      effects.enter('setextHeadingLine');
      effects.enter('setextHeadingLineSequence');
      marker = code;
      return closingSequence(code);
    }

    return nok(code);
  }
  /** @type {State} */


  function closingSequence(code) {
    if (code === marker) {
      effects.consume(code);
      return closingSequence;
    }

    effects.exit('setextHeadingLineSequence');
    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code);
  }
  /** @type {State} */


  function closingSequenceEnd(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit('setextHeadingLine');
      return ok(code);
    }

    return nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-util-html-tag-name/index.js
/**
 * List of lowercase HTML tag names which when parsing HTML (flow), result
 * in more relaxed rules (condition 6): because they are known blocks, the
 * HTML-like syntax doesn’t have to be strictly parsed.
 * For tag names not in this list, a more strict algorithm (condition 7) is used
 * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
 *
 * This is copied from:
 * <https://spec.commonmark.org/0.29/#html-blocks>.
 */
var htmlBlockNames = ['address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'section', 'source', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul'];
/**
 * List of lowercase HTML tag names which when parsing HTML (flow), result in
 * HTML that can include lines w/o exiting, until a closing tag also in this
 * list is found (condition 1).
 *
 * This module is copied from:
 * <https://spec.commonmark.org/0.29/#html-blocks>.
 *
 * Note that `textarea` is not available in `CommonMark@0.29` but has been
 * merged to the primary branch and is slated to be released in the next release
 * of CommonMark.
 */

var htmlRawNames = ['pre', 'script', 'style', 'textarea'];
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/html-flow.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */



/** @type {Construct} */

var htmlFlow = {
  name: 'htmlFlow',
  tokenize: tokenizeHtmlFlow,
  resolveTo: resolveToHtmlFlow,
  concrete: true
};
/** @type {Construct} */

var nextBlankConstruct = {
  tokenize: tokenizeNextBlank,
  partial: true
};
/** @type {Resolver} */

function resolveToHtmlFlow(events) {
  var index = events.length;

  while (index--) {
    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {
      break;
    }
  }

  if (index > 1 && events[index - 2][1].type === 'linePrefix') {
    // Add the prefix start to the HTML token.
    events[index][1].start = events[index - 2][1].start; // Add the prefix start to the HTML line token.

    events[index + 1][1].start = events[index - 2][1].start; // Remove the line prefix.

    events.splice(index - 2, 2);
  }

  return events;
}
/** @type {Tokenizer} */


function tokenizeHtmlFlow(effects, ok, nok) {
  var self = this;
  /** @type {number} */

  var kind;
  /** @type {boolean} */

  var startTag;
  /** @type {string} */

  var buffer;
  /** @type {number} */

  var index;
  /** @type {Code} */

  var marker;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('htmlFlow');
    effects.enter('htmlFlowData');
    effects.consume(code);
    return open;
  }
  /** @type {State} */


  function open(code) {
    if (code === 33) {
      effects.consume(code);
      return declarationStart;
    }

    if (code === 47) {
      effects.consume(code);
      return tagCloseStart;
    }

    if (code === 63) {
      effects.consume(code);
      kind = 3; // While we’re in an instruction instead of a declaration, we’re on a `?`
      // right now, so we do need to search for `>`, similar to declarations.

      return self.interrupt ? ok : continuationDeclarationInside;
    }

    if (asciiAlpha(code)) {
      effects.consume(code);
      buffer = String.fromCharCode(code);
      startTag = true;
      return tagName;
    }

    return nok(code);
  }
  /** @type {State} */


  function declarationStart(code) {
    if (code === 45) {
      effects.consume(code);
      kind = 2;
      return commentOpenInside;
    }

    if (code === 91) {
      effects.consume(code);
      kind = 5;
      buffer = 'CDATA[';
      index = 0;
      return cdataOpenInside;
    }

    if (asciiAlpha(code)) {
      effects.consume(code);
      kind = 4;
      return self.interrupt ? ok : continuationDeclarationInside;
    }

    return nok(code);
  }
  /** @type {State} */


  function commentOpenInside(code) {
    if (code === 45) {
      effects.consume(code);
      return self.interrupt ? ok : continuationDeclarationInside;
    }

    return nok(code);
  }
  /** @type {State} */


  function cdataOpenInside(code) {
    if (code === buffer.charCodeAt(index++)) {
      effects.consume(code);
      return index === buffer.length ? self.interrupt ? ok : continuation : cdataOpenInside;
    }

    return nok(code);
  }
  /** @type {State} */


  function tagCloseStart(code) {
    if (asciiAlpha(code)) {
      effects.consume(code);
      buffer = String.fromCharCode(code);
      return tagName;
    }

    return nok(code);
  }
  /** @type {State} */


  function tagName(code) {
    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
      if (code !== 47 && startTag && htmlRawNames.includes(buffer.toLowerCase())) {
        kind = 1;
        return self.interrupt ? ok(code) : continuation(code);
      }

      if (htmlBlockNames.includes(buffer.toLowerCase())) {
        kind = 6;

        if (code === 47) {
          effects.consume(code);
          return basicSelfClosing;
        }

        return self.interrupt ? ok(code) : continuation(code);
      }

      kind = 7; // Do not support complete HTML when interrupting

      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : startTag ? completeAttributeNameBefore(code) : completeClosingTagAfter(code);
    }

    if (code === 45 || asciiAlphanumeric(code)) {
      effects.consume(code);
      buffer += String.fromCharCode(code);
      return tagName;
    }

    return nok(code);
  }
  /** @type {State} */


  function basicSelfClosing(code) {
    if (code === 62) {
      effects.consume(code);
      return self.interrupt ? ok : continuation;
    }

    return nok(code);
  }
  /** @type {State} */


  function completeClosingTagAfter(code) {
    if (markdownSpace(code)) {
      effects.consume(code);
      return completeClosingTagAfter;
    }

    return completeEnd(code);
  }
  /** @type {State} */


  function completeAttributeNameBefore(code) {
    if (code === 47) {
      effects.consume(code);
      return completeEnd;
    }

    if (code === 58 || code === 95 || asciiAlpha(code)) {
      effects.consume(code);
      return completeAttributeName;
    }

    if (markdownSpace(code)) {
      effects.consume(code);
      return completeAttributeNameBefore;
    }

    return completeEnd(code);
  }
  /** @type {State} */


  function completeAttributeName(code) {
    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return completeAttributeName;
    }

    return completeAttributeNameAfter(code);
  }
  /** @type {State} */


  function completeAttributeNameAfter(code) {
    if (code === 61) {
      effects.consume(code);
      return completeAttributeValueBefore;
    }

    if (markdownSpace(code)) {
      effects.consume(code);
      return completeAttributeNameAfter;
    }

    return completeAttributeNameBefore(code);
  }
  /** @type {State} */


  function completeAttributeValueBefore(code) {
    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {
      return nok(code);
    }

    if (code === 34 || code === 39) {
      effects.consume(code);
      marker = code;
      return completeAttributeValueQuoted;
    }

    if (markdownSpace(code)) {
      effects.consume(code);
      return completeAttributeValueBefore;
    }

    marker = null;
    return completeAttributeValueUnquoted(code);
  }
  /** @type {State} */


  function completeAttributeValueQuoted(code) {
    if (code === null || markdownLineEnding(code)) {
      return nok(code);
    }

    if (code === marker) {
      effects.consume(code);
      return completeAttributeValueQuotedAfter;
    }

    effects.consume(code);
    return completeAttributeValueQuoted;
  }
  /** @type {State} */


  function completeAttributeValueUnquoted(code) {
    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {
      return completeAttributeNameAfter(code);
    }

    effects.consume(code);
    return completeAttributeValueUnquoted;
  }
  /** @type {State} */


  function completeAttributeValueQuotedAfter(code) {
    if (code === 47 || code === 62 || markdownSpace(code)) {
      return completeAttributeNameBefore(code);
    }

    return nok(code);
  }
  /** @type {State} */


  function completeEnd(code) {
    if (code === 62) {
      effects.consume(code);
      return completeAfter;
    }

    return nok(code);
  }
  /** @type {State} */


  function completeAfter(code) {
    if (markdownSpace(code)) {
      effects.consume(code);
      return completeAfter;
    }

    return code === null || markdownLineEnding(code) ? continuation(code) : nok(code);
  }
  /** @type {State} */


  function continuation(code) {
    if (code === 45 && kind === 2) {
      effects.consume(code);
      return continuationCommentInside;
    }

    if (code === 60 && kind === 1) {
      effects.consume(code);
      return continuationRawTagOpen;
    }

    if (code === 62 && kind === 4) {
      effects.consume(code);
      return continuationClose;
    }

    if (code === 63 && kind === 3) {
      effects.consume(code);
      return continuationDeclarationInside;
    }

    if (code === 93 && kind === 5) {
      effects.consume(code);
      return continuationCharacterDataInside;
    }

    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {
      return effects.check(nextBlankConstruct, continuationClose, continuationAtLineEnding)(code);
    }

    if (code === null || markdownLineEnding(code)) {
      return continuationAtLineEnding(code);
    }

    effects.consume(code);
    return continuation;
  }
  /** @type {State} */


  function continuationAtLineEnding(code) {
    effects.exit('htmlFlowData');
    return htmlContinueStart(code);
  }
  /** @type {State} */


  function htmlContinueStart(code) {
    if (code === null) {
      return done(code);
    }

    if (markdownLineEnding(code)) {
      return effects.attempt({
        tokenize: htmlLineEnd,
        partial: true
      }, htmlContinueStart, done)(code);
    }

    effects.enter('htmlFlowData');
    return continuation(code);
  }
  /** @type {Tokenizer} */


  function htmlLineEnd(effects, ok, nok) {
    return start;
    /** @type {State} */

    function start(code) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return lineStart;
    }
    /** @type {State} */


    function lineStart(code) {
      return self.parser.lazy[self.now().line] ? nok(code) : ok(code);
    }
  }
  /** @type {State} */


  function continuationCommentInside(code) {
    if (code === 45) {
      effects.consume(code);
      return continuationDeclarationInside;
    }

    return continuation(code);
  }
  /** @type {State} */


  function continuationRawTagOpen(code) {
    if (code === 47) {
      effects.consume(code);
      buffer = '';
      return continuationRawEndTag;
    }

    return continuation(code);
  }
  /** @type {State} */


  function continuationRawEndTag(code) {
    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {
      effects.consume(code);
      return continuationClose;
    }

    if (asciiAlpha(code) && buffer.length < 8) {
      effects.consume(code);
      buffer += String.fromCharCode(code);
      return continuationRawEndTag;
    }

    return continuation(code);
  }
  /** @type {State} */


  function continuationCharacterDataInside(code) {
    if (code === 93) {
      effects.consume(code);
      return continuationDeclarationInside;
    }

    return continuation(code);
  }
  /** @type {State} */


  function continuationDeclarationInside(code) {
    if (code === 62) {
      effects.consume(code);
      return continuationClose;
    } // More dashes.


    if (code === 45 && kind === 2) {
      effects.consume(code);
      return continuationDeclarationInside;
    }

    return continuation(code);
  }
  /** @type {State} */


  function continuationClose(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit('htmlFlowData');
      return done(code);
    }

    effects.consume(code);
    return continuationClose;
  }
  /** @type {State} */


  function done(code) {
    effects.exit('htmlFlow');
    return ok(code);
  }
}
/** @type {Tokenizer} */


function tokenizeNextBlank(effects, ok, nok) {
  return start;
  /** @type {State} */

  function start(code) {
    effects.exit('htmlFlowData');
    effects.enter('lineEndingBlank');
    effects.consume(code);
    effects.exit('lineEndingBlank');
    return effects.attempt(blankLine, ok, nok);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/code-fenced.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */


/** @type {Construct} */

var codeFenced = {
  name: 'codeFenced',
  tokenize: tokenizeCodeFenced,
  concrete: true
};
/** @type {Tokenizer} */

function tokenizeCodeFenced(effects, ok, nok) {
  var self = this;
  /** @type {Construct} */

  var closingFenceConstruct = {
    tokenize: tokenizeClosingFence,
    partial: true
  };
  /** @type {Construct} */

  var nonLazyLine = {
    tokenize: tokenizeNonLazyLine,
    partial: true
  };
  var tail = this.events[this.events.length - 1];
  var initialPrefix = tail && tail[1].type === 'linePrefix' ? tail[2].sliceSerialize(tail[1], true).length : 0;
  var sizeOpen = 0;
  /** @type {NonNullable<Code>} */

  var marker;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('codeFenced');
    effects.enter('codeFencedFence');
    effects.enter('codeFencedFenceSequence');
    marker = code;
    return sequenceOpen(code);
  }
  /** @type {State} */


  function sequenceOpen(code) {
    if (code === marker) {
      effects.consume(code);
      sizeOpen++;
      return sequenceOpen;
    }

    effects.exit('codeFencedFenceSequence');
    return sizeOpen < 3 ? nok(code) : factorySpace(effects, infoOpen, 'whitespace')(code);
  }
  /** @type {State} */


  function infoOpen(code) {
    if (code === null || markdownLineEnding(code)) {
      return openAfter(code);
    }

    effects.enter('codeFencedFenceInfo');
    effects.enter('chunkString', {
      contentType: 'string'
    });
    return info(code);
  }
  /** @type {State} */


  function info(code) {
    if (code === null || markdownLineEndingOrSpace(code)) {
      effects.exit('chunkString');
      effects.exit('codeFencedFenceInfo');
      return factorySpace(effects, infoAfter, 'whitespace')(code);
    }

    if (code === 96 && code === marker) return nok(code);
    effects.consume(code);
    return info;
  }
  /** @type {State} */


  function infoAfter(code) {
    if (code === null || markdownLineEnding(code)) {
      return openAfter(code);
    }

    effects.enter('codeFencedFenceMeta');
    effects.enter('chunkString', {
      contentType: 'string'
    });
    return meta(code);
  }
  /** @type {State} */


  function meta(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit('chunkString');
      effects.exit('codeFencedFenceMeta');
      return openAfter(code);
    }

    if (code === 96 && code === marker) return nok(code);
    effects.consume(code);
    return meta;
  }
  /** @type {State} */


  function openAfter(code) {
    effects.exit('codeFencedFence');
    return self.interrupt ? ok(code) : contentStart(code);
  }
  /** @type {State} */


  function contentStart(code) {
    if (code === null) {
      return after(code);
    }

    if (markdownLineEnding(code)) {
      return effects.attempt(nonLazyLine, effects.attempt(closingFenceConstruct, after, initialPrefix ? factorySpace(effects, contentStart, 'linePrefix', initialPrefix + 1) : contentStart), after)(code);
    }

    effects.enter('codeFlowValue');
    return contentContinue(code);
  }
  /** @type {State} */


  function contentContinue(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit('codeFlowValue');
      return contentStart(code);
    }

    effects.consume(code);
    return contentContinue;
  }
  /** @type {State} */


  function after(code) {
    effects.exit('codeFenced');
    return ok(code);
  }
  /** @type {Tokenizer} */


  function tokenizeNonLazyLine(effects, ok, nok) {
    var self = this;
    return start;
    /** @type {State} */

    function start(code) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return lineStart;
    }
    /** @type {State} */


    function lineStart(code) {
      return self.parser.lazy[self.now().line] ? nok(code) : ok(code);
    }
  }
  /** @type {Tokenizer} */


  function tokenizeClosingFence(effects, ok, nok) {
    var size = 0;
    return factorySpace(effects, closingSequenceStart, 'linePrefix', this.parser.constructs.disable["null"].includes('codeIndented') ? undefined : 4);
    /** @type {State} */

    function closingSequenceStart(code) {
      effects.enter('codeFencedFence');
      effects.enter('codeFencedFenceSequence');
      return closingSequence(code);
    }
    /** @type {State} */


    function closingSequence(code) {
      if (code === marker) {
        effects.consume(code);
        size++;
        return closingSequence;
      }

      if (size < sizeOpen) return nok(code);
      effects.exit('codeFencedFenceSequence');
      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code);
    }
    /** @type {State} */


    function closingSequenceEnd(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('codeFencedFence');
        return ok(code);
      }

      return nok(code);
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/character-reference.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */


/** @type {Construct} */

var characterReference = {
  name: 'characterReference',
  tokenize: tokenizeCharacterReference
};
/** @type {Tokenizer} */

function tokenizeCharacterReference(effects, ok, nok) {
  var self = this;
  var size = 0;
  /** @type {number} */

  var max;
  /** @type {(code: Code) => code is number} */

  var test;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('characterReference');
    effects.enter('characterReferenceMarker');
    effects.consume(code);
    effects.exit('characterReferenceMarker');
    return open;
  }
  /** @type {State} */


  function open(code) {
    if (code === 35) {
      effects.enter('characterReferenceMarkerNumeric');
      effects.consume(code);
      effects.exit('characterReferenceMarkerNumeric');
      return numeric;
    }

    effects.enter('characterReferenceValue');
    max = 31;
    test = asciiAlphanumeric;
    return value(code);
  }
  /** @type {State} */


  function numeric(code) {
    if (code === 88 || code === 120) {
      effects.enter('characterReferenceMarkerHexadecimal');
      effects.consume(code);
      effects.exit('characterReferenceMarkerHexadecimal');
      effects.enter('characterReferenceValue');
      max = 6;
      test = asciiHexDigit;
      return value;
    }

    effects.enter('characterReferenceValue');
    max = 7;
    test = asciiDigit;
    return value(code);
  }
  /** @type {State} */


  function value(code) {
    /** @type {Token} */
    var token;

    if (code === 59 && size) {
      token = effects.exit('characterReferenceValue');

      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {
        return nok(code);
      }

      effects.enter('characterReferenceMarker');
      effects.consume(code);
      effects.exit('characterReferenceMarker');
      effects.exit('characterReference');
      return ok;
    }

    if (test(code) && size++ < max) {
      effects.consume(code);
      return value;
    }

    return nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/character-escape.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */

/** @type {Construct} */

var characterEscape = {
  name: 'characterEscape',
  tokenize: tokenizeCharacterEscape
};
/** @type {Tokenizer} */

function tokenizeCharacterEscape(effects, ok, nok) {
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('characterEscape');
    effects.enter('escapeMarker');
    effects.consume(code);
    effects.exit('escapeMarker');
    return open;
  }
  /** @type {State} */


  function open(code) {
    if (asciiPunctuation(code)) {
      effects.enter('characterEscapeValue');
      effects.consume(code);
      effects.exit('characterEscapeValue');
      effects.exit('characterEscape');
      return ok;
    }

    return nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/line-ending.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */


/** @type {Construct} */

var lineEnding = {
  name: 'lineEnding',
  tokenize: tokenizeLineEnding
};
/** @type {Tokenizer} */

function tokenizeLineEnding(effects, ok) {
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');
    return factorySpace(effects, ok, 'linePrefix');
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/label-end.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */








/** @type {Construct} */

var labelEnd = {
  name: 'labelEnd',
  tokenize: tokenizeLabelEnd,
  resolveTo: resolveToLabelEnd,
  resolveAll: resolveAllLabelEnd
};
/** @type {Construct} */

var resourceConstruct = {
  tokenize: tokenizeResource
};
/** @type {Construct} */

var fullReferenceConstruct = {
  tokenize: tokenizeFullReference
};
/** @type {Construct} */

var collapsedReferenceConstruct = {
  tokenize: tokenizeCollapsedReference
};
/** @type {Resolver} */

function resolveAllLabelEnd(events) {
  var index = -1;
  /** @type {Token} */

  var token;

  while (++index < events.length) {
    token = events[index][1];

    if (token.type === 'labelImage' || token.type === 'labelLink' || token.type === 'labelEnd') {
      // Remove the marker.
      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);
      token.type = 'data';
      index++;
    }
  }

  return events;
}
/** @type {Resolver} */


function resolveToLabelEnd(events, context) {
  var index = events.length;
  var offset = 0;
  /** @type {Token} */

  var token;
  /** @type {number|undefined} */

  var open;
  /** @type {number|undefined} */

  var close;
  /** @type {Event[]} */

  var media; // Find an opening.

  while (index--) {
    token = events[index][1];

    if (open) {
      // If we see another link, or inactive link label, we’ve been here before.
      if (token.type === 'link' || token.type === 'labelLink' && token._inactive) {
        break;
      } // Mark other link openings as inactive, as we can’t have links in
      // links.


      if (events[index][0] === 'enter' && token.type === 'labelLink') {
        token._inactive = true;
      }
    } else if (close) {
      if (events[index][0] === 'enter' && (token.type === 'labelImage' || token.type === 'labelLink') && !token._balanced) {
        open = index;

        if (token.type !== 'labelLink') {
          offset = 2;
          break;
        }
      }
    } else if (token.type === 'labelEnd') {
      close = index;
    }
  }

  var group = {
    type: events[open][1].type === 'labelLink' ? 'link' : 'image',
    start: Object.assign({}, events[open][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  var label = {
    type: 'label',
    start: Object.assign({}, events[open][1].start),
    end: Object.assign({}, events[close][1].end)
  };
  var text = {
    type: 'labelText',
    start: Object.assign({}, events[open + offset + 2][1].end),
    end: Object.assign({}, events[close - 2][1].start)
  };
  media = [['enter', group, context], ['enter', label, context]]; // Opening marker.

  media = push(media, events.slice(open + 1, open + offset + 3)); // Text open.

  media = push(media, [['enter', text, context]]); // Between.

  media = push(media, resolveAll(context.parser.constructs.insideSpan["null"], events.slice(open + offset + 4, close - 3), context)); // Text close, marker close, label close.

  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]); // Reference, resource, or so.

  media = push(media, events.slice(close + 1)); // Media close.

  media = push(media, [['exit', group, context]]);
  splice(events, open, events.length, media);
  return events;
}
/** @type {Tokenizer} */


function tokenizeLabelEnd(effects, ok, nok) {
  var self = this;
  var index = self.events.length;
  /** @type {Token} */

  var labelStart;
  /** @type {boolean} */

  var defined; // Find an opening.

  while (index--) {
    if ((self.events[index][1].type === 'labelImage' || self.events[index][1].type === 'labelLink') && !self.events[index][1]._balanced) {
      labelStart = self.events[index][1];
      break;
    }
  }

  return start;
  /** @type {State} */

  function start(code) {
    if (!labelStart) {
      return nok(code);
    } // It’s a balanced bracket, but contains a link.


    if (labelStart._inactive) return balanced(code);
    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({
      start: labelStart.end,
      end: self.now()
    })));
    effects.enter('labelEnd');
    effects.enter('labelMarker');
    effects.consume(code);
    effects.exit('labelMarker');
    effects.exit('labelEnd');
    return afterLabelEnd;
  }
  /** @type {State} */


  function afterLabelEnd(code) {
    // Resource: `[asd](fgh)`.
    if (code === 40) {
      return effects.attempt(resourceConstruct, ok, defined ? ok : balanced)(code);
    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?


    if (code === 91) {
      return effects.attempt(fullReferenceConstruct, ok, defined ? effects.attempt(collapsedReferenceConstruct, ok, balanced) : balanced)(code);
    } // Shortcut reference: `[asd]`?


    return defined ? ok(code) : balanced(code);
  }
  /** @type {State} */


  function balanced(code) {
    labelStart._balanced = true;
    return nok(code);
  }
}
/** @type {Tokenizer} */


function tokenizeResource(effects, ok, nok) {
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('resource');
    effects.enter('resourceMarker');
    effects.consume(code);
    effects.exit('resourceMarker');
    return factoryWhitespace(effects, open);
  }
  /** @type {State} */


  function open(code) {
    if (code === 41) {
      return end(code);
    }

    return factoryDestination(effects, destinationAfter, nok, 'resourceDestination', 'resourceDestinationLiteral', 'resourceDestinationLiteralMarker', 'resourceDestinationRaw', 'resourceDestinationString', 3)(code);
  }
  /** @type {State} */


  function destinationAfter(code) {
    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, between)(code) : end(code);
  }
  /** @type {State} */


  function between(code) {
    if (code === 34 || code === 39 || code === 40) {
      return factoryTitle(effects, factoryWhitespace(effects, end), nok, 'resourceTitle', 'resourceTitleMarker', 'resourceTitleString')(code);
    }

    return end(code);
  }
  /** @type {State} */


  function end(code) {
    if (code === 41) {
      effects.enter('resourceMarker');
      effects.consume(code);
      effects.exit('resourceMarker');
      effects.exit('resource');
      return ok;
    }

    return nok(code);
  }
}
/** @type {Tokenizer} */


function tokenizeFullReference(effects, ok, nok) {
  var self = this;
  return start;
  /** @type {State} */

  function start(code) {
    return factoryLabel.call(self, effects, afterLabel, nok, 'reference', 'referenceMarker', 'referenceString')(code);
  }
  /** @type {State} */


  function afterLabel(code) {
    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);
  }
}
/** @type {Tokenizer} */


function tokenizeCollapsedReference(effects, ok, nok) {
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('reference');
    effects.enter('referenceMarker');
    effects.consume(code);
    effects.exit('referenceMarker');
    return open;
  }
  /** @type {State} */


  function open(code) {
    if (code === 93) {
      effects.enter('referenceMarker');
      effects.consume(code);
      effects.exit('referenceMarker');
      effects.exit('reference');
      return ok;
    }

    return nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/label-start-image.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */

/** @type {Construct} */

var labelStartImage = {
  name: 'labelStartImage',
  tokenize: tokenizeLabelStartImage,
  resolveAll: labelEnd.resolveAll
};
/** @type {Tokenizer} */

function tokenizeLabelStartImage(effects, ok, nok) {
  var self = this;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('labelImage');
    effects.enter('labelImageMarker');
    effects.consume(code);
    effects.exit('labelImageMarker');
    return open;
  }
  /** @type {State} */


  function open(code) {
    if (code === 91) {
      effects.enter('labelMarker');
      effects.consume(code);
      effects.exit('labelMarker');
      effects.exit('labelImage');
      return after;
    }

    return nok(code);
  }
  /** @type {State} */


  function after(code) {
    /* To do: remove in the future once we’ve switched from
     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
     * which doesn’t need this */

    /* Hidden footnotes hook */

    /* c8 ignore next 3 */
    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/attention.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Point} Point
 */



/** @type {Construct} */

var attention = {
  name: 'attention',
  tokenize: tokenizeAttention,
  resolveAll: resolveAllAttention
};
/**
 * Take all events and resolve attention to emphasis or strong.
 *
 * @type {Resolver}
 */

function resolveAllAttention(events, context) {
  var index = -1;
  /** @type {number} */

  var open;
  /** @type {Token} */

  var group;
  /** @type {Token} */

  var text;
  /** @type {Token} */

  var openingSequence;
  /** @type {Token} */

  var closingSequence;
  /** @type {number} */

  var use;
  /** @type {Event[]} */

  var nextEvents;
  /** @type {number} */

  var offset; // Walk through all events.
  //
  // Note: performance of this is fine on an mb of normal markdown, but it’s
  // a bottleneck for malicious stuff.

  while (++index < events.length) {
    // Find a token that can close.
    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {
      open = index; // Now walk back to find an opener.

      while (open--) {
        // Find a token that can open the closer.
        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open && // If the markers are the same:
        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {
          // If the opening can close or the closing can open,
          // and the close size *is not* a multiple of three,
          // but the sum of the opening and closing size *is* multiple of three,
          // then don’t match.
          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {
            continue;
          } // Number of markers to use from the sequence.


          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;
          var start = Object.assign({}, events[open][1].end);
          var end = Object.assign({}, events[index][1].start);
          movePoint(start, -use);
          movePoint(end, use);
          openingSequence = {
            type: use > 1 ? 'strongSequence' : 'emphasisSequence',
            start: start,
            end: Object.assign({}, events[open][1].end)
          };
          closingSequence = {
            type: use > 1 ? 'strongSequence' : 'emphasisSequence',
            start: Object.assign({}, events[index][1].start),
            end: end
          };
          text = {
            type: use > 1 ? 'strongText' : 'emphasisText',
            start: Object.assign({}, events[open][1].end),
            end: Object.assign({}, events[index][1].start)
          };
          group = {
            type: use > 1 ? 'strong' : 'emphasis',
            start: Object.assign({}, openingSequence.start),
            end: Object.assign({}, closingSequence.end)
          };
          events[open][1].end = Object.assign({}, openingSequence.start);
          events[index][1].start = Object.assign({}, closingSequence.end);
          nextEvents = []; // If there are more markers in the opening, add them before.

          if (events[open][1].end.offset - events[open][1].start.offset) {
            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);
          } // Opening.


          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]); // Between.

          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan["null"], events.slice(open + 1, index), context)); // Closing.

          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]); // If there are more markers in the closing, add them after.

          if (events[index][1].end.offset - events[index][1].start.offset) {
            offset = 2;
            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);
          } else {
            offset = 0;
          }

          splice(events, open - 1, index - open + 3, nextEvents);
          index = open + nextEvents.length - offset - 2;
          break;
        }
      }
    }
  } // Remove remaining sequences.


  index = -1;

  while (++index < events.length) {
    if (events[index][1].type === 'attentionSequence') {
      events[index][1].type = 'data';
    }
  }

  return events;
}
/** @type {Tokenizer} */


function tokenizeAttention(effects, ok) {
  var attentionMarkers = this.parser.constructs.attentionMarkers["null"];
  var previous = this.previous;
  var before = classifyCharacter(previous);
  /** @type {NonNullable<Code>} */

  var marker;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('attentionSequence');
    marker = code;
    return sequence(code);
  }
  /** @type {State} */


  function sequence(code) {
    if (code === marker) {
      effects.consume(code);
      return sequence;
    }

    var token = effects.exit('attentionSequence');
    var after = classifyCharacter(code);
    var open = !after || after === 2 && before || attentionMarkers.includes(code);
    var close = !before || before === 2 && after || attentionMarkers.includes(previous);
    token._open = Boolean(marker === 42 ? open : open && (before || !close));
    token._close = Boolean(marker === 42 ? close : close && (after || !open));
    return ok(code);
  }
}
/**
 * Move a point a bit.
 *
 * Note: `move` only works inside lines! It’s not possible to move past other
 * chunks (replacement characters, tabs, or line endings).
 *
 * @param {Point} point
 * @param {number} offset
 * @returns {void}
 */


function movePoint(point, offset) {
  point.column += offset;
  point.offset += offset;
  point._bufferIndex += offset;
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/autolink.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */

/** @type {Construct} */

var autolink = {
  name: 'autolink',
  tokenize: tokenizeAutolink
};
/** @type {Tokenizer} */

function tokenizeAutolink(effects, ok, nok) {
  var size = 1;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('autolink');
    effects.enter('autolinkMarker');
    effects.consume(code);
    effects.exit('autolinkMarker');
    effects.enter('autolinkProtocol');
    return open;
  }
  /** @type {State} */


  function open(code) {
    if (asciiAlpha(code)) {
      effects.consume(code);
      return schemeOrEmailAtext;
    }

    return asciiAtext(code) ? emailAtext(code) : nok(code);
  }
  /** @type {State} */


  function schemeOrEmailAtext(code) {
    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code) ? schemeInsideOrEmailAtext(code) : emailAtext(code);
  }
  /** @type {State} */


  function schemeInsideOrEmailAtext(code) {
    if (code === 58) {
      effects.consume(code);
      return urlInside;
    }

    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {
      effects.consume(code);
      return schemeInsideOrEmailAtext;
    }

    return emailAtext(code);
  }
  /** @type {State} */


  function urlInside(code) {
    if (code === 62) {
      effects.exit('autolinkProtocol');
      return end(code);
    }

    if (code === null || code === 32 || code === 60 || asciiControl(code)) {
      return nok(code);
    }

    effects.consume(code);
    return urlInside;
  }
  /** @type {State} */


  function emailAtext(code) {
    if (code === 64) {
      effects.consume(code);
      size = 0;
      return emailAtSignOrDot;
    }

    if (asciiAtext(code)) {
      effects.consume(code);
      return emailAtext;
    }

    return nok(code);
  }
  /** @type {State} */


  function emailAtSignOrDot(code) {
    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);
  }
  /** @type {State} */


  function emailLabel(code) {
    if (code === 46) {
      effects.consume(code);
      size = 0;
      return emailAtSignOrDot;
    }

    if (code === 62) {
      // Exit, then change the type.
      effects.exit('autolinkProtocol').type = 'autolinkEmail';
      return end(code);
    }

    return emailValue(code);
  }
  /** @type {State} */


  function emailValue(code) {
    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {
      effects.consume(code);
      return code === 45 ? emailValue : emailLabel;
    }

    return nok(code);
  }
  /** @type {State} */


  function end(code) {
    effects.enter('autolinkMarker');
    effects.consume(code);
    effects.exit('autolinkMarker');
    effects.exit('autolink');
    return ok;
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/html-text.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */


/** @type {Construct} */

var htmlText = {
  name: 'htmlText',
  tokenize: tokenizeHtmlText
};
/** @type {Tokenizer} */

function tokenizeHtmlText(effects, ok, nok) {
  var self = this;
  /** @type {NonNullable<Code>|undefined} */

  var marker;
  /** @type {string} */

  var buffer;
  /** @type {number} */

  var index;
  /** @type {State} */

  var returnState;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('htmlText');
    effects.enter('htmlTextData');
    effects.consume(code);
    return open;
  }
  /** @type {State} */


  function open(code) {
    if (code === 33) {
      effects.consume(code);
      return declarationOpen;
    }

    if (code === 47) {
      effects.consume(code);
      return tagCloseStart;
    }

    if (code === 63) {
      effects.consume(code);
      return instruction;
    }

    if (asciiAlpha(code)) {
      effects.consume(code);
      return tagOpen;
    }

    return nok(code);
  }
  /** @type {State} */


  function declarationOpen(code) {
    if (code === 45) {
      effects.consume(code);
      return commentOpen;
    }

    if (code === 91) {
      effects.consume(code);
      buffer = 'CDATA[';
      index = 0;
      return cdataOpen;
    }

    if (asciiAlpha(code)) {
      effects.consume(code);
      return declaration;
    }

    return nok(code);
  }
  /** @type {State} */


  function commentOpen(code) {
    if (code === 45) {
      effects.consume(code);
      return commentStart;
    }

    return nok(code);
  }
  /** @type {State} */


  function commentStart(code) {
    if (code === null || code === 62) {
      return nok(code);
    }

    if (code === 45) {
      effects.consume(code);
      return commentStartDash;
    }

    return comment(code);
  }
  /** @type {State} */


  function commentStartDash(code) {
    if (code === null || code === 62) {
      return nok(code);
    }

    return comment(code);
  }
  /** @type {State} */


  function comment(code) {
    if (code === null) {
      return nok(code);
    }

    if (code === 45) {
      effects.consume(code);
      return commentClose;
    }

    if (markdownLineEnding(code)) {
      returnState = comment;
      return atLineEnding(code);
    }

    effects.consume(code);
    return comment;
  }
  /** @type {State} */


  function commentClose(code) {
    if (code === 45) {
      effects.consume(code);
      return end;
    }

    return comment(code);
  }
  /** @type {State} */


  function cdataOpen(code) {
    if (code === buffer.charCodeAt(index++)) {
      effects.consume(code);
      return index === buffer.length ? cdata : cdataOpen;
    }

    return nok(code);
  }
  /** @type {State} */


  function cdata(code) {
    if (code === null) {
      return nok(code);
    }

    if (code === 93) {
      effects.consume(code);
      return cdataClose;
    }

    if (markdownLineEnding(code)) {
      returnState = cdata;
      return atLineEnding(code);
    }

    effects.consume(code);
    return cdata;
  }
  /** @type {State} */


  function cdataClose(code) {
    if (code === 93) {
      effects.consume(code);
      return cdataEnd;
    }

    return cdata(code);
  }
  /** @type {State} */


  function cdataEnd(code) {
    if (code === 62) {
      return end(code);
    }

    if (code === 93) {
      effects.consume(code);
      return cdataEnd;
    }

    return cdata(code);
  }
  /** @type {State} */


  function declaration(code) {
    if (code === null || code === 62) {
      return end(code);
    }

    if (markdownLineEnding(code)) {
      returnState = declaration;
      return atLineEnding(code);
    }

    effects.consume(code);
    return declaration;
  }
  /** @type {State} */


  function instruction(code) {
    if (code === null) {
      return nok(code);
    }

    if (code === 63) {
      effects.consume(code);
      return instructionClose;
    }

    if (markdownLineEnding(code)) {
      returnState = instruction;
      return atLineEnding(code);
    }

    effects.consume(code);
    return instruction;
  }
  /** @type {State} */


  function instructionClose(code) {
    return code === 62 ? end(code) : instruction(code);
  }
  /** @type {State} */


  function tagCloseStart(code) {
    if (asciiAlpha(code)) {
      effects.consume(code);
      return tagClose;
    }

    return nok(code);
  }
  /** @type {State} */


  function tagClose(code) {
    if (code === 45 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return tagClose;
    }

    return tagCloseBetween(code);
  }
  /** @type {State} */


  function tagCloseBetween(code) {
    if (markdownLineEnding(code)) {
      returnState = tagCloseBetween;
      return atLineEnding(code);
    }

    if (markdownSpace(code)) {
      effects.consume(code);
      return tagCloseBetween;
    }

    return end(code);
  }
  /** @type {State} */


  function tagOpen(code) {
    if (code === 45 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return tagOpen;
    }

    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
      return tagOpenBetween(code);
    }

    return nok(code);
  }
  /** @type {State} */


  function tagOpenBetween(code) {
    if (code === 47) {
      effects.consume(code);
      return end;
    }

    if (code === 58 || code === 95 || asciiAlpha(code)) {
      effects.consume(code);
      return tagOpenAttributeName;
    }

    if (markdownLineEnding(code)) {
      returnState = tagOpenBetween;
      return atLineEnding(code);
    }

    if (markdownSpace(code)) {
      effects.consume(code);
      return tagOpenBetween;
    }

    return end(code);
  }
  /** @type {State} */


  function tagOpenAttributeName(code) {
    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return tagOpenAttributeName;
    }

    return tagOpenAttributeNameAfter(code);
  }
  /** @type {State} */


  function tagOpenAttributeNameAfter(code) {
    if (code === 61) {
      effects.consume(code);
      return tagOpenAttributeValueBefore;
    }

    if (markdownLineEnding(code)) {
      returnState = tagOpenAttributeNameAfter;
      return atLineEnding(code);
    }

    if (markdownSpace(code)) {
      effects.consume(code);
      return tagOpenAttributeNameAfter;
    }

    return tagOpenBetween(code);
  }
  /** @type {State} */


  function tagOpenAttributeValueBefore(code) {
    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {
      return nok(code);
    }

    if (code === 34 || code === 39) {
      effects.consume(code);
      marker = code;
      return tagOpenAttributeValueQuoted;
    }

    if (markdownLineEnding(code)) {
      returnState = tagOpenAttributeValueBefore;
      return atLineEnding(code);
    }

    if (markdownSpace(code)) {
      effects.consume(code);
      return tagOpenAttributeValueBefore;
    }

    effects.consume(code);
    marker = undefined;
    return tagOpenAttributeValueUnquoted;
  }
  /** @type {State} */


  function tagOpenAttributeValueQuoted(code) {
    if (code === marker) {
      effects.consume(code);
      return tagOpenAttributeValueQuotedAfter;
    }

    if (code === null) {
      return nok(code);
    }

    if (markdownLineEnding(code)) {
      returnState = tagOpenAttributeValueQuoted;
      return atLineEnding(code);
    }

    effects.consume(code);
    return tagOpenAttributeValueQuoted;
  }
  /** @type {State} */


  function tagOpenAttributeValueQuotedAfter(code) {
    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {
      return tagOpenBetween(code);
    }

    return nok(code);
  }
  /** @type {State} */


  function tagOpenAttributeValueUnquoted(code) {
    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {
      return nok(code);
    }

    if (code === 62 || markdownLineEndingOrSpace(code)) {
      return tagOpenBetween(code);
    }

    effects.consume(code);
    return tagOpenAttributeValueUnquoted;
  } // We can’t have blank lines in content, so no need to worry about empty
  // tokens.

  /** @type {State} */


  function atLineEnding(code) {
    effects.exit('htmlTextData');
    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');
    return factorySpace(effects, afterPrefix, 'linePrefix', self.parser.constructs.disable["null"].includes('codeIndented') ? undefined : 4);
  }
  /** @type {State} */


  function afterPrefix(code) {
    effects.enter('htmlTextData');
    return returnState(code);
  }
  /** @type {State} */


  function end(code) {
    if (code === 62) {
      effects.consume(code);
      effects.exit('htmlTextData');
      effects.exit('htmlText');
      return ok;
    }

    return nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/label-start-link.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */

/** @type {Construct} */

var labelStartLink = {
  name: 'labelStartLink',
  tokenize: tokenizeLabelStartLink,
  resolveAll: labelEnd.resolveAll
};
/** @type {Tokenizer} */

function tokenizeLabelStartLink(effects, ok, nok) {
  var self = this;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('labelLink');
    effects.enter('labelMarker');
    effects.consume(code);
    effects.exit('labelMarker');
    effects.exit('labelLink');
    return after;
  }
  /** @type {State} */


  function after(code) {
    /* To do: remove in the future once we’ve switched from
     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
     * which doesn’t need this */

    /* Hidden footnotes hook. */

    /* c8 ignore next 3 */
    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/hard-break-escape.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */

/** @type {Construct} */

var hardBreakEscape = {
  name: 'hardBreakEscape',
  tokenize: tokenizeHardBreakEscape
};
/** @type {Tokenizer} */

function tokenizeHardBreakEscape(effects, ok, nok) {
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('hardBreakEscape');
    effects.enter('escapeMarker');
    effects.consume(code);
    return open;
  }
  /** @type {State} */


  function open(code) {
    if (markdownLineEnding(code)) {
      effects.exit('escapeMarker');
      effects.exit('hardBreakEscape');
      return ok(code);
    }

    return nok(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark-core-commonmark/lib/code-text.js
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Previous} Previous
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 */

/** @type {Construct} */

var codeText = {
  name: 'codeText',
  tokenize: tokenizeCodeText,
  resolve: resolveCodeText,
  previous: code_text_previous
};
/** @type {Resolver} */

function resolveCodeText(events) {
  var tailExitIndex = events.length - 4;
  var headEnterIndex = 3;
  /** @type {number} */

  var index;
  /** @type {number|undefined} */

  var enter; // If we start and end with an EOL or a space.

  if ((events[headEnterIndex][1].type === 'lineEnding' || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === 'lineEnding' || events[tailExitIndex][1].type === 'space')) {
    index = headEnterIndex; // And we have data.

    while (++index < tailExitIndex) {
      if (events[index][1].type === 'codeTextData') {
        // Then we have padding.
        events[headEnterIndex][1].type = 'codeTextPadding';
        events[tailExitIndex][1].type = 'codeTextPadding';
        headEnterIndex += 2;
        tailExitIndex -= 2;
        break;
      }
    }
  } // Merge adjacent spaces and data.


  index = headEnterIndex - 1;
  tailExitIndex++;

  while (++index <= tailExitIndex) {
    if (enter === undefined) {
      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {
        enter = index;
      }
    } else if (index === tailExitIndex || events[index][1].type === 'lineEnding') {
      events[enter][1].type = 'codeTextData';

      if (index !== enter + 2) {
        events[enter][1].end = events[index - 1][1].end;
        events.splice(enter + 2, index - enter - 2);
        tailExitIndex -= index - enter - 2;
        index = enter + 2;
      }

      enter = undefined;
    }
  }

  return events;
}
/** @type {Previous} */


function code_text_previous(code) {
  // If there is a previous code, there will always be a tail.
  return code !== 96 || this.events[this.events.length - 1][1].type === 'characterEscape';
}
/** @type {Tokenizer} */


function tokenizeCodeText(effects, ok, nok) {
  var self = this;
  var sizeOpen = 0;
  /** @type {number} */

  var size;
  /** @type {Token} */

  var token;
  return start;
  /** @type {State} */

  function start(code) {
    effects.enter('codeText');
    effects.enter('codeTextSequence');
    return openingSequence(code);
  }
  /** @type {State} */


  function openingSequence(code) {
    if (code === 96) {
      effects.consume(code);
      sizeOpen++;
      return openingSequence;
    }

    effects.exit('codeTextSequence');
    return gap(code);
  }
  /** @type {State} */


  function gap(code) {
    // EOF.
    if (code === null) {
      return nok(code);
    } // Closing fence?
    // Could also be data.


    if (code === 96) {
      token = effects.enter('codeTextSequence');
      size = 0;
      return closingSequence(code);
    } // Tabs don’t work, and virtual spaces don’t make sense.


    if (code === 32) {
      effects.enter('space');
      effects.consume(code);
      effects.exit('space');
      return gap;
    }

    if (markdownLineEnding(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return gap;
    } // Data.


    effects.enter('codeTextData');
    return data(code);
  } // In code.

  /** @type {State} */


  function data(code) {
    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {
      effects.exit('codeTextData');
      return gap(code);
    }

    effects.consume(code);
    return data;
  } // Closing fence.

  /** @type {State} */


  function closingSequence(code) {
    // More.
    if (code === 96) {
      effects.consume(code);
      size++;
      return closingSequence;
    } // Done!


    if (size === sizeOpen) {
      effects.exit('codeTextSequence');
      effects.exit('codeText');
      return ok(code);
    } // More or less accents: mark as data.


    token.type = 'codeTextData';
    return data(code);
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark/lib/constructs.js


var _document, _flowInitial, _flow, _string, _text;

/**
 * @typedef {import('micromark-util-types').Extension} Extension
 */


/** @type {Extension['document']} */

var constructs_document = (_document = {}, _defineProperty(_document, 42, list_list), _defineProperty(_document, 43, list_list), _defineProperty(_document, 45, list_list), _defineProperty(_document, 48, list_list), _defineProperty(_document, 49, list_list), _defineProperty(_document, 50, list_list), _defineProperty(_document, 51, list_list), _defineProperty(_document, 52, list_list), _defineProperty(_document, 53, list_list), _defineProperty(_document, 54, list_list), _defineProperty(_document, 55, list_list), _defineProperty(_document, 56, list_list), _defineProperty(_document, 57, list_list), _defineProperty(_document, 62, blockQuote), _document);
/** @type {Extension['contentInitial']} */

var contentInitial = _defineProperty({}, 91, definition);
/** @type {Extension['flowInitial']} */

var flowInitial = (_flowInitial = {}, _defineProperty(_flowInitial, -2, codeIndented), _defineProperty(_flowInitial, -1, codeIndented), _defineProperty(_flowInitial, 32, codeIndented), _flowInitial);
/** @type {Extension['flow']} */

var constructs_flow = (_flow = {}, _defineProperty(_flow, 35, headingAtx), _defineProperty(_flow, 42, thematic_break_thematicBreak), _defineProperty(_flow, 45, [setextUnderline, thematic_break_thematicBreak]), _defineProperty(_flow, 60, htmlFlow), _defineProperty(_flow, 61, setextUnderline), _defineProperty(_flow, 95, thematic_break_thematicBreak), _defineProperty(_flow, 96, codeFenced), _defineProperty(_flow, 126, codeFenced), _flow);
/** @type {Extension['string']} */

var constructs_string = (_string = {}, _defineProperty(_string, 38, characterReference), _defineProperty(_string, 92, characterEscape), _string);
/** @type {Extension['text']} */

var constructs_text = (_text = {}, _defineProperty(_text, -5, lineEnding), _defineProperty(_text, -4, lineEnding), _defineProperty(_text, -3, lineEnding), _defineProperty(_text, 33, labelStartImage), _defineProperty(_text, 38, characterReference), _defineProperty(_text, 42, attention), _defineProperty(_text, 60, [autolink, htmlText]), _defineProperty(_text, 91, labelStartLink), _defineProperty(_text, 92, [hardBreakEscape, characterEscape]), _defineProperty(_text, 93, labelEnd), _defineProperty(_text, 95, attention), _defineProperty(_text, 96, codeText), _text);
/** @type {Extension['insideSpan']} */

var insideSpan = {
  "null": [attention, resolver]
};
/** @type {Extension['attentionMarkers']} */

var attentionMarkers = {
  "null": [42, 95]
};
/** @type {Extension['disable']} */

var disable = {
  "null": []
};
;// CONCATENATED MODULE: ./node_modules/micromark/lib/parse.js
/**
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension
 * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
 * @typedef {import('micromark-util-types').ParseContext} ParseContext
 * @typedef {import('micromark-util-types').Create} Create
 */







/**
 * @param {ParseOptions} [options]
 * @returns {ParseContext}
 */

function lib_parse_parse() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  /** @type {FullNormalizedExtension} */
  // @ts-expect-error `defaultConstructs` is full, so the result will be too.
  var constructs = combineExtensions( // @ts-expect-error Same as above.
  [constructs_namespaceObject].concat(options.extensions || []));
  /** @type {ParseContext} */

  var parser = {
    defined: [],
    lazy: {},
    constructs: constructs,
    content: create(content_content),
    document: create(document_document),
    flow: create(flow),
    string: create(string),
    text: create(initialize_text_text)
  };
  return parser;
  /**
   * @param {InitialConstruct} initial
   */

  function create(initial) {
    return creator;
    /** @type {Create} */

    function creator(from) {
      return createTokenizer(parser, initial, from);
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark/lib/preprocess.js
/**
 * @typedef {import('micromark-util-types').Encoding} Encoding
 * @typedef {import('micromark-util-types').Value} Value
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Code} Code
 */

/**
 * @callback Preprocessor
 * @param {Value} value
 * @param {Encoding} [encoding]
 * @param {boolean} [end=false]
 * @returns {Chunk[]}
 */
var preprocess_search = /[\0\t\n\r]/g;
/**
 * @returns {Preprocessor}
 */

function preprocess() {
  var column = 1;
  var buffer = '';
  /** @type {boolean|undefined} */

  var start = true;
  /** @type {boolean|undefined} */

  var atCarriageReturn;
  return preprocessor;
  /** @type {Preprocessor} */

  function preprocessor(value, encoding, end) {
    /** @type {Chunk[]} */
    var chunks = [];
    /** @type {RegExpMatchArray|null} */

    var match;
    /** @type {number} */

    var next;
    /** @type {number} */

    var startPosition;
    /** @type {number} */

    var endPosition;
    /** @type {Code} */

    var code; // @ts-expect-error `Buffer` does allow an encoding.

    value = buffer + value.toString(encoding);
    startPosition = 0;
    buffer = '';

    if (start) {
      if (value.charCodeAt(0) === 65279) {
        startPosition++;
      }

      start = undefined;
    }

    while (startPosition < value.length) {
      preprocess_search.lastIndex = startPosition;
      match = preprocess_search.exec(value);
      endPosition = match && match.index !== undefined ? match.index : value.length;
      code = value.charCodeAt(endPosition);

      if (!match) {
        buffer = value.slice(startPosition);
        break;
      }

      if (code === 10 && startPosition === endPosition && atCarriageReturn) {
        chunks.push(-3);
        atCarriageReturn = undefined;
      } else {
        if (atCarriageReturn) {
          chunks.push(-5);
          atCarriageReturn = undefined;
        }

        if (startPosition < endPosition) {
          chunks.push(value.slice(startPosition, endPosition));
          column += endPosition - startPosition;
        }

        switch (code) {
          case 0:
            {
              chunks.push(65533);
              column++;
              break;
            }

          case 9:
            {
              next = Math.ceil(column / 4) * 4;
              chunks.push(-2);

              while (column++ < next) {
                chunks.push(-1);
              }

              break;
            }

          case 10:
            {
              chunks.push(-4);
              column = 1;
              break;
            }

          default:
            {
              atCarriageReturn = true;
              column = 1;
            }
        }
      }

      startPosition = endPosition + 1;
    }

    if (end) {
      if (atCarriageReturn) chunks.push(-5);
      if (buffer) chunks.push(buffer);
      chunks.push(null);
    }

    return chunks;
  }
}
;// CONCATENATED MODULE: ./node_modules/micromark/lib/postprocess.js
/**
 * @typedef {import('micromark-util-types').Event} Event
 */

/**
 * @param {Event[]} events
 * @returns {Event[]}
 */

function postprocess(events) {
  while (!subtokenize(events)) {// Empty
  }

  return events;
}
;// CONCATENATED MODULE: ./node_modules/mdast-util-from-markdown/lib/index.js


/**
 * @typedef {import('micromark-util-types').Encoding} Encoding
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Value} Value
 * @typedef {import('unist').Parent} UnistParent
 * @typedef {import('unist').Point} Point
 * @typedef {import('mdast').PhrasingContent} PhrasingContent
 * @typedef {import('mdast').Content} Content
 * @typedef {Root|Content} Node
 * @typedef {Extract<Node, UnistParent>} Parent
 * @typedef {import('mdast').Break} Break
 * @typedef {import('mdast').Blockquote} Blockquote
 * @typedef {import('mdast').Code} Code
 * @typedef {import('mdast').Definition} Definition
 * @typedef {import('mdast').Emphasis} Emphasis
 * @typedef {import('mdast').Heading} Heading
 * @typedef {import('mdast').HTML} HTML
 * @typedef {import('mdast').Image} Image
 * @typedef {import('mdast').ImageReference} ImageReference
 * @typedef {import('mdast').InlineCode} InlineCode
 * @typedef {import('mdast').Link} Link
 * @typedef {import('mdast').LinkReference} LinkReference
 * @typedef {import('mdast').List} List
 * @typedef {import('mdast').ListItem} ListItem
 * @typedef {import('mdast').Paragraph} Paragraph
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast').Strong} Strong
 * @typedef {import('mdast').Text} Text
 * @typedef {import('mdast').ThematicBreak} ThematicBreak
 *
 * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment
 */

/**
 * @typedef _CompileDataFields
 * @property {boolean|undefined} expectingFirstListItemValue
 * @property {boolean|undefined} flowCodeInside
 * @property {boolean|undefined} setextHeadingSlurpLineEnding
 * @property {boolean|undefined} atHardBreak
 * @property {'collapsed'|'full'} referenceType
 * @property {boolean|undefined} inReference
 * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType
 *
 * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData
 *
 * @typedef {(tree: Root) => Root|void} Transform
 * @typedef {(this: CompileContext, token: Token) => void} Handle
 * @typedef {Record<string, Handle>} Handles
 *   Token types mapping to handles
 * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension
 * @typedef {Partial<NormalizedExtension>} Extension
 *   An mdast extension changes how markdown tokens are turned into mdast.
 *
 * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError
 * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError
 *
 * @typedef CompileContext
 *   mdast compiler context
 * @property {Array<Node | Fragment>} stack
 * @property {Array<[Token, OnEnterError|undefined]>} tokenStack
 * @property {(key: string, value?: unknown) => void} setData
 *   Set data into the key-value store.
 * @property {<K extends string>(key: K) => CompileData[K]} getData
 *   Get data from the key-value store.
 * @property {(this: CompileContext) => void} buffer
 *   Capture some of the output data.
 * @property {(this: CompileContext) => string} resume
 *   Stop capturing and access the output data.
 * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter
 *   Enter a token.
 * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit
 *   Exit a token.
 * @property {TokenizeContext['sliceSerialize']} sliceSerialize
 *   Get the string value of a token.
 * @property {NormalizedExtension} config
 *   Configuration.
 *
 * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions
 * @typedef {ParseOptions & FromMarkdownOptions} Options
 */









var mdast_util_from_markdown_lib_own = {}.hasOwnProperty;
/**
 * @param value Markdown to parse (`string` or `Buffer`).
 * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).
 * @param [options] Configuration
 */

var fromMarkdown =
/**
 * @type {(
 *   ((value: Value, encoding: Encoding, options?: Options) => Root) &
 *   ((value: Value, options?: Options) => Root)
 * )}
 */

/**
 * @param {Value} value
 * @param {Encoding} [encoding]
 * @param {Options} [options]
 * @returns {Root}
 */
function fromMarkdown(value, encoding, options) {
  if (typeof encoding !== 'string') {
    options = encoding;
    encoding = undefined;
  }

  return compiler(options)(postprocess(lib_parse_parse(options).document().write(preprocess()(value, encoding, true))));
};
/**
 * Note this compiler only understand complete buffering, not streaming.
 *
 * @param {Options} [options]
 */

function compiler() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  /** @type {NormalizedExtension} */
  // @ts-expect-error: our base has all required fields, so the result will too.
  var config = configure({
    transforms: [],
    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],
    enter: {
      autolink: opener(link),
      autolinkProtocol: onenterdata,
      autolinkEmail: onenterdata,
      atxHeading: opener(heading),
      blockQuote: opener(blockQuote),
      characterEscape: onenterdata,
      characterReference: onenterdata,
      codeFenced: opener(codeFlow),
      codeFencedFenceInfo: buffer,
      codeFencedFenceMeta: buffer,
      codeIndented: opener(codeFlow, buffer),
      codeText: opener(codeText, buffer),
      codeTextData: onenterdata,
      data: onenterdata,
      codeFlowValue: onenterdata,
      definition: opener(definition),
      definitionDestinationString: buffer,
      definitionLabelString: buffer,
      definitionTitleString: buffer,
      emphasis: opener(emphasis),
      hardBreakEscape: opener(hardBreak),
      hardBreakTrailing: opener(hardBreak),
      htmlFlow: opener(html, buffer),
      htmlFlowData: onenterdata,
      htmlText: opener(html, buffer),
      htmlTextData: onenterdata,
      image: opener(image),
      label: buffer,
      link: opener(link),
      listItem: opener(listItem),
      listItemValue: onenterlistitemvalue,
      listOrdered: opener(list, onenterlistordered),
      listUnordered: opener(list),
      paragraph: opener(paragraph),
      reference: onenterreference,
      referenceString: buffer,
      resourceDestinationString: buffer,
      resourceTitleString: buffer,
      setextHeading: opener(heading),
      strong: opener(strong),
      thematicBreak: opener(thematicBreak)
    },
    exit: {
      atxHeading: closer(),
      atxHeadingSequence: onexitatxheadingsequence,
      autolink: closer(),
      autolinkEmail: onexitautolinkemail,
      autolinkProtocol: onexitautolinkprotocol,
      blockQuote: closer(),
      characterEscapeValue: onexitdata,
      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
      characterReferenceValue: onexitcharacterreferencevalue,
      codeFenced: closer(onexitcodefenced),
      codeFencedFence: onexitcodefencedfence,
      codeFencedFenceInfo: onexitcodefencedfenceinfo,
      codeFencedFenceMeta: onexitcodefencedfencemeta,
      codeFlowValue: onexitdata,
      codeIndented: closer(onexitcodeindented),
      codeText: closer(onexitcodetext),
      codeTextData: onexitdata,
      data: onexitdata,
      definition: closer(),
      definitionDestinationString: onexitdefinitiondestinationstring,
      definitionLabelString: onexitdefinitionlabelstring,
      definitionTitleString: onexitdefinitiontitlestring,
      emphasis: closer(),
      hardBreakEscape: closer(onexithardbreak),
      hardBreakTrailing: closer(onexithardbreak),
      htmlFlow: closer(onexithtmlflow),
      htmlFlowData: onexitdata,
      htmlText: closer(onexithtmltext),
      htmlTextData: onexitdata,
      image: closer(onexitimage),
      label: onexitlabel,
      labelText: onexitlabeltext,
      lineEnding: onexitlineending,
      link: closer(onexitlink),
      listItem: closer(),
      listOrdered: closer(),
      listUnordered: closer(),
      paragraph: closer(),
      referenceString: onexitreferencestring,
      resourceDestinationString: onexitresourcedestinationstring,
      resourceTitleString: onexitresourcetitlestring,
      resource: onexitresource,
      setextHeading: closer(onexitsetextheading),
      setextHeadingLineSequence: onexitsetextheadinglinesequence,
      setextHeadingText: onexitsetextheadingtext,
      strong: closer(),
      thematicBreak: closer()
    }
  }, options.mdastExtensions || []);
  /** @type {CompileData} */

  var data = {};
  return compile;
  /**
   * @param {Array<Event>} events
   * @returns {Root}
   */

  function compile(events) {
    /** @type {Root} */
    var tree = {
      type: 'root',
      children: []
    };
    /** @type {CompileContext['stack']} */

    var stack = [tree];
    /** @type {CompileContext['tokenStack']} */

    var tokenStack = [];
    /** @type {Array<number>} */

    var listStack = [];
    /** @type {Omit<CompileContext, 'sliceSerialize'>} */

    var context = {
      stack: stack,
      tokenStack: tokenStack,
      config: config,
      enter: enter,
      exit: exit,
      buffer: buffer,
      resume: resume,
      setData: setData,
      getData: getData
    };
    var index = -1;

    while (++index < events.length) {
      // We preprocess lists to add `listItem` tokens, and to infer whether
      // items the list itself are spread out.
      if (events[index][1].type === 'listOrdered' || events[index][1].type === 'listUnordered') {
        if (events[index][0] === 'enter') {
          listStack.push(index);
        } else {
          var tail = listStack.pop();
          index = prepareList(events, tail, index);
        }
      }
    }

    index = -1;

    while (++index < events.length) {
      var handler = config[events[index][0]];

      if (mdast_util_from_markdown_lib_own.call(handler, events[index][1].type)) {
        handler[events[index][1].type].call(Object.assign({
          sliceSerialize: events[index][2].sliceSerialize
        }, context), events[index][1]);
      }
    }

    if (tokenStack.length > 0) {
      var _tail = tokenStack[tokenStack.length - 1];

      var _handler = _tail[1] || defaultOnError;

      _handler.call(context, undefined, _tail[0]);
    } // Figure out `root` position.


    tree.position = {
      start: point(events.length > 0 ? events[0][1].start : {
        line: 1,
        column: 1,
        offset: 0
      }),
      end: point(events.length > 0 ? events[events.length - 2][1].end : {
        line: 1,
        column: 1,
        offset: 0
      })
    };
    index = -1;

    while (++index < config.transforms.length) {
      tree = config.transforms[index](tree) || tree;
    }

    return tree;
  }
  /**
   * @param {Array<Event>} events
   * @param {number} start
   * @param {number} length
   * @returns {number}
   */


  function prepareList(events, start, length) {
    var index = start - 1;
    var containerBalance = -1;
    var listSpread = false;
    /** @type {Token|undefined} */

    var listItem;
    /** @type {number|undefined} */

    var lineIndex;
    /** @type {number|undefined} */

    var firstBlankLineIndex;
    /** @type {boolean|undefined} */

    var atMarker;

    while (++index <= length) {
      var event = events[index];

      if (event[1].type === 'listUnordered' || event[1].type === 'listOrdered' || event[1].type === 'blockQuote') {
        if (event[0] === 'enter') {
          containerBalance++;
        } else {
          containerBalance--;
        }

        atMarker = undefined;
      } else if (event[1].type === 'lineEndingBlank') {
        if (event[0] === 'enter') {
          if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {
            firstBlankLineIndex = index;
          }

          atMarker = undefined;
        }
      } else if (event[1].type === 'linePrefix' || event[1].type === 'listItemValue' || event[1].type === 'listItemMarker' || event[1].type === 'listItemPrefix' || event[1].type === 'listItemPrefixWhitespace') {// Empty.
      } else {
        atMarker = undefined;
      }

      if (!containerBalance && event[0] === 'enter' && event[1].type === 'listItemPrefix' || containerBalance === -1 && event[0] === 'exit' && (event[1].type === 'listUnordered' || event[1].type === 'listOrdered')) {
        if (listItem) {
          var tailIndex = index;
          lineIndex = undefined;

          while (tailIndex--) {
            var tailEvent = events[tailIndex];

            if (tailEvent[1].type === 'lineEnding' || tailEvent[1].type === 'lineEndingBlank') {
              if (tailEvent[0] === 'exit') continue;

              if (lineIndex) {
                events[lineIndex][1].type = 'lineEndingBlank';
                listSpread = true;
              }

              tailEvent[1].type = 'lineEnding';
              lineIndex = tailIndex;
            } else if (tailEvent[1].type === 'linePrefix' || tailEvent[1].type === 'blockQuotePrefix' || tailEvent[1].type === 'blockQuotePrefixWhitespace' || tailEvent[1].type === 'blockQuoteMarker' || tailEvent[1].type === 'listItemIndent') {// Empty
            } else {
              break;
            }
          }

          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
            // @ts-expect-error Patched.
            listItem._spread = true;
          } // Fix position.


          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);
          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);
          index++;
          length++;
        } // Create a new list item.


        if (event[1].type === 'listItemPrefix') {
          listItem = {
            type: 'listItem',
            // @ts-expect-error Patched
            _spread: false,
            start: Object.assign({}, event[1].start)
          }; // @ts-expect-error: `listItem` is most definitely defined, TS...

          events.splice(index, 0, ['enter', listItem, event[2]]);
          index++;
          length++;
          firstBlankLineIndex = undefined;
          atMarker = true;
        }
      }
    } // @ts-expect-error Patched.


    events[start][1]._spread = listSpread;
    return length;
  }
  /**
   * @type {CompileContext['setData']}
   * @param [value]
   */


  function setData(key, value) {
    data[key] = value;
  }
  /**
   * @type {CompileContext['getData']}
   * @template {string} K
   * @param {K} key
   * @returns {CompileData[K]}
   */


  function getData(key) {
    return data[key];
  }
  /**
   * @param {Point} d
   * @returns {Point}
   */


  function point(d) {
    return {
      line: d.line,
      column: d.column,
      offset: d.offset
    };
  }
  /**
   * @param {(token: Token) => Node} create
   * @param {Handle} [and]
   * @returns {Handle}
   */


  function opener(create, and) {
    return open;
    /**
     * @this {CompileContext}
     * @param {Token} token
     * @returns {void}
     */

    function open(token) {
      enter.call(this, create(token), token);
      if (and) and.call(this, token);
    }
  }
  /** @type {CompileContext['buffer']} */


  function buffer() {
    this.stack.push({
      type: 'fragment',
      children: []
    });
  }
  /**
   * @type {CompileContext['enter']}
   * @template {Node} N
   * @this {CompileContext}
   * @param {N} node
   * @param {Token} token
   * @param {OnEnterError} [errorHandler]
   * @returns {N}
   */


  function enter(node, token, errorHandler) {
    var parent = this.stack[this.stack.length - 1]; // @ts-expect-error: Assume `Node` can exist as a child of `parent`.

    parent.children.push(node);
    this.stack.push(node);
    this.tokenStack.push([token, errorHandler]); // @ts-expect-error: `end` will be patched later.

    node.position = {
      start: point(token.start)
    };
    return node;
  }
  /**
   * @param {Handle} [and]
   * @returns {Handle}
   */


  function closer(and) {
    return close;
    /**
     * @this {CompileContext}
     * @param {Token} token
     * @returns {void}
     */

    function close(token) {
      if (and) and.call(this, token);
      exit.call(this, token);
    }
  }
  /**
   * @type {CompileContext['exit']}
   * @this {CompileContext}
   * @param {Token} token
   * @param {OnExitError} [onExitError]
   * @returns {Node}
   */


  function exit(token, onExitError) {
    var node = this.stack.pop();
    var open = this.tokenStack.pop();

    if (!open) {
      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({
        start: token.start,
        end: token.end
      }) + '): it’s not open');
    } else if (open[0].type !== token.type) {
      if (onExitError) {
        onExitError.call(this, token, open[0]);
      } else {
        var handler = open[1] || defaultOnError;
        handler.call(this, token, open[0]);
      }
    }

    node.position.end = point(token.end);
    return node;
  }
  /**
   * @this {CompileContext}
   * @returns {string}
   */


  function resume() {
    return mdast_util_to_string_toString(this.stack.pop());
  } //
  // Handlers.
  //

  /** @type {Handle} */


  function onenterlistordered() {
    setData('expectingFirstListItemValue', true);
  }
  /** @type {Handle} */


  function onenterlistitemvalue(token) {
    if (getData('expectingFirstListItemValue')) {
      var ancestor =
      /** @type {List} */
      this.stack[this.stack.length - 2];
      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
      setData('expectingFirstListItemValue');
    }
  }
  /** @type {Handle} */


  function onexitcodefencedfenceinfo() {
    var data = this.resume();
    var node =
    /** @type {Code} */
    this.stack[this.stack.length - 1];
    node.lang = data;
  }
  /** @type {Handle} */


  function onexitcodefencedfencemeta() {
    var data = this.resume();
    var node =
    /** @type {Code} */
    this.stack[this.stack.length - 1];
    node.meta = data;
  }
  /** @type {Handle} */


  function onexitcodefencedfence() {
    // Exit if this is the closing fence.
    if (getData('flowCodeInside')) return;
    this.buffer();
    setData('flowCodeInside', true);
  }
  /** @type {Handle} */


  function onexitcodefenced() {
    var data = this.resume();
    var node =
    /** @type {Code} */
    this.stack[this.stack.length - 1];
    node.value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
    setData('flowCodeInside');
  }
  /** @type {Handle} */


  function onexitcodeindented() {
    var data = this.resume();
    var node =
    /** @type {Code} */
    this.stack[this.stack.length - 1];
    node.value = data.replace(/(\r?\n|\r)$/g, '');
  }
  /** @type {Handle} */


  function onexitdefinitionlabelstring(token) {
    // Discard label, use the source content instead.
    var label = this.resume();
    var node =
    /** @type {Definition} */
    this.stack[this.stack.length - 1];
    node.label = label;
    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
  }
  /** @type {Handle} */


  function onexitdefinitiontitlestring() {
    var data = this.resume();
    var node =
    /** @type {Definition} */
    this.stack[this.stack.length - 1];
    node.title = data;
  }
  /** @type {Handle} */


  function onexitdefinitiondestinationstring() {
    var data = this.resume();
    var node =
    /** @type {Definition} */
    this.stack[this.stack.length - 1];
    node.url = data;
  }
  /** @type {Handle} */


  function onexitatxheadingsequence(token) {
    var node =
    /** @type {Heading} */
    this.stack[this.stack.length - 1];

    if (!node.depth) {
      var depth = this.sliceSerialize(token).length;
      node.depth = depth;
    }
  }
  /** @type {Handle} */


  function onexitsetextheadingtext() {
    setData('setextHeadingSlurpLineEnding', true);
  }
  /** @type {Handle} */


  function onexitsetextheadinglinesequence(token) {
    var node =
    /** @type {Heading} */
    this.stack[this.stack.length - 1];
    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
  }
  /** @type {Handle} */


  function onexitsetextheading() {
    setData('setextHeadingSlurpLineEnding');
  }
  /** @type {Handle} */


  function onenterdata(token) {
    var parent =
    /** @type {Parent} */
    this.stack[this.stack.length - 1];
    /** @type {Node} */

    var tail = parent.children[parent.children.length - 1];

    if (!tail || tail.type !== 'text') {
      // Add a new text node.
      tail = text(); // @ts-expect-error: we’ll add `end` later.

      tail.position = {
        start: point(token.start)
      }; // @ts-expect-error: Assume `parent` accepts `text`.

      parent.children.push(tail);
    }

    this.stack.push(tail);
  }
  /** @type {Handle} */


  function onexitdata(token) {
    var tail = this.stack.pop();
    tail.value += this.sliceSerialize(token);
    tail.position.end = point(token.end);
  }
  /** @type {Handle} */


  function onexitlineending(token) {
    var context = this.stack[this.stack.length - 1]; // If we’re at a hard break, include the line ending in there.

    if (getData('atHardBreak')) {
      var tail = context.children[context.children.length - 1];
      tail.position.end = point(token.end);
      setData('atHardBreak');
      return;
    }

    if (!getData('setextHeadingSlurpLineEnding') && config.canContainEols.includes(context.type)) {
      onenterdata.call(this, token);
      onexitdata.call(this, token);
    }
  }
  /** @type {Handle} */


  function onexithardbreak() {
    setData('atHardBreak', true);
  }
  /** @type {Handle} */


  function onexithtmlflow() {
    var data = this.resume();
    var node =
    /** @type {HTML} */
    this.stack[this.stack.length - 1];
    node.value = data;
  }
  /** @type {Handle} */


  function onexithtmltext() {
    var data = this.resume();
    var node =
    /** @type {HTML} */
    this.stack[this.stack.length - 1];
    node.value = data;
  }
  /** @type {Handle} */


  function onexitcodetext() {
    var data = this.resume();
    var node =
    /** @type {InlineCode} */
    this.stack[this.stack.length - 1];
    node.value = data;
  }
  /** @type {Handle} */


  function onexitlink() {
    var context =
    /** @type {Link & {identifier: string, label: string}} */
    this.stack[this.stack.length - 1]; // To do: clean.

    if (getData('inReference')) {
      context.type += 'Reference'; // @ts-expect-error: mutate.

      context.referenceType = getData('referenceType') || 'shortcut'; // @ts-expect-error: mutate.

      delete context.url;
      delete context.title;
    } else {
      // @ts-expect-error: mutate.
      delete context.identifier; // @ts-expect-error: mutate.

      delete context.label;
    }

    setData('referenceType');
  }
  /** @type {Handle} */


  function onexitimage() {
    var context =
    /** @type {Image & {identifier: string, label: string}} */
    this.stack[this.stack.length - 1]; // To do: clean.

    if (getData('inReference')) {
      context.type += 'Reference'; // @ts-expect-error: mutate.

      context.referenceType = getData('referenceType') || 'shortcut'; // @ts-expect-error: mutate.

      delete context.url;
      delete context.title;
    } else {
      // @ts-expect-error: mutate.
      delete context.identifier; // @ts-expect-error: mutate.

      delete context.label;
    }

    setData('referenceType');
  }
  /** @type {Handle} */


  function onexitlabeltext(token) {
    var ancestor =
    /** @type {(Link|Image) & {identifier: string, label: string}} */
    this.stack[this.stack.length - 2];
    var string = this.sliceSerialize(token);
    ancestor.label = decodeString(string);
    ancestor.identifier = normalizeIdentifier(string).toLowerCase();
  }
  /** @type {Handle} */


  function onexitlabel() {
    var fragment =
    /** @type {Fragment} */
    this.stack[this.stack.length - 1];
    var value = this.resume();
    var node =
    /** @type {(Link|Image) & {identifier: string, label: string}} */
    this.stack[this.stack.length - 1]; // Assume a reference.

    setData('inReference', true);

    if (node.type === 'link') {
      // @ts-expect-error: Assume static phrasing content.
      node.children = fragment.children;
    } else {
      node.alt = value;
    }
  }
  /** @type {Handle} */


  function onexitresourcedestinationstring() {
    var data = this.resume();
    var node =
    /** @type {Link|Image} */
    this.stack[this.stack.length - 1];
    node.url = data;
  }
  /** @type {Handle} */


  function onexitresourcetitlestring() {
    var data = this.resume();
    var node =
    /** @type {Link|Image} */
    this.stack[this.stack.length - 1];
    node.title = data;
  }
  /** @type {Handle} */


  function onexitresource() {
    setData('inReference');
  }
  /** @type {Handle} */


  function onenterreference() {
    setData('referenceType', 'collapsed');
  }
  /** @type {Handle} */


  function onexitreferencestring(token) {
    var label = this.resume();
    var node =
    /** @type {LinkReference|ImageReference} */
    this.stack[this.stack.length - 1];
    node.label = label;
    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
    setData('referenceType', 'full');
  }
  /** @type {Handle} */


  function onexitcharacterreferencemarker(token) {
    setData('characterReferenceType', token.type);
  }
  /** @type {Handle} */


  function onexitcharacterreferencevalue(token) {
    var data = this.sliceSerialize(token);
    var type = getData('characterReferenceType');
    /** @type {string} */

    var value;

    if (type) {
      value = decodeNumericCharacterReference(data, type === 'characterReferenceMarkerNumeric' ? 10 : 16);
      setData('characterReferenceType');
    } else {
      // @ts-expect-error `decodeNamedCharacterReference` can return false for
      // invalid named character references, but everything we’ve tokenized is
      // valid.
      value = decodeNamedCharacterReference(data);
    }

    var tail = this.stack.pop();
    tail.value += value;
    tail.position.end = point(token.end);
  }
  /** @type {Handle} */


  function onexitautolinkprotocol(token) {
    onexitdata.call(this, token);
    var node =
    /** @type {Link} */
    this.stack[this.stack.length - 1];
    node.url = this.sliceSerialize(token);
  }
  /** @type {Handle} */


  function onexitautolinkemail(token) {
    onexitdata.call(this, token);
    var node =
    /** @type {Link} */
    this.stack[this.stack.length - 1];
    node.url = 'mailto:' + this.sliceSerialize(token);
  } //
  // Creaters.
  //

  /** @returns {Blockquote} */


  function blockQuote() {
    return {
      type: 'blockquote',
      children: []
    };
  }
  /** @returns {Code} */


  function codeFlow() {
    return {
      type: 'code',
      lang: null,
      meta: null,
      value: ''
    };
  }
  /** @returns {InlineCode} */


  function codeText() {
    return {
      type: 'inlineCode',
      value: ''
    };
  }
  /** @returns {Definition} */


  function definition() {
    return {
      type: 'definition',
      identifier: '',
      label: null,
      title: null,
      url: ''
    };
  }
  /** @returns {Emphasis} */


  function emphasis() {
    return {
      type: 'emphasis',
      children: []
    };
  }
  /** @returns {Heading} */


  function heading() {
    // @ts-expect-error `depth` will be set later.
    return {
      type: 'heading',
      depth: undefined,
      children: []
    };
  }
  /** @returns {Break} */


  function hardBreak() {
    return {
      type: 'break'
    };
  }
  /** @returns {HTML} */


  function html() {
    return {
      type: 'html',
      value: ''
    };
  }
  /** @returns {Image} */


  function image() {
    return {
      type: 'image',
      title: null,
      url: '',
      alt: null
    };
  }
  /** @returns {Link} */


  function link() {
    return {
      type: 'link',
      title: null,
      url: '',
      children: []
    };
  }
  /**
   * @param {Token} token
   * @returns {List}
   */


  function list(token) {
    return {
      type: 'list',
      ordered: token.type === 'listOrdered',
      start: null,
      // @ts-expect-error Patched.
      spread: token._spread,
      children: []
    };
  }
  /**
   * @param {Token} token
   * @returns {ListItem}
   */


  function listItem(token) {
    return {
      type: 'listItem',
      // @ts-expect-error Patched.
      spread: token._spread,
      checked: null,
      children: []
    };
  }
  /** @returns {Paragraph} */


  function paragraph() {
    return {
      type: 'paragraph',
      children: []
    };
  }
  /** @returns {Strong} */


  function strong() {
    return {
      type: 'strong',
      children: []
    };
  }
  /** @returns {Text} */


  function text() {
    return {
      type: 'text',
      value: ''
    };
  }
  /** @returns {ThematicBreak} */


  function thematicBreak() {
    return {
      type: 'thematicBreak'
    };
  }
}
/**
 * @param {Extension} combined
 * @param {Array<Extension|Array<Extension>>} extensions
 * @returns {Extension}
 */


function configure(combined, extensions) {
  var index = -1;

  while (++index < extensions.length) {
    var value = extensions[index];

    if (Array.isArray(value)) {
      configure(combined, value);
    } else {
      extension(combined, value);
    }
  }

  return combined;
}
/**
 * @param {Extension} combined
 * @param {Extension} extension
 * @returns {void}
 */


function extension(combined, extension) {
  /** @type {string} */
  var key;

  for (key in extension) {
    if (mdast_util_from_markdown_lib_own.call(extension, key)) {
      var list = key === 'canContainEols' || key === 'transforms';
      var maybe = mdast_util_from_markdown_lib_own.call(combined, key) ? combined[key] : undefined;
      /* c8 ignore next */

      var left = maybe || (combined[key] = list ? [] : {});
      var right = extension[key];

      if (right) {
        if (list) {
          // @ts-expect-error: `left` is an array.
          combined[key] = [].concat(_toConsumableArray(left), _toConsumableArray(right));
        } else {
          Object.assign(left, right);
        }
      }
    }
  }
}
/** @type {OnEnterError} */


function defaultOnError(left, right) {
  if (left) {
    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({
      start: left.start,
      end: left.end
    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({
      start: right.start,
      end: right.end
    }) + ') is open');
  } else {
    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({
      start: right.start,
      end: right.end
    }) + ') is still open');
  }
}
;// CONCATENATED MODULE: ./node_modules/remark-parse/lib/index.js
/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast-util-from-markdown').Options} Options
 */

/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */

function remarkParse(options) {
  var _this = this;

  /** @type {import('unified').ParserFunction<Root>} */
  var parser = function parser(doc) {
    // Assume options.
    var settings =
    /** @type {Options} */
    _this.data('settings');

    return fromMarkdown(doc, Object.assign({}, settings, options, {
      // Note: these options are not in the readme.
      // The goal is for them to be set by plugins on `data` instead of being
      // passed by users.
      extensions: _this.data('micromarkExtensions') || [],
      mdastExtensions: _this.data('fromMarkdownExtensions') || []
    }));
  };

  Object.assign(this, {
    Parser: parser
  });
}
;// CONCATENATED MODULE: ./node_modules/remark-parse/index.js

/* harmony default export */ const remark_parse = (remarkParse);
;// CONCATENATED MODULE: ./src/nodes/githubCorners.ts
function githubCorners(opts){var href=opts.href;if(!href){return;}return{type:'element',tagName:'a',properties:{'aria-label':'View source on GitHub',target:'__blank',className:'github-corner',href:href},children:[{type:'element',tagName:'svg',properties:{width:'54',height:'54',viewBox:'0 0 250 250','aria-hidden':'true',style:'fill: rgb(32, 34, 37); color: rgb(255, 255, 255); position: fixed; z-index: 99999; border: 0px; top: 0px; right: 0px;'},children:[{type:'element',tagName:'path',properties:{d:'M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z'},children:[]},{type:'element',tagName:'path',children:[],properties:{style:'transform-origin: 130px 106px;',className:'octo-arm',fill:'currentColor',d:'M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2'}},{type:'element',tagName:'path',children:[],properties:{className:'octo-body',fill:'currentColor',d:'M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z'}}]}]};}
;// CONCATENATED MODULE: ./src/nodes/githubCornersFork.ts
function githubCornersFork(opts){var href=opts.href;if(!href){return;}return{type:'element',tagName:'a',properties:{'aria-label':'Fork me on Github',title:'Fork me on GitHub',target:'__blank',className:'github-fork-ribbon','data-ribbon':'Fork me on GitHub',href:href},children:[]};}
;// CONCATENATED MODULE: ./src/nodes/octiconLink.ts
function octiconLink(){return{type:'element',tagName:'span',properties:{"class":'octicon octicon-link'},children:[]};}
;// CONCATENATED MODULE: ./src/nodes/copy.ts
function copyElement(){var str=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'test';return{type:'element',tagName:'div',properties:{onclick:'copied(this)','data-code':str,className:'copied'},children:[{type:'element',tagName:'svg',properties:{className:'octicon-copy',ariaHidden:'true',viewBox:'0 0 16 16',fill:'currentColor',height:12,width:12},children:[{type:'element',tagName:'path',properties:{fillRule:'evenodd',d:'M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z'},children:[]},{type:'element',tagName:'path',properties:{fillRule:'evenodd',d:'M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z'},children:[]}]},{type:'element',tagName:'svg',properties:{className:'octicon-check',ariaHidden:'true',viewBox:'0 0 16 16',fill:'currentColor',height:12,width:12},children:[{type:'element',tagName:'path',properties:{fillRule:'evenodd',d:'M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z'},children:[]}]}]};}
;// CONCATENATED MODULE: ./src/create.ts
// @ts-ignore
// @ts-ignore
// @ts-ignore
// https://stackoverflow.com/questions/46745014/alternative-for-dirname-in-node-when-using-the-experimental-modules-flag
// export const _dirname = dirname(fileURLToPath(import.meta.url));
var filename=(0,external_url_.fileURLToPath)("file:///Users/wangchujiang/git-project/github/markdown-to-html-cli/src/create.ts");var dirname=external_path_default().dirname(filename);var _dirname=dirname;var script="function copied(target, str) {\n  target.classList.add('active');\n  copyTextToClipboard(target.dataset.code, function() {\n    setTimeout(() => {\n      target.classList.remove('active');\n    }, 2000);\n  });\n}";var getCodeStr=function getCodeStr(){var data=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var code=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';data.forEach(function(node){if(node.type==='text'){code+=node.value;}else if(node.type==='element'&&node.children&&Array.isArray(node.children)){code+=getCodeStr(node.children);}});return code;};function src_create_create(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};// default github css.
var markdown=options.markdown,document=options.document,_rewrite=options.rewrite,_options$reurls=options.reurls,reurls=_options$reurls===void 0?{}:_options$reurls,_options$wrap=options.wrap,wrap=_options$wrap===void 0?{wrapper:'div.markdown-body'}:_options$wrap;var cssStr=external_fs_default().readFileSync(external_path_default().resolve(_dirname,'styles','github.css')).toString();if(options['github-corners-fork']&&options['github-corners']){var cssFork=external_fs_default().readFileSync(external_path_default().resolve(_dirname,'styles','github-fork-ribbon.css')).toString();cssStr="".concat(cssStr).concat(cssFork);}return unified().use(remark_parse).use(remarkGfm).use(remarkGemoji).use(remark_rehype_lib,{allowDangerousHtml:true}).use(rehype_video_lib).use(rehypeRaw).use(document?rehypeDocument:undefined,_objectSpread2(_objectSpread2({},document),{},{js:[].concat(_toConsumableArray(document&&document.js?Array.isArray(document.js)?document.js:[document.js]:[]),['https://unpkg.com/@uiw/copy-to-clipboard/dist/copy-to-clipboard.umd.js']),script:[].concat(_toConsumableArray(document&&document.script?Array.isArray(document.script)?document.script:[document.script]:[]),[script]),link:document&&document.link?Array.isArray(document.link)?document.link:[document.link]:[],style:[cssStr.toString().replace(/\n/g,'')].concat(_toConsumableArray(document?Array.isArray(document.style)?document.style:[document.style]:[]))})).use(rehypeSlug).use(rehypeAutolinkHeadings).use((rehype_wrap_default()),_objectSpread2({},wrap)).use((rehype_prism_default()),{ignoreMissing:true}).use(rehype_attr_lib,{properties:'attr'}).use((rehype_urls_default()),function(url){if(reurls[url.href]){url.path=reurls[url.href];return url.path;}}).use(rehype_rewrite_lib,{rewrite:function rewrite(node,index,parent){if(options['github-corners']&&(document&&node.type=='element'&&node.tagName==='body'||!document&&node.type==='root')){node.children=Array.isArray(node.children)?node.children:[];if(options['github-corners-fork']){node.children.unshift(githubCornersFork({href:options['github-corners']}));}else{node.children.unshift(githubCorners({href:options['github-corners']}));}}if(node.type=='element'&&/h(1|2|3|4|5|6)/.test(node.tagName)&&node.children&&Array.isArray(node.children)&&node.children.length>0){var child=node.children[0];if(child&&child.type==='element'&&child.properties){child.properties=_objectSpread2({className:'anchor'},child.properties);child.children=[octiconLink()];}}if(node.type=='element'&&node.tagName==='pre'){var code=getCodeStr(node.children);node.children.push(copyElement(code));}if(_rewrite&&typeof _rewrite==='function'){_rewrite(node,index,parent);}}}).use(rehypeFormat).use(rehype_stringify).processSync(markdown).toString();}
;// CONCATENATED MODULE: ./src/action.ts
;/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator_default().mark(function _callee(){var output,source,description,favicon,config,markdown,corners,options,outputPath,opts,strMarkdown;return regenerator_default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;output=(0,lib_core.getInput)('output')||'index.html';source=(0,lib_core.getInput)('source')||'README.md';description=(0,lib_core.getInput)('description');favicon=(0,lib_core.getInput)('favicon');config=(0,lib_core.getInput)('config');markdown=(0,lib_core.getInput)('markdown');corners=(0,lib_core.getInput)('github-corners');options={};(0,lib_core.info)("source: ".concat(external_path_default().resolve(source)));if(!(source&&!markdown)){_context.next=16;break;}_context.next=13;return external_fs_default().promises.readFile(external_path_default().resolve(source));case 13:options.markdown=_context.sent.toString();_context.next=17;break;case 16:options.markdown=markdown;case 17:options.favicon=favicon;options.config=config;options.description=description;options['github-corners']=corners;outputPath=external_path_default().resolve(output);(0,lib_core.setOutput)('output',outputPath);opts=formatConfig(_objectSpread2({},options));(0,lib_core.setOutput)('markdown',opts.markdown);(0,lib_core.info)("Config Path: \"".concat(opts.config,"\""));(0,lib_core.startGroup)("Options: \x1B[34m()\x1B[0m");(0,lib_core.info)("".concat(opts));(0,lib_core.endGroup)();strMarkdown=src_create_create(_objectSpread2({},opts));(0,lib_core.info)("Output Path: \"".concat(outputPath,"\""));external_fs_default().writeFileSync(outputPath,strMarkdown);_context.next=37;break;case 34:_context.prev=34;_context.t0=_context["catch"](0);(0,lib_core.setFailed)(_context.t0.message);case 37:case"end":return _context.stop();}}},_callee,null,[[0,34]]);}));
})();

